+TITLE.
UNDUMAG  2.04/11  29/08/2023  15.03.24
+PATCH,FOR.
*CMZ :  0.00/00 20/04/2016  13.00.13  by  Michael Scheer
+DECK,undumag_drop_zero_magnets.
*CMZ :  2.04/10 23/08/2023  14.26.17  by  Michael Scheer
*CMZ :  2.04/03 03/03/2023  11.23.27  by  Michael Scheer
*CMZ :  2.03/00 31/07/2022  14.26.12  by  Michael Scheer
*CMZ :  2.02/02 03/07/2022  15.34.20  by  Michael Scheer
*CMZ :  2.02/01 10/11/2021  10.13.49  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  15.24.45  by  Michael Scheer
*-- Author :    Michael Scheer   10/09/2020
      subroutine undumag_drop_zero_magnets(kfoundplanes,kecho,tiny)

      use commandlinef90m
      use commandlinef90m

      implicit none

      ! Drop zero magnetig items and apply coating to permanent magnets,
      ! i.e. shrinking of the magnet to the effective size

c loop over magnets, modules, and arrays {

      double precision coating,bc,xm,ym,zm,rmin,rmax,polhei,ang,r,dx,dy,dz,
     &  xbuff(1000),ybuff(1000),zbuff(1000),cen(3),chamf,tiny

      integer lunbpe, lunscr,ieof,nlines,iline,imat,istat,iend,ianf,i,npoints,
     &  ndl,itreat,nmodules,narrays,ipos(2,1000),ncom,nwords,nfirst,nlast,icomment,
     &  l,nbuff,materials(2,1000),nmat,n9999,kmat,lundat,nread,kcorn,nxdiv,nydiv,nzdiv,kcol,
     &  kfoundplanes,kblock,kblockch,kecho,icomread,iplan,nplan,icorn,ncorn,ios

      integer nshrink
      character(2) cshrink

      integer :: nmag=0

      character(512) cline,clinelower,cline1,cline2,cline3,cdum,cbuff(1000),
     &  cplan,comdum
      character(64) c64,chmag,chmoth

+seq,phyconparam.

+self,if=trace.
      print*
      print*,"-trace-: Entered undumag_drop_zero_magnets"
      print*,"kfoundplanes, kecho",kfoundplanes,kecho
+self.

      coating=0.0d0
      open(newunit=lunbpe,file=trim(Fclc))

      ieof=0

      cline=''
      cline1=''
      cline2=''
      cline3=''

      do while (ieof.eq.0)

        read(lunbpe,'(a)')cline
        cline=trim(adjustl(cline))
c        c64='*EndCalc'
        if (cline(1:8).eq.'*EndCalc') exit
c        call util_string_substring(cline,trim(c64),ianf,iend,istat)
c        if (istat.eq.0) exit

        c64='mcoating'
        clinelower=cline
        call util_lower_case(clinelower)
        call util_string_substring(clinelower,trim(c64),ianf,iend,istat)
c        write(lun6,*)trim(cline),istat
        if (istat.eq.0) then
          l=len_trim(cline)
          do i=2,l
            if (cline(i:i).eq.'=') exit
          enddo
          read(cline(i+1:l),*) coating
          if (coating.ne.0.0d0.and.kfoundplanes.ne.0) then
            write(lun6,*)" "
            write(lun6,*)"*** Warning: Coating option is not available for magnetic items defined by planes ***"
            write(lun6,*)" "
            call sleep(3)
          endif
          exit
        endif
      enddo

      close(lunbpe)

+self,if=trace.
      print*
      print*,"-trace-: Mark 1"
+self.

      open(newunit=lunbpe,file="undumag.in")
      open(newunit=lunscr,file='undumag.scr')

      nlines=0
      ieof=0
      n9999=0
      icomment=0
      imat=0

      do while (ieof.eq.0)

        read(lunbpe,'(a)',end=9,err=9)cline
        cline=trim(adjustl(cline))
        nlines=nlines+1
+self,if=trace.
        print*,"nlines:",nlines
+self.
        write(lunscr,'(a)')trim(cline)

        if (cline3(1:1).eq.'{') then
          icomment=1
          cycle
        endif

        if (cline(1:1).eq.'*'.or.cline(1:1).eq.'!'.or.icomment.eq.1) cycle

        if (cline(1:1).eq.'}') then
          icomment=0
          cycle
        endif

        c64='File'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)
        if (istat.eq.0) then
          read(lunbpe,'(a)',end=9,err=9)cline
          cline=trim(adjustl(cline))
          nread=0
          open(newunit=lundat,file=trim(cline),status='old')
          do while (istat.eq.0)
            call util_skip_comment_end(lundat,istat)
            if (istat.ne.0) then
              close(lundat)
              exit
            else
              nread=nread+1
              read(lundat,'(a)')cbuff(nread)
            endif
          enddo
          write(cline,*) nread
          call util_string_trim(cline,nfirst,nlast)
          write(lunscr,'(a)')cline(nfirst:nlast)
          nlines=nlines+1
          do i=1,nread
            nlines=nlines+1
            write(lunscr,'(a)')trim(cbuff(i))
          enddo
          cycle
        endif

        c64='-9999.'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)
        if (istat.eq.0) then
          n9999=n9999+1
          cycle
        endif

        if (n9999.eq.2) then
          read(cline,*) nmat
          n9999=3
          cycle
        endif

        if (n9999.eq.3.and.imat.lt.nmat) then
          imat=imat+1
          read(cline,*)materials(1:2,imat)
        endif

      enddo

9     continue
      flush(lunscr)
      close(lunscr)

+self,if=trace.
      print*
      print*,"-trace-: Mark 2"
      print*
+self.
      open(newunit=lunscr,file='undumag.scr')
      flush(lunbpe)
      close(lunbpe)

      open(newunit=lunbpe,file="undumag.in")

      itreat=0
      icomment=0
      icomread=-1

      do iline=1,nlines

        if (icomread.eq.0) icomread=1

        if (
     &    cline2(1:1).ne.'*'.and.cline2(1:1).ne.'!'.and.
     &    cline2(1:1).ne.'{'.and.cline2(1:1).ne.'}'
     &    ) cline1=cline2

        if (
     &    cline3(1:1).ne.'*'.and.cline3(1:1).ne.'!'.and.
     &    cline3(1:1).ne.'{'.and.cline3(1:1).ne.'}'
     &    ) cline2=cline3

        read(lunscr,'(a)',end=9999)cline3
        cline3=trim(adjustl(cline3))

        if (kecho.ne.0) print*,trim(cline3)

c        write(lun6,*)iline
c        write(lun6,*)trim(cline3)

        c64='*EndCalc'
        call util_string_substring(cline3,trim(c64),ianf,iend,istat)

        if (istat.eq.0) then
          itreat=1 !EndCalc marker found
          write(lunbpe,'(a)')trim(cline3)
          do while (cline3(1:1).eq.'*'.or.cline3(1:1).eq.'!')
            read(lunscr,'(a)')cline3
            cline3=trim(adjustl(cline3))
            write(lunbpe,'(a)')trim(cline3)
            icomread=0
          enddo
c          cycle
        endif

        if (cline3(1:1).eq.'{') icomment=1

        if (cline3(1:1).eq.'*'.or.cline3(1:1).eq.'!'.or.icomment.eq.1) then
          write(lunbpe,'(a)')trim(cline3)
          if (cline3(1:1).eq.'}') icomment=0
          cycle
        endif

        cdum=''

        if (itreat.eq.1.or.itreat.eq.6) then
          c64='-9999.'
          call util_string_substring(cline3,trim(c64),ianf,iend,istat)
          if (icomread.eq.1.and.istat.eq.0) then
            read(cline3,*,err=99)xm,ym,zm
            if (xm.eq.-9999.0d0.and.ym.eq.-9999.0d0.and.zm.eq.-9999.0d0) then
              itreat=itreat+1
              write(lunbpe,'(a)')trim(cline3)
              cycle
            endif
          endif !istat
99        continue
        else if (itreat.eq.2) then !read number of module blocks
          read(cline3,*)nmodules
          write(lunbpe,'(a)')trim(cline3)
          itreat=3
          cycle
        else if (itreat.eq.3) then !read module blocks
          backspace(lunscr)
          ndl=1
          do while (ndl.le.nmodules*4)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).ne.'*'.and.cline(1:1).ne.'!') then
              ndl=ndl+1
            endif
            write(lunbpe,'(a)') trim(cline)
          enddo
          itreat=4
          cycle
        else if (itreat.eq.4) then !read number of arrays
          read(cline3,*)narrays
          itreat=5
          write(lunbpe,'(a)')trim(cline3)
          cycle
        else if (itreat.eq.5) then !read arrays
          backspace(lunscr)
          ndl=1
          do while (ndl.le.2)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).ne.'*'.and.cline(1:1).ne.'!') then
              ndl=ndl+1
            endif
            write(lunbpe,'(a)') trim(cline)
          enddo
          itreat=6
          cycle
        endif !itreat


        !Old format with planes?
        if (icomread.eq.1.and.(itreat.eq.1.or.itreat.eq.6)) then
          read(cline3,*,iostat=ios) nplan,kcol,nxdiv,nydiv,nzdiv
          if (ios.eq.0.and.nplan.gt.0) then
            read(cline2,*) bc
            if (bc.ne.0.0d0) then
              write(lunbpe,'(a)')'*'
              nmag=nmag+1
              call util_string_split_sep(cline1,1000,ncom,ipos,'!',istat)
              if (ncom.gt.1) then
                comdum=cline1(ipos(1,2):ipos(2,2))
              endif
              cdum=cline1(ipos(1,1):ipos(2,1))
              call util_string_split_sep(cdum,1000,nwords,ipos,' ',istat)
              if (nwords.ne.5) then
                write(chmag,*) nmag
                chmag="mp_" // trim(adjustl(chmag))
                chmoth=chmag
                chmoth(1:1)="M"
                cline1=trim(cdum)//" "//adjustl(trim(chmag))//" "//adjustl(trim(chmoth))
                if (ncom.gt.1) cline1=trim(cline1) // " " // " "//trim(comdum)
              endif
              write(lunbpe,'(a)')trim(cline1)
              write(lunbpe,'(a)')trim(cline2)
              write(lunbpe,'(a)') trim(cline3)
            endif !bc
            do iplan=1,nplan
2             read(lunscr,'(a)') cplan
              if (cplan(1:1).eq.'{') then
                do while(cplan(1:1).ne.'}')
                  read(lunscr,'(a)') cplan
                enddo
              endif
              if (bc.ne.0.0d0) write(lunbpe,'(a)') trim(cplan)
              if (cplan(1:1).eq.'*') goto 2
              read(cplan,*) ncorn
              do icorn=1,ncorn
3               read(lunscr,'(a)') cplan
                if (cplan(1:1).eq.'{') then
                  do while(cplan(1:1).ne.'}')
                    read(lunscr,'(a)') cplan
                  enddo
                endif
                if (cplan(1:1).eq.'*') goto 3
                if (bc.ne.0.0d0) write(lunbpe,'(a)') trim(cplan)
              enddo !ncorn
            enddo !nplan
          endif !have planes
        endif

        c64='Cyl'
c        call util_string_substring(cline3,trim(c64),ianf,iend,istat)

        if (icomread.eq.1.and.cline3(1:3).eq.'Cyl') then

          read(cline1,*)cen
          read(cline2,*)bc,xm,ym,zm,imat

          if (imat.eq.0) then
            bc=0.0d0
            kmat=0
          else
            kmat=materials(2,imat)
          endif

          if (bc.ne.0.0d0) then
            write(lunbpe,'(a)')'*'
            nmag=nmag+1
            call util_string_split_sep(cline1,1000,ncom,ipos,'!',istat)
            if (ncom.gt.1) then
              comdum=cline1(ipos(1,2):ipos(2,2))
            endif
            cdum=cline1(ipos(1,1):ipos(2,1))
            call util_string_split_sep(cdum,1000,nwords,ipos,' ',istat)
            if (nwords.ne.5) then
              write(chmag,*) nmag
              chmag="mp_" // trim(adjustl(chmag))
              chmoth=chmag
              chmoth(1:1)="M"
              cline1=trim(cdum)//" "//adjustl(trim(chmag))//" "//adjustl(trim(chmoth))
              if (ncom.gt.1) cline1=trim(cline1) // " " // " "//trim(comdum)
            endif
            write(lunbpe,'(a)')trim(cline1)
            write(lunbpe,'(a)')trim(cline2)
            write(lunbpe,'(a)') trim(cline3)
          endif !bc

          ndl=1
          do while (ndl.le.4)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).eq.'*'.or.cline(1:1).eq.'!') then
              cycle
            else
              ndl=ndl+1
            endif
            if (bc.ne.0.0d0.and.kmat.ne.0) then
              if (coating.ne.0.0d0.and.kmat.ne.2) then
                call util_string_split(cline,1000,nwords,ipos,istat)
                if (nwords.gt.4) cdum=cline(ipos(1,5):len_trim(cline))
                read(cline,*)rmin,rmax,polhei,ang
                r=(rmax-rmin)/2.0d0
                rmin=rmin+coating
                rmax=rmax-coating
                if (r.gt.0.0d0.and.abs(ang-twopi1).gt.2.0d0*coating/r)
     &            ang=ang-2.0d0*coating/r
                write(cline,*) rmin,rmax,polhei,ang
                write(lunbpe,'(a)') trim(cline)
                call util_string_trim(cline,nfirst,nlast)
                cline=cline(nfirst:nlast) // " " // trim(cdum)
              endif !coat
              write(lunbpe,'(a)') trim(cline)
            endif !bc
          enddo
          cycle
        endif

        kblockch=0

        c64='BlockUsChamf'
        call util_string_substring(cline3,trim(c64),ianf,iend,istat)
        if (icomread.eq.1.and.istat.eq.0) then
          kblockch=-1
          cline3='Corners ' // cline3(iend+1:len_trim(cline3))
        endif

        c64='BlockDsChamf'
        call util_string_substring(cline3,trim(c64),ianf,iend,istat)
        if (icomread.eq.1.and.istat.eq.0) then
          kblockch=1
          cline3='Corners ' // cline3(iend+1:len_trim(cline3))
        endif

        if (kblockch.ne.0) then

          read(cline1,*)cen
          read(cline2,*)bc,xm,ym,zm,imat

          if (imat.eq.0) then
            bc=0.0d0
            kmat=0
          else
            kmat=materials(2,imat)
          endif

          if (bc.ne.0.0d0) then
            write(lunbpe,'(a)')'*'
            nmag=nmag+1
            call util_string_split_sep(cline1,1000,ncom,ipos,'!',istat)
            if (ncom.gt.1) then
              comdum=cline1(ipos(1,2):ipos(2,2))
            endif
            cdum=cline1(ipos(1,1):ipos(2,1))
            call util_string_split_sep(cdum,1000,nwords,ipos,' ',istat)
            if (nwords.ne.5) then
              write(chmag,*) nmag
              chmag="mp_" // trim(adjustl(chmag))
              chmoth=chmag
              chmoth(1:1)="M"
              cline1=trim(cdum)//" "//adjustl(trim(chmag))//" "//adjustl(trim(chmoth))
              if (ncom.gt.1) cline1=trim(cline1) // " " // " "//trim(comdum)
            endif
            write(lunbpe,'(a)')trim(cline1)
            write(lunbpe,'(a)')trim(cline2)
            write(lunbpe,'(a)')trim(cline3)
          endif !bc

          ndl=1
          do while (ndl.le.1)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).eq.'*'.or.cline(1:1).eq.'!') then
              cycle
            else
              ndl=ndl+1
            endif
            if (bc.ne.0.0d0) then
                call util_string_split(cline,1000,nwords,ipos,istat)
                if (nwords.gt.4) cdum=cline(ipos(1,5):len_trim(cline))
                read(cline,*)dx,dy,dz,chamf
                if (kmat.eq.2) then
                  call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &              coating*0.0d0,nshrink,xbuff,ybuff,zbuff)
                else
                  call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &              coating,nshrink,xbuff,ybuff,zbuff)
                endif
                write(cshrink,*) nshrink
                write(lunbpe,'(a)') "'" // trim(adjustl(cshrink)) // "'"
                do i=1,nshrink
                  write(lunbpe,*)xbuff(i),ybuff(i),zbuff(i)
                enddo
            endif !bc
          enddo !ndl
          cycle
        endif

        c64='BlockChamf'
        call util_string_substring(cline3,trim(c64),ianf,iend,istat)

        if (icomread.eq.1.and.istat.eq.0) then

          read(cline1,*)cen
          read(cline2,*)bc,xm,ym,zm,imat

          if (imat.eq.0) then
            bc=0.0d0
            kmat=0
          else
            kmat=materials(2,imat)
          endif

          if (bc.ne.0.0d0) then
            write(lunbpe,'(a)')'*'
            nmag=nmag+1
            call util_string_split_sep(cline1,1000,ncom,ipos,'!',istat)
            if (ncom.gt.1) then
              comdum=cline1(ipos(1,2):ipos(2,2))
            endif
            cdum=cline1(ipos(1,1):ipos(2,1))
            call util_string_split_sep(cdum,1000,nwords,ipos,' ',istat)
            if (nwords.ne.5) then
              write(chmag,*) nmag
              chmag="mp_" // trim(adjustl(chmag))
              chmoth=chmag
              chmoth(1:1)="M"
              cline1=trim(cdum)//" "//adjustl(trim(chmag))//" "//adjustl(trim(chmoth))
              if (ncom.gt.1) cline1=trim(cline1) // " " // " "//trim(comdum)
            endif
            write(lunbpe,'(a)')trim(cline1)
            write(lunbpe,'(a)')trim(cline2)
            cline3='Corners ' // cline3(iend+1:len_trim(cline3))
            write(lunbpe,'(a)')trim(cline3)
          endif !bc

          ndl=1
          do while (ndl.le.1)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).eq.'*'.or.cline(1:1).eq.'!') then
              cycle
            else
              ndl=ndl+1
            endif
            if (bc.ne.0.0d0) then
                call util_string_split(cline,1000,nwords,ipos,istat)
                if (nwords.gt.4) cdum=cline(ipos(1,5):len_trim(cline))
                read(cline,*)dx,dy,dz,chamf
                if (kmat.eq.2) then
                  call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &              coating*0.0d0,nshrink,xbuff,ybuff,zbuff)
                else
                  call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &              coating,nshrink,xbuff,ybuff,zbuff)
                endif
                write(cshrink,*) nshrink
                write(lunbpe,'(a)') "'" // trim(adjustl(cshrink)) // "'"
                do i=1,nshrink
                  write(lunbpe,*)xbuff(i),ybuff(i),zbuff(i)
                enddo
            endif !bc
          enddo !ndl
          cycle
        endif

        kblock=0
        c64='Block'
        call util_string_substring(cline3,trim(c64),ianf,iend,istat)
        if (icomread.eq.1.and.(istat.eq.0.or.cline3(1:3).eq.'-6 ')) kblock=kblock+1
        call util_string_trim(cline3,nfirst,nlast)

        if (kblock.ne.0) then

          read(cline1,*)cen
          read(cline2,*)bc,xm,ym,zm,imat

          if (imat.eq.0) then
            bc=0.0d0
            kmat=0
          else
            kmat=materials(2,imat)
          endif

          if (bc.ne.0.0d0) then
            write(lunbpe,'(a)')'*'
            nmag=nmag+1
            call util_string_split_sep(cline1,1000,ncom,ipos,'!',istat)
            if (ncom.gt.1) then
              comdum=cline1(ipos(1,2):ipos(2,2))
            endif
            cdum=cline1(ipos(1,1):ipos(2,1))
            call util_string_split_sep(cdum,1000,nwords,ipos,' ',istat)
            if (nwords.ne.5) then
              write(chmag,*) nmag
              chmag="mp_" // trim(adjustl(chmag))
              chmoth=chmag
              chmoth(1:1)="M"
              cline1=trim(cdum)//" "//adjustl(trim(chmag))//" "//adjustl(trim(chmoth))
              if (ncom.gt.1) cline1=trim(cline1) // " " // " "//trim(comdum)
            endif
            write(lunbpe,'(a)')trim(cline1)
            write(lunbpe,'(a)')trim(cline2)
            write(lunbpe,'(a)') trim(cline3)
          endif !bc

          ndl=1
          do while (ndl.le.1)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).eq.'*'.or.cline(1:1).eq.'!') then
              cycle
            else
              ndl=ndl+1
            endif
            if (bc.ne.0.0d0) then
              if (coating.ne.0.0d0.and.kmat.ne.2) then
                call util_string_split(cline,1000,nwords,ipos,istat)
                if (nwords.gt.3) cdum=cline(ipos(1,4):len_trim(cline))
                read(cline,*)dx,dy,dz
                write(cline,*)dx-2.0*coating,dy-2.0*coating,dz+2.0*coating
                call util_string_trim(cline,nfirst,nlast)
                cline=cline(nfirst:nlast) // " " // trim(cdum)
              endif !coat
              write(lunbpe,'(a)') trim(cline)
            endif !bc
          enddo !ndl
          cycle
        endif

        kcorn=0

        c64='Corners'
        call util_string_substring(cline3,trim(c64),ianf,iend,istat)
        if (icomread.eq.1.and.istat.eq.0) kcorn=1

        c64='File'
        call util_string_substring(cline3,trim(c64),ianf,iend,istat)
        if (icomread.eq.1.and.istat.eq.0) then
          kcorn=1
          cline3='Corners ' // cline3(iend+1:len_trim(cline3))
        endif

        if (kcorn.ne.0) then

          read(cline2,*)bc,xm,ym,zm,imat
          read(cline1,*)cen

          if (imat.eq.0) then
            bc=0.0d0
            kmat=0
          else
            kmat=materials(2,imat)
          endif

          if (bc.ne.0.0d0.and.imat.ne.0) then
            write(lunbpe,'(a)')'*'
            nmag=nmag+1
            call util_string_split_sep(cline1,1000,ncom,ipos,'!',istat)
            if (ncom.gt.1) then
              comdum=cline1(ipos(1,2):ipos(2,2))
            endif
            cdum=cline1(ipos(1,1):ipos(2,1))
            call util_string_split_sep(cdum,1000,nwords,ipos,' ',istat)
            if (nwords.ne.5) then
              write(chmag,*) nmag
              chmag="mp_" // trim(adjustl(chmag))
              chmoth=chmag
              chmoth(1:1)="M"
              cline1=trim(cdum)//" "//adjustl(trim(chmag))//" "//adjustl(trim(chmoth))
              if (ncom.gt.1) cline1=trim(cline1) // " " // " "//trim(comdum)
            endif
            write(lunbpe,'(a)')trim(cline1)
            write(lunbpe,'(a)')trim(cline2)
            write(lunbpe,'(a)') trim(cline3)
          endif !bc

          ndl=1
          nbuff=0
          do while (ndl.le.1)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).eq.'*'.or.cline(1:1).eq.'!') then
              cycle
            else
              ndl=ndl+1
              read(cline,*)npoints
            endif
          enddo

          ndl=1
          do while (ndl.le.npoints)
            read(lunscr,'(a)')cline
            cline=trim(adjustl(cline))
            if (cline(1:1).eq.'*'.or.cline(1:1).eq.'!') then
              cycle
            else
              ndl=ndl+1
            endif
            if (bc.ne.0.0d0) then
              if (coating.ne.0.0d0.and.kmat.ne.2) then
                call util_string_split(cline,1000,nwords,ipos,istat)
                cbuff(ndl-1)=cline(1:ipos(2,3))
                read(cline,*)dx,dy,dz
                nbuff=nbuff+1
                xbuff(nbuff)=dx
                ybuff(nbuff)=dy
                zbuff(nbuff)=dz
                call util_string_trim(cline,nfirst,nlast)
                cline=cline(nfirst:nlast) // " " // trim(cdum)
              else !coating
                if (ndl.eq.2) then
                  write(cdum,*) npoints
                  call util_string_trim(cdum,nfirst,nlast)
                  write(lunbpe,'(a)') cdum(nfirst:nlast)
                endif
                write(lunbpe,'(a)') trim(cline)
              endif !coat
            endif
          enddo

          if (imat.ne.0.and.coating.ne.0.0d0.and.kmat.ne.2) then
            call util_shrink_xyz(nbuff,xbuff,ybuff,zbuff,cen,coating,tiny,
     &        nbuff,xbuff,ybuff,zbuff,istat)
            write(cdum,*) nbuff
            call util_string_trim(cdum,nfirst,nlast)
            write(lunbpe,'(a)') cdum(nfirst:nlast)
            do i=1,nbuff
              write(cline,*)xbuff(i),ybuff(i),zbuff(i)
              call util_string_trim(cline,nfirst,nlast)
              cline=cline(nfirst:nlast)
              write(lunbpe,'(a)') trim(cline)
            enddo
          endif !coating
          cycle
        endif

        if (itreat.eq.0.or.itreat.eq.7) write(lunbpe,'(a)') trim(cline3)

      enddo !nlines

9999  close(lunscr)

      flush(lunbpe)
      close(lunbpe)

+self,if=trace.
      print*,"-trace-: Leaving undumag_drop_zero_magnets"
+self.
      return
      end
+DECK,undumag_read_clc.
*CMZ :  2.04/11 29/08/2023  14.43.10  by  Michael Scheer
*CMZ :  2.04/06 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/01 22/01/2023  13.04.45  by  Michael Scheer
*CMZ :  2.04/00 14/01/2023  14.39.42  by  Michael Scheer
*CMZ :  2.03/00 15/08/2022  12.39.08  by  Michael Scheer
*CMZ :  2.02/02 09/03/2022  09.42.30  by  Michael Scheer
*CMZ :  2.02/01 11/02/2022  08.28.50  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2021
      subroutine undumag_read_clc

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      integer i,j,ieof,lunclc,istat,ipos(2,1000),nwords,
     &  lmat,nmat,l,ncorn,nfila,lunf

      character(512) cline,cword
      cundutit='* No User Comment'

      nclcbuff=0
      ncwires=0

      nwind=0
      nrace=0
      ncrace=0
      narc=0
      ncarc=0
      nrbar=0
      nthwir=0
      nmagcyl=0

      ntransrotcop=0
      transrotcop=0.0d0

      nmodule_t=0
      modegui=0

      open(newunit=lunclc,file=Fclc)

      do while (.true.)
        call util_skip_comment_end(lunclc,ieof)
        if (ieof.ne.0) exit
        read(lunclc,'(a)') cline
        !if (kechocalc.ne.0) print*,trim(cline)
        cline=adjustl(cline)
        if (cline(1:4).eq.'Mode') then
          call util_string_split(cline,1000,nwords,ipos,istat)
          if (nwords.gt.1) then
            if (cline(ipos(1,2):ipos(2,2)).eq.'Mirror') then
              modegui=3
            else if (cline(ipos(1,2):ipos(2,2)).eq.'Hybrid') then
              modegui=2
            else if (cline(ipos(1,2):ipos(2,2)).eq.'AppleII') then
              modegui=1
            endif
          endif
        endif
        if (cline(1:1).eq.'&') then
          call util_string_split(cline,1000,nwords,ipos,istat)
          if (cline(ipos(1,2):ipos(2,2)).eq.'User_Comment') then
            nclcbuff=nclcbuff+1
            !if (kechocalc.ne.0) print*,trim(cline)
            call util_skip_comment_end(lunclc,ieof)
            if (ieof.ne.0) exit
            cline=''
            unducomment=''
            read(lunclc,'(a)') cline
            nclcbuff=nclcbuff+1
            unducomment=trim(cline(1:512))
            usercom=adjustl(trim(unducomment))
            cundutit='* ' // adjustl(trim(unducomment))
            read(lunclc,'(a)') cline
            cycle ! to avoid confusion, if key words appear in comment
          endif
        endif
        if (len_trim(cline).eq.0) cycle
        nclcbuff=nclcbuff+1
      enddo

      allocate(
     &  magmodule(nclcbuff),
     &  clcbuff(nclcbuff),
     &  clcmag(nclcbuff),
     &  clcspec(nclcbuff),
     &  clcmat(nclcbuff),
     &  clcmod(nclcbuff),
     &  clccoil(nclcbuff),
     &  clccop(nclcbuff),
     &  clcvar(nclcbuff),
     &  clcinhom(nclcbuff)
     &  )

      rewind(lunclc)

      nclcbuff=0
      do while (.true.)
        ieof=0
        call util_skip_comment_end(lunclc,ieof)
        if (ieof.ne.0) exit
        read(lunclc,'(a)') cline
        cline=adjustl(cline)
        !print*,trim(cline)
        if (len_trim(cline).eq.0) cycle
        if (nclcbuff.gt.0.and.cline(1:1).eq.'&') then
          call util_string_split(cline,1000,nwords,ipos,istat)
          if (cline(ipos(1,2):ipos(2,2)).eq.'End') then
            nclcbuff=nclcbuff+1
            cline(1:1)='!'
            clcbuff(nclcbuff)=cline
            cycle
          endif
          if (clcbuff(nclcbuff)(1:1).eq.'&') then
            !print*,cline(ipos(1,2):ipos(2,2))
            !call util_break
            print*,"*** Error in undumag_read_clc: Missing data lines after"
            print*,trim(clcbuff(nclcbuff))
            stop
          endif
          if (cline(ipos(1,2):ipos(2,2)).eq.'User_Comment') then
            ieof=0
            call util_skip_comment_end(lunclc,ieof)
            if (ieof.ne.0) exit
            read(lunclc,'(a)') cline
            cycle
          endif
        endif
        nclcbuff=nclcbuff+1
        clcbuff(nclcbuff)=cline
      enddo

      close(lunclc)

      nclcmag=0
      nclcspec=0
      nclccoil=0
      nclcvar=0
      nclcmod=0
      nclcmat=0

      nmag_t=0
      niron_t=0
      ninhom_t=0

      i=0
      do while (i.lt.nclcbuff)

        i=i+1
        cline=clcbuff(i)
        if (kechocalc.ne.0) print*,trim(cline)
        call util_string_split(cline,1000,nwords,ipos,istat)

        if (cline(ipos(1,1):ipos(2,1)).eq.'&') then
          if (cline(ipos(1,2):ipos(2,2)).eq.'User_Comment') then
            i=i+1
          else if (cline(ipos(1,2):ipos(2,2)).eq.'Inhomogeneity') then
            !call util_break
            ninhom_t=ninhom_t+1
            clcinhom(ninhom_t)=cline(ipos(1,2):ipos(2,2))
            i=i+1
            do while (.true.)
              !print*,i,trim(clcbuff(i))
              ninhom_t=ninhom_t+1
              clcinhom(ninhom_t)=clcbuff(i)
              if (kechocalc.ne.0) print*,trim(clcbuff(i))
              call util_string_split(clcinhom(ninhom_t),1000,nwords,ipos,istat)
              if (clcinhom(ninhom_t)(ipos(1,2):ipos(2,2)).eq.'End') exit
              i=i+1
            enddo
            !call util_break
          else if (cline(ipos(1,2):ipos(2,2)).eq.'Pole' .or.
     &        cline(ipos(1,2):ipos(2,2)).eq.'Magnet') then
            nmag_t=nmag_t+1
            magmodule(nmag_t)=nmodule_t+1
            if (cline(ipos(1,2):ipos(2,2)).eq.'Pole') niron_t=niron_t+1
            nclcmag=nclcmag+1
            clcmag(nclcmag)=cline(ipos(1,2):ipos(2,2))
            i=i+1
            cline=clcbuff(i)
            if (kechocalc.ne.0) print*,trim(cline)
            call util_string_split(cline,1000,nwords,ipos,istat)
            if (
     &          cline(ipos(1,1):ipos(2,1)).eq.'BlockChamf'.or.
     &          cline(ipos(1,1):ipos(2,1)).eq.'BlockUsChamf'.or.
     &          cline(ipos(1,1):ipos(2,1)).eq.'BlockDsChamf'
     &          ) then
              do l=1,5
                nclcmag=nclcmag+1
                clcmag(nclcmag)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'Block') then
              do l=1,5
                nclcmag=nclcmag+1
                clcmag(nclcmag)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'Cylinder') then
              nmagcyl=nmagcyl+1
              do l=1,5
                nclcmag=nclcmag+1
                clcmag(nclcmag)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'Corners') then
              read(clcbuff(i+4),*) ncorn
              do l=1,5+ncorn
                nclcmag=nclcmag+1
                clcmag(nclcmag)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'File') then
              do l=1,5
                nclcmag=nclcmag+1
                clcmag(nclcmag)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else
              print*,"*** Error in undumag_read_clc: Unknown magnet type in line"
              print*,trim(cline)
              stop
            endif
          else if (cline(ipos(1,2):ipos(2,2)).eq.'Module') then
            nmodule_t=nmodule_t+1
            nclcmod=nclcmod+1
            clcmod(nclcmod)=clcbuff(i)
            do l=1,4
              i=i+1
              nclcmod=nclcmod+1
              clcmod(nclcmod)=clcbuff(i)
              if (kechocalc.ne.0) print*,trim(clcbuff(i))
            enddo
          else if (cline(ipos(1,2):ipos(2,2)).eq.'Translate') then
            ntransrotcop=ntransrotcop+1
            if (ntransrotcop.gt.ntransrotcop_p) then
              stop "*** Error in undumag_read_clc: Too many remanence, translations, rotations changes, check parameter ntransrotcop_p ***"
            endif
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            ctransrotcop(ntransrotcop)=trim(clcbuff(i))
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            !read(clcbuff(i),*) transrotcop(1:3,ntransrotcop)
            transrotcop(1,ntransrotcop)=dble(i)
            transrotcop(8,ntransrotcop)=0.0d0
          else if (cline(ipos(1,2):ipos(2,2)).eq.'Remanence') then
            ntransrotcop=ntransrotcop+1
            if (ntransrotcop.gt.ntransrotcop_p) then
              stop "*** Error in undumag_read_clc: Too many remanence, translations, rotations changes, check parameter ntransrotcop_p ***"
            endif
            transrotcop(8,ntransrotcop)=3.0d0
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            ctransrotcop(ntransrotcop)=trim(clcbuff(i))
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            transrotcop(1,ntransrotcop)=dble(i)
            !read(clcbuff(i),*) transrotcop(1:6,ntransrotcop)
          else if (cline(ipos(1,2):ipos(2,2)).eq.'Copy') then
            nclccop_t=nclccop_t+1
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            clccop(nclccop_t)=trim(clcbuff(i))
            ntransrotcop=ntransrotcop+1
            if (ntransrotcop.gt.ntransrotcop_p) then
              stop "*** Error in undumag_read_clc: Too many remanence, translations, rotations changes, check parameter ntransrotcop_p ***"
            endif
            transrotcop(8,ntransrotcop)=-dble(nclccop_t)
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            cline=clcbuff(i)
            call util_string_split(cline,1000,nwords,ipos,istat)
            cword=cline(ipos(1,1):ipos(2,1))
            ctransrotcop(ntransrotcop)=trim(cword)
          else if (
     &        cline(ipos(1,2):ipos(2,2)).eq.'Rotate'.or.
     &        cline(ipos(1,2):ipos(2,2)).eq.'Rotate_Shape') then
            ntransrotcop=ntransrotcop+1
            if (cline(ipos(1,2):ipos(2,2)).eq.'Rotate_Shape') then
              transrotcop(8,ntransrotcop)=1.0d0
            else
              transrotcop(8,ntransrotcop)=2.0d0
            endif
            if (ntransrotcop.gt.ntransrotcop_p) then
              stop "*** Error in undumag_read_clc: Too many remanence, translations, rotations changes, check parameter ntransrotcop_p ***"
            endif
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            ctransrotcop(ntransrotcop)=trim(clcbuff(i))
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            transrotcop(1,ntransrotcop)=dble(i)
            !read(clcbuff(i),*) transrotcop(1:3,ntransrotcop)
            i=i+1
            if (kechocalc.ne.0) print*,trim(clcbuff(i))
            !read(clcbuff(i),*) transrotcop(4:7,ntransrotcop)
          else if (
     &        cline(ipos(1,2):ipos(2,2)).eq.'Special_Magnet'.or.
     &        cline(ipos(1,2):ipos(2,2)).eq.'Special_Pole'
     &        ) then
            nclcspec=nclcspec+1
            clcspec(nclcspec)=cline(ipos(1,2):ipos(2,2))
            nspecmag_t=nspecmag_t+1
            if (cline(ipos(1,2):ipos(2,2)).eq.'Special_Pole') niron_t=niron_t+1
            i=i+1
            cline=clcbuff(i)
            call util_string_split(cline,1000,nwords,ipos,istat)
            if (
     &          cline(ipos(1,1):ipos(2,1)).eq.'BlockChamf'.or.
     &          cline(ipos(1,1):ipos(2,1)).eq.'BlockUsChamf'.or.
     &          cline(ipos(1,1):ipos(2,1)).eq.'BlockDsChamf'
     &          ) then
              do l=1,5
                nclcspec=nclcspec+1
                clcspec(nclcspec)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'Block') then
              do l=1,5
                nclcspec=nclcspec+1
                clcspec(nclcspec)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'Cylinder') then
              do l=1,5
                nclcspec=nclcspec+1
                clcspec(nclcspec)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'Corners') then
              read(clcbuff(i+4),*) ncorn
              do l=1,5+ncorn
                nclcspec=nclcspec+1
                clcspec(nclcspec)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else if (cline(ipos(1,1):ipos(2,1)).eq.'File') then
              do l=1,5
                nclcspec=nclcspec+1
                clcspec(nclcspec)=clcbuff(i)
                if (kechocalc.ne.0) print*,trim(clcbuff(i))
                i=i+1
              enddo
              i=i-1
            else
              print*,"*** Error in undumag_read_clc: Unknown magnet type in line"
              print*,trim(cline)
              stop
            endif !shape

          else if (cline(ipos(1,2):ipos(2,2)).eq.'Materials') then
            i=i+1
            cline=clcbuff(i)
            nclcmat=nclcmat+1
            clcmat(nclcmat)=clcbuff(i)
            if (kechocalc.ne.0) print*,trim(cline)
            read(cline,*) nmat
            do lmat=1,nmat
              nclcmat=nclcmat+1
              i=i+1
              clcmat(nclcmat)=clcbuff(i)
              if (kechocalc.ne.0) print*,trim(clcbuff(i))
            enddo !nmat

          else if (cline(ipos(1,2):ipos(2,2)).eq.'Coil') then

            ncoils_t=ncoils_t+1
            nclccoil=nclccoil+1
            clccoil(nclccoil)='Coil'
            i=i+1
            cline=clcbuff(i)
            if (kechocalc.ne.0) print*,trim(cline)

            call util_string_split(cline,1000,nwords,ipos,istat)
            nclccoil=nclccoil+1

            if (nwords.gt.1) then
              clccoil(nclccoil)=adjustl(trim(cline(ipos(1,1):ipos(2,2))))
            else
              clccoil(nclccoil)=adjustl(trim(cline(ipos(1,1):ipos(2,1))))
            endif

            cword=adjustl(trim(cline(ipos(1,1):ipos(2,1))))

            i=i+1
            nclccoil=nclccoil+1
            clccoil(nclccoil)=clcbuff(i)
            cline=clcbuff(i)
            if (kechocalc.ne.0) print*,trim(cline)

            if (cword.eq.'Filaments') then
              read(cline,*)nfila
              do l=1,nfila
                nclccoil=nclccoil+1
                i=i+1
                clccoil(nclccoil)=clcbuff(i)
              enddo
              ncwires=ncwires+nfila

            else if (cword.eq.'File') then

              call util_string_split(cline,1000,nwords,ipos,istat)
              cword=adjustl(trim(cline(ipos(1,1):ipos(2,1))))
              call util_unquote(cword)
              clccoil(nclccoil)=adjustl(trim(cword))
              open(newunit=lunf,file=trim(cword),status='old')
              nfila=0
              do while (.true.)
                call util_skip_comment_empty_end(lunf,ieof)
                if (ieof.ne.0) exit
                read(lunf,'(a)')cline
                nfila=nfila+1
              enddo
              close(lunf)
              ncwires=ncwires+nfila

            else if (
     &          cword.eq.'RectArc'.or.
     &          cword.eq.'CircArc'.or.
     &          cword.eq.'RectBar'.or.
     &          cword.eq.'ThickWire'
     &          ) then
              i=i+1
              nclccoil=nclccoil+1
              clccoil(nclccoil)=clcbuff(i)

            else if (
     &          cword.ne.'Rectangular'.and.
     &          cword.ne.'RectangCirc'.and.
     &          cword.ne.'RectWindings'
     &          ) then
              print*,""
              print*,"*** Error in undumag_read_clc: Unknown coil type in line"
              print*,trim(cline)
              stop
            endif

          else
            print*,""
            print*,"*** Error in undumag_read_clc: Unknown key-word in line"
            print*,trim(cline)
            stop
         endif ! &

        else if (cline(1:1).eq.'$') then

          !if (kechocalc.ne.0) print*,trim(cline)
          do j=2,len_trim(cline)-1
            if (cline(j:j).eq.'=') then
              nclcvar=nclcvar+1
              clcvar(nclcvar)=trim(cline(2:))
              exit
            endif
          enddo
        endif !c1
      enddo

      return
      end
+DECK,undumag_ini_old.
*CMZ :  2.04/06 29/08/2023  15.04.24  by  Michael Scheer
*CMZ :  2.04/03 03/03/2023  14.44.40  by  Michael Scheer
*CMZ :  2.04/00 05/12/2022  15.18.35  by  Michael Scheer
*CMZ :  2.03/00 31/08/2022  08.10.44  by  Michael Scheer
*CMZ :  2.02/02 07/07/2022  17.49.27  by  Michael Scheer
*CMZ :  2.02/01 10/02/2022  09.16.42  by  Michael Scheer
*CMZ :  2.02/00 31/03/2021  20.30.51  by  Michael Scheer
*CMZ :  2.01/08 13/08/2020  11.27.23  by  Michael Scheer
*CMZ :  2.01/05 26/06/2020  16.04.15  by  Michael Scheer
*CMZ :  2.01/04 18/07/2019  13.56.54  by  Michael Scheer
*CMZ :  2.01/03 13/06/2019  15.03.29  by  Michael Scheer
*CMZ :  2.01/02 27/04/2018  14.56.07  by  Michael Scheer
*CMZ :  2.01/01 24/04/2018  17.15.25  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  14.30.21  by  Michael Scheer
*CMZ :  2.00/03 23/04/2018  17.47.12  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.39.07  by  Michael Scheer
*CMZ :  1.25/05 05/04/2018  19.09.03  by  Michael Scheer
*CMZ :  1.25/03 23/03/2018  16.25.38  by  Michael Scheer
*CMZ :  1.25/02 21/03/2018  13.30.12  by  Michael Scheer
*CMZ :  1.25/01 20/03/2018  15.59.20  by  Michael Scheer
*CMZ :  1.25/00 16/03/2018  12.35.49  by  Michael Scheer
*CMZ :  1.24/01 16/10/2017  19.08.03  by  Michael Scheer
*CMZ :  1.23/07 10/10/2017  13.53.24  by  Michael Scheer
*CMZ :  1.23/04 04/10/2017  11.50.12  by  Michael Scheer
*CMZ :  1.23/03 25/09/2017  18.37.06  by  Michael Scheer
*CMZ :  1.23/02 17/09/2017  11.21.15  by  Michael Scheer
*CMZ :  1.22/02 02/08/2017  16.23.00  by  Michael Scheer
*CMZ :  1.22/01 21/07/2017  14.53.35  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  08.50.03  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  11.30.39  by  Michael Scheer
*CMZ :  1.20/02 22/06/2017  15.56.28  by  Michael Scheer
*CMZ :  1.20/01 22/06/2017  12.48.09  by  Michael Scheer
*CMZ :  1.20/00 21/06/2017  13.11.48  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.31.54  by  Michael Scheer
*CMZ :  1.18/03 13/06/2017  15.30.31  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  14.09.42  by  Michael Scheer
*CMZ :  1.18/01 07/06/2017  09.19.34  by  Michael Scheer
*CMZ :  1.17/08 30/05/2017  16.04.28  by  Michael Scheer
*CMZ :  1.17/06 21/05/2017  12.55.08  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  12.22.37  by  Michael Scheer
*CMZ :  1.15/12 04/05/2017  12.23.38  by  Michael Scheer
*CMZ :  1.15/11 26/04/2017  11.23.30  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.22.06  by  Michael Scheer
*CMZ :  1.15/09 07/04/2017  14.51.07  by  Michael Scheer
*CMZ :  1.15/08 06/04/2017  14.32.29  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.29.10  by  Michael Scheer
*CMZ :  1.15/05 04/04/2017  12.46.33  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  12.15.21  by  Michael Scheer
*CMZ :  1.15/02 01/04/2017  19.50.52  by  Michael Scheer
*CMZ :  1.15/00 28/03/2017  11.26.05  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  09.16.41  by  Michael Scheer
*CMZ :  1.13/03 16/03/2017  10.00.53  by  Michael Scheer
*CMZ :  1.13/02 09/03/2017  17.14.36  by  Michael Scheer
*CMZ :  1.13/01 08/03/2017  15.40.55  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  16.37.53  by  Michael Scheer
*CMZ :  1.12/00 24/02/2017  08.47.15  by  Michael Scheer
*CMZ :  1.11/07 23/02/2017  17.24.23  by  Michael Scheer
*CMZ :  1.11/06 23/02/2017  13.18.36  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  12.27.44  by  Michael Scheer
*CMZ :  1.11/04 25/01/2017  10.13.44  by  Michael Scheer
*CMZ :  1.11/03 17/01/2017  14.50.40  by  Michael Scheer
*CMZ :  1.11/01 06/01/2017  13.46.07  by  Michael Scheer
*CMZ :  1.11/00 04/01/2017  15.56.40  by  Michael Scheer
*CMZ :  1.10/03 05/12/2016  15.36.58  by  Michael Scheer
*CMZ :  1.10/02 30/11/2016  16.12.02  by  Michael Scheer
*CMZ :  1.10/01 18/11/2016  15.02.58  by  Michael Scheer
*CMZ :  1.10/00 01/11/2016  09.47.47  by  Michael Scheer
*CMZ :  1.09/01 06/10/2016  09.08.03  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  09.12.28  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  18.54.27  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.39.27  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  14.51.14  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.43.31  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.02.17  by  Michael Scheer
*CMZ :  1.05/00 17/09/2016  10.32.16  by  Michael Scheer
*CMZ :  1.04/03 15/09/2016  17.35.03  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  16.29.44  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  10.45.28  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  13.31.19  by  Michael Scheer
*CMZ :  1.02/03 12/09/2016  11.37.12  by  Michael Scheer
*CMZ :  1.02/02 12/09/2016  10.20.23  by  Michael Scheer
*CMZ :  1.02/01 11/09/2016  12.27.52  by  Michael Scheer
*CMZ :  1.02/00 29/08/2016  14.10.42  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  17.52.14  by  Michael Scheer
*CMZ :  0.00/13 16/08/2016  12.06.57  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  09.03.47  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  16.13.39  by  Michael Scheer
*CMZ :  0.00/10 13/07/2016  15.05.25  by  Michael Scheer
*CMZ :  0.00/09 04/07/2016  17.54.03  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  13.38.55  by  Michael Scheer
*CMZ :  0.00/05 14/06/2016  13.51.40  by  Michael Scheer
*CMZ :  0.00/04 13/05/2016  14.27.24  by  Michael Scheer
*CMZ :  0.00/02 29/04/2016  09.17.43  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  15.56.38  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.48.03  by  Michael Scheer
*CMZ :  1.17/15 19/04/2016  15.54.31  by  Michael Scheer
*CMZ :  1.17/14 13/04/2016  12.32.55  by  Michael Scheer
*CMZ :  1.17/13 08/04/2016  11.47.10  by  Michael Scheer
*CMZ :  1.17/12 06/04/2016  14.29.22  by  Michael Scheer
*CMZ :  1.17/11 05/04/2016  12.46.06  by  Michael Scheer
*CMZ :  1.17/10 04/04/2016  14.46.34  by  Michael Scheer
*CMZ :  1.17/09 04/04/2016  09.41.39  by  Michael Scheer
*CMZ :  1.17/08 04/04/2016  08.58.50  by  Michael Scheer
*CMZ :  1.17/07 04/04/2016  08.42.21  by  Michael Scheer
*-- Author :    Michael Scheer   01/04/2016
      subroutine undumag_ini_old(kseg)

      use bpolyederf90m
      use undumagf90m
      use commandlinef90m

      implicit none

! bpemag0(1:3,icorn,iplan,imag) = x,y,z relative to magnet center

! bpebc0(1:3,... position x,y,z
! bpebc0(4:6,... M vector
! bpebc0(7... type, e.g. -6 is rect. angular magnet, 1 polyeder

! ibpeplan(imag)=nplan
! ibpecorn(iplan,imag)=ncorn
! ibpecol(imag) color index

! bpebc(1:3,... position x,y,z
! bpebc(4:6,... M vector, might be changed during relaxation
! bpebc(7,... length of M vector, might be changed during relaxation
! bpebc(8,... type
! bpebc(9,imag)=imat
! bpebc(10,imag) special magnet flag
! bpebc(11:13,imag) normalized M vector at the beginning, will survive
! bpebc(14,imag) length M vector at the beginning, will survive
! bpebc(15,imag) Mother volume
! bpebc(16,imag) kill flag
! bpebc(17,imag) select flag
! bpebc(18:20,imag) external field and field of coils

+seq,phyconparam.
+seq,seqdebug.
+seq,random.

      double precision, dimension (:,:), allocatable :: bciron,bcrec,
     &  bpre16,bc0rec,bc0iron,displace

      double precision, dimension (:,:,:), allocatable :: corn1,corn2,
     &  bcpre
      double precision, dimension (:,:,:,:), allocatable ::
     &  bmagrec,brotrec, bpetmrec,
     &  bmagiron,brotiron, bpetmiron

      double precision bn,x,y,z,hx,hy,hz,bx,by,bz,hxo,hyo,hzo,hold,h,
     &  bci(3),bcj(3),xdiv,ydiv,zdiv,bc04(4),
     &  x1,x2,y1,y2,z1,z2,x3,x4,z3,z4,
     &  xdivmin,xdivmax,ydivmin,ydivmax,zdivmin,zdivmax,dxdiv,dydiv,dzdiv,
     &  x1div(10000),x2div(10000),y1div(10000),y2div(10000),
     &  z1div(10000),z2div(10000),xcen,ycen,zcen,
     &  xidiv(10000),yidiv(10000),zidiv(10000),bc8,bc9,bc10,bpebc15,bpe17,
     &  wind19(19),race17(17),arc21(21)

      double precision x0,y0,y0max,y0min,z0,bc,xm,ym,zm,rmag(3),vmaglab(3),
     &  vnormlab(3),r1(3),bdum,dum,r1lab(3),dx0,dx,dy,dz,x00,y00,z00,pel,
     &  dzdum,hmat,bcm,hmato,bcmo,dlab(3),vcorn(3),vmag(3),
     &  x02(2),y02(2),z02(2),gcen(3),vnor(3),dxfb,dyfb,dzfb,dxcon(100)

      double precision ts(3,3),tsinv(3,3),p1(3),p2(3),p3(3)
      double precision v1x,v1y,v1z,v2x,v2y,v2z,vsx,vsy,vsz,tiny2,rtiny
      double precision xmin,xmax,ymin,ymax,zmin,zmax,rmin,rmax,scalcur,
     &  dxsh,eps10,xx,yy,zz,xsymmm,xconvmm,dist,
     &  xminfb,yminfb,zminfb,xmaxfb,ymaxfb,zmaxfb,
     &  xxmin,xxmax,yymin,yymax,zzmin,zzmax

      double precision space,vspace(3),vbsym(3),rotmod(3,3),
     &  xmod,ymod,zmod,q,qsign,a,b,r2(3),det,
     &  xlen,ylen,ylenmax,ylenmin,zlen,vx,vy,vn,ca,sa,tz(3,3),ws(3,3)
     & ,ts1(3,3),ts1inv(3,3),xl,yl,zl,vz,r

      double precision, dimension (:,:,:,:), allocatable :: bpemag0,shuffle

      double precision
     &  bcx,bcy,bcz,yfracdiv,fracsum,yfacdiv,sinphi,cosphi,curr,
     &  xcwmin,xcwmax,radin,radout,ri,ro,dh,height,angle,rmat(3,3),dr,phi,dphi

      real g(100),color(3),xc,yc,zc,x21,y21,z21,cw
      integer mag,ix,iy,iz,icol,num,nr,nang,nangmin,nh,iphi,ir,ip,ih,kfoundplanes

      integer, dimension (:), allocatable :: ibpeplaniron, ibpeplanrec,
     &  ncorn1,ncorn2

      integer, dimension (:,:), allocatable :: ibpecorniron,ibpecornrec,
     &  mothdiv

      integer ifail,iterold,iron1,iron2,mat,lmat,jmag,ic,jc,
     &  ispec,iron,irec,kiron,nidiv,n1div,n2div,modediv,kplan,mspecmag,
     &  lunf,lunst,lunvox,lunvrml,moth,itype,motho,nmoth,nmotho,ipoimoth,
     &  ncount,imoth,kmoth,lun,ndisp,idisp,mothdis,moth0,mpoi,lunlis,
     &  lunfil,nlines,luncoi,kolor,lunmag,lunrn,kseg

      integer, dimension (:), allocatable :: ibpecolrec,ibpecoliron

      integer ntupp,imat
      parameter(ntupp=12)

      double precision, dimension (:,:), allocatable :: hull
      double precision, dimension (:), allocatable :: xhull,yhull,zhull
      double precision, dimension (:,:), allocatable :: xmoth,ymoth,zmoth
      double precision, dimension (:,:), allocatable :: xmothm,ymothm,zmothm
      double precision, dimension (:,:), allocatable :: xmothi,ymothi,zmothi

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface,npmoth,matmoth,
     &  nplanmoth,ncolmoth,ncolmothi,ncolmothm,npmothm,npmothi,
     &  matmothm,matmothi
      integer, dimension (:,:), allocatable :: khullmoth,kfacemoth

      real*8 htup(ntupp),val
      integer nhull,nedge,kfacelast,kcyl

      integer ntet,ifailhull,nface,next,npoi,npoimoth,ipoi,last
      real xplmin,xplmax,yplmin,yplmax,zplmin,zplmax,theta,pphi,
     &  xp1,yp1,zp1,xp2,yp2,zp2

      integer iwarn,ifilemodus,iplot,imodu,imoduo,
     &  ilast,ifirst,nwords,i2cop,i1cop,i1mod,i2mod,i1moth,i2moth,
     &  nx,ny,nz,ncopies,
     &  nmagdo,nmagrect,nmagdivrect,nmagrectspec,nmagdivrectspec,
     &  nmagdiv,nmagspec,nmagdivspec,
     &  ndiv,idiv,nfediv,nmago,nsmag,nsmallo,
     &  ical,jplan,jcol,
     &  nplan,ncol,ncorn,nmodule,ncopy,
     &  ixdiv,iydiv,izdiv,nxdiv,nydiv,nzdiv,
     &  kmag1,kmag2,kdmag,kdmag1,kmag,
     &  imp,imag,ipol,npol,iplan,iedge,icorn,imodul,icopy,k,i,j,ip1,ip2,
     &  iflange,nflange,
     &  ipos(2,100),istat,ianf,iend,iover,ierr,
     &  nwfil,nwfilo,isleep,ifound,ieof,ise,idum,lunnam,lundum,lun76,
     &  lunmat,kmat,nmatpoi,nmatpoimax,mapmode,lunpre,ipre,npre,maxplan,
     &  imatfile,ispecmag,nmagmaxo,nfirst,nlast,lpos(2,4),nwordsmax,korn,
     &  kornmoth,iplanmoth,kpoi,nline,lunkill,kill,ix1,ix2,iy1,iy2,iz1,iz2

      integer :: ireallo=-1, ihullallo=0
      integer ncutpiece

      character(10) dtday,dttime,dtzone
      character c1
      integer idatetime(8),lunclc

      logical lexist

      character(32) c32,ch32,chmod,chcop,chmoth1,chsel
      character(1) c32a(32),chmoth1a(32)
      character(64) c64
      character(128) c128
      character(2048) cfile,cline,cline1
      equivalence(c32a,c32)

      character(32), dimension (:), allocatable :: chdisp

      equivalence (chmoth1a,chmoth1)

      data eps10/1.0d-10/

      modegui=0

+self,if=trace.
      print*,"-trace-: undumag_ini_old entered"
+self.

      open(newunit=lun,file="undumag.stat")
      write(lun,*)"1"
      flush(lun)
      close(lun)

+seq,unduver.

c+seq,phycon1.

      kfoundplanes=0
      ncornadd=0
      nplanadd=0

      nplanmax=0
      ncornmax=0

c      iwarnbound=0

1111  ireallo=ireallo+1

      ncutpiece=0

      if (ireallo.ne.0) then
        deallocate(ibpecol,bpebc,bpemag,bpemag0,shuffle,bpebc0,
     &    bperot,bpetm,bflange,ibpeplan,ibpeplano,ibpecorn,mothdiv)
        deallocate(corn1,corn2,ncorn1,ncorn2)
        deallocate(hull,khull,kface,kedge,xhull,yhull,zhull)
        deallocate(xmoth,ymoth,zmoth,npmoth,matmoth,ncolmoth)
        deallocate(xmothm,ymothm,zmothm,npmothm,matmothm,ncolmothm)
        deallocate(xmothi,ymothi,zmothi,npmothi,matmothi,ncolmothi)
        deallocate(chmoths,chmothso,chmags,chmagsm,chmothsm,chmagsi,chmothsi)
        deallocate(magcyl)
+self,if=chmagpols.
        deallocate(chmagpols)
+self.,if=chmagpols.
        deallocate(idamp8)
      endif

      nmag=0
      nmoth=0
      nmago=-1
      nmagmax=0
      kcyl=0

      nmagrect=0
      nmagdivrect=0
      nmagdiv=0

      iwarnsum=0
      maxpoints=0
      kallodip=0

+self,if=-nowarnings.
      if (ireallo.eq.0) open(newunit=lunwarn,file="undumag.war")
+self.,if=-nowarnings.

      nmatpoimax=0

      iterrectot=0
      iterirontot=0

      xmin=1.0d30
      xmax=-1.0d30
      ymin=1.0d30
      ymax=-1.0d30
      zmin=1.0d30
      zmax=-1.0d30

cdebug

      iseqdebug=0
      kwave=0

      if (ireallo.ne.0) close(lunnam)
      inquire(file=trim(Fnam),exist=lexist)
      if (lexist.eqv..false.) then
        write(lun6,*)""
        write(lun6,*)"*** Error in undumag_ini_old: File " // trim(Fnam) // " not found ***"
        write(lun6,*)"*** Program UNDUMAG aborted ***"
        stop
      endif

      open(newunit=lunnam,file=trim(Fnam),form='formatted',status='old')
      read(lunnam,undumagn)
      read(lunnam,randomn)
      close(lunnam)

      kcalcvars=1 !to avoid problems with undumag.in if coating is used

      if (hulltiny.le.0d0) hulltiny=1.0e-6

      ndivfby=max(ndivfboxy,1)

      if (matrix.eq.0) then
        write(lun6,*)"**************************************************************************************"
        write(lun6,*)"*         Matrix mode is compulsary for current version of UNDUMAG, switching it on  *"
        write(lun6,*)"**************************************************************************************"
        matrix=1
      endif

      if (kbextern.eq.0) then
        bxex=0.0d0
        byex=0.0d0
        bzex=0.0d0
      endif

      rcvthron=abs(rcvthron)
      if (rcvthron.eq.0.0d0) rcvthron=1.0d30

      ixsymo=ixsym
      iysymo=iysym
      izsymo=izsym

+self,if=trace.
      print*,"-trace-: Mark 1"
+self.
      if (irnmode.eq.1.or.irnmode.eq.2) then
        kundurun=0
        open(newunit=lundum,file="undumag.run",form='formatted',recl=512)
        read(lundum,*,end=197)kundurun
197     kundurun=kundurun+1
        close(lundum)
        if (irnmode.eq.2) irnseed(12)=irnseed(12)+kundurun
        call util_random_set_seed(irnsize,irnseed)
      else if (irnmode<0) then
        open(newunit=lunrn,file='undumag.seeds',status='old')
        read(lunrn,*) k
        do i=1,irnsize
          read(lunrn,*)k,irnseed(k)
        enddo
        close(lunrn)
        call util_random_set_seed(irnsize,irnseed)
      else
        call util_random_init(irnsize,irnseed)
      endif

+self,if=trace.
      print*,"-trace-: Mark 2"
+self.
      ndisp=0
      if (kdisplace.ne.0) then
        if (ixsym.gt.0.or.iysym.gt.0.or.izsym.gt.0) then
          write(lun6,*)
          write(lun6,*)"*** Warning in undumag_ini_old: kdisplace is set, but set-up is mirrored due to ixsym, iysym, or izsym ***"
          write(lun6,*)
        endif
        open(newunit=lun,file="undumag.dis",status="old")
        do while (.true.)
          call util_skip_comment_end(lun,ieof)
          read(lun,'(a)')cline
          ndisp=ndisp+1
        enddo
        rewind(lun)
        allocate(chdisp(ndisp))
        allocate(displace(18,ndisp))
        do i=1,ndisp
! displace(1:3,i) displacement of magnet
! displace(4:6,i) yrot, zrot, dphi of rotation around x-axis
! displace(7:9,i) change of magnetization
! displace(10:18,i)
          !mode: 0, apply changes as they are
          !mode: 1, apply changes with randomization
          call util_skip_comment(lun)
          read(lun,*)chdisp(i),displace(1:18,i)
          call util_random(9,g)
          do k=1,9
            if (displace(k+9,i).ne.0.0d0) displace(k,i)=displace(k,i)*g(k)
          enddo
        enddo
        close(lun)
      endif
+self,if=trace.
      print*,"-trace-: Mark 3"
+self.

      if (nchiiron.le.0) nchiiron=1
      nchimax=0
      if (chicut.eq.-9999.0d0) chicut=max(abs(hconv),1.0d-10)
      corrtiny=corrtiny/1000.0d0 ! mm->meter

      randoxa=abs(randox)
      randoya=abs(randoy)
      randoza=abs(randoz)
      randox10=randoxa/10.0d0
      randoy10=randoya/10.0d0
      randoz10=randoza/10.0d0

      ifsimpson=isimpson
      open(unit=99,file='.util_spline_or_simpson_integral.dat')
      write(99,*)isimpson
      if (isimpson.gt.0) then
        write(lun6,*)
        write(lun6,*)"*** Simpson integrations applied ***"
        write(lun6,*)
      endif
      close(99)

      hconva=abs(hconv)
      if (hconv.le.-1000.0d0) hconva=0.0d0

      if (dampiron.eq.0.0d0.or.dampiron.gt.1.0d0) then
        dampiron=1.0d0
      endif

      if (maxiteriron.eq.-9999.and.dampiron.lt.1.0d0) then
        maxiteriron=(log(0.001)/log(1.0d0-dampiron)+1)
      endif

      dampi=dampiron

      if (maxiteriron.eq.-9999) maxiteriron=1

      if (ireallo.ne.0) close(lunconv)
      if(kdumpconv.ne.0) open(newunit=lunconv,file="undumag.cnv")
+self,if=trace.
      print*,"-trace-: Mark 4"
+self.

      if (ireallo.eq.0.and.kcalcvars.ne.0) then
        call undumag_calc(kechocalc,kcalcvars)
      endif
+self,if=trace.
      print*,"-trace-: Mark 5"
+self.

      if (ireallo.eq.0) then
        c128="izsym"
        call undumag_parameter(c128,val,istat)
        if (istat.ne.0) then
          c128="iZsym"
          call undumag_parameter(c128,val,istat)
          if (istat.eq.0) izsym=nint(val)
        else
          izsym=nint(val)
        endif
        c128="iysym"
        call undumag_parameter(c128,val,istat)
        if (istat.ne.0) then
          c128="iYsym"
          call undumag_parameter(c128,val,istat)
          if (istat.eq.0) iysym=nint(val)
        else
          iysym=nint(val)
        endif
        c128="ixsym"
        call undumag_parameter(c128,val,istat)
        if (istat.ne.0) then
          c128="iXsym"
          call undumag_parameter(c128,val,istat)
          if (istat.eq.0) ixsym=nint(val)
        else
          ixsym=nint(val)
        endif
        if (perlen.eq.9999.0d0) then
          c128="perlen"
          call undumag_parameter(c128,perlen,istat)
          if (istat.ne.0) then
            c128="Perlen"
            call undumag_parameter(c128,perlen,istat)
            if (istat.ne.0) then
              c128="PerLen"
              call undumag_parameter(c128,perlen,istat)
            endif
          endif
          if (istat.ne.0) then
            write(lun6,*)
            write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_parameter for PerLen ***"
            write(lun6,*)"Make sure, that " // trim(Fclc) // " contains parameter or variable PerLen!"
            write(lun6,*)
            stop
          else
            write(lun6,*)
            write(lun6,*)"Period length read from " // trim(Fclc) // ":",sngl(perlen)
            write(lun6,*)
            if (perlen.le.0.0d0) then
              perlen=100.0d0
              write(lun6,*)
              write(lun6,*)"*** Warning in undumag_ini_old:Zero or negative period-length found ***"
              write(lun6,*)"*** Set to 100 ***"
              write(lun6,*)
            endif
          endif
        endif
      endif
+self,if=trace.
      print*,"-trace-: Mark 6"
+self.

      if (dedgefb.eq.0.0d0) dedgefb=0.02d0

      if (iforce.ne.0.and.dedgefb.le.corrtiny) then
        write(lun6,*)""
        write(lun6,*)"*** Warning in undumag_ini_old: Dedgefb is not greater than corrtiny "
        write(lun6,*)""
      endif

      ubflenx=ubflenx+2.0d0*dedgefb
      ubfleny=ubfleny+2.0d0*dedgefb
      ubflenz=ubflenz+2.0d0*dedgefb

      if (iforce.lt.0) then
+self,if=trace.
        print*,"-trace-: Calling undumag_force_parameters"
+self.
        call undumag_force_parameters
+self,if=trace.
        print*,"-trace-: Passed undumag_force_parameters"
+self.
      endif

      if (iforce.ne.9999) then

        if (utorqcenx.eq.9999.0d0) utorqcenx=ubfcenx
        if (utorqceny.eq.9999.0d0) utorqceny=ubfceny
        if (utorqcenz.eq.9999.0d0) utorqcenz=ubfcenz

        bfcenxmm=ubfcenx
        bfcenymm=ubfceny
        bfcenzmm=ubfcenz
        bflenxmm=ubflenx
        bflenymm=ubfleny
        bflenzmm=ubflenz
        torqcenxmm=utorqcenx
        torqcenymm=utorqceny
        torqcenzmm=utorqcenz
        bfcenx=ubfcenx/1000.0d0
        bfceny=ubfceny/1000.0d0
        bfcenz=ubfcenz/1000.0d0
        bflenx=ubflenx/1000.0d0
        bfleny=ubfleny/1000.0d0
        bflenz=ubflenz/1000.0d0
        torqcenx=utorqcenx/1000.0d0
        torqceny=utorqceny/1000.0d0
        torqcenz=utorqcenz/1000.0d0
        jplforce=iplforce
        if (iforce.eq.0) then
          mbforcex=0
          mbforcey=0
          mbforcez=0
        endif
        nbforcx=mbforcex
        nbforcy=mbforcey
        nbforcz=mbforcez
        iforcol=mfcolor
        forcol=iforcol
        forxpl(1)=bfcenxmm-bflenxmm/2.
        forxpl(2)=bfcenxmm+bflenxmm/2.
        forypl(1)=bfcenymm-bflenymm/2.
        forypl(2)=bfcenymm+bflenymm/2.
        forzpl(1)=bfcenzmm-bflenzmm/2.
        forzpl(2)=bfcenzmm+bflenzmm/2.

      endif !(iforce.ne.9999) then

      xsymmm=xsym
      if (xsymmm.eq.9999.0d0) xsymmm=xcenter
      if (xsym.ne.9999.0d0) xsym=xsym/1000.0d0

      window=uwindow
      kdebug=kudebug

      if (window.le.0.0d0) window=1.0d30

      tiny=1.1d-6
      tiny=corrtiny
      tiny2=tiny*tiny

+self,if=trace.
      print*,"-trace-: Mark 6"
+self.
      scalcur=1.0d0

      TWOPI=2.0D0*PI1

      filebpe='undumag.in'

      iallowin=1
      iplot=iunduplot
      nthreads=nuthreads
      theta=unduplot_theta !plotting angle
      pphi=unduplot_phi   !plotting angle

      lunbpe=98
+self,if=trace.
      print*,"-trace-: Mark 7"
+self.
      close(lunbpe)

+self,if=trace.
      print*,"-trace-: Calling undumag_drop_zero_magnets"
+self.
      call undumag_drop_zero_magnets(kfoundplanes,kechocalc,hulltiny)
+self,if=trace.
      print*,"-trace-: Passed undumag_drop_zero_magnets"
+self.

      open(unit=lunbpe,file=filebpe,form='formatted',status='old')

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,'(a)')usercom
      unducomment=usercom

      if (ireallo.eq.0) then

        kundurun=0
        jcomment=kcomment
        jrunnum=krunnum
        jdate=kdate

        call date_and_time(dtday,dttime,dtzone,idatetime)

        open(newunit=lundum,file="undumag.run",form='formatted',recl=512)
        read(lundum,*,end=97)kundurun
97      kundurun=kundurun+1
        rewind(lundum)
        write(lundum,*) kundurun,trim(usercom),' ',
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
        close(lundum)
        open(newunit=lundum,file="undumag.runs",form='formatted',recl=512,
     &    access='append')
        write(lundum,*) kundurun,trim(usercom),' ',
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
        close(lundum)

        open(newunit=lunst,file="undumag.sta")
        write(lunst,*)kundurun,konv,iwarnsum
        write(lunst,*)"undumag_ini_old"
        close(lunst)

        write(lun6,*) "Run:",
     &    kundurun,"      ",
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)

        write(lun6,*) "User comment: ",trim(usercom)

      endif !(ireallo.eq.0) then

c loop over magnets, modules, and arrays {

11    call util_skip_comment_end(lunbpe,ieof)

      if (nmago.eq.-9.and.ieof.ne.0) then
        goto 992 ! end of magnet section
      endif

      read(lunbpe,'(a)')cline
      if (kechocalc.ne.0) write(lun6,*)trim(cline)

      read(cline,*)x0,y0,z0

      if (x0.eq.-9999..and.y0.eq.-9999..and.z0.eq.-9999.) then
        goto 992 ! end of magnet section
      endif

      nmag=nmag+1
      nmoth=nmoth+1

c get dimensions

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      read(lunbpe,*)bc,xm,ym,zm,imat

      if (imat.eq.0) bc=0.0d0

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,'(a)')cline
      if (kechocalc.ne.0) then
        write(lun6,*)trim(cline)
      endif

      c64='Cyl'
      call util_string_substring(cline,trim(c64),ianf,iend,istat)
      if (istat.eq.0) then
        !Cylinder
        read(cline(4:len_trim(cline)),*)ncol
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
        if (angle.gt.360.0d0) angle=360.0d0
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(1,1:3)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(2,1:3)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(3,1:3)
        nplan=-11
        if (bc.ne.0.0d0) nmagcyl=nmagcyl+1

      else ! Cyl

        c64='Block'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)

        if (istat.ne.0) then
          c64='File'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='Corners'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
              read(cline,*)nplan,ncol
            else
              !Corners
c            nplan=-10
              cline(ianf:iend)=' -10   '
              read(cline,*)nplan,ncol
            endif
          else
            !File with corners
            nplan=-9
            cline(ianf:iend)=' -9 '
          endif
        else
          !Block
          nplan=-6
          read(cline(iend+1:len_trim(cline)),*)ncol
          cline(ianf:iend)=' -6  '
        endif
      endif ! Cyl

      if (nplan.gt.0.and.nplan.gt.nplanmax) then
        kfoundplanes=1
        nplanmax=nplan
      endif

      if ((nplan.eq.-11.or.nplan.eq.-1.or.nplan.eq.-6.or.nplan.eq.-7).and.
     &    nplanmax.lt.6) then
        if (nplanmax.lt.6) nplanmax=6
        if (ncornmax.lt.5) ncornmax=5
cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      else if (nplan.eq.-9.or.nplan.eq.-10) then

        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        call util_skip_comment_end(lunbpe,ieof)

        if (nplan.eq.-9) then

          if (kechocalc.ne.0) then
            write(lun6,*)trim(cline)
          endif
          read(lunbpe,*)cline

          open(newunit=lundum,file=trim(cline))

          npoi=0
          last=1

          do while (last.gt.0)
            call util_read_line(lundum,cline,last)
            if (last.gt.0) then
              npoi=npoi+1
            endif
          enddo

          if (maxpoints.eq.0) then
            maxpoints=100
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          rewind(lundum)

          do ipoi=1,npoi
            call util_skip_comment_end(lundum,ieof)
            read(lundum,*)hull(1:3,ipoi)
          enddo

          close(lundum)

        else if (nplan.eq.-10) then

          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)npoi

          if (maxpoints.eq.0) then
            maxpoints=100
            ihullallo=1
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          do ipoi=1,npoi
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)hull(1:3,ipoi)
          enddo

        endif !nplan.eq.-9/-10

        if (npoi.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Less data than four points on file ***",
     &      trim(cline)
          stop
        endif

        xhull(1:npoi)=hull(1,1:npoi)
        yhull(1:npoi)=hull(2,1:npoi)
        zhull(1:npoi)=hull(3,1:npoi)

        call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &    nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
+self,if=trace.
        print*,"-trace-: Passed util_convex_hull_3d"
+self.

        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &      trim(cline)
          stop
        endif

c        khull(1:kfacelast)=kface(1:kfacelast)

        nmagdiv=nmagdiv+nxdiv*nydiv*nzdiv

        next=1
        do iplan=1,nface
          ncorn=kface(next)
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          next=next+ncorn+1
        enddo
        if (nface.gt.nplanmax) nplanmax=nface

      else if (ireallo.eq.0.and.abs(nplan).gt.nplanmax) then
        nplanmax=abs(nplan)+3
        ncornmax=5
      endif !nplan .eq. -9/-10

      if (nplan.ne.-11.and.nplan.ne.-9.and.nplan.ne.-10) then
        nxdiv=1
        nydiv=1
        nzdiv=1
      endif

      if (nplan.gt.0) then

        ! normal polyhedron

c        backspace(lunbpe)
c        read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif


        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdiv=nmagdiv+nxdiv*nydiv*nzdiv

        npoi=0
        do iplan=1,nplan

          call util_skip_comment_end(lunbpe,ieof)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)ncorn

          if (ncorn.lt.3) then
            write(lun6,*)
            write(lun6,*)'*** ERROR IN undumag_ini_old: Too few points'
            write(lun6,*)'Magnet, plane: ',nmag,iplan
            write(lun6,*)
            stop
          endif

          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1

          do icorn=1,ncorn
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)x0,y0,z0
            npoi=npoi+1
          enddo

        enddo !nplan

        if (maxpoints.eq.0) then
          maxpoints=100
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          ihullallo=1
        else if (npoi.gt.maxpoints) then
          if (ihullallo.ne.0) then
            deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
          endif
          maxpoints=npoi
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
        endif

      else if (nplan.eq.-9.or.nplan.eq.-10) then

        continue

      else if (nplan.eq.-6) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        read(lunbpe,*,iostat=ieof)xlen,ylen,zlen,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdivrect=nmagdivrect+nxdiv*nydiv*nzdiv
        nmagrect=nmagrect+1

      else if (nplan.eq.-11) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        nangmin=1+abs(angle)/(90.0d0+tiny)

        if (nang.lt.nangmin) nang=nangmin
        if (nr.lt.1) nr=1
        if (nh.lt.1) nh=1

        nmagdiv=nmagdiv+nr*nang*nh

      else !(nplan.eq.-6)

        write(lun6,*) '*** Error in undumag_ini_old: Bad number of planes'
        write(lun6,*) '*** Magnet:', nmag
        write(lun6,*)'*** Program aborted ***'
        stop

      endif !nplan.gt.0

      goto 11

992   continue ! end of magnet section

      if (nmago.eq.-9.or.nmago.eq.-9999.or.nmago.eq.-8888) then
        close(lunbpe)
        lunbpe=98
      endif !nmago

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*)nmodule

      if (nmodule.le.0) then
        write(lun6,*)'*** Error in undumag_ini_old: Number of modules is zero'
        stop
      endif

      ncopies=0
      nmotho=nmoth
      nmoth=0
      do imodul=1,nmodule

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)xmod,ymod,zmod

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(1,1),rotmod(1,2),rotmod(1,3)

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(2,1),rotmod(2,2),rotmod(2,3)

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(3,1),rotmod(3,2),rotmod(3,3)

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)ncopy

        call util_skip_comment_end(lunbpe,ieof)

        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)space,vspace(1),vspace(2),vspace(3)
        call util_vnorm(3,vspace,vspace)

        call util_skip_comment_end(lunbpe,ieof)

        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)vbsym(1),vbsym(2),vbsym(3)

        ncopies=ncopies+ncopy*(nmagdiv+nmagdivrect)
        nmoth=nmoth+nmotho*ncopy

      enddo !imodul=1,nmodule

      nmagmax=nmagmax+ncopies

c Special magnets

      nspecmag=0
      nmagrectspec=0
      nmagdivrectspec=0
      nmagdivspec=0

      x0=-1.0d30
      y0=-1.0d30
      z0=-1.0d30

1     call util_skip_comment(lunbpe)

      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      read(lunbpe,*)x0,y0,z0
      if (x0.eq.-9999..and.y0.eq.-9999..and.z0.eq.-9999.) goto 993

      nspecmag=nspecmag+1

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      read(lunbpe,*)bc,xm,ym,zm,imat
      if (imat.eq.0) bc=0.0d0

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        write(lun6,*)trim(cline)
      endif
      read(lunbpe,'(a)')cline

      c64='Cyl'
      call util_string_substring(cline,trim(c64),ianf,iend,istat)
      if (istat.eq.0) then
        !Cylinder
        read(cline(4:len_trim(cline)),*)ncol
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
        if (angle.gt.360.0d0) angle=360.0d0
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(1,1:3)
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(2,1:3)
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(3,1:3)
        ncornmax=5
        nplanmax=6
        nplan=-11

      else ! Cyl

        c64='Block'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)
        if (istat.ne.0) then
          c64='File'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='Corners'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
c            c64='Corners'
c            call util_string_substring(cline,trim(c64),ianf,iend,istat)
              read(cline,*)nplan,ncol
            else
c            nplan=-10
              cline(ianf:iend)=' -10   '
              read(cline,*)nplan,ncol
            endif
          else
            nplan=-9
            cline(ianf:iend)=' -9 '
          endif
        else
          nplan=-6
          cline(ianf:iend)=' -6  '
        endif

      endif ! Cyl

      if (nplan.gt.0) then

c        backspace(lunbpe)
c        read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdivspec=nmagdivspec+nxdiv*nydiv*nzdiv

        if (nplan.gt.0.and.nplan.gt.nplanmax) nplanmax=nplan

        if ((nplan.eq.-1.or.nplan.eq.-6.or.nplan.eq.-7).and.nplanmax.lt.6) then
          if (ireallo.eq.0.and.nplanmax.lt.6) nplanmax=6
          if (ireallo.eq.0.and.ncornmax.lt.5) ncornmax=5
        endif

        npoi=0
        do iplan=1,nplan

          call util_skip_comment_end(lunbpe,ieof)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)ncorn

          if (ncorn.lt.3) then
            write(lun6,*)
            write(lun6,*)'*** ERROR IN undumag_ini_old: Too few points'
            write(lun6,*)'Magnet, plane: ',nmag,iplan
            write(lun6,*)
            stop
          endif

          do icorn=1,ncorn
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)xx,yy,zz
            npoi=npoi+1
          enddo

          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1

          ncorn=ncorn+1

        enddo !nplan

        if (maxpoints.eq.0) then
          maxpoints=100
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          ihullallo=1
        else if (npoi.gt.maxpoints) then
          if (ihullallo.ne.0) then
            deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
          endif
          maxpoints=npoi
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
        endif

      else if (nplan.eq.-9.or.nplan.eq.-10) then
cxxxxxxxxxxx

c        backspace(lunbpe)
c        read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        call util_skip_comment_end(lunbpe,ieof)

        if (nplan.eq.-9) then
          read(lunbpe,*)cline
          if (kechocalc.ne.0) then
            write(lun6,*)trim(cline)
          endif
          open(newunit=lundum,file=trim(cline))

          npoi=0
          last=1

          do while (last.gt.0)
            call util_read_line(lundum,cline,last)
            if (last.gt.0) then
              npoi=npoi+1
            endif
          enddo

          if (maxpoints.eq.0) then
            maxpoints=100
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          rewind(lundum)

          do ipoi=1,npoi
            call util_skip_comment_end(lundum,ieof)
            read(lundum,*)hull(1:3,ipoi)
          enddo

          close(lundum)

        else if (nplan.eq.-10) then

          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)npoi

          if (maxpoints.eq.0) then
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          do ipoi=1,npoi
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)hull(1:3,ipoi)
          enddo

        endif

        if (npoi.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Less data than four points on file ***",
     &      trim(cline)
          stop
        endif

        xhull(1:npoi)=hull(1,1:npoi)
        yhull(1:npoi)=hull(2,1:npoi)
        zhull(1:npoi)=hull(3,1:npoi)
        call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &    nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &      trim(cline)
          stop
        endif

c        khull(1:kfacelast)=kface(1:kfacelast)

        nmagdivspec=nmagdivspec+nxdiv*nydiv*nzdiv
        next=1

        do iplan=1,nface
          ncorn=kface(next)
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          next=next+ncorn+1
        enddo

        if (nface.gt.nplanmax) nplanmax=nface

      else if (nplan.eq.-6) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        read(lunbpe,*,iostat=ieof)xlen,ylen,zlen,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdivrectspec=nmagdivrectspec+nxdiv*nydiv*nzdiv
        nmagrectspec=nmagrectspec+1

      else if (nplan.eq.-11) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        if (nang.lt.nangmin) nang=nangmin
        if (nr.lt.1) nr=1
        if (nh.lt.1) nh=1

        nmagdivspec=nmagdivspec+nr*nang*nh

      else !(nplan.eq.-6)

        write(lun6,*) '*** Error in undumag_ini_old: Bad value of number of planes'
        write(lun6,*) '*** Magnet:', nmag
        write(lun6,*)'*** Program aborted ***'
        stop

      endif !nplan.gt.0

      goto 1

993   continue

      mspecmag=nmagdivspec+nmagdivrectspec
      if (ireallo.eq.0.and.nmagrectspec.gt.0.and.nplanmax.lt.6) nplanmax=6

      call util_skip_comment(lunbpe)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif

      call util_skip_comment(lunbpe)

      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif

+self,if=trace.
      print*,"-trace-: Going to material files"
+self.

      read(lunbpe,*)nmatfiles

      bcmo=-1.0d30
      hmato=-1.0d30
      do imatfile=1,nmatfiles
        call util_skip_comment(lunbpe)
        read(lunbpe,*) imat,lmat,mapmode,cfile
        nmatpoi=0
        open(newunit=lunmat,file=trim(cfile),status='old')
114     call util_skip_comment_end(lunmat,ieof)
        if (ieof.ne.0) goto 994
        read(lunmat,*)hmat,bcm
c        if (bcm.ne.bcmo.or.hmato.ne.hmat) then
        if (bcm.ne.bcmo) then
          nmatpoi=nmatpoi+1
c          hmato=hmat
c          bcmo=bcm
        endif
        hmato=hmat
        bcmo=bcm
        if (nmatpoi.gt.nmatpoimax) nmatpoimax=nmatpoi
        goto 114
994     close(lunmat)
      enddo

c loop over magnets, modules, and arrays }

      !nmag is number primary magnets, without special ones and modules

      nmagmaxo=nmagmax
      nsmag=max(nmag,nmagmax)+mspecmag
      nsmallo=nsmag

      if (ixsym.lt.0) then
        nsmag=2*nsmag
        nmoth=2*nmoth
      endif
      if (iysym.lt.0) then
        nsmag=2*nsmag
        nmoth=2*nmoth
      endif
      if (izsym.lt.0) then
        nsmag=2*nsmag
        nmoth=2*nmoth
      endif

      allocate(
     &  chmoths(32,nsmag+nmoth),
     &  chmothso(32,nsmag+nmoth),
     &  chmags(32,nsmag),
     &  chmagsm(32,nsmag),chmothsm(32,nsmag),
     &  chmagsi(32,nsmag),chmothsi(32,nsmag)
+self,if=chmagpols.
     &  ,chmagpols(32,nsmag)
+self.,if=chmagpols.
     &  )

      allocate(bpebc0(7,nsmag))
      allocate(bpebc(20,nsmag))
      bpebc=0.0d0
      allocate(bpemag(3,ncornmax,nplanmax,nsmag))
      allocate(bpemag0(3,ncornmax,nplanmax,nsmag))
      allocate(shuffle(6,ncornmax,nplanmax,nsmag))
      allocate(bperot(3,ncornmax,nplanmax,nsmag))
      allocate(bpetm(3,8,nplanmax,nsmag))
      bpetm=0.0d0
      allocate(bflange(7,(ncornmax)*(nplanmax)))

      allocate(ibpeplan(nsmag))
      allocate(ibpeplano(nsmag))
      allocate(ibpecol(nsmag))
      allocate(ibpecorn(nplanmax,nsmag),mothdiv(4,nsmag))

      allocate(corn1(3,2*ncornmax,2*nplanmax),
     &  corn2(3,2*ncornmax,2*nplanmax))
      allocate(ncorn1(2*nplanmax),ncorn2(2*nplanmax))

      allocate(idamp8(nsmag))

      mothdiv=1

      rewind(lunbpe)

      write(lun6,*)
      write(lun6,*)'Setup read first time from undumag.in to get dimensions'
      write(lun6,*)'Starting rereading and performing segmentations and geometry setup'
      write(lun6,*)
cdebug
      if (maxpoints.lt.8) maxpoints=8

      if (ixsymo.ne.0) then
        nspecmag=2*nspecmag
      endif
       if (iysymo.ne.0) then
        nspecmag=2*nspecmag
      endif
       if (izsymo.ne.0) then
        nspecmag=2*nspecmag
      endif

      nsmallo=max(nsmallo,nmoth+nspecmag)

      allocate(xmoth(maxpoints,nsmallo),
     &  ymoth(maxpoints,nsmallo),
     &  zmoth(maxpoints,nsmallo),
     &  npmoth(nsmallo),
     &  matmoth(nsmallo),
     &  ncolmoth(nsmallo)
     &  )
      allocate(xmothm(maxpoints,nsmallo),
     &  ymothm(maxpoints,nsmallo),
     &  zmothm(maxpoints,nsmallo),
     &  npmothm(nsmallo),
     &  matmothm(nsmallo),
     &  ncolmothm(nsmallo)
     &  )
      allocate(xmothi(maxpoints,nsmallo),
     &  ymothi(maxpoints,nsmallo),
     &  zmothi(maxpoints,nsmallo),
     &  npmothi(nsmallo),
     &  matmothi(nsmallo),
     &  ncolmothi(nsmallo)
     &  )

      allocate(magcyl(nmagcyl,2))

      nmoth=0
      if (ixsymo.ne.0) then
        nspecmag=nspecmag/2
      endif
       if (iysymo.ne.0) then
         nspecmag=nspecmag/2
      endif
       if (izsymo.ne.0) then
         nspecmag=nspecmag/2
      endif

c read and store data

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,'(a)')usercom

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*)x0,y0,z0

      nmagmax=0
      kmag1=1
      kmag2=nmag
      kcyl=0

      if (nmago.eq.-1) then
        backspace(lunbpe)
      endif

      if (ireallo.ne.0) close(lun76)
      open(newunit=lun76,file="undumag.pla")

      nmoth=0
      nmagdo=nmag
cdebug
      do imag=1,nmagdo


        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)') cline
        call util_string_split_sep(cline,100,nwords,ipos,'!',istat)
        cline=cline(ipos(1,1):ipos(2,1))
        call util_string_split_sep(cline,100,nwords,ipos,' ',istat)

        if (nwords.eq.5) then
          read(cline,*)x00,y00,z00,chmag,chmoth
        else
          read(cline,*)x00,y00,z00
          write(chmag,*) imag
          call util_string_trim(chmag,nfirst,nlast)
          chmag="mag_" // chmag(nfirst:nlast)
          chmoth="Mag_" // chmag(nfirst:nlast)
        endif

        ifound=0
        do kmag=1,nmagmax
          ifound=1
          do ic=1,32
            if (chmags(ic,kmag).ne.chmag(ic:ic)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.1) exit
        enddo

        if (ifound.ne.0) then
          write(lun6,*)"*** Error in undumag_ini_old: Duplicate magnet name: ",chmag
          stop
        endif

        nmagmax=nmagmax+1
        nmoth=nmoth+1

        c32=chmoth
        write(chmoths(1:32,nmagmax),'(a)')c32a(1:32)
        c32=chmag
        write(chmags(1:32,nmagmax),'(a)')c32a(1:32)

        bpebc(15,nmagmax)=nmagmax
        bpebc15=bpebc(15,nmagmax)
        mothdiv(1,nmagmax)=bpebc15

        bpebc0(1,nmagmax)=x00
        bpebc0(2,nmagmax)=y00
        bpebc0(3,nmagmax)=z00

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)bc,xm,ym,zm,imat !magnetization vector M

        if (imat.eq.0) bc=0.0d0

        bpebc(9,nmagmax)=imat
        bpebc(10,nmagmax)=0

        bdum=sqrt(xm*xm+ym*ym+zm*zm)

        if (bdum.eq.0.0d0.and.abs(bc).gt.0.01) then
          write(lun6,*)
          write(lun6,*)'*** Error in undumag_ini_old: Bad magnetization vector'
          write(lun6,*)'Magnet ',imag
          write(lun6,*)
          stop
        endif

c        call util_skip_comment_end(lunbpe,ieof)
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)')cline

        c64='Cyl'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)
        if (istat.eq.0) then
          !Cylinder
          read(cline(4:len_trim(cline)),*)ncol
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
          if (angle.gt.360.0d0) angle=360.0d0
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(1,1:3)
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(2,1:3)
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(3,1:3)
          nplan=-11

        else ! Cyl

          c64='Block'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='File'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
              c64='Corners'
              call util_string_substring(cline,trim(c64),ianf,iend,istat)
              if (istat.ne.0) then
c              c64='Corners'
c              call util_string_substring(cline,trim(c64),ianf,iend,istat)
                read(cline,*)nplan,ncol
              else
                nplan=-10
                cline(ianf:iend)=' -10   '
                read(cline,*)nplan,ncol
              endif
            else
              nplan=-9
              cline(ianf:iend)=' -9 '
            endif
          else
            cline(ianf:iend)=' -6  '
            read(cline,*)nplan,ncol
          endif

        endif !Cyl

        if (nplan.gt.0.or.nplan.eq.-9) then
c          backspace(lunbpe)
c          read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv

          read(cline,*,iostat=ieof)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif

          if (nxdiv.lt.1) nxdiv=1
          if (nydiv.lt.1) nydiv=1
          if (nzdiv.lt.1) nzdiv=1

        endif

        bdum=bc/bdum

        bpebc0(4,nmagmax)=xm*bdum
        bpebc0(5,nmagmax)=ym*bdum
        bpebc0(6,nmagmax)=zm*bdum

        ibpecol(nmagmax)=ncol
        ibpeplano(nmagmax)=nplan
        ibpeplan(nmagmax)=nplan

        if (nplan.gt.0.or.nplan.eq.-9.or.nplan.eq.-10) then

c          backspace(lunbpe)
c          read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
c          read(cline,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif


          if (nxdiv.lt.1) nxdiv=1
          if (nydiv.lt.1) nydiv=1
          if (nzdiv.lt.1) nzdiv=1

          nmag=nmag+nxdiv*nydiv*nzdiv-1
          kmag2=kmag2+nxdiv*nydiv*nzdiv-1

          bpebc0(7,nmagmax)=1

          xdivmin=1.0d30
          xdivmax=-1.0d30
          ydivmin=1.0d30
          ydivmax=-1.0d30
          zdivmin=1.0d30
          zdivmax=-1.0d30

          ncorn1=0
          ncorn2=0

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          if (nplan.eq.-9.or.nplan.eq.-10) then
cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

c            backspace(lunbpe)
c            read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
c            read(cline,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
            read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
            if (ieof.ne.0) then
              yfacdiv=1.0d0
            endif


            if (nxdiv.lt.1) nxdiv=1
            if (nydiv.lt.1) nydiv=1
            if (nzdiv.lt.1) nzdiv=1

            call util_skip_comment_end(lunbpe,ieof)

            if (nplan.eq.-9) then

              read(lunbpe,*)cline
              open(newunit=lundum,file=trim(cline))

              last=1
              npoi=0
              gcen=0.0d0

              do while (last.gt.0)
                call util_read_line(lundum,cline,last)
                if (last.gt.0) then
                  npoi=npoi+1
                endif
              enddo

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              rewind(lundum)

c              nmoth=nmagmax
              do ipoi=1,npoi
                call util_skip_comment_end(lundum,ieof)
                read(lundum,*)hull(1:3,ipoi)
                gcen=gcen+bpebc0(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

              close(lundum)

            else if (nplan.eq.-10) then

              read(lunbpe,*)npoi

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              gcen=0.0d0
c              nmoth=nmagmax
              do ipoi=1,npoi
                call util_skip_comment_end(lunbpe,ieof)
                read(lunbpe,*)hull(1:3,ipoi)
                gcen=gcen+bpebc0(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

            endif !nplan.eq.-9/-10

            gcen=gcen/npoi

            xhull(1:npoi)=hull(1,1:npoi)
            yhull(1:npoi)=hull(2,1:npoi)
            zhull(1:npoi)=hull(3,1:npoi)

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            do ipoi=1,nhull
              korn=khull(nhull)
              gcen=gcen+bpebc0(1:3,nmagmax)+hull(1:3,ipoi)
            enddo
            gcen=gcen/nhull
c            khull(1:kfacelast)=kface(1:kfacelast)

            ibpeplano(nmagmax)=nface
            ibpeplan(nmagmax)=nface

            npmoth(nmoth)=npoi
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,npoi
              xmoth(ipoi,nmoth)=bpebc0(1,nmagmax)+hull(1,ipoi)
              ymoth(ipoi,nmoth)=bpebc0(2,nmagmax)+hull(2,ipoi)
              zmoth(ipoi,nmoth)=bpebc0(3,nmagmax)+hull(3,ipoi)
              hull(1:3,ipoi)=bpebc0(1:3,nmagmax)+hull(1:3,ipoi)-gcen
            enddo

            bpebc0(1:3,nmagmax)=gcen

            x00=bpebc0(1,nmagmax)
            y00=bpebc0(2,nmagmax)
            z00=bpebc0(3,nmagmax)

            next=1
+self,if=debug.
            open(unit=97)
+self.,if=debug.
            do iplan=1,nface

              ncorn=kface(next)

              ncorn=ncorn+1
              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  x0=hull(1,kface(next+icorn))
                  y0=hull(2,kface(next+icorn))
                  z0=hull(3,kface(next+icorn))

                  if (x0.lt.xdivmin) xdivmin=x0
                  if (x0.gt.xdivmax) xdivmax=x0
                  if (y0.lt.ydivmin) ydivmin=y0
                  if (y0.gt.ydivmax) ydivmax=y0
                  if (z0.lt.zdivmin) zdivmin=z0
                  if (z0.gt.zdivmax) zdivmax=z0

                  bpemag0(1,icorn,iplan,nmagmax)=x0
                  bpemag0(2,icorn,iplan,nmagmax)=y0
                  bpemag0(3,icorn,iplan,nmagmax)=z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                  corn1(1,icorn,iplan)=x0
                  corn1(2,icorn,iplan)=y0
                  corn1(3,icorn,iplan)=z0
+self,if=debug.
                  !w97
                  write(97,*)"-99999. ",ireallo," -99999. ",nmagmax,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.

                else ! icorn.lt.ncorn

                  bpemag0(1,icorn,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,icorn,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,icorn,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

              enddo !icorn

              ncorn1(iplan)=ncorn

              next=next+ncorn ! here, ncorn is already increamented by 1

            enddo !nface
+self,if=debug.
            close(97)
+self.,if=debug.

            nplan=nface

cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

          else ! nplan.eq.-9

            ! magnet definition by planes

            npoi=0

            do iplan=1,nplan

              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncorn

              ncorn=ncorn+1
              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  call util_skip_comment_end(lunbpe,ieof)
                  read(lunbpe,*)x0,y0,z0

                  bpemag0(1,icorn,iplan,nmagmax)=x0
                  bpemag0(2,icorn,iplan,nmagmax)=y0
                  bpemag0(3,icorn,iplan,nmagmax)=z0

                  npoi=npoi+1

                  if (maxpoints.eq.0) then
                    maxpoints=100
                    allocate(hull(3,maxpoints))
                    allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                    allocate(khull(maxpoints))
                    allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                    ihullallo=1
                  else if (npoi.gt.maxpoints) then
                    if (ihullallo.ne.0) then
                      deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                    endif
                    maxpoints=npoi
                    allocate(hull(3,maxpoints))
                    allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                    allocate(khull(maxpoints))
                    allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                  endif

                  xhull(npoi)=x00+x0
                  yhull(npoi)=y00+y0
                  zhull(npoi)=z00+z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                else ! icorn.lt.ncorn

                  bpemag0(1,icorn,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,icorn,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,icorn,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

              enddo !icorn

              ncorn1(iplan)=ncorn

            enddo !nplan

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            npmoth(nmoth)=nhull
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,nhull
              kpoi=khull(ipoi)
              x0=xhull(kpoi)
              y0=yhull(kpoi)
              z0=zhull(kpoi)
              xmoth(ipoi,nmoth)=x0
              ymoth(ipoi,nmoth)=y0
              zmoth(ipoi,nmoth)=z0
              gcen(1)=gcen(1)+x0
              gcen(2)=gcen(2)+y0
              gcen(3)=gcen(3)+z0
            enddo

            gcen=gcen/nhull

            do iplan=1,nplan
              ncorn=ncorn1(iplan)
              do icorn=1,ncorn
                bpemag0(1:3,icorn,iplan,nmagmax)=bpebc0(1:3,nmagmax)+
     &            bpemag0(1:3,icorn,iplan,nmagmax)-gcen
                corn1(1:3,icorn,iplan)=bpemag0(1:3,icorn,iplan,nmagmax)
c                write(lun6,*)nmagmax,iplan,icorn,corn1(1:3,icorn,iplan)
              enddo !icorn
            enddo !nplan

            ! sort points such that normal vectors of planes points outside
            call undumag_sortcorn(2*ncornmax,2*nplanmax,
     &        nplan,ncorn1,corn1,corn2,tiny2,ifail)

            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_sortcorn for magnet ",nmagmax
              stop
            else
              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                do icorn=1,ncorn
                  bpemag0(1:3,icorn,iplan,nmagmax)=corn2(1:3,icorn,iplan)
                enddo !icorn
              enddo !nplan
            endif

            x00=gcen(1)
            y00=gcen(2)
            z00=gcen(3)

            bpebc0(1:3,nmagmax)=gcen

            do iplan=1,nplan

              ncorn=ncorn1(iplan)

              do icorn=1,ncorn-1

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                x0=bpemag0(1,icorn,iplan,nmagmax)
                y0=bpemag0(2,icorn,iplan,nmagmax)
                z0=bpemag0(3,icorn,iplan,nmagmax)

                if (x0.lt.xdivmin) xdivmin=x0
                if (x0.gt.xdivmax) xdivmax=x0
                if (y0.lt.ydivmin) ydivmin=y0
                if (y0.gt.ydivmax) ydivmax=y0
                if (z0.lt.zdivmin) zdivmin=z0
                if (z0.gt.zdivmax) zdivmax=z0

                corn1(1,icorn,iplan)=x0 !Relative
                corn1(2,icorn,iplan)=y0
                corn1(3,icorn,iplan)=z0

                write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 1"

              enddo !icorn
            enddo !nplan

          endif ! nplan.eq.-9

          x02(2)=x00
          y02(2)=y00
          z02(2)=z00

          bc04=bpebc0(4:7,nmagmax)
          bc9=bpebc(9,nmagmax)
          bc10=bpebc(10,nmagmax)

          dxdiv=(xdivmax-xdivmin)/nxdiv
          xdiv=bpebc0(1,nmagmax)+xdivmin !Labor

          bpebc15=bpebc(15,nmagmax)
          mothdiv(1,nmagmax)=bpebc15

          do ic=1,32
            chmag(ic:ic)=chmags(ic,nmagmax)
            chmoth(ic:ic)=chmoths(ic,nmagmax)
          enddo

          ncutpiece=ncutpiece+1
cdebug ixdiv 1
          do ixdiv=1,nxdiv-1

            xdiv=xdiv+dxdiv

            x02(1)=x02(2) !Labor
            y02(1)=y02(2)
            z02(1)=z02(2)

            call undumag_cut_magnet(nmagmax,x02,y02,z02, !debug 1
     &        2*nplanmax,2*ncornmax,
     &        ncorn1,corn1,ncorn2,corn2
     &        ,1,xdiv,hulltiny,ifail)
            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, ixdiv, xdiv:",
     &          ifail,nmagmax,ixdiv,xdiv
              stop
            endif

c?            nmagmax=nmagmax-1

            if (ncorn2(1).gt.0) then

+self,if=debug.
              write(lun6,*)
              write(lun6,*)"ireallo, x-cut for magnet:",ireallo,nmagmax
+self.
              ! Magnet has been cut

              ! First piece

c?              nmagmax=nmagmax+1

              ncutpiece=ncutpiece+1

              bpebc(15,nmagmax)=bpebc15
              mothdiv(1,nmagmax)=bpebc15

              mothdiv(2,nmagmax)=ixdiv

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(9,nmagmax)=bc9
              bpebc(10,nmagmax)=bc10

              bpebc0(1,nmagmax)=x02(1)
              bpebc0(2,nmagmax)=y02(1)
              bpebc0(3,nmagmax)=z02(1)

              bpebc0(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn1(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              if (nplan.gt.nplanmax) then
                nplanmax=nplan
                goto 1111
              endif

              ibpecol(nmagmax)=ncol
              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan

+self,if=debug.
              open(unit=97,access='append')
+self.,if=debug.
              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                ibpecorn(iplan,nmagmax)=ncorn+1
                if (ncorn+1.gt.ncornmax) then
                  ncornmax=ncorn+1
                  goto 1111
                endif
                do icorn=1,ncorn
                  bpemag0(1:3,icorn,iplan,nmagmax)=
     &              corn1(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                  write(97,*)"11 ",ireallo,xdiv,nmagmax,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.
                enddo
                ncorn=ncorn+1
                bpemag0(1:3,ncorn,iplan,nmagmax)=
     &            corn1(1:3,1,iplan) !debug 1
              enddo
+self,if=debug.
              close(97)
+self.,if=debug.

              !{ check orientation of planes

              kdmag=nmagmax

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(kdmag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag0(1,icorn,iplan,kdmag)
                  y0=y0+bpemag0(2,icorn,iplan,kdmag)
                  z0=z0+bpemag0(3,icorn,iplan,kdmag)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i
+self,if=debug.
              write(lun6,*)"First piece:",kdmag
+self.
              do iplan=1,nplan

                p1(1)=bpemag0(1,1,iplan,kdmag)
                p1(2)=bpemag0(2,1,iplan,kdmag)
                p1(3)=bpemag0(3,1,iplan,kdmag)

                p2(1)=bpemag0(1,2,iplan,kdmag)
                p2(2)=bpemag0(2,2,iplan,kdmag)
                p2(3)=bpemag0(3,2,iplan,kdmag)

                p3(1)=bpemag0(1,3,iplan,kdmag)
                p3(2)=bpemag0(2,3,iplan,kdmag)
                p3(3)=bpemag0(3,3,iplan,kdmag)

                call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)

                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 1 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              kdmag,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag0(1,1,iplan,kdmag)-x0
                vsy=bpemag0(2,1,iplan,kdmag)-y0
                vsz=bpemag0(3,1,iplan,kdmag)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag0(1:3,icorn,iplan,kdmag)
                  enddo

                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

              ! Second piece

              nmagmax=nmagmax+1
+self,if=debug.
              write(lun6,*)"Second piece:",nmagmax
+self.

              bpebc(15,nmagmax)=bpebc15
              mothdiv(1,nmagmax)=bpebc15

              mothdiv(2,nmagmax)=ixdiv+1

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(9,nmagmax)=bc9
              bpebc(10,nmagmax)=bc10

              bpebc0(1,nmagmax)=x02(2)
              bpebc0(2,nmagmax)=y02(2)
              bpebc0(3,nmagmax)=z02(2)

              bpebc0(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn2(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              if (nplan.gt.nplanmax) then
                nplanmax=nplan
                goto 1111
              endif

              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan
              ibpecol(nmagmax)=ncol

+self,if=debug.
              open(unit=97,access='append')
+self.,if=debug.
              do iplan=1,nplan
                ncorn=ncorn2(iplan)
                if (ncorn+1.gt.ncornmax) then
                  ncornmax=ncorn+1
                  goto 1111
                endif
                ibpecorn(iplan,nmagmax)=ncorn+1
                do icorn=1,ncorn
                  bpemag0(1:3,icorn,iplan,nmagmax)=
     &              corn2(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                  write(97,*)"22 ",ireallo,xdiv,nmagmax,iplan,icorn,
     &              sngl(corn2(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.
                enddo
                ncorn=ncorn+1
                bpemag0(1:3,ncorn,iplan,nmagmax)=
     &            corn2(1:3,1,iplan) !debug 1
              enddo
+self,if=debug.
              close(97)
+self.,if=debug.

              ncorn1=0
              corn1=0.0d0
              ncorn1=ncorn2
              corn1=corn2

              !{ check orientation of planes

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(nmagmax)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,nmagmax)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag0(1,icorn,iplan,nmagmax)
                  y0=y0+bpemag0(2,icorn,iplan,nmagmax)
                  z0=z0+bpemag0(3,icorn,iplan,nmagmax)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i

              do iplan=1,nplan

                p1(1)=bpemag0(1,1,iplan,nmagmax)
                p1(2)=bpemag0(2,1,iplan,nmagmax)
                p1(3)=bpemag0(3,1,iplan,nmagmax)

                p2(1)=bpemag0(1,2,iplan,nmagmax)
                p2(2)=bpemag0(2,2,iplan,nmagmax)
                p2(3)=bpemag0(3,2,iplan,nmagmax)

                p3(1)=bpemag0(1,3,iplan,nmagmax)
                p3(2)=bpemag0(2,3,iplan,nmagmax)
                p3(3)=bpemag0(3,3,iplan,nmagmax)

                call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 2 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              nmagmax,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag0(1,1,iplan,nmagmax)-x0
                vsy=bpemag0(2,1,iplan,nmagmax)-y0
                vsz=bpemag0(3,1,iplan,nmagmax)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag0(1:3,icorn,iplan,nmagmax)
                  enddo

                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

            endif !cut

          enddo !nxdiv

          dydiv=(ydivmax-ydivmin)/fracsum*yfacdiv
c          dydiv=(ydivmax-ydivmin)/nydiv

          do kdmag1=nmagmax-nxdiv+1,nmagmax

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            ydivmin=1.0d30
            ydivmax=-1.0d30
+self,if=debug.
            open(unit=97,access='append')
+self.,if=debug.
            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag0(1:3,icorn,iplan,kdmag1)
+self,if=debug.
                  !w97
                write(97,*)"-9999. ",ireallo," -9999. ",kdmag1,iplan,icorn,
     &            sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag1))
+self.
                if (corn1(2,icorn,iplan).lt.ydivmin)
     &            ydivmin=corn1(2,icorn,iplan)
                if (corn1(2,icorn,iplan).gt.ydivmax)
     &            ydivmax=corn1(2,icorn,iplan)
              enddo
            enddo
+self,if=debug.
            close(97)
+self.,if=debug.

            dydiv=(ydivmax-ydivmin)/fracsum*yfacdiv
            ydiv=bpebc0(2,kdmag1)+ydivmin
c            ydiv=bpebc0(2,kdmag1)+ydivmax

            x02(2)=bpebc0(1,kdmag1)
            y02(2)=bpebc0(2,kdmag1)
            z02(2)=bpebc0(3,kdmag1)
cdebug iydiv 1
            do iydiv=1,nydiv-1

              if (iydiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              ydiv=ydiv+dydiv
c              ydiv=ydiv-dydiv

              !Labor
              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

c              if (ireallo.eq.4.and.kdmag.eq.4) then
+self,if=debug.
              write(lun6,*)"ireallo, iydiv, ydiv:",ireallo,iydiv,ydiv
              open(unit=97,access='append')
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)
                do icorn=1,ncorn
                  !w97
                  write(97,*)"0 ",ireallo,ydiv,kdmag,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag))
                enddo
              enddo
c              endif
              close(97)
+self.

              call undumag_cut_magnet(kdmag,x02,y02,z02, !debug 2
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,2,ydiv,hulltiny,ifail)

              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, iydiv, ydiv:",
     &            ifail,kdmag,iydiv,ydiv
                stop
              endif

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut

+self,if=debug.
                write(lun6,*)"y-cut for magnet:",kdmag
+self.
                ncutpiece=ncutpiece+1

                ! First piece, replaces mother

                bpebc(15,kdmag)=bpebc15
                mothdiv(1,kdmag)=bpebc15
                mothdiv(3,kdmag)=iydiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(9,kdmag)=bc9
                bpebc(10,kdmag)=bc10

                bpebc0(1,kdmag)=x02(1)
                bpebc0(2,kdmag)=y02(1)
                bpebc0(3,kdmag)=z02(1)

                bpebc0(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

+self,if=debug.
                open(unit=97,access='append')
+self.,if=debug.
                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                    write(97,*)"1 ",ireallo,ydiv,kdmag,iplan,icorn,
     &                sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag))
+self.
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 2
                enddo
+self,if=debug.
                close(97)
+self.,if=debug.

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(kdmag)
                  do icorn=1,ibpecorn(iplan,kdmag)-1
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,kdmag)
                    y0=y0+bpemag0(2,icorn,iplan,kdmag)
                    z0=z0+bpemag0(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag0(1,1,iplan,kdmag)
                  p1(2)=bpemag0(2,1,iplan,kdmag)
                  p1(3)=bpemag0(3,1,iplan,kdmag)

                  p2(1)=bpemag0(1,2,iplan,kdmag)
                  p2(2)=bpemag0(2,2,iplan,kdmag)
                  p2(3)=bpemag0(3,2,iplan,kdmag)

                  p3(1)=bpemag0(1,3,iplan,kdmag)
                  p3(2)=bpemag0(2,3,iplan,kdmag)
                  p3(3)=bpemag0(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)

                  if (ifail.ne.0) then
                    write(lun6,*)
                    write(lun6,*)"*** Error 3 in undumag_ini_old: Failure in undumag_bpen"
                    write(lun6,*)"mag, plane:",kdmag,iplan
                    write(lun6,*)
                    do icorn=1,ibpecorn(iplan,kdmag)
                      write(lun6,*)icorn,bpemag0(1:3,icorn,iplan,kdmag)
                    enddo
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,kdmag)-x0
                  vsy=bpemag0(2,1,iplan,kdmag)-y0
                  vsz=bpemag0(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                   bpemag0(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
                write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15
                mothdiv(3,nmagmax)=iydiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc0(1,nmagmax)=x02(2)
                bpebc0(2,nmagmax)=y02(2)
                bpebc0(3,nmagmax)=z02(2)

                bpebc0(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

+self,if=debug.
                open(unit=97,access='append')
+self.,if=debug.
                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                    write(97,*)"2 ",ireallo,ydiv,kdmag,iplan,icorn,
     &                sngl(corn2(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 2
                enddo
+self,if=debug.
                close(97)
+self.,if=debug.

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(nmagmax)
                  do icorn=1,ibpecorn(iplan,nmagmax)-1
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag0(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag0(3,icorn,iplan,nmagmax)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag0(1,1,iplan,nmagmax)
                  p1(2)=bpemag0(2,1,iplan,nmagmax)
                  p1(3)=bpemag0(3,1,iplan,nmagmax)

                  p2(1)=bpemag0(1,2,iplan,nmagmax)
                  p2(2)=bpemag0(2,2,iplan,nmagmax)
                  p2(3)=bpemag0(3,2,iplan,nmagmax)

                  p3(1)=bpemag0(1,3,iplan,nmagmax)
                  p3(2)=bpemag0(2,3,iplan,nmagmax)
                  p3(3)=bpemag0(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 4 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,nmagmax)-x0
                  vsy=bpemag0(2,1,iplan,nmagmax)-y0
                  vsz=bpemag0(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag0(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ydivmin=1.0d30
                ydivmax=-1.0d30
                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(2,icorn,iplan).lt.ydivmin)
     &                ydivmin=corn1(2,icorn,iplan)
                    if (corn1(2,icorn,iplan).gt.ydivmax)
     &                ydivmax=corn1(2,icorn,iplan)
                  enddo
                enddo

              endif !cut

              dydiv=dydiv/yfracdiv

            enddo !nydiv

          enddo !kdmag1

          dzdiv=(zdivmax-zdivmin)/nzdiv

          do kdmag1=nmagmax-nxdiv*nydiv+1,nmagmax

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            zdivmin=1.0d30
            zdivmax=-1.0d30
            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag0(1:3,icorn,iplan,kdmag1)
c                write(lun6,*)kdmag1,icorn,iplan,corn1(1:3,icorn,iplan)
                if (corn1(3,icorn,iplan).lt.zdivmin)
     &            zdivmin=corn1(3,icorn,iplan)
                if (corn1(3,icorn,iplan).gt.zdivmax)
     &            zdivmax=corn1(3,icorn,iplan)
              enddo
            enddo

            zdiv=bpebc0(3,kdmag1)+zdivmin

            x02(2)=bpebc0(1,kdmag1)
            y02(2)=bpebc0(2,kdmag1)
            z02(2)=bpebc0(3,kdmag1)

cdebug izdiv 1
            do izdiv=1,nzdiv-1

              if (izdiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              zdiv=zdiv+dzdiv

              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

              call undumag_cut_magnet(kdmag,x02,y02,z02, !debug 3
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,3,zdiv,hulltiny,ifail)

              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, ixdiv, iydiv, izdiv, zdiv:",
     &            ifail,kdmag,ixdiv,iydiv,izdiv
                stop
              endif
c              write(lun6,*)"Nachher:",z02

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut

                ncutpiece=ncutpiece+1
+self,if=debug.
                write(lun6,*)"z-cut for magnet:",kdmag
+self.

                ! First piece, replaces mother

                bpebc(15,kdmag)=bpebc15
                mothdiv(1,kdmag)=bpebc15
                mothdiv(4,kdmag)=izdiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(9,kdmag)=bc9
                bpebc(10,kdmag)=bc10

                bpebc0(1,kdmag)=x02(1)
                bpebc0(2,kdmag)=y02(1)
                bpebc0(3,kdmag)=z02(1)

                bpebc0(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 3
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(kdmag)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,kdmag)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,kdmag)
                    y0=y0+bpemag0(2,icorn,iplan,kdmag)
                    z0=z0+bpemag0(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag0(1,1,iplan,kdmag)
                  p1(2)=bpemag0(2,1,iplan,kdmag)
                  p1(3)=bpemag0(3,1,iplan,kdmag)

                  p2(1)=bpemag0(1,2,iplan,kdmag)
                  p2(2)=bpemag0(2,2,iplan,kdmag)
                  p2(3)=bpemag0(3,2,iplan,kdmag)

                  p3(1)=bpemag0(1,3,iplan,kdmag)
                  p3(2)=bpemag0(2,3,iplan,kdmag)
                  p3(3)=bpemag0(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 5 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                kdmag,iplan
                    write(lun6,*)"icorn,x,y,z:"
                    do icorn=1,ibpecorn(iplan,kdmag)
                      write(lun6,*)icorn,bpemag0(1:3,icorn,iplan,kdmag)
                    enddo
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,kdmag)-x0
                  vsy=bpemag0(2,1,iplan,kdmag)-y0
                  vsz=bpemag0(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag0(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
                write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15
                mothdiv(4,nmagmax)=izdiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc0(1,nmagmax)=x02(2)
                bpebc0(2,nmagmax)=y02(2)
                bpebc0(3,nmagmax)=z02(2)

                bpebc0(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 3
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(nmagmax)
                  do icorn=1,ibpecorn(iplan,nmagmax)-1
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag0(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag0(3,icorn,iplan,nmagmax)
c                    write(37,*)"3 ",nmagmax,iplan,icorn,
c     &                sngl(bpemag0(1,icorn,iplan,nmagmax)+bpebc0(1,nmagmax)),
c     &                sngl(bpemag0(2,icorn,iplan,nmagmax)+bpebc0(2,nmagmax)),
c     &                sngl(bpemag0(3,icorn,iplan,nmagmax)+bpebc0(3,nmagmax))
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag0(1,1,iplan,nmagmax)
                  p1(2)=bpemag0(2,1,iplan,nmagmax)
                  p1(3)=bpemag0(3,1,iplan,nmagmax)

                  p2(1)=bpemag0(1,2,iplan,nmagmax)
                  p2(2)=bpemag0(2,2,iplan,nmagmax)
                  p2(3)=bpemag0(3,2,iplan,nmagmax)

                  p3(1)=bpemag0(1,3,iplan,nmagmax)
                  p3(2)=bpemag0(2,3,iplan,nmagmax)
                  p3(3)=bpemag0(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 6 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,nmagmax)-x0
                  vsy=bpemag0(2,1,iplan,nmagmax)-y0
                  vsz=bpemag0(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag0(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                zdivmin=1.0d30
                zdivmax=-1.0d30
                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(3,icorn,iplan).lt.zdivmin)
     &                zdivmin=corn1(3,icorn,iplan)
                    if (corn1(3,icorn,iplan).gt.zdivmax)
     &                zdivmax=corn1(3,icorn,iplan)
                  enddo
                enddo

              endif !cut

            enddo !nzdiv

          enddo !kdmag1

        else if (nplan.eq.-11) then

          ncorn=4
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          ncorn=ncorn+1

          if (nang.lt.nangmin) nang=nangmin
          if (nr.lt.1) nr=1
          if (nh.lt.1) nh=1

! cyl magnet, i.e. nplan=-11{

          kcyl=kcyl+1
          magcyl(kcyl,1)=nmagmax

          if (radin.lt.tiny) radin=tiny

          x00=bpebc0(1,nmagmax)
          y00=bpebc0(2,nmagmax)
          z00=bpebc0(3,nmagmax)

          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)

          ip=0
          dphi=angle/nang*grarad1
          dr=(radout-radin)/nr
          dh=height/nh
          r=radin
          do ir=1,2
            h=-height/2.0d0
            do ih=1,2
              phi=-angle/2.0d0*grarad1
              do iphi=1,2
                ip=ip+1
                x1=r*sin(phi)
                y1=h
                z1=r*cos(phi)
                xmoth(ip,nmoth)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1+x00
                ymoth(ip,nmoth)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1+y00
                zmoth(ip,nmoth)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1+z00
                phi=angle/2.0d0*grarad1
              enddo
              h=height/2.0d0
            enddo
            r=radout
          enddo

          jplan=ibpeplano(nmagmax)

          if (ihullallo.eq.0) then
            maxpoints=8
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else
            if (maxpoints.lt.8) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
              maxpoints=8
              allocate(hull(3,maxpoints))
              allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
              allocate(khull(maxpoints))
              allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            endif
          endif

          r=radin+dr/2.0d0
          do ir=1,nr
            h=-height/2.0d0+dh/2.0d0
            do ih=1,nh
              phi=-angle/2.0d0*grarad1+dphi/2.0d0
              do iphi=1,nang

                x0=r*sin(phi)
                y0=h
                z0=r*cos(phi)

                ri=r-dr/2.0d0
                ro=r+dr/2.0d0

                y1=y0-dh/2.0d0
                y2=y0+dh/2.0d0

                x1=ri*sin(phi-dphi/2.0d0)
                z1=ri*cos(phi-dphi/2.0d0)
                x2=ro*sin(phi-dphi/2.0d0)
                z2=ro*cos(phi-dphi/2.0d0)
                x3=ro*sin(phi+dphi/2.0d0)
                z3=ro*cos(phi+dphi/2.0d0)
                x4=ri*sin(phi+dphi/2.0d0)
                z4=ri*cos(phi+dphi/2.0d0)

                xhull(1)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                yhull(1)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                zhull(1)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                xhull(2)=rmat(1,1)*x2+rmat(1,2)*y1+rmat(1,3)*z2
                yhull(2)=rmat(2,1)*x2+rmat(2,2)*y1+rmat(2,3)*z2
                zhull(2)=rmat(3,1)*x2+rmat(3,2)*y1+rmat(3,3)*z2

                xhull(3)=rmat(1,1)*x3+rmat(1,2)*y1+rmat(1,3)*z3
                yhull(3)=rmat(2,1)*x3+rmat(2,2)*y1+rmat(2,3)*z3
                zhull(3)=rmat(3,1)*x3+rmat(3,2)*y1+rmat(3,3)*z3

                xhull(4)=rmat(1,1)*x4+rmat(1,2)*y1+rmat(1,3)*z4
                yhull(4)=rmat(2,1)*x4+rmat(2,2)*y1+rmat(2,3)*z4
                zhull(4)=rmat(3,1)*x4+rmat(3,2)*y1+rmat(3,3)*z4

                xhull(5)=rmat(1,1)*x1+rmat(1,2)*y2+rmat(1,3)*z1
                yhull(5)=rmat(2,1)*x1+rmat(2,2)*y2+rmat(2,3)*z1
                zhull(5)=rmat(3,1)*x1+rmat(3,2)*y2+rmat(3,3)*z1

                xhull(6)=rmat(1,1)*x2+rmat(1,2)*y2+rmat(1,3)*z2
                yhull(6)=rmat(2,1)*x2+rmat(2,2)*y2+rmat(2,3)*z2
                zhull(6)=rmat(3,1)*x2+rmat(3,2)*y2+rmat(3,3)*z2

                xhull(7)=rmat(1,1)*x3+rmat(1,2)*y2+rmat(1,3)*z3
                yhull(7)=rmat(2,1)*x3+rmat(2,2)*y2+rmat(2,3)*z3
                zhull(7)=rmat(3,1)*x3+rmat(3,2)*y2+rmat(3,3)*z3

                xhull(8)=rmat(1,1)*x4+rmat(1,2)*y2+rmat(1,3)*z4
                yhull(8)=rmat(2,1)*x4+rmat(2,2)*y2+rmat(2,3)*z4
                zhull(8)=rmat(3,1)*x4+rmat(3,2)*y2+rmat(3,3)*z4

                npoi=8
                call util_convex_hull_3d(npoi,xhull,yhull,zhull,
     &            khull,kedge,kface,
     &            nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
                if (ifailhull.ne.0.or.nhull.lt.4) then
                  write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &              trim(cline)
                  stop
                endif

                ibpeplano(nmagmax)=nface
                ibpeplan(nmagmax)=nface

                next=1

                gcen=0.0d0
                k=0
                do iplan=1,nface

                  ncorn=kface(next)

                  ncorn=ncorn+1
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn

                    if (icorn.lt.ncorn) then
                      ip=kface(next+icorn)
                      bpemag0(1,icorn,iplan,nmagmax)=xhull(ip)+x00
                      bpemag0(2,icorn,iplan,nmagmax)=yhull(ip)+y00
                      bpemag0(3,icorn,iplan,nmagmax)=zhull(ip)+z00

                      k=k+1
                      gcen(1)=gcen(1)+xhull(ip)+x00
                      gcen(2)=gcen(2)+yhull(ip)+y00
                      gcen(3)=gcen(3)+zhull(ip)+z00

c                      write(99,*)nmagmax,iplan,icorn,bpemag0(1:3,icorn,iplan,nmagmax)
                    else ! icorn.lt.ncorn

                      bpemag0(1,icorn,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                      bpemag0(2,icorn,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                      bpemag0(3,icorn,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)

                    endif ! icorn.lt.ncorn

                  enddo !icorn

                  next=next+ncorn ! here, ncorn is already increamented by 1

                enddo !nface

                gcen=gcen/k

               do iplan=1,nface
                 ncorn=ibpecorn(iplan,nmagmax)
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                bpemag0(1:3,icorn,iplan,nmagmax)-gcen(1:3)
                  enddo !icorn
                enddo !nface

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15

                mothdiv(2,nmagmax)=ir
                mothdiv(3,nmagmax)=iy
                mothdiv(4,nmagmax)=iphi

                c32=chmag
                write(chmags(1:32,nmagmax),'(a)')c32a(1:32)
                c32=chmoth
                write(chmoths(1:32,nmagmax),'(a)')c32a(1:32)

                bpebc(9,nmagmax)=imat
                bpebc(10,nmagmax)=0

                ibpeplano(nmagmax)=jplan

                bpebc0(1:3,nmagmax)=gcen(1:3)

                x1=xm*bdum
                y1=ym*bdum
                z1=zm*bdum

                bpebc0(4,nmagmax)=
     &            rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                bpebc0(5,nmagmax)=
     &            rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                bpebc0(6,nmagmax)=
     &            rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                bpebc0(7,nmagmax)=1
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                phi=phi+dphi

                nmagmax=nmagmax+1
              enddo
              h=h+dh
            enddo !ih
            r=r+dr
          enddo !ir

          nmagmax=nmagmax-1
          magcyl(kcyl,2)=nmagmax
          ncutpiece=ncutpiece+nr*nang*nh

! cyl magnet, i.e. nplan=-11}

        else ! :nplan>0

! rectangular magnet, i.e. nplan=-6{

          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*,iostat=ieof) xlen,ylen,zlen, nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif

cdebug
          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)
          xmoth(1,nmoth)=x00-xlen/2.0d0
          ymoth(1,nmoth)=y00-ylen/2.0d0
          zmoth(1,nmoth)=z00-zlen/2.0d0

          xmoth(2,nmoth)=x00+xlen/2.0d0
          ymoth(2,nmoth)=y00-ylen/2.0d0
          zmoth(2,nmoth)=z00-zlen/2.0d0

          xmoth(3,nmoth)=x00+xlen/2.0d0
          ymoth(3,nmoth)=y00+ylen/2.0d0
          zmoth(3,nmoth)=z00-zlen/2.0d0

          xmoth(4,nmoth)=x00-xlen/2.0d0
          ymoth(4,nmoth)=y00+ylen/2.0d0
          zmoth(4,nmoth)=z00-zlen/2.0d0

          xmoth(5,nmoth)=x00-xlen/2.0d0
          ymoth(5,nmoth)=y00-ylen/2.0d0
          zmoth(5,nmoth)=z00+zlen/2.0d0

          xmoth(6,nmoth)=x00+xlen/2.0d0
          ymoth(6,nmoth)=y00-ylen/2.0d0
          zmoth(6,nmoth)=z00+zlen/2.0d0

          xmoth(7,nmoth)=x00+xlen/2.0d0
          ymoth(7,nmoth)=y00+ylen/2.0d0
          zmoth(7,nmoth)=z00+zlen/2.0d0

          xmoth(8,nmoth)=x00-xlen/2.0d0
          ymoth(8,nmoth)=y00+ylen/2.0d0
          zmoth(8,nmoth)=z00+zlen/2.0d0

          nmag=nmag+nxdiv*nydiv*nzdiv-1
          kmag2=kmag2+nxdiv*nydiv*nzdiv-1

          dx=xlen/nxdiv

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          dz=zlen/nzdiv

          x00=bpebc0(1,nmagmax)-xlen/2.0d0-dx/2.0d0
          y00=bpebc0(2,nmagmax)+ylen/2.0d0
          z00=bpebc0(3,nmagmax)-zlen/2.0d0-dz/2.0d0

          jplan=ibpeplano(nmagmax)

          nmagmax=nmagmax-1

          ncutpiece=ncutpiece+1
cdebug ixdiv 2
          do ixdiv=1,nxdiv
            x0=x00+dx*ixdiv
            y0=y00
            dy=ylen/fracsum
cdebug iydiv 2
            do iydiv=1,nydiv

              y0=y0-dy/2.0d0

cdebug izdiv 2
              do izdiv=1,nzdiv

                z0=z00+dz*izdiv

                nmagmax=nmagmax+1
                ncutpiece=ncutpiece+1

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15

                mothdiv(2,nmagmax)=ixdiv
                mothdiv(3,nmagmax)=iydiv
                mothdiv(4,nmagmax)=izdiv

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=imat
                bpebc(10,nmagmax)=0

                ibpeplano(nmagmax)=jplan

                bpebc0(1,nmagmax)=x0
                bpebc0(2,nmagmax)=y0
                bpebc0(3,nmagmax)=z0

                bpebc0(4,nmagmax)=xm*bdum
                bpebc0(5,nmagmax)=ym*bdum
                bpebc0(6,nmagmax)=zm*bdum

                bpebc0(7,nmagmax)=-6
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                iplan=1
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=2
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=3
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=4
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=5
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=6
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0

                do iplan=1,6
                  bpemag0(1,5,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,5,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,5,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)
                enddo !iplan

                do iplan=1,6
                  bpemag0(1,5,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,5,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,5,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)
                enddo !iplan

              enddo !nzdiv

              y0=y0-dy/2.0d0
              dy=dy*yfracdiv

            enddo !nydiv
          enddo !nxdiv
! rectangular magnet, i.e. nplan=-6}

        endif !nplan>0

        if (ncutpiece.lt.nmagmax) then
          nmagmax=ncutpiece
          nmag=ncutpiece
        endif

      enddo !nmagdo

      kmag2=nmagmax

      call util_skip_comment_end(lunbpe,ieof)
      if (ieof.eq.0) then
        read(lunbpe,*)x0,y0,z0
      endif

      if (nmago.eq.-99) then
        close(lunbpe)
        lunbpe=98
      endif !nmago

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*)nmodule

      if (nmodule.le.0) then
        write(lun6,*)'*** Error in undumag_ini_old: Number of modules is zero'
        stop
      endif

c      nmagmax=nmagmaxo-nmag*ncopy
      nmagmax=nmagmaxo-ncopies
      nmoth=0

      chmothso=chmoths
      do imodul=1,nmodule

        write(chmod,*)imodul
        call util_string_trim(chmod,i1mod,i2mod)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)xmod,ymod,zmod

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(1,1),rotmod(1,2),rotmod(1,3)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(2,1),rotmod(2,2),rotmod(2,3)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(3,1),rotmod(3,2),rotmod(3,3)

        call util_determinante(3,rotmod,det,ifail)

        if (ifail.ne.0.or.abs(abs(det)-1.0d0).gt.tiny) then
          write(lun6,*)
     &      '*** Error in undumag_ini_old: Bad rotation matrix'
          write(lun6,*)'magnet, plane: ',imag,iplan
          stop
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)ncopy

        call util_skip_comment_end(lunbpe,ieof)

        read(lunbpe,*)space,vspace(1),vspace(2),vspace(3)

        call util_vnorm(3,vspace,vspace)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)vbsym(1),vbsym(2),vbsym(3)

        do icopy=1,ncopy

          write(chcop,*)icopy
          call util_string_trim(chcop,i1cop,i2cop)

          do moth=1,nmotho

            nmoth=nmoth+1
            chmoths(1:32,nmoth)=chmothso(1:32,moth)
c            write(lun6,*)imodul,icopy,moth,chmoths(1:32,4)

            npmoth(nmoth)=npmoth(moth)
            matmoth(nmoth)=matmoth(moth)
            ncolmoth(nmoth)=ncolmoth(moth)
            xmoth(1:npmoth(nmoth),nmoth)=xmoth(1:npmoth(moth),moth)
     &        +(icopy-1)*space*vspace(1)
            ymoth(1:npmoth(nmoth),nmoth)=ymoth(1:npmoth(moth),moth)
     &        +(icopy-1)*space*vspace(2)
            zmoth(1:npmoth(nmoth),nmoth)=zmoth(1:npmoth(moth),moth)
     &        +(icopy-1)*space*vspace(3)

          enddo
        enddo !ncopy

        do icopy=1,ncopy

          write(chcop,*)icopy
          call util_string_trim(chcop,i1cop,i2cop)

          do imag=kmag1,kmag2

            nmagmax=nmagmax+1

            ibpecol(nmagmax)=ibpecol(imag)
            ibpeplan(nmagmax)=ibpeplan(imag)
            ibpeplano(nmagmax)=ibpeplano(imag)

            x0=xmod+bpebc0(1,imag)
     &        +(icopy-1)*space*vspace(1)
            y0=ymod+bpebc0(2,imag)
     &        +(icopy-1)*space*vspace(2)
            z0=zmod+bpebc0(3,imag)
     &        +(icopy-1)*space*vspace(3)

            bpebc(1,nmagmax)=x0
            bpebc(2,nmagmax)=y0
            bpebc(3,nmagmax)=z0

            bpebc(4,nmagmax)=bpebc0(4,imag)*vbsym(1)
            bpebc(5,nmagmax)=bpebc0(5,imag)*vbsym(2)
            bpebc(6,nmagmax)=bpebc0(6,imag)*vbsym(3)

            bc=sqrt(bpebc(4,imag)**2+bpebc(5,imag)**2+bpebc(6,imag)**2)
            bpebc(7,nmagmax)=bc

            bpebc(8,nmagmax)=bpebc0(7,imag)
            bpebc15=bpebc(15,imag)

            mothdiv(1:4,nmagmax)=mothdiv(1:4,imag)

            motho=nint(bpebc15)
            moth=nint(bpebc15)
            if (icopy.gt.1) moth=nmotho+(imodul-1)*ncopy+icopy-1
c            moth=nmotho+(imodul-1)*ncopy+icopy-1
c            write(lun6,*)imag,nmagmax,motho,moth

c            if (icopy.gt.1) then
            do ic=1,32
              chmoth(ic:ic)=chmothso(ic,motho)
            enddo
c              write(lun6,*)chmoth
c              write(lun6,*)chmod
c              write(lun6,*)chcop
            call util_string_trim(chmoth,i1moth,i2moth)
            if (i2moth-i1moth+1+i2cop-i1cop+1+i2mod-i1mod+1+2.gt.32) then
              write(lun6,*)
              write(lun6,*)"*** Error in undumag_ini_old: Too long a magnet name: ",
     &          chmoth
              write(lun6,*)"UNDUMAG ABORTED"
              stop
            endif

            if (bpebc(15,nmagmax).eq.0) then
              bpebc(15,nmagmax)=nmagmax
            endif

            if (icopy.gt.1) then
              chmoth=chmoth(i1moth:i2moth)//"_"//chmod(i1mod:i2mod)//
     &          "_"//chcop(i1cop:i2cop)
              do ic=1,32
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo
            else
              chmoths(1:32,nmagmax)=chmothso(1:32,moth)
            endif

            chmags(1:32,nmagmax)=chmags(1:32,imag)

            bpebc(9,nmagmax)=bpebc(9,imag)
            bpebc(10,nmagmax)=0

            vmag=bpebc(1:3,nmagmax)

            bpebc(1,nmagmax)=
     &        rotmod(1,1)*vmag(1)+
     &        rotmod(1,2)*vmag(2)+
     &        rotmod(1,3)*vmag(3)

            bpebc(2,nmagmax)=
     &        rotmod(2,1)*vmag(1)+
     &        rotmod(2,2)*vmag(2)+
     &        rotmod(2,3)*vmag(3)

            bpebc(3,nmagmax)=
     &        rotmod(3,1)*vmag(1)+
     &        rotmod(3,2)*vmag(2)+
     &        rotmod(3,3)*vmag(3)

            do iplan=1,ibpeplan(nmagmax)

              ibpecorn(iplan,nmagmax)=ibpecorn(iplan,imag)

              do icorn=1,ibpecorn(iplan,nmagmax)

                bpemag(1,icorn,iplan,nmagmax)=x0+
     &            bpemag0(1,icorn,iplan,imag)
                bpemag(2,icorn,iplan,nmagmax)=y0+
     &            bpemag0(2,icorn,iplan,imag)
                bpemag(3,icorn,iplan,nmagmax)=z0+
     &            bpemag0(3,icorn,iplan,imag)

c rotation of magnet

                vcorn(1:3)=bpemag(1:3,icorn,iplan,nmagmax)

                bpemag(1,icorn,iplan,nmagmax)=
     &            rotmod(1,1)*vcorn(1)+
     &            rotmod(1,2)*vcorn(2)+
     &            rotmod(1,3)*vcorn(3)

                bpemag(2,icorn,iplan,nmagmax)=
     &            rotmod(2,1)*vcorn(1)+
     &            rotmod(2,2)*vcorn(2)+
     &            rotmod(2,3)*vcorn(3)

                bpemag(3,icorn,iplan,nmagmax)=
     &            rotmod(3,1)*vcorn(1)+
     &            rotmod(3,2)*vcorn(2)+
     &            rotmod(3,3)*vcorn(3)

                vcorn(1:3)=bpemag(1:3,icorn,iplan,nmagmax)

                if (bc.ne.0.0d0.and.vcorn(1).lt.xmin) xmin=vcorn(1)
                if (bc.ne.0.0d0.and.vcorn(1).gt.xmax) xmax=vcorn(1)
                if (bc.ne.0.0d0.and.vcorn(2).lt.ymin) ymin=vcorn(2)
                if (bc.ne.0.0d0.and.vcorn(2).gt.ymax) ymax=vcorn(2)
                if (bc.ne.0.0d0.and.vcorn(3).lt.zmin) zmin=vcorn(3)
                if (bc.ne.0.0d0.and.vcorn(3).gt.zmax) zmax=vcorn(3)

              enddo !icorn

              if (det.lt.0.0d0) then

                do icorn=1,ibpecorn(iplan,nmagmax)
                  ip1=ibpecorn(iplan,nmagmax)-icorn+1
                  shuffle(1,ip1,iplan,nmagmax)=bpemag(1,icorn,iplan,nmagmax)
                  shuffle(2,ip1,iplan,nmagmax)=bpemag(2,icorn,iplan,nmagmax)
                  shuffle(3,ip1,iplan,nmagmax)=bpemag(3,icorn,iplan,nmagmax)
                enddo !icorn

                do icorn=1,ibpecorn(iplan,nmagmax)
                  bpemag(1,icorn,iplan,nmagmax)=
     &              shuffle(1,icorn,iplan,nmagmax)
                  bpemag(2,icorn,iplan,nmagmax)=
     &              shuffle(2,icorn,iplan,nmagmax)
                  bpemag(3,icorn,iplan,nmagmax)=
     &              shuffle(3,icorn,iplan,nmagmax)
                enddo !icorn

              endif !det

            enddo !iplan

          enddo !imag

        enddo !icopy

      enddo !imodul=1,nmodul

      nmag=nmagmax !without special magnets

      allocate(bcmat(3,nmatpoimax,nmatfiles))
      bcmat=0.0d0

      allocate(feh1(nmatpoimax))
      allocate(fem1(nmatpoimax))

      if (isplinefm.ne.0) then
        allocate(fespl1(nmatpoimax))
        allocate(ufespl1(nmatpoimax))
        allocate(fewspl1(nmatpoimax))
        allocate(fewspl2(nmatpoimax))
        allocate(fewspl3(nmatpoimax))
        allocate(fewspl4(nmatpoimax))
      endif

      kmag1=nmagmax+1
      kmag2=nmagmax+nspecmag

* Special magnets
cdebug
      do ispecmag=1,nspecmag

        nmoth=nmoth+1

        nmagmax=nmagmax+1
        bpebc(15,nmagmax)=nmagmax
        bpebc15=bpebc(15,nmagmax)
        mothdiv(1,nmagmax)=bpebc15

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)') cline
        call util_string_split_sep(cline,100,nwords,ipos,'!',istat)
        cline=cline(ipos(1,1):ipos(2,1))
        call util_string_split_sep(cline,100,nwords,ipos,' ',istat)

        if (nwords.eq.5) then
          read(cline,*)x00,y00,z00,chmag,chmoth
        else
          read(cline,*)x00,y00,z00
          write(chmag,*) ispecmag
          call util_string_trim(chmag,nfirst,nlast)
          chmag="smag_" // chmag(nfirst:nlast)
          chmoth="sMag_" // chmag(nfirst:nlast)
        endif

        ifound=0
        do kmag=1,nmagmax
          ifound=1
          do ic=1,32
            if (chmags(ic,kmag).ne.chmag(ic:ic)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.1) exit
        enddo

        if (ifound.ne.0) then
          write(lun6,*)"*** Error in undumag_ini_old: Duplicate magnet name: ",chmag
          stop
        endif

        do ic=1,32
           chmags(ic,nmagmax)=chmag(ic:ic)
           chmoths(ic,nmagmax)=chmoth(ic:ic)
        enddo

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)bc,xm,ym,zm,imat !magnetization vector M

        if (imat.eq.0) bc=0.0d0

        bpebc(9,nmagmax)=imat
        bpebc(10,nmagmax)=ispecmag

        bdum=sqrt(xm*xm+ym*ym+zm*zm)

        if (bdum.eq.0.0d0.and.abs(bc).gt.0.01) then
          write(lun6,*)
          write(lun6,*)'*** Error in undumag_ini_old: Bad magnetization vector'
          write(lun6,*)'Magnet ',imag
          write(lun6,*)
          stop
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)')cline

        c64='Cyl'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)

        if (istat.eq.0) then
          !Cylinder
          read(cline(4:len_trim(cline)),*)ncol
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
          if (angle.gt.360.0d0) angle=360.0d0
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(1,1:3)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(2,1:3)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(3,1:3)
          nplan=-11
          if (bc.ne.0.0d0) nmagcyl=nmagcyl+1

        else ! Cyl

          c64='Block'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='File'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
              c64='Corners'
              call util_string_substring(cline,trim(c64),ianf,iend,istat)
              if (istat.ne.0) then
c              c64='Corners'
c              call util_string_substring(cline,trim(c64),ianf,iend,istat)
                read(cline,*)nplan,ncol
              else
                nplan=-10
                cline(ianf:iend)=' -10   '
                read(cline,*)nplan,ncol
              endif
            else
              nplan=-9
              cline(ianf:iend)=' -9 '
            endif
          else
            nplan=-6
            cline(ianf:iend)=' -6  '
          endif

c        call util_skip_comment_end(lunbpe,ieof)
c        read(lunbpe,*)nplan,ncol
          read(cline,*)nplan,ncol

        endif !Cyl

        bdum=bc/bdum

        bpebc0(1,nmagmax)=x00
        bpebc0(2,nmagmax)=y00
        bpebc0(3,nmagmax)=z00

        bpebc0(4,nmagmax)=xm*bdum
        bpebc0(5,nmagmax)=ym*bdum
        bpebc0(6,nmagmax)=zm*bdum

        bpebc0(7,nmagmax)=nplan

        ibpecol(nmagmax)=ncol
        ibpeplano(nmagmax)=nplan
        ibpeplan(nmagmax)=nplan

        if (nplan.gt.0.or.nplan.eq.-9.or.nplan.eq.-10) then

          bpebc(1,nmagmax)=x00
          bpebc(2,nmagmax)=y00
          bpebc(3,nmagmax)=z00

          bpebc(4,nmagmax)=xm*bdum
          bpebc(5,nmagmax)=ym*bdum
          bpebc(6,nmagmax)=zm*bdum

          bpebc(7,nmagmax)=bc
          bpebc(8,nmagmax)=1

c          backspace(lunbpe)
c          read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif

          if (nxdiv.lt.1) nxdiv=1
          if (nydiv.lt.1) nydiv=1
          if (nzdiv.lt.1) nzdiv=1

          nspecmag=nspecmag+nxdiv*nydiv*nzdiv-1
          kmag2=kmag2+nxdiv*nydiv*nzdiv-1

          xdivmin=1.0d30
          xdivmax=-1.0d30
          ydivmin=1.0d30
          ydivmax=-1.0d30
          zdivmin=1.0d30
          zdivmax=-1.0d30

          ncorn1=0
          ncorn2=0

          gcen=0.0d0
          npoi=0

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          if (nplan.gt.0) then
            ! magnet definition by planes

            npoi=0

            do iplan=1,nplan

              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncorn

              ncorn=ncorn+1

              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  call util_skip_comment_end(lunbpe,ieof)
                  read(lunbpe,*)x0,y0,z0

                  bpemag(1,icorn,iplan,nmagmax)=x0
                  bpemag(2,icorn,iplan,nmagmax)=y0
                  bpemag(3,icorn,iplan,nmagmax)=z0

                  npoi=npoi+1

                  xhull(npoi)=x00+x0
                  yhull(npoi)=y00+y0
                  zhull(npoi)=z00+z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                else ! icorn.lt.ncorn

                  bpemag(1,icorn,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,icorn,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,icorn,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

                vcorn(1:3)=bpemag(1:3,icorn,iplan,nmagmax)

              enddo !icorn

              ncorn1(iplan)=ncorn

            enddo !iplan

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            npmoth(nmoth)=nhull
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,nhull
              kpoi=khull(ipoi)
              x0=xhull(kpoi)
              y0=yhull(kpoi)
              z0=zhull(kpoi)
              xmoth(ipoi,nmoth)=x0
              ymoth(ipoi,nmoth)=y0
              zmoth(ipoi,nmoth)=z0
              gcen(1)=gcen(1)+x0
              gcen(2)=gcen(2)+y0
              gcen(3)=gcen(3)+z0
            enddo

            gcen=gcen/nhull

            ibpeplan(nmagmax)=nplan

            do iplan=1,nplan
              ncorn=ncorn1(iplan)
              do icorn=1,ncorn
                bpemag(1:3,icorn,iplan,nmagmax)=bpebc(1:3,nmagmax)+
     &            bpemag(1:3,icorn,iplan,nmagmax)-gcen
                corn1(1:3,icorn,iplan)=bpemag(1:3,icorn,iplan,nmagmax)
              enddo !icorn
            enddo !nplan

            ! sort points such that normal vectors of planes points outside
            call undumag_sortcorn(2*ncornmax,2*nplanmax,
     &        nplan,ncorn1,corn1,corn2,tiny,ifail)

            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_sortcorn for magnet ",nmagmax
              stop
            else
              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                do icorn=1,ncorn
                  bpemag(1:3,icorn,iplan,nmagmax)=corn2(1:3,icorn,iplan)
                enddo !icorn
              enddo !nplan
            endif

          else if (nplan.eq.-9.or.nplan.eq.-10) then
cxxxxxxxxxx

            call util_skip_comment_end(lunbpe,ieof)

            if (nplan.eq.-9) then

              read(lunbpe,*)cline
              open(newunit=lundum,file=trim(cline))

              npoi=0
              last=1
              gcen=0.0d0

              do while (last.gt.0)
                call util_read_line(lundum,cline,last)
                if (last.gt.0) then
                  npoi=npoi+1
                endif
              enddo

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              rewind(lundum)

              do ipoi=1,npoi
                call util_skip_comment_end(lundum,ieof)
                read(lundum,*)hull(1:3,ipoi)
                gcen=gcen+bpebc(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

              close(lundum)

            else if (nplan.eq.-10) then

              read(lunbpe,*)npoi

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              do ipoi=1,npoi
                call util_skip_comment_end(lunbpe,ieof)
                read(lunbpe,*)hull(1:3,ipoi)
                gcen=gcen+bpebc(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

            endif

            xhull(1:npoi)=hull(1,1:npoi)
            yhull(1:npoi)=hull(2,1:npoi)
            zhull(1:npoi)=hull(3,1:npoi)

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            do ipoi=1,nhull
              korn=khull(nhull)
              gcen=gcen+bpebc(1:3,nmagmax)+hull(1:3,ipoi)
            enddo
            gcen=gcen/nhull

c            khull(1:kfacelast)=kface(1:kfacelast)

            bpebc0(7,nmagmax)=nface
            ibpeplano(nmagmax)=nface
            ibpeplan(nmagmax)=nface

            npmoth(nmoth)=npoi
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,npoi
              xmoth(ipoi,nmoth)=bpebc(1,nmagmax)+hull(1,ipoi)
              ymoth(ipoi,nmoth)=bpebc(2,nmagmax)+hull(2,ipoi)
              zmoth(ipoi,nmoth)=bpebc(3,nmagmax)+hull(3,ipoi)
              hull(1:3,ipoi)=bpebc(1:3,nmagmax)+hull(1:3,ipoi)-gcen
            enddo

c            bpebc(1:3,nmagmax)=gcen

            x00=bpebc(1,nmagmax)
            y00=bpebc(2,nmagmax)
            z00=bpebc(3,nmagmax)

            next=1
            do iplan=1,nface

              ncorn=kface(next)

              ncorn=ncorn+1
              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  x0=hull(1,kface(next+icorn))
                  y0=hull(2,kface(next+icorn))
                  z0=hull(3,kface(next+icorn))

                  if (x0.lt.xdivmin) xdivmin=x0
                  if (x0.gt.xdivmax) xdivmax=x0
                  if (y0.lt.ydivmin) ydivmin=y0
                  if (y0.gt.ydivmax) ydivmax=y0
                  if (z0.lt.zdivmin) zdivmin=z0
                  if (z0.gt.zdivmax) zdivmax=z0

                  bpemag(1,icorn,iplan,nmagmax)=x0
                  bpemag(2,icorn,iplan,nmagmax)=y0
                  bpemag(3,icorn,iplan,nmagmax)=z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                  corn1(1,icorn,iplan)=x0
                  corn1(2,icorn,iplan)=y0
                  corn1(3,icorn,iplan)=z0

                else ! icorn.lt.ncorn

                  bpemag(1,icorn,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,icorn,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,icorn,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

              enddo !icorn

              ncorn1(iplan)=ncorn

              next=next+ncorn ! here, ncorn is already increamented by 1

            enddo !nface

            nplan=nface

cxxxxxxxxxxxxxx

          endif !nplan

          x00=gcen(1)
          y00=gcen(2)
          z00=gcen(3)

          bpebc(1:3,nmagmax)=gcen

          do iplan=1,nplan

            ncorn=ncorn1(iplan)

            do icorn=1,ncorn-1

              if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

              x0=bpemag(1,icorn,iplan,nmagmax)
              y0=bpemag(2,icorn,iplan,nmagmax)
              z0=bpemag(3,icorn,iplan,nmagmax)

              if (x0.lt.xdivmin) xdivmin=x0
              if (x0.gt.xdivmax) xdivmax=x0
              if (y0.lt.ydivmin) ydivmin=y0
              if (y0.gt.ydivmax) ydivmax=y0
              if (z0.lt.zdivmin) zdivmin=z0
              if (z0.gt.zdivmax) zdivmax=z0

              corn1(1,icorn,iplan)=x0
              corn1(2,icorn,iplan)=y0
              corn1(3,icorn,iplan)=z0

              write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 1"
c                write(lun6,*)iplan,icorn,sngl(corn1(1:3,icorn,iplan))
            enddo !icorn

          enddo !nplan

          x02(2)=x00
          y02(2)=y00
          z02(2)=z00

          bc04=bpebc(4:7,nmagmax)
          bc8=bpebc(8,nmagmax)
          bc9=bpebc(9,nmagmax)
          bc10=bpebc(10,nmagmax)

          bpebc15=bpebc(15,nmagmax)
          mothdiv(1,nmagmax)=bpebc15

          do ic=1,32
            chmag(ic:ic)=chmags(ic,nmagmax)
            chmoth(ic:ic)=chmoths(ic,nmagmax)
          enddo

          dxdiv=(xdivmax-xdivmin)/nxdiv
          xdiv=bpebc(1,nmagmax)+xdivmin

          ncutpiece=ncutpiece+1
cdebug ixdiv 3
          do ixdiv=1,nxdiv-1

            xdiv=xdiv+dxdiv

            x02(1)=x02(2)
            y02(1)=y02(2)
            z02(1)=z02(2)

            call undumag_cut_magnet(nmagmax,x02,y02,z02, !debug 4
     &        2*nplanmax,2*ncornmax,
     &        ncorn1,corn1,ncorn2,corn2
     &        ,1,xdiv,hulltiny,ifail)
            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, ixdiv, xdiv:",
     &          ifail, nmagmax,ixdiv,xdiv
              stop
            endif

c?            nmagmax=nmagmax-1

c            ncutpiece=ncutpiece+1
            if (ncorn2(1).gt.0) then
              ! Magnet has been cut

              ! First piece
              ncutpiece=ncutpiece+1

c?              nmagmax=nmagmax+1

              bpebc(8,nmagmax)=bc8
              bpebc(15,nmagmax)=bpebc15

              mothdiv(1,nmagmax)=bpebc15
              mothdiv(2,nmagmax)=ixdiv

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(9,nmagmax)=bc9
              bpebc(10,nmagmax)=bc10

              bpebc(1,nmagmax)=x02(1)
              bpebc(2,nmagmax)=y02(1)
              bpebc(3,nmagmax)=z02(1)

              bpebc(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn1(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              ibpecol(nmagmax)=ncol
              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan

              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                ibpecorn(iplan,nmagmax)=ncorn+1
                do icorn=1,ncorn
                  bpemag(1:3,icorn,iplan,nmagmax)=
     &              corn1(1:3,icorn,iplan)
                enddo
                ncorn=ncorn+1
                bpemag(1:3,ncorn,iplan,nmagmax)=
     &            corn1(1:3,1,iplan) !debug 4
              enddo

              !{ check orientation of planes

              kdmag=nmagmax

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(kdmag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag(1,icorn,iplan,kdmag)
                  y0=y0+bpemag(2,icorn,iplan,kdmag)
                  z0=z0+bpemag(3,icorn,iplan,kdmag)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i

              do iplan=1,ibpeplan(kdmag)

                p1(1)=bpemag(1,1,iplan,kdmag)
                p1(2)=bpemag(2,1,iplan,kdmag)
                p1(3)=bpemag(3,1,iplan,kdmag)

                p2(1)=bpemag(1,2,iplan,kdmag)
                p2(2)=bpemag(2,2,iplan,kdmag)
                p2(3)=bpemag(3,2,iplan,kdmag)

                p3(1)=bpemag(1,3,iplan,kdmag)
                p3(2)=bpemag(2,3,iplan,kdmag)
                p3(3)=bpemag(3,3,iplan,kdmag)

                call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 7 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              kdmag,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag(1,1,iplan,kdmag)-x0
                vsy=bpemag(2,1,iplan,kdmag)-y0
                vsz=bpemag(3,1,iplan,kdmag)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag(1:3,icorn,iplan,kdmag)
                  enddo

                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

              ! Second piece

              nmagmax=nmagmax+1
+self,if=debug.
              write(lun6,*)"Second piece:",nmagmax
+self.

              bpebc(8,nmagmax)=bc8
              bpebc(9,nmagmax)=bc9
              bpebc(15,nmagmax)=bpebc15

              mothdiv(1,nmagmax)=bpebc15
              mothdiv(2,nmagmax)=ixdiv+1

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(10,nmagmax)=bc10

              bpebc(1,nmagmax)=x02(2)
              bpebc(2,nmagmax)=y02(2)
              bpebc(3,nmagmax)=z02(2)

              bpebc(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn2(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan
              ibpecol(nmagmax)=ncol

              do iplan=1,nplan
                ncorn=ncorn2(iplan)
                ibpecorn(iplan,nmagmax)=ncorn+1
                do icorn=1,ncorn
                  bpemag(1:3,icorn,iplan,nmagmax)=
     &              corn2(1:3,icorn,iplan)
                enddo
                ncorn=ncorn+1
                bpemag(1:3,ncorn,iplan,nmagmax)=
     &            corn2(1:3,1,iplan) !debug 4
              enddo

              ncorn1=0
              corn1=0.0d0
              ncorn1=ncorn2
              corn1=corn2

              !{ check orientation of planes

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(nmagmax)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,nmagmax)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag(1,icorn,iplan,nmagmax)
                  y0=y0+bpemag(2,icorn,iplan,nmagmax)
                  z0=z0+bpemag(3,icorn,iplan,nmagmax)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i

              do iplan=1,ibpeplan(nmagmax)

                p1(1)=bpemag(1,1,iplan,nmagmax)
                p1(2)=bpemag(2,1,iplan,nmagmax)
                p1(3)=bpemag(3,1,iplan,nmagmax)

                p2(1)=bpemag(1,2,iplan,nmagmax)
                p2(2)=bpemag(2,2,iplan,nmagmax)
                p2(3)=bpemag(3,2,iplan,nmagmax)

                p3(1)=bpemag(1,3,iplan,nmagmax)
                p3(2)=bpemag(2,3,iplan,nmagmax)
                p3(3)=bpemag(3,3,iplan,nmagmax)

                call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 8 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              nmagmax,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag(1,1,iplan,nmagmax)-x0
                vsy=bpemag(2,1,iplan,nmagmax)-y0
                vsz=bpemag(3,1,iplan,nmagmax)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag(1:3,icorn,iplan,nmagmax)
                  enddo

                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

            endif !cut

          enddo !nxdiv

c          dydiv=(ydivmax-ydivmin)/nydiv

          do kdmag1=nmagmax-nxdiv+1,nmagmax

            x02(2)=bpebc(1,kdmag1)
            y02(2)=bpebc(2,kdmag1)
            z02(2)=bpebc(3,kdmag1)

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            ydivmin=1.0d30
            ydivmax=-1.0d30

            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag(1:3,icorn,iplan,kdmag1)
                if (corn1(2,icorn,iplan).lt.ydivmin)
     &            ydivmin=corn1(2,icorn,iplan)
                if (corn1(2,icorn,iplan).gt.ydivmax)
     &            ydivmax=corn1(2,icorn,iplan)
              enddo
            enddo

            dydiv=(ydivmax-ydivmin)/fracsum*yfacdiv
            ydiv=bpebc(2,kdmag1)+ydivmin

cdebug iydiv 3
            do iydiv=1,nydiv-1

              if (iydiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              ydiv=ydiv+dydiv
c              ydiv=ydiv-dydiv

              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

              call undumag_cut_magnet(kdmag,x02,y02,z02,  !debug 5
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,2,ydiv,hulltiny,ifail)
              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, iydiv, ydiv:",
     &            ifail, kdmag,iydiv,ydiv
                stop
              endif

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut
                ncutpiece=ncutpiece+1

                ! First piece, replaces mother

                bpebc(8,nmagmax)=bc8
                bpebc(9,kdmag)=bc9
                bpebc(15,kdmag)=bpebc15

                mothdiv(1,kdmag)=bpebc15
                mothdiv(3,kdmag)=iydiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(10,kdmag)=bc10

                bpebc(1,kdmag)=x02(1)
                bpebc(2,kdmag)=y02(1)
                bpebc(3,kdmag)=z02(1)

                bpebc(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 5
                enddo

+self,if=debug.
              write(lun6,*)"ireallo, iydiv, ydiv:",ireallo,iydiv,ydiv
              open(unit=97,access='append')
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)
                do icorn=1,ncorn
                  !w97
                  write(97,*)" 222 ",ireallo,ydiv,kdmag,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag))
                enddo
              enddo
c              endif
              close(97)
+self.
                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(kdmag)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,kdmag)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,kdmag)
                    y0=y0+bpemag(2,icorn,iplan,kdmag)
                    z0=z0+bpemag(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag(1,1,iplan,kdmag)
                  p1(2)=bpemag(2,1,iplan,kdmag)
                  p1(3)=bpemag(3,1,iplan,kdmag)

                  p2(1)=bpemag(1,2,iplan,kdmag)
                  p2(2)=bpemag(2,2,iplan,kdmag)
                  p2(3)=bpemag(3,2,iplan,kdmag)

                  p3(1)=bpemag(1,3,iplan,kdmag)
                  p3(2)=bpemag(2,3,iplan,kdmag)
                  p3(3)=bpemag(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 9 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                kdmag,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,kdmag)-x0
                  vsy=bpemag(2,1,iplan,kdmag)-y0
                  vsz=bpemag(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                   bpemag(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
              write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(8,nmagmax)=bc8
                bpebc(15,nmagmax)=bpebc15

                mothdiv(1,nmagmax)=bpebc15
                mothdiv(3,nmagmax)=iydiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc(1,nmagmax)=x02(2)
                bpebc(2,nmagmax)=y02(2)
                bpebc(3,nmagmax)=z02(2)

                bpebc(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 5
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(nmagmax)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,nmagmax)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag(3,icorn,iplan,nmagmax)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag(1,1,iplan,nmagmax)
                  p1(2)=bpemag(2,1,iplan,nmagmax)
                  p1(3)=bpemag(3,1,iplan,nmagmax)

                  p2(1)=bpemag(1,2,iplan,nmagmax)
                  p2(2)=bpemag(2,2,iplan,nmagmax)
                  p2(3)=bpemag(3,2,iplan,nmagmax)

                  p3(1)=bpemag(1,3,iplan,nmagmax)
                  p3(2)=bpemag(2,3,iplan,nmagmax)
                  p3(3)=bpemag(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 10 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,nmagmax)-x0
                  vsy=bpemag(2,1,iplan,nmagmax)-y0
                  vsz=bpemag(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(2,icorn,iplan).lt.ydivmin)
     &                ydivmin=corn1(2,icorn,iplan)
                    if (corn1(2,icorn,iplan).gt.ydivmax)
     &                ydivmax=corn1(2,icorn,iplan)
                  enddo
                enddo

              endif !cut

              dydiv=dydiv/yfracdiv

            enddo !nydiv

          enddo !kdmag

          dzdiv=(zdivmax-zdivmin)/nzdiv

          do kdmag1=nmagmax-nxdiv*nydiv+1,nmagmax

            x02(2)=bpebc(1,kdmag1)
            y02(2)=bpebc(2,kdmag1)
            z02(2)=bpebc(3,kdmag1)

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            zdivmin=1.0d30
            zdivmax=-1.0d30

            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag(1:3,icorn,iplan,kdmag1)
                if (corn1(3,icorn,iplan).lt.zdivmin)
     &            zdivmin=corn1(3,icorn,iplan)
                if (corn1(3,icorn,iplan).gt.zdivmax)
     &            zdivmax=corn1(3,icorn,iplan)
              enddo
            enddo

            zdiv=bpebc(3,kdmag1)+zdivmin

cdebug izdiv 3
            do izdiv=1,nzdiv-1

              if (izdiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              zdiv=zdiv+dzdiv

              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

c              write(lun6,*)"Vorher:",kdmag1,kdmag,nmagmax,x02,y02,z02
              call undumag_cut_magnet(kdmag,x02,y02,z02, !debug 6
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,3,zdiv,hulltiny,ifail)
              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, izdiv, zdiv:",
     &            ifail,kdmag,izdiv,zdiv
              endif
c              write(lun6,*)"Nachher:",z02

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut
                ncutpiece=ncutpiece+1

                ! First piece, replaces mother

                bpebc(8,nmagmax)=bc8
                bpebc(15,kdmag)=bpebc15
                mothdiv(1,kdmag)=bpebc15
                mothdiv(4,kdmag)=izdiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(9,kdmag)=bc9
                bpebc(10,kdmag)=bc10

                bpebc(1,kdmag)=x02(1)
                bpebc(2,kdmag)=y02(1)
                bpebc(3,kdmag)=z02(1)

                bpebc(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 6
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(kdmag)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,kdmag)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,kdmag)
                    y0=y0+bpemag(2,icorn,iplan,kdmag)
                    z0=z0+bpemag(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag(1,1,iplan,kdmag)
                  p1(2)=bpemag(2,1,iplan,kdmag)
                  p1(3)=bpemag(3,1,iplan,kdmag)

                  p2(1)=bpemag(1,2,iplan,kdmag)
                  p2(2)=bpemag(2,2,iplan,kdmag)
                  p2(3)=bpemag(3,2,iplan,kdmag)

                  p3(1)=bpemag(1,3,iplan,kdmag)
                  p3(2)=bpemag(2,3,iplan,kdmag)
                  p3(3)=bpemag(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 11 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                kdmag,iplan
                    write(lun6,*)"icorn,x,y,z:"
                    do icorn=1,ibpecorn(iplan,kdmag)
                      write(lun6,*)icorn,bpemag(1:3,icorn,iplan,kdmag)
                    enddo
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,kdmag)-x0
                  vsy=bpemag(2,1,iplan,kdmag)-y0
                  vsz=bpemag(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
                write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(8,nmagmax)=bc8
                bpebc(15,nmagmax)=bpebc15

                mothdiv(1,nmagmax)=bpebc15
                mothdiv(4,nmagmax)=izdiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc(1,nmagmax)=x02(2)
                bpebc(2,nmagmax)=y02(2)
                bpebc(3,nmagmax)=z02(2)

                bpebc(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 6
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(nmagmax)
                  do icorn=1,ibpecorn(iplan,nmagmax)-1
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag(3,icorn,iplan,nmagmax)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag(1,1,iplan,nmagmax)
                  p1(2)=bpemag(2,1,iplan,nmagmax)
                  p1(3)=bpemag(3,1,iplan,nmagmax)

                  p2(1)=bpemag(1,2,iplan,nmagmax)
                  p2(2)=bpemag(2,2,iplan,nmagmax)
                  p2(3)=bpemag(3,2,iplan,nmagmax)

                  p3(1)=bpemag(1,3,iplan,nmagmax)
                  p3(2)=bpemag(2,3,iplan,nmagmax)
                  p3(3)=bpemag(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 12 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,nmagmax)-x0
                  vsy=bpemag(2,1,iplan,nmagmax)-y0
                  vsz=bpemag(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                zdivmin=1.0d30
                zdivmax=-1.0d30
                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(3,icorn,iplan).lt.zdivmin)
     &                zdivmin=corn1(3,icorn,iplan)
                    if (corn1(3,icorn,iplan).gt.zdivmax)
     &                zdivmax=corn1(3,icorn,iplan)
                  enddo
                enddo

              endif !cut

            enddo !nzdiv

          enddo !kdmag

        else if (nplan.eq.-11) then

          ncorn=4
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          ncorn=ncorn+1

          nangmin=1+abs(angle)/(90.0d0+tiny)

          if (nang.lt.nangmin) nang=nangmin
          if (nr.lt.1) nr=1
          if (nh.lt.1) nh=1

          nmagdiv=nmagdiv+nr*nang*nh

! cyl magnet, i.e. nplan=-11{

          kcyl=kcyl+1
          magcyl(kcyl,1)=nmagmax

          if (radin.lt.tiny) radin=tiny

          x00=bpebc0(1,nmagmax)
          y00=bpebc0(2,nmagmax)
          z00=bpebc0(3,nmagmax)

          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)

          ip=0
          dphi=angle/nang*grarad1
          dr=(radout-radin)/nr
          dh=height/nh
          r=radin
          do ir=1,2
            h=-height/2.0d0
            do ih=1,2
              phi=-angle/2.0d0*grarad1
              do iphi=1,2
                ip=ip+1
                x1=r*sin(phi)
                y1=h
                z1=r*cos(phi)
                xmoth(ip,nmoth)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1+x00
                ymoth(ip,nmoth)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1+y00
                zmoth(ip,nmoth)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1+z00
                phi=angle/2.0d0*grarad1
              enddo
              h=height/2.0d0
            enddo
            r=radout
          enddo
cBau
          r=radin
          jplan=ibpeplano(nmagmax)

          if (ihullallo.eq.0) then
            maxpoints=8
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else
            if (maxpoints.lt.8) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
              maxpoints=8
              allocate(hull(3,maxpoints))
              allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
              allocate(khull(maxpoints))
              allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            endif
          endif

          do ir=1,nr
            h=-height/2.0d0+dh/2.0d0
            do ih=1,nh
              phi=-angle/2.0d0*grarad1+dphi/2.0d0
              do iphi=1,nang

                x0=r*sin(phi)
                y0=h
                z0=r*cos(phi)

                ri=radin
                ro=radout
                y1=y0-dh/2.0d0
                y2=y0+dh/2.0d0

                x1=ri*sin(phi-dphi/2.0d0)
                z1=ri*cos(phi-dphi/2.0d0)
                x2=ro*sin(phi-dphi/2.0d0)
                z2=ro*cos(phi-dphi/2.0d0)
                x3=ro*sin(phi+dphi/2.0d0)
                z3=ro*cos(phi+dphi/2.0d0)
                x4=ri*sin(phi+dphi/2.0d0)
                z4=ri*cos(phi+dphi/2.0d0)

                xhull(1)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                yhull(1)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                zhull(1)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                xhull(2)=rmat(1,1)*x2+rmat(1,2)*y1+rmat(1,3)*z2
                yhull(2)=rmat(2,1)*x2+rmat(2,2)*y1+rmat(2,3)*z2
                zhull(2)=rmat(3,1)*x2+rmat(3,2)*y1+rmat(3,3)*z2

                xhull(3)=rmat(1,1)*x3+rmat(1,2)*y1+rmat(1,3)*z3
                yhull(3)=rmat(2,1)*x3+rmat(2,2)*y1+rmat(2,3)*z3
                zhull(3)=rmat(3,1)*x3+rmat(3,2)*y1+rmat(3,3)*z3

                xhull(4)=rmat(1,1)*x4+rmat(1,2)*y1+rmat(1,3)*z4
                yhull(4)=rmat(2,1)*x4+rmat(2,2)*y1+rmat(2,3)*z4
                zhull(4)=rmat(3,1)*x4+rmat(3,2)*y1+rmat(3,3)*z4

                xhull(5)=rmat(1,1)*x1+rmat(1,2)*y2+rmat(1,3)*z1
                yhull(5)=rmat(2,1)*x1+rmat(2,2)*y2+rmat(2,3)*z1
                zhull(5)=rmat(3,1)*x1+rmat(3,2)*y2+rmat(3,3)*z1

                xhull(6)=rmat(1,1)*x2+rmat(1,2)*y2+rmat(1,3)*z2
                yhull(6)=rmat(2,1)*x2+rmat(2,2)*y2+rmat(2,3)*z2
                zhull(6)=rmat(3,1)*x2+rmat(3,2)*y2+rmat(3,3)*z2

                xhull(7)=rmat(1,1)*x3+rmat(1,2)*y2+rmat(1,3)*z3
                yhull(7)=rmat(2,1)*x3+rmat(2,2)*y2+rmat(2,3)*z3
                zhull(7)=rmat(3,1)*x3+rmat(3,2)*y2+rmat(3,3)*z3

                xhull(8)=rmat(1,1)*x4+rmat(1,2)*y2+rmat(1,3)*z4
                yhull(8)=rmat(2,1)*x4+rmat(2,2)*y2+rmat(2,3)*z4
                zhull(8)=rmat(3,1)*x4+rmat(3,2)*y2+rmat(3,3)*z4

                npoi=8
                call util_convex_hull_3d(npoi,xhull,yhull,zhull,
     &            khull,kedge,kface,
     &            nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
                if (ifailhull.ne.0.or.nhull.lt.4) then
                  write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &              trim(cline)
                  stop
                endif

                ibpeplano(nmagmax)=nface
                ibpeplan(nmagmax)=nface

                next=1

                gcen=0.0d0
                k=0
                do iplan=1,nface

                  ncorn=kface(next)

                  ncorn=ncorn+1
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn

                    if (icorn.lt.ncorn) then
                      ip=kface(next+icorn)
                      bpemag(1,icorn,iplan,nmagmax)=xhull(ip)+x00
                      bpemag(2,icorn,iplan,nmagmax)=yhull(ip)+y00
                      bpemag(3,icorn,iplan,nmagmax)=zhull(ip)+z00

                      k=k+1
                      gcen(1)=gcen(1)+xhull(ip)+x00
                      gcen(2)=gcen(2)+yhull(ip)+y00
                      gcen(3)=gcen(3)+zhull(ip)+z00

c                      write(99,*)nmagmax,iplan,icorn,bpemag0(1:3,icorn,iplan,nmagmax)
                    else ! icorn.lt.ncorn

                      bpemag(1,icorn,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                      bpemag(2,icorn,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                      bpemag(3,icorn,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)

                    endif ! icorn.lt.ncorn

                  enddo !icorn

                  next=next+ncorn ! here, ncorn is already increamented by 1

                enddo !nface

                gcen=gcen/k

               do iplan=1,nface
                 ncorn=ibpecorn(iplan,nmagmax)
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                bpemag(1:3,icorn,iplan,nmagmax)-gcen(1:3)
                  enddo !icorn
                enddo !nface

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15

                mothdiv(2,nmagmax)=ir
                mothdiv(3,nmagmax)=iy
                mothdiv(4,nmagmax)=iphi

                c32=chmag
                write(chmags(1:32,nmagmax),'(a)')c32a(1:32)
                c32=chmoth
                write(chmoths(1:32,nmagmax),'(a)')c32a(1:32)

                bpebc(9,nmagmax)=imat
                bpebc(10,nmagmax)=0

                ibpeplano(nmagmax)=jplan

                bpebc(1:3,nmagmax)=gcen(1:3)

                x1=xm*bdum
                y1=ym*bdum
                z1=zm*bdum

                bpebc(4,nmagmax)=
     &            rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                bpebc(5,nmagmax)=
     &            rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                bpebc(6,nmagmax)=
     &            rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                bpebc(7,nmagmax)=bc
                bpebc(8,nmagmax)=1
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                phi=phi+dphi

                nspecmag=nspecmag+1
                nmagmax=nmagmax+1
              enddo
              h=h+dh
            enddo !ih
            r=r+dr
          enddo !ir

          nspecmag=nspecmag-1
          nmagmax=nmagmax-1
          magcyl(kcyl,2)=nmagmax
          ncutpiece=ncutpiece+nr*nang*nh

! cyl magnet, i.e. nplan=-11}
        else ! nplan>0

! rectangular special magnet, i.e. nplan=-6{

          call util_skip_comment_end(lunbpe,ieof)

          read(lunbpe,*)xlen,ylen,zlen, nxdiv,nydiv,nzdiv

c          imag=nmagmax+nxdiv*nydiv*nzdiv-1

          dx=xlen/nxdiv

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          dz=zlen/nzdiv

          x0=bpebc0(1,nmagmax)-xlen/2.0d0
          y0=bpebc0(2,nmagmax)-ylen/2.0d0
          z0=bpebc0(3,nmagmax)-zlen/2.0d0

          if (bc.ne.0.0d0.and.xmin.gt.x0) xmin=x0
          if (bc.ne.0.0d0.and.ymin.gt.y0) ymin=y0
          if (bc.ne.0.0d0.and.zmin.gt.z0) zmin=z0

          x0=x0+xlen
          y0=y0+ylen
          z0=z0+zlen

          if (bc.ne.0.0d0.and.xmax.lt.x0) xmax=x0
          if (bc.ne.0.0d0.and.ymax.lt.y0) ymax=y0
          if (bc.ne.0.0d0.and.zmax.lt.z0) zmax=z0

          x00=bpebc0(1,nmagmax)-xlen/2.0d0-dx/2.0d0
          y00=bpebc0(2,nmagmax)+ylen/2.0d0
          z00=bpebc0(3,nmagmax)-zlen/2.0d0-dz/2.0d0
cdebug
          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)

          x0=x0-xlen/2.0
          y0=y0-ylen/2.0
          z0=z0-zlen/2.0
          xmoth(1,nmoth)=x0-xlen/2.0d0
          ymoth(1,nmoth)=y0-ylen/2.0d0
          zmoth(1,nmoth)=z0-zlen/2.0d0

          xmoth(2,nmoth)=x0+xlen/2.0d0
          ymoth(2,nmoth)=y0-ylen/2.0d0
          zmoth(2,nmoth)=z0-zlen/2.0d0

          xmoth(3,nmoth)=x0+xlen/2.0d0
          ymoth(3,nmoth)=y0+ylen/2.0d0
          zmoth(3,nmoth)=z0-zlen/2.0d0

          xmoth(4,nmoth)=x0-xlen/2.0d0
          ymoth(4,nmoth)=y0+ylen/2.0d0
          zmoth(4,nmoth)=z0-zlen/2.0d0

          xmoth(5,nmoth)=x0-xlen/2.0d0
          ymoth(5,nmoth)=y0-ylen/2.0d0
          zmoth(5,nmoth)=z0+zlen/2.0d0

          xmoth(6,nmoth)=x0+xlen/2.0d0
          ymoth(6,nmoth)=y0-ylen/2.0d0
          zmoth(6,nmoth)=z0+zlen/2.0d0

          xmoth(7,nmoth)=x0+xlen/2.0d0
          ymoth(7,nmoth)=y0+ylen/2.0d0
          zmoth(7,nmoth)=z0+zlen/2.0d0

          xmoth(8,nmoth)=x0-xlen/2.0d0
          ymoth(8,nmoth)=y0+ylen/2.0d0
          zmoth(8,nmoth)=z0+zlen/2.0d0

          jplan=ibpeplano(nmagmax)

          imag=nmagmax
          bpebc(15,nmagmax)=nmagmax

          mothdiv(1,nmagmax)=nmagmax

          do ic=1,32
            chmag(ic:ic)=chmags(ic,nmagmax)
            chmoth(ic:ic)=chmoths(ic,nmagmax)
          enddo

          nmagmax=nmagmax-1

          ncutpiece=ncutpiece+1
cdebug ixdiv 4
          do ixdiv=1,nxdiv
            x0=x00+dx*ixdiv
            y0=y00
            dy=ylen/fracsum
cdebug iydiv 4
            do iydiv=1,nydiv
              y0=y0-dy/2.0d0
cdebug izdiv 4
              do izdiv=1,nzdiv

                z0=z00+dz*izdiv

                nmagmax=nmagmax+1

                bpebc(1,nmagmax)=x0
                bpebc(2,nmagmax)=y0
                bpebc(3,nmagmax)=z0

                bpebc(4,nmagmax)=bpebc0(4,imag)
                bpebc(5,nmagmax)=bpebc0(5,imag)
                bpebc(6,nmagmax)=bpebc0(6,imag)

                bc=sqrt(bpebc(4,imag)**2+bpebc(5,imag)**2+bpebc(6,imag)**2)
                bpebc(7,nmagmax)=bc
c                write(lun6,*) nmagmax,bc

                bpebc(8,nmagmax)=bpebc0(7,imag)
                bpebc(15,nmagmax)=bpebc15

                mothdiv(1,nmagmax)=bpebc15
                mothdiv(2,nmagmax)=ixdiv
                mothdiv(3,nmagmax)=iydiv
                mothdiv(4,nmagmax)=izdiv

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=imat

                ibpeplano(nmagmax)=jplan

                bpebc0(1,nmagmax)=x0
                bpebc0(2,nmagmax)=y0
                bpebc0(3,nmagmax)=z0

                bpebc0(4,nmagmax)=xm*bdum
                bpebc0(5,nmagmax)=ym*bdum
                bpebc0(6,nmagmax)=zm*bdum

                bpebc0(7,nmagmax)=-6
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                iplan=1
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=2
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=3
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=4
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=5
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=6
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0

                do iplan=1,6
                  bpemag(1,5,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,5,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,5,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)
                enddo !iplan

                do iplan=1,6
                  bpemag(1,5,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,5,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,5,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)
                enddo !iplan

              enddo !nzdiv
              y0=y0-dy/2.0d0
              dy=dy*yfracdiv
            enddo !nydiv
          enddo !nxdiv
! rectangular magnet, i.e. nplan=-6}

        endif !nplan>0

      enddo !nspecmag

      do imag=kmag1,nmagmax
        if (bpebc(8,imag).eq.1.and.bpebc(7,imag).ne.0.0d0) then
          do iplan=1,ibpeplan(imag)
            do icorn=1,ibpecorn(iplan,imag)
              x0=bpemag(1,icorn,iplan,imag)+bpebc(1,imag)
              y0=bpemag(2,icorn,iplan,imag)+bpebc(2,imag)
              z0=bpemag(3,icorn,iplan,imag)+bpebc(3,imag)
              bpemag(1,icorn,iplan,imag)=x0
              bpemag(2,icorn,iplan,imag)=y0
              bpemag(3,icorn,iplan,imag)=z0
              if (x0.lt.xmin) xmin=x0
              if (x0.gt.xmax) xmax=x0
              if (y0.lt.ymin) ymin=y0
              if (y0.gt.ymax) ymax=y0
              if (z0.lt.zmin) zmin=z0
              if (z0.gt.zmax) zmax=z0
            enddo
          enddo
        endif
      enddo

      call util_skip_comment(lunbpe)
      read(lunbpe,*)x0,y0,z0

      nmag=nmagmax !includes now special magnets

      open(newunit=lunmag,file='undumag.run',status='old')
      read(lunmag,'(a)')cundutit
      close(lunmag)
      cundutit(1:1)='*'

cdebug material
      write(lun6,*)
      write(lun6,*) "Material files (material number, material type, mode, filename):"
      write(lun6,*)
      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*) imatfile
      do kmat=1,nmatfiles
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*) imat ,lmat, mapmode, cfile
        nmatpoi=0
        bcmo=-1.0d30
        hmato=-1.0d30
        open(newunit=lunmat,file=trim(cfile),status='old')
        write(lun6,*)imat,lmat,mapmode,"      ",trim(cfile)
        nline=0

115     call util_skip_comment_end(lunmat,ieof)
        if (ieof.ne.0) goto 995
        perksi=0.0d0
        ! lmat = 1: Anisotropic magnet material with an easy axis
        !           mapmode=1: Linear material
        !           mapmode=2: Non-linear material

        if (lmat.eq.1) then

          if (mapmode.eq.1) then

            nline=nline+1

            if (nline.gt.1) then
              write(lun6,*)"*** Error in undumag_ini_old ***"
              write(lun6,*)"*** Material file for mapmode 1 must contain only one data line ***"
              write(lun6,*)"File: ,",trim(cfile)
              stop
            endif

            read(lunmat,*)bcmat(2:3,1,kmat) ! read mu=1.+parksi and perksi
            bcmat(2,1,kmat)=bcmat(2,1,kmat)-1.0d0

          else if (mapmode.eq.2) then
            read(lunmat,*)hmat,bcm,perksi
c              if (bcm.ne.bcmo.or.hmato.ne.hmat) then
c                nmatpoi=nmatpoi+1
c                bcmat(1,nmatpoi,kmat)=hmat
c                bcmat(2,nmatpoi,kmat)=bcm
c                bcmat(3,nmatpoi,kmat)=perksi
c              endif
            if (bcm.ne.bcmo) then
c                nmatpoi=nmatpoi+1
            endif
            bcmat(1,nmatpoi,kmat)=hmat
            bcmat(2,nmatpoi,kmat)=bcm
            bcmat(3,nmatpoi,kmat)=perksi
            bcmo=bcm
            hmato=hmat
          else
            write(lun6,*)"*** Bad material mode found in input file ***"
            stop
          endif
          goto 115
        else if (lmat.eq.2) then
            ! lmat = 2: Isotropic material
            if (mapmode.eq.0
     &          .or.mapmode.eq.2
     &          .or.mapmode.eq.3
     &          .or.mapmode.eq.4
     &          .or.mapmode.eq.5
     &          .or.mapmode.eq.6
     &          .or.mapmode.eq.7
     &          .or.mapmode.eq.8
     &          ) then
              read(lunmat,*)hmat,bcm
            else
              write(lun6,*)"*** Bad material mode found in input file ***"
              stop
            endif
c            if (bcm.ne.bcmo.or.hmato.ne.hmat) then
            if (bcm.ne.bcmo) then
              nmatpoi=nmatpoi+1
            endif
            bcmat(1,nmatpoi,kmat)=hmat
            bcmat(2,nmatpoi,kmat)=bcm
            bcmat(3,nmatpoi,kmat)=perksi
            if (
     &          mapmode.eq.2
     &          .or.mapmode.eq.3
     &          .or.mapmode.eq.4
     &          .or.mapmode.eq.5
     &          .or.mapmode.eq.6
     &          .or.mapmode.eq.7
     &          .or.mapmode.eq.8
     &          ) then
              if (mapmode.eq.3.and.hmat.eq.0.0d0) hmat=1.0d-30
              if (mapmode.eq.3.and.bcm.eq.0.0d0) bcm=1.0d-30
              feh1(nmatpoi)=hmat
              fem1(nmatpoi)=bcm
              bcmo=bcm
              hmato=hmat
            endif
c            endif
            goto 115
          else
            write(lun6,*)"*** Bad material type found in input file ***"
            write(lun6,*)"*** Must be 1 for anisotropic or 2 for isotropic material ***"
            stop
          endif !lmat

995     continue

        matmaps(1,kmat)=imat
        matmaps(2,kmat)=lmat
        matmaps(3,kmat)=mapmode
        matmaps(4,kmat)=nmatpoi

        close(lunmat)

        if (mapmode.gt.1.and.nmatpoi.lt.2) then
          write(lun6,*)"*** Error in undumag_ini_old ***"
          write(lun6,*)"*** Material file for mapmode > 1 must contain more then one data line ***"
          write(lun6,*)"File: ,",trim(cfile)
          stop
        endif
        if (lmat.eq.2.and.isplinefm.ne.0) call util_spline_coef(feh1,fem1,nmatpoi,
     &    0.0d0,0.0d0,fespl1,fewspl1,fewspl2,fewspl3,fewspl4)

      enddo !nmatfiles

      call util_skip_comment_end(lunbpe,ieof)
      if (ieof.ne.0) goto 9977

      read(lunbpe,'(a)')cline

      xcwmin=1.0e30
      xcwmax=-1.0e30

      if (cline.eq.'Coils') then

        nlines=0
777     read(lunbpe,'(a)')cline

        if (cline.ne.'EndCoils') then
          nlines=nlines+1
          goto 777
        endif

        if (nlines.gt.0) then

          do i=1,nlines+1
            backspace(lunbpe)
          enddo

          ncwires=0
          nrace=0
          nwind=0
          ncrace=0
          narc=0
          ncarc=0
          nrbar=0
          nthwir=0

          do i=1,nlines+1

            call util_skip_comment_end(lunbpe,ieof)
            read(lunbpe,'(a)')cline

            if (cline.eq.'EndCoils') then
              exit
            else if (cline.eq.'Filaments') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncfila
              if (ncfila.gt.0) then
                luncoi=lunbpe
              else
                ncfila=0
                open(newunit=luncoi,file=cline)
                call util_skip_comment_end(lunbpe,ieof)
                do while(ieof.eq.0)
                  read(luncoi,*)curr,x1,y1,z1,x2,y2,z2
                  ncfila=ncfila+1
                  call util_skip_comment_end(lunbpe,ieof)
                enddo
                rewind(luncoi)
              endif
              do k=1,ncfila
                call util_skip_comment_end(luncoi,ieof)
                read(luncoi,*)curr,x1,y1,z1,x2,y2,z2
                if (((x2-x1)**2+(y2-y1)**2+(z2-z1)**2)*curr.ne.0.0d0) then
                  ncwires=ncwires+1
                  if (x1.lt.xcwmin) xcwmin=x1
                  if (x2.lt.xcwmin) xcwmin=x2
                  if (x1.gt.xcwmax) xcwmax=x1
                  if (x2.gt.xcwmax) xcwmax=x2
                endif
                if (luncoi.ne.lunbpe) close(luncoi)
              enddo !ncfila
            else if (cline.eq.'RectWindings') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)wind19
              nwind=nwind+1
            else if (cline.eq.'Rectangular') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr,x,y,z,vx,vy,vz,phi,xlen
              nrace=nrace+1
            else if (cline.eq.'RectangCirc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              if (curr.ne.0.0d0) ncrace=ncrace+1
            else if (cline.eq.'RectArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
              if (curr.ne.0.0d0) narc=narc+1
            else if (cline.eq.'CircArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
              if (curr.ne.0.0d0) ncarc=ncarc+1
            else if (cline.eq.'RectBar') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              if (curr.ne.0.0d0) nrbar=nrbar+1
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
            else if (cline.eq.'ThickWire') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              if (curr.ne.0.0d0) nthwir=nthwir+1
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
            endif !key
          enddo !nlines

          if (ncwires.gt.0) then
            allocate(wire(nwitems,ncwires))
            wire=0.0d0
          endif

          if (nrace.gt.0) then
            allocate(race(17,nrace))
            race=0.0d0
          endif

          if (nwind.gt.0) then
            allocate(wind(19,nwind))
            wind=0.0d0
          endif

          if (ncrace.gt.0) then
            allocate(crace(17,ncrace))
            crace=0.0d0
          endif

          if (narc.gt.0) then
            allocate(arc(21,narc))
            arc=0.0d0
          endif

          if (ncarc.gt.0) then
            allocate(carc(20,ncarc))
            carc=0.0d0
          endif

          if (nrbar.gt.0) then
            allocate(rectbar(19,nrbar))
            rectbar=0.0d0
          endif

          if (nthwir.gt.0) then
            allocate(thickwire(18,nthwir))
            thickwire=0.0d0
          endif

          do i=1,nlines+1
            backspace(lunbpe)
          enddo

          ncwires=0
          nrace=0
          nwind=0
          ncrace=0
          narc=0
          ncarc=0
          nrbar=0
          nthwir=0
          ncoil=0

          do i=1,nlines+1

            call util_skip_comment_end(lunbpe,ieof)
            read(lunbpe,'(a)')cline

            if (cline.eq.'EndCoils') then
              exit
            else if (cline.eq.'Filaments') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncfila
              do k=1,ncfila
                call util_skip_comment_end(lunbpe,ieof)
                read(lunbpe,*)curr,x1,y1,z1,x2,y2,z2,kolor
                if (((x2-x1)**2+(y2-y1)**2+(z2-z1)**2)*curr.ne.0.0d0) then
                  ncwires=ncwires+1
                  wire(1,ncwires)=1
                  wire(2,ncwires)=curr
                  wire(3,ncwires)=x1
                  wire(4,ncwires)=y1
                  wire(5,ncwires)=z1
                  wire(6,ncwires)=x2
                  wire(7,ncwires)=y2
                  wire(8,ncwires)=z2
                  wire(9,ncwires)=kolor
                endif
              enddo
            else if (cline.eq.'RectWindings') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) wind19
              if (wind19(1).ne.0.0d0) then
                nwind=nwind+1
                wind(1,nwind)=wind19(1)
                wind(2:17,nwind)=wind19(4:19)
                wind(18:19,nwind)=wind19(2:3)
              endif
            else if (cline.eq.'Rectangular') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) race17
              if (race17(1).ne.0.0d0) then
                nrace=nrace+1
                race(1:17,nrace)=race17
              endif
            else if (cline.eq.'RectangCirc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) race17
              if (race17(1).ne.0.0d0) then
                ncrace=ncrace+1
                crace(:,ncrace)=race17
              endif
            else if (cline.eq.'RectArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(1:12)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(13:21)
              if (arc21(1).ne.0.0d0) then
                narc=narc+1
                arc(1:21,narc)=arc21
              endif
            else if (cline.eq.'CircArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(1:11)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(12:20)
              if (arc21(1).ne.0.0d0) then
                ncarc=ncarc+1
                carc(1:20,ncarc)=arc21(1:20)
              endif
            else if (cline.eq.'RectBar') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(1:10)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(11:19)
              if (arc21(1).ne.0.0d0) then
                nrbar=nrbar+1
                rectbar(1:19,nrbar)=arc21(1:19)
              endif
            else if (cline.eq.'ThickWire') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(1:9)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(10:18)
              if (arc21(1).ne.0.0d0) then
                nthwir=nthwir+1
                thickwire(1:18,nthwir)=arc21(1:18)
              endif
            endif
          enddo !nlines
        endif !nlines

        call undumag_bcoils(0.0d0,0.0d0,0.0d0,bx,by,bz,istat)

        if (ncoil.gt.0) then
          open(newunit=lunfil,file='undumag.fil',status='old')
          do while (.true.)
            call util_skip_comment_end(lunfil,ieof)
            if (ieof.ne.0) exit
            read(lunfil,*) itype,curr,x1,y1,z1,x2,y2,z2,icol,num
            if (x1.lt.xcwmin) xcwmin=x1
            if (x1.gt.xcwmax) xcwmax=x1
            if (x2.lt.xcwmin) xcwmin=x2
            if (x2.gt.xcwmax) xcwmax=x2
          enddo
          close(lunfil)
        endif

      endif !Coils

9977  write(lun6,*)

991   close(lunbpe)

      if (ixsymo.lt.0.or.iysymo.lt.0.or.izsymo.lt.0) then
        call undumag_duplicate_mags
        nmagmax=nmag
        if (ixsymo.lt.0) then
          ixsym=0
          nmoth=2*nmoth
        endif
        if (iysymo.lt.0) then
          iysym=0
          nmoth=2*nmoth
        endif
        if (izsymo.lt.0) then
          izsym=0
          nmoth=2*nmoth
        endif
      else
        bpebc(17,1:nmag)=-9999.0d0
      endif

      do imag=1,nmag
        write(chmoth,'(32a)')chmoths(1:32,imag)
        motho=nint(bpebc(15,imag))
        do kmag=imag+1,nmag
          write(chmoth1,'(32a)')chmoths(1:32,kmag)
          if (chmoth.eq.chmoth1) then
            bpebc(15,kmag)=motho
            mothdiv(1,kmag)=mothdiv(1,imag)
          endif
        enddo
      enddo
c      do imag=1,nmag
c        write(lun6,*)"0 Info:",imag,bpebc(15,imag),chmags(1:32,imag),chmoths(1:32,imag)
c      enddo
      write(lun6,*)"----------------------------------------------------"

      do imag=1,nmag
c center of magnet in lab

        rmag(1)=bpebc(1,imag)
        rmag(2)=bpebc(2,imag)
        rmag(3)=bpebc(3,imag)

c magnetization vector in lab

        vmaglab(1)=bpebc(4,imag)
        vmaglab(2)=bpebc(5,imag)
        vmaglab(3)=bpebc(6,imag)

        bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)

c        write(lun6,*)"imag,rmag:",imag,rmag

        nplan=ibpeplan(imag)
        do iplan=1,nplan

c three points defining plane (lab.-system)

          p1(1)=bpemag(1,1,iplan,imag)
          p1(2)=bpemag(2,1,iplan,imag)
          p1(3)=bpemag(3,1,iplan,imag)

          p2(1)=bpemag(1,2,iplan,imag)
          p2(2)=bpemag(2,2,iplan,imag)
          p2(3)=bpemag(3,2,iplan,imag)

          p3(1)=bpemag(1,3,iplan,imag)
          p3(2)=bpemag(2,3,iplan,imag)
          p3(3)=bpemag(3,3,iplan,imag)

c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p1
c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p2
c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p3

          call undumag_bpen(imag,iplan,p1,p2,p3,vnormlab,ifail)
          if (ifail.ne.0) then
            write(lun6,*)"*** Error 13 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &        imag,iplan
            stop
          endif

c check if normal vector is perpendicular to magnetization vector
c if mag. vector is parallel, skip plane

          if (bc.ne.0.0d0) then
            dum=abs(
     &        (vnormlab(1)*vmaglab(1)+vnormlab(2)*vmaglab(2)+
     &        vnormlab(3)*vmaglab(3))
     &        /bc
     &        )
          else
            dum=0.0d0
          endif

c Removed, since magnetization can change during relaxation
c          if (dum.lt.1.0d-20.and.bpebc(8,imag).ne.-6) then
c            ibpecorn(iplan,imag)=-ibpecorn(iplan,imag)
c          endif

c            bpetm(1,8,iplan,imag)=vnormlab(1)
c            bpetm(2,8,iplan,imag)=vnormlab(2)
c            bpetm(3,8,iplan,imag)=vnormlab(3)
c
c          else

            bpetm(1,7,iplan,imag)=
     &        vmaglab(1)*vnormlab(1)+
     &        vmaglab(2)*vnormlab(2)+
     &        vmaglab(3)*vnormlab(3)
            bpetm(1,8,iplan,imag)=vnormlab(1)
            bpetm(2,8,iplan,imag)=vnormlab(2)
            bpetm(3,8,iplan,imag)=vnormlab(3)

c get matrices ts and tsinv. Ts transforms vnormlab to (0,0,1)

            call undumag_bpet(vnormlab,ts,tsinv)

            if (bpebc(8,imag).eq.-6) then

c for rectangular magnets, we rotate the plans such, that the edges coinside
c with the axis of the coord.-system.

c All planes are rotated to the system of the
c first plane

              if (iplan.eq.1) then
                ts1=ts
                ts1inv=tsinv
              else
                ts=ts1
                tsinv=ts1inv
              endif !(iplan.eq.1)

              do icorn=1,5

                r1lab(1)=bpemag(1,icorn,iplan,imag)
                r1lab(2)=bpemag(2,icorn,iplan,imag)
                r1lab(3)=bpemag(3,icorn,iplan,imag)

                r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
                r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
                r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

                bperot(1,icorn,iplan,imag)=r1(1)
                bperot(2,icorn,iplan,imag)=r1(2)
                bperot(3,icorn,iplan,imag)=r1(3)

              enddo !icorn=1,ncorn

              vx=bperot(1,2,iplan,imag)-bperot(1,1,iplan,imag)
              vy=bperot(2,2,iplan,imag)-bperot(2,1,iplan,imag)
              vn=sqrt(vx*vx+vy*vy)

              sa=vy/vn
              ca=vx/vn

              tz=ts

              ts(1,1)=ca
              ts(1,2)=sa
              ts(1,3)=0.0d0

              ts(2,1)=-sa
              ts(2,2)=ca
              ts(2,3)=0.0d0

              ts(3,1)=0.0d0
              ts(3,2)=0.0d0
              ts(3,3)=1.0d0

c              write(lun6,*)iplan,ca,sa

c              if (iplan.eq.1) then
c                do i=1,3
c                  write(lun6,*)"vorher:",tz(i,1:3)
c                enddo
c              endif
              call util_matrix_multiplication(3,3,3,ts,tz,ts,ws)

              do i=1,3
                do j=1,3
                  tsinv(i,j)=ts(j,i)
                enddo
              enddo

            endif ! if (bpebc(8,imag).eq.-6)

            do i=1,3
              do j=1,3
                bpetm(i,j,iplan,imag)=ts(i,j)
                bpetm(i,j+3,iplan,imag)=tsinv(i,j)
              enddo
c              if (iplan.eq.1) then
c                write(lun6,*)"nachher:",ts(i,1:3)
c              endif
            enddo

c          endif !check if normal vector is perpendicular to magnetization vector

c            write(lun6,*)imag,iplan,bpetm(1,7,iplan,imag)
c            write(lun6,*)imag,iplan,bpetm(1:3,8,iplan,imag)

        enddo !iplan

      enddo !imag

c      write(lun6,*)"Ende"
c      stop
!debug
+self,if=debug.
      do imag=1,nmag
        do iplan=1,ibpeplan(imag)
          do icorn=1,ibpecorn(iplan,imag)
            write(99,*)imag,iplan,icorn,
     &        bpemag(1:3,icorn,iplan,imag)
          enddo
        enddo
      enddo
      write(lun6,*) "fort.99!"
+self.,if=debug.
      do imag=1,nmag

c check, if all flanges appear twice, i.e. volume is closed

        iwarn=0
        nflange=0
        nplan=ibpeplan(imag)
        if (kudebug.eq.9) then
          if(imag.eq.1) then
            open(unit=99,file="debug_edges.dat")
          else
            open(unit=99,file="debug_edges.dat",access="append")
          endif
        endif

        do iplan=1,nplan
          ncorn=ibpecorn(iplan,imag)-1
          if (kudebug.eq.9) then
            write(lun6,*)"imag,nplan,ncorn",imag,nplan,ncorn
          endif
          do icorn=1,ncorn
            nflange=nflange+1
            ip1=icorn
            ip2=ip1+1
            bflange(1,nflange)=bpemag(1,ip1,iplan,imag)
            bflange(2,nflange)=bpemag(2,ip1,iplan,imag)
            bflange(3,nflange)=bpemag(3,ip1,iplan,imag)
            bflange(4,nflange)=bpemag(1,ip2,iplan,imag)
            bflange(5,nflange)=bpemag(2,ip2,iplan,imag)
            bflange(6,nflange)=bpemag(3,ip2,iplan,imag)
            if (kudebug.eq.9) then
              write(lun6,*)"iedge, i1, i2:",nflange,ip1,ip2
              write(lun6,*)"x1,y1,z1:",bflange(1:3,nflange)
              write(lun6,*)"x2,y2,z2:",bflange(4:6,nflange)
              write(99,*)imag,iplan,nflange,ip1,ip2,bflange(1:6,nflange)
            endif
          enddo ! icorn
        enddo !iplan
        if (kudebug.eq.9) then
          close(99)
        endif

        do iflange=1,nflange
          bflange(7,iflange)=1.0d0
        enddo

        rtiny=sqrt((xmax-xmin)**2+(ymax-ymin)**2+(zmax-zmin)**2)*1.0d-12

        do iflange=1,nflange

          do i=iflange+1,nflange

            if (
     &          abs(bflange(1,i)-bflange(1,iflange)).lt.rtiny .and.
     &          abs(bflange(2,i)-bflange(2,iflange)).lt.rtiny .and.
     &          abs(bflange(3,i)-bflange(3,iflange)).lt.rtiny .and.
     &          abs(bflange(4,i)-bflange(4,iflange)).lt.rtiny .and.
     &          abs(bflange(5,i)-bflange(5,iflange)).lt.rtiny .and.
     &          abs(bflange(6,i)-bflange(6,iflange)).lt.rtiny
     &          .or.
     &          abs(bflange(4,i)-bflange(1,iflange)).lt.rtiny .and.
     &          abs(bflange(5,i)-bflange(2,iflange)).lt.rtiny .and.
     &          abs(bflange(6,i)-bflange(3,iflange)).lt.rtiny .and.
     &          abs(bflange(1,i)-bflange(4,iflange)).lt.rtiny .and.
     &          abs(bflange(2,i)-bflange(5,iflange)).lt.rtiny .and.
     &          abs(bflange(3,i)-bflange(6,iflange)).lt.rtiny
     &          ) then

              bflange(7,iflange)=bflange(7,iflange)+1.0d0
              bflange(7,i)=bflange(7,i)+1.0d0

            endif !hit

          enddo !i

          if (bflange(7,iflange).ne.2.0d0.and.iwarn.eq.0
     &        .and.bpebc(7,imag).ne.0.0d0.and.bpebc(9,imag).ne.0) then
c            iwarn=1
            write(lun6,*)
     &        '*** Error in undumag_ini_old: Magnet ',chmoths(1:32,imag),' is not a closed volume'
            write(lun6,*)'magnet, edge, hits: ',imag,iflange,bflange(7,iflange)
            write(lun6,*)
            stop
          endif

        enddo !iflange

c center of gravity is a point inside the magnet since shape is convex

        x0=0.0d0
        y0=0.0d0
        z0=0.0d0

        i=0
        do iplan=1,ibpeplan(imag)
          do icorn=1,ibpecorn(iplan,imag)-1
            i=i+1
            x0=x0+bpemag(1,icorn,iplan,imag)
            y0=y0+bpemag(2,icorn,iplan,imag)
            z0=z0+bpemag(3,icorn,iplan,imag)
c            write(lun6,*)iplan,icorn,sngl(bpemag(1:3,icorn,iplan,imag))
          enddo ! icorn
        enddo !iplan

        x0=x0/i
        y0=y0/i
        z0=z0/i

c        write(lun6,*)"imag,x0,y0,z0",imag,x0,y0,z0

        do iplan=1,ibpeplan(imag)

          vnormlab(1)=bpetm(1,8,iplan,imag)
          vnormlab(2)=bpetm(2,8,iplan,imag)
          vnormlab(3)=bpetm(3,8,iplan,imag)

c does normal vector point outside?

          vsx=bpemag(1,1,iplan,imag)-x0
          vsy=bpemag(2,1,iplan,imag)-y0
          vsz=bpemag(3,1,iplan,imag)-z0

c          write(lun6,*)iplan
c          write(lun6,*)vnormlab
c          write(lun6,*)vsx,vsy,vsz

          if ( vsx*vnormlab(1) + vsy*vnormlab(2) + vsz*vnormlab(3)
     &        .lt. 0.0d0 ) then
            write(lun6,*)
            write(lun6,*)
     &        '*** Error in undumag_ini_old: Normal vector is not pointing outside'
            write(lun6,*)'magnet, plane: ',imag,iplan
            write(lun6,*)
c            stop
          endif

          do icorn=3,ibpecorn(iplan,imag)-1

            ip1=icorn-2
            ip2=icorn-1

            v1x=bpemag(1,ip2,iplan,imag)-bpemag(1,ip1,iplan,imag)
            v1y=bpemag(2,ip2,iplan,imag)-bpemag(2,ip1,iplan,imag)
            v1z=bpemag(3,ip2,iplan,imag)-bpemag(3,ip1,iplan,imag)

            v2x=bpemag(1,icorn,iplan,imag)-bpemag(1,ip2,iplan,imag)
            v2y=bpemag(2,icorn,iplan,imag)-bpemag(2,ip2,iplan,imag)
            v2z=bpemag(3,icorn,iplan,imag)-bpemag(3,ip2,iplan,imag)

            vsx=v1y*v2z-v1z*v2y
            vsy=v1z*v2x-v1x*v2z
            vsz=v1x*v2y-v1y*v2x

            if ( abs(v2x*vnormlab(1)+ v2y*vnormlab(2)+ v2z*vnormlab(3))
     &          .gt.tiny ) then
              write(lun6,*)
              write(lun6,*)'*** Error in undumag_ini_old: Points not in a plane'
              write(lun6,*)'magnet, plane, point: ',imag,iplan,icorn
              write(lun6,*)
              stop
            endif

            if ( vsx*vnormlab(1) + vsy*vnormlab(2) + vsz*vnormlab(3)
     &          .lt. 0.0d0 ) then
              write(lun6,*)
              write(lun6,*)'*** Error in undumag_ini_old: Direction of rotation not unique'
              write(lun6,*)'magnet, plane, point ',imag,iplan,icorn
              write(lun6,*)
              stop
            endif

          enddo !icorn=1,ncorn

        enddo ! iplan=1,nplan

      enddo ! imag=1,nmag

c transform everything to the nz=(0,0,1) system

      do imag=1,nmag

        qsign=0.0d0

        do iplan=1,ibpeplan(imag)

c          if (ibpecorn(iplan,imag).gt.0) then

            do i=1,3
              do j=1,3
                ts(i,j)=bpetm(i,j,iplan,imag)
              enddo
            enddo

            vnormlab(1)=bpetm(1,8,iplan,imag)
            vnormlab(2)=bpetm(2,8,iplan,imag)
            vnormlab(3)=bpetm(3,8,iplan,imag)

            do icorn=1,ibpecorn(iplan,imag)

              r1lab(1)=bpemag(1,icorn,iplan,imag)
              r1lab(2)=bpemag(2,icorn,iplan,imag)
              r1lab(3)=bpemag(3,icorn,iplan,imag)

              r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
              r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
              r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

              bperot(1,icorn,iplan,imag)=r1(1)
              bperot(2,icorn,iplan,imag)=r1(2)
              bperot(3,icorn,iplan,imag)=r1(3)

            enddo !icorn=1,ncorn

            do icorn=1,ibpecorn(iplan,imag)-1

              ip2=icorn+1

              r1(1)=bperot(1,icorn,iplan,imag)
              r1(2)=bperot(2,icorn,iplan,imag)
              r1(3)=bperot(3,icorn,iplan,imag)

              r2(1)=bperot(1,ip2,iplan,imag)
              r2(2)=bperot(2,ip2,iplan,imag)
              r2(3)=bperot(3,ip2,iplan,imag)

c              write(lun6,*)imag,iplan,icorn,r1(1)-r2(1)
c              if (abs(r1(1)-r2(1)).gt.tiny) then
              if (r1(1)-r2(1).ne.0.0d0) then

                a=(r2(2)-r1(2))/(r2(1)-r1(1))
                b=r1(2)-a*r1(1)

              else

                a=0.0d0
                b=r1(2)

              endif !(abs(r1(1)-r2(1)).gt.tiny)

              q=-((a*r1(1)+ a*r2(1) + 2*b)*(r1(1) - r2(1)))/2.d0

              qsign=qsign+q*(
     &           vnormlab(1)*bpebc(4,imag)
     &          +vnormlab(2)*bpebc(5,imag)
     &          +vnormlab(3)*bpebc(6,imag))

            enddo ! icorn

c          endif !(ibpecorn(iplan,imag).gt.0) then

        enddo ! iplan=1,nplan

        if (abs(qsign/bpebc(7,imag)).gt.1.d-9.and.bpebc(8,imag).ne.-6) then
c not checked for rectangular magnets since ibpecorn not negative for
c planes with normal vector parallel to surface. Then they are not skipped
c for while calculation qsign
          write(lun6,*)
          write(lun6,*)
     &      '*** Error in undumag_ini_old: Sum of magnetic charge not zero ***'
          write(lun6,*)'magnet: ',imag
          write(lun6,*)
          stop
        endif

      enddo ! imag=1,nmag

c Check if all magnets are zero

      nmag=0
      do imag=1,nmagmax
        if (bpebc(7,imag).ne.0.0d0) then
          nmag=nmagmax
          goto 109
        endif
      enddo

109   continue

      nmagmax=nmag

      if (nmatfiles.le.0.and.nmag.gt.0) then
        write(lun6,*)"*** Error in undumag_ini_old: No data files for materials found ***"
        stop
      endif

      allocate(bcrec(20,nmagmax))
      allocate(ibpeplanrec(nmagmax))
      allocate(ibpecolrec(nmagmax))
      allocate(ibpecornrec(nplanmax,nmagmax))
      allocate(bmagrec(3,ncornmax,nplanmax,nmagmax))
      allocate(brotrec(3,ncornmax,nplanmax,nmagmax))
      allocate(bpetmrec(3,8,nplanmax,nmagmax))

      allocate(bciron(20,nmagmax),bc0rec(7,nmagmax),bc0iron(7,nmagmax))
      allocate(ibpeplaniron(nmagmax))
      allocate(ibpecoliron(nmagmax))
      allocate(ibpecorniron(nplanmax,nmagmax))
      allocate(bmagiron(3,ncornmax,nplanmax,nmagmax))
      allocate(brotiron(3,ncornmax,nplanmax,nmagmax))
      allocate(bpetmiron(3,8,nplanmax,nmagmax))

      nrec=0
      niron=0

      if (irecrepl.eq.0) goto 666

      do imag=1,nmag

        if (bpebc(8,imag).ne.-6.and.ibpeplan(imag).eq.6) then

          ix1=0
          ix2=0
          iy1=0
          iy2=0
          iz1=0
          iz2=0

          do iplan=1,nplan

            ncorn=ibpecorn(iplan,imag)
            if (ncorn.ne.5) exit

c            write(lun6,*)imag,iplan,bpemag(3,1:5,iplan,imag)
            vnormlab(1)=bpetm(1,8,iplan,imag)
            vnormlab(2)=bpetm(2,8,iplan,imag)
            vnormlab(3)=bpetm(3,8,iplan,imag)

c            write(lun6,*)imag,vnormlab

            if (vnormlab(1).lt.-0.999999d0) then
              ix2=ix2+1
              xxmin=bpemag(1,1,iplan,imag)
            else if (vnormlab(1).gt.0.999999d0) then
              ix1=ix1+1
              xxmax=bpemag(1,1,iplan,imag)
            else if (vnormlab(2).lt.-0.999999d0) then
              iy2=iy2+1
              yymin=bpemag(2,1,iplan,imag)
            else if (vnormlab(2).gt.0.999999d0) then
              iy1=iy1+1
              yymax=bpemag(2,1,iplan,imag)
            else if (vnormlab(3).lt.-0.999999d0) then
              iz2=iz2+1
              zzmin=bpemag(3,1,iplan,imag)
            else if (vnormlab(3).gt.0.999999d0) then
              iz1=iz1+1
              zzmax=bpemag(3,1,iplan,imag)
            endif
          enddo

          if (
     &      ix1.ne.1.or.ix2.ne.1.or.
     &      iy1.ne.1.or.iy2.ne.1.or.
     &      iz1.ne.1.or.iz2.ne.1) cycle

          xcen=(xxmax+xxmin)/2.0d0
          ycen=(yymax+yymin)/2.0d0
          zcen=(zzmax+zzmin)/2.0d0

          bpebc(1,imag)=xcen
          bpebc(2,imag)=ycen
          bpebc(3,imag)=zcen

          bpebc(8,imag)=-6

          dx=xxmax-xxmin
          dy=yymax-yymin
          dz=zzmax-zzmin

          iplan=1
          ibpecorn(iplan,imag)=5
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=2
          ibpecorn(iplan,imag)=5
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=3
          ibpecorn(iplan,imag)=5
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=4
          ibpecorn(iplan,imag)=5
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=5
          ibpecorn(iplan,imag)=5
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=6
          ibpecorn(iplan,imag)=5
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0

          do iplan=1,6
            bpemag(1,5,iplan,imag)=bpemag(1,1,iplan,imag)
            bpemag(2,5,iplan,imag)=bpemag(2,1,iplan,imag)
            bpemag(3,5,iplan,imag)=bpemag(3,1,iplan,imag)
          enddo !iplan

c center of magnet in lab

          rmag(1)=bpebc(1,imag)
          rmag(2)=bpebc(2,imag)
          rmag(3)=bpebc(3,imag)

c magnetization vector in lab

          vmaglab(1)=bpebc(4,imag)
          vmaglab(2)=bpebc(5,imag)
          vmaglab(3)=bpebc(6,imag)

          bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)

c        write(lun6,*)"imag,rmag:",imag,rmag

          do iplan=1,ibpeplan(imag)

c three points defining plane (lab.-system)

c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p1

            p1(1)=bpemag(1,1,iplan,imag)
            p1(2)=bpemag(2,1,iplan,imag)
            p1(3)=bpemag(3,1,iplan,imag)

            p2(1)=bpemag(1,2,iplan,imag)
            p2(2)=bpemag(2,2,iplan,imag)
            p2(3)=bpemag(3,2,iplan,imag)

            p3(1)=bpemag(1,3,iplan,imag)
            p3(2)=bpemag(2,3,iplan,imag)
            p3(3)=bpemag(3,3,iplan,imag)

            call undumag_bpen(imag,iplan,p1,p2,p3,vnormlab,ifail)

            if (ifail.ne.0) then
              write(lun6,*)"*** Error 13 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &          imag,iplan
              stop
            endif

c check if normal vector is perpendicular to magnetization vector
c if mag. vector is parallel, skip plane

            if (bc.ne.0.0d0) then
              dum=abs(
     &          (vnormlab(1)*vmaglab(1)+vnormlab(2)*vmaglab(2)+
     &          vnormlab(3)*vmaglab(3))
     &          /bc
     &          )
            else
              dum=0.0d0
            endif

            bpetm(1,7,iplan,imag)=
     &        vmaglab(1)*vnormlab(1)+
     &        vmaglab(2)*vnormlab(2)+
     &        vmaglab(3)*vnormlab(3)

            bpetm(1,8,iplan,imag)=vnormlab(1)
            bpetm(2,8,iplan,imag)=vnormlab(2)
            bpetm(3,8,iplan,imag)=vnormlab(3)

c get matrices ts and tsinv

            call undumag_bpet(vnormlab,ts,tsinv)

c for rectangular magnets, we rotate plan such, that the flanges coinside with
c the axis of the coord.-system.

c All planes are rotated to the system of the
c first plane

            if (iplan.eq.1) then
              ts1=ts
              ts1inv=tsinv
            else
              ts=ts1
              tsinv=ts1inv
            endif !(iplan.eq.1)

            do icorn=1,5

              r1lab(1)=bpemag(1,icorn,iplan,imag)
              r1lab(2)=bpemag(2,icorn,iplan,imag)
              r1lab(3)=bpemag(3,icorn,iplan,imag)

              r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
              r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
              r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

              bperot(1,icorn,iplan,imag)=r1(1)
              bperot(2,icorn,iplan,imag)=r1(2)
              bperot(3,icorn,iplan,imag)=r1(3)

            enddo !icorn=1,ncorn

            vx=bperot(1,2,iplan,imag)-bperot(1,1,iplan,imag)
            vy=bperot(2,2,iplan,imag)-bperot(2,1,iplan,imag)
            vn=sqrt(vx*vx+vy*vy)

            sa=vy/vn
            ca=vx/vn

            tz=ts

            ts(1,1)=ca
            ts(1,2)=sa
            ts(1,3)=0.0d0

            ts(2,1)=-sa
            ts(2,2)=ca
            ts(2,3)=0.0d0

            ts(3,1)=0.0d0
            ts(3,2)=0.0d0
            ts(3,3)=1.0d0

            call util_matrix_multiplication(3,3,3,ts,tz,ts,ws)

            do i=1,3
              do j=1,3
                tsinv(i,j)=ts(j,i)
              enddo
            enddo

            do i=1,3
              do j=1,3
                bpetm(i,j,iplan,imag)=ts(i,j)
                bpetm(i,j+3,iplan,imag)=tsinv(i,j)
              enddo
            enddo

          enddo !iplan

        endif !(bpebc(8,imag).ne.-6.and.ibpeplan(imag).eq.6) then

      enddo !imag

chier
666   continue

      if (killbadmag.eq.-9999) then
        bpebc(16,1:nmag)=1.0d0
      else
        bpebc(16,1:nmag)=0.0d0
      endif

      if (killbadmag.gt.0.or.killbadmag.eq.-9999) then
        write(lun6,*)
        write(lun6,*)"Killing all voxel, but"
        open(newunit=lunkill,file="undumag.kll")
        do while (.true.)
          call util_read_line(lunkill,cline,last)
          if (last.le.0) exit
          read(cline,*)kmag,kill
          if (kmag.gt.nmag) then
            write(lun6,*)"*** Error in undumag_proc: Non existing magnet ",kmag," on undumag.kll ***"
            stop
          endif
          if (killbadmag.ne.-9999) then
            bpebc(16,kmag)=kill
            write(lun6,*)"Killing magnet ",kmag," due to flag killbadmag"
          else
            write(lun6,*)kmag
            bpebc(16,kmag)=0.0d0
          endif
        enddo
        close(lunkill)
        write(lun6,*)
      endif

      do imag=1,nmag

        mat=nint(bpebc(9,imag))

c        if (mat.lt.0) then
c          mat=nint(bcpre(2,1,-mat))
c        endif

        if (mat.eq.0) goto 9 !skip

        if (mat.gt.nmatfiles) then
          write(lun6,*)"*** Warning in undumag_proc: Material index out of range ***"
          write(lun6,*)"Skipping magnet",imag
          iwarnsum=1
          goto 9
        endif

        lmat=matmaps(2,mat)
        bn=sqrt(bpebc(4,imag)**2+bpebc(5,imag)**2+bpebc(6,imag)**2)

        if ((killbadmag.gt.0.or.killbadmag.eq.-9999).and.bpebc(16,imag).ne.0.0d0) then
          lmat=0
        endif

        if (lmat.eq.1) then
          if (bn.ne.0.0d0.and.bpebc(9,imag).ne.0.0d0) then
            if (bpebc(17,imag).ne.0.0d0.and.bpebc(17,imag).ne.-9999.0d0) cycle
            nrec=nrec+1
            bcrec(1:20,nrec)=bpebc(1:20,imag)
            bc0rec(1:3,nrec)=bpebc0(1:3,imag)
            chmagsm(1:32,nrec)=chmags(1:32,imag)
            chmothsm(1:32,nrec)=chmoths(1:32,imag)
            bmagrec(1:3,1:ncornmax,1:nplanmax,nrec)=
     &        bpemag(1:3,1:ncornmax,1:nplanmax,imag)
            brotrec(1:3,1:ncornmax,1:nplanmax,nrec)=
     &        bperot(1:3,1:ncornmax,1:nplanmax,imag)
            bpetmrec(1:3,1:8,1:nplanmax,nrec)=
     &        bpetm(1:3,1:8,1:nplanmax,imag)
            ibpeplanrec(nrec)=ibpeplan(imag)
            ibpecolrec(nrec)=ibpecol(imag)
            ibpecornrec(1:nplanmax,nrec)=ibpecorn(1:nplanmax,imag)
          endif !bn
        else if (lmat.eq.2) then
          if (bpebc(17,imag).ne.0.0d0.and.bpebc(17,imag).ne.-9999.0d0) cycle
          niron=niron+1
          bciron(1:20,niron)=bpebc(1:20,imag)
          bc0iron(1:7,niron)=bpebc0(1:7,imag)
          chmagsi(1:32,niron)=chmags(1:32,imag)
          chmothsi(1:32,niron)=chmoths(1:32,imag)
          bmagiron(1:3,1:ncornmax,1:nplanmax,niron)=
     &      bpemag(1:3,1:ncornmax,1:nplanmax,imag)
          brotiron(1:3,1:ncornmax,1:nplanmax,niron)=
     &      bperot(1:3,1:ncornmax,1:nplanmax,imag)
          bpetmiron(1:3,1:8,1:nplanmax,niron)=
     &      bpetm(1:3,1:8,1:nplanmax,imag)
          ibpeplaniron(niron)=ibpeplan(imag)
          ibpecoliron(niron)=ibpecol(imag)
          ibpecorniron(1:nplanmax,niron)=
     &      ibpecorn(1:nplanmax,imag)
        else if (lmat.ne.0) then
          write(lun6,*)
     &      "*** Error in undumag_ini_old: Unknown material index",lmat
          stop
        endif
 9    continue

      enddo !nmag

      if (nmag.gt.nspecmag) deallocate(bpemag0)
      deallocate(shuffle)

      deallocate(idamp8,bpebc,bpemag,bperot,bpetm,ibpeplan,ibpecorn,ibpecol)

      nmag=nrec+niron
      nsmag=nmag

      allocate(bpebc(20,nsmag),idamp8(nsmag))
      bpebc=0.0d0
      allocate(bpemag(3,ncornmax,nplanmax,nsmag))
      allocate(bperot(3,ncornmax,nplanmax,nsmag))
      allocate(bpetm(3,8,nplanmax,nsmag))
      allocate(ibpeplan(nsmag))
      allocate(ibpecol(nsmag))
      allocate(ibpecorn(nplanmax,nsmag))

      bpebc(1:20,1:nrec)=bcrec(1:20,1:nrec)
      bpebc0(1:3,1:nrec)=bc0rec(1:3,1:nrec)
      chmags(1:32,1:nrec)=chmagsm(1:32,1:nrec)
      chmoths(1:32,1:nrec)=chmothsm(1:32,1:nrec)
      bpemag(1:3,1:ncornmax,1:nplanmax,1:nrec)=
     &  bmagrec(1:3,1:ncornmax,1:nplanmax,1:nrec)
      bperot(1:3,1:ncornmax,1:nplanmax,1:nrec)=
     &  brotrec(1:3,1:ncornmax,1:nplanmax,1:nrec)
      bpetm(1:3,1:8,1:nplanmax,1:nrec)=
     &  bpetmrec(1:3,1:8,1:nplanmax,1:nrec)
      ibpeplan(1:nrec)=ibpeplanrec(1:nrec)
      ibpecol(1:nrec)=ibpecolrec(1:nrec)
      ibpecorn(1:nplanmax,1:nrec)=ibpecornrec(1:nplanmax,1:nrec)

      if (niron.gt.0) then

        iron1=nrec+1
        iron2=nrec+niron

        bpebc(1:20,iron1:iron2)=bciron(1:20,1:niron)

        bpebc0(1:3,iron1:iron2)=bc0iron(1:3,1:niron)
        chmags(1:32,iron1:iron2)=chmagsi(1:32,1:niron)
        chmoths(1:32,iron1:iron2)=chmothsi(1:32,1:niron)
        bpemag(1:3,1:ncornmax,1:nplanmax,iron1:iron2)=
     &    bmagiron(1:3,1:ncornmax,1:nplanmax,1:niron)
        bperot(1:3,1:ncornmax,1:nplanmax,iron1:iron2)=
     &    brotiron(1:3,1:ncornmax,1:nplanmax,1:niron)
        bpetm(1:3,1:8,1:nplanmax,iron1:iron2)=
     &    bpetmiron(1:3,1:8,1:nplanmax,1:niron)
        ibpeplan(iron1:iron2)=ibpeplaniron(1:niron)
        ibpecorn(1:nplanmax,iron1:iron2)=ibpecorniron(1:nplanmax,1:niron)

        bpebc(1:10,iron2+1:nmag)=0.0d0
        bpemag(1:3,1:ncornmax,1:nplanmax,iron2+1:nmag)=0.0d0
        bperot(1:3,1:ncornmax,1:nplanmax,iron2+1:nmag)=0.0d0
        bpetm(1:3,1:8,1:nplanmax,iron2+1:nmag)=0.0d0
        ibpeplan(iron2+1:nmag)=0
        ibpecorn(1:nplanmax,iron2+1:nmag)=0
        ibpecol(iron1:iron2)=ibpecoliron(1:niron)
        ibpecol(iron2+1:nmag)=0

      endif !iron

      kmag=0
      npol=0
      do imoth=1,nmoth
        if (matmoth(imoth).eq.1) then
          kmag=kmag+1
          xmothm(1:maxpoints,kmag)=xmoth(1:maxpoints,imoth)
          ymothm(1:maxpoints,kmag)=ymoth(1:maxpoints,imoth)
          zmothm(1:maxpoints,kmag)=zmoth(1:maxpoints,imoth)
          npmothm(kmag)=npmoth(imoth)
          matmothm(kmag)=matmoth(imoth)
          ncolmothm(kmag)=ncolmoth(imoth)
        else if (matmoth(imoth).eq.2) then
          npol=npol+1
          xmothi(1:maxpoints,npol)=xmoth(1:maxpoints,imoth)
          ymothi(1:maxpoints,npol)=ymoth(1:maxpoints,imoth)
          zmothi(1:maxpoints,npol)=zmoth(1:maxpoints,imoth)
          npmothi(npol)=npmoth(imoth)
          matmothi(npol)=matmoth(imoth)
          ncolmothi(npol)=ncolmoth(imoth)
        endif
      enddo

      xmoth(1:maxpoints,1:kmag)=xmothm(1:maxpoints,1:kmag)
      ymoth(1:maxpoints,1:kmag)=ymothm(1:maxpoints,1:kmag)
      zmoth(1:maxpoints,1:kmag)=zmothm(1:maxpoints,1:kmag)
      npmoth(1:kmag)=npmothm(1:kmag)
      matmoth(1:kmag)=matmothm(1:kmag)
      ncolmoth(1:kmag)=ncolmothm(1:kmag)

      xmoth(1:maxpoints,kmag+1:kmag+npol)=xmothi(1:maxpoints,1:npol)
      ymoth(1:maxpoints,kmag+1:kmag+npol)=ymothi(1:maxpoints,1:npol)
      zmoth(1:maxpoints,kmag+1:kmag+npol)=zmothi(1:maxpoints,1:npol)
      npmoth(kmag+1:kmag+npol)=npmothi(1:npol)
      matmoth(kmag+1:kmag+npol)=matmothi(1:npol)
      ncolmoth(kmag+1:kmag+npol)=ncolmothi(1:npol)

      dx0=dx

      xmaxinf = xmax

      xmin=1.0d30
      xmax=-1.0d30
      do imag=1,nmag
        if (bpebc(9,imag).ne.0) then
          do iplan=1,ibpeplan(imag)
            do icorn=1,ibpecorn(iplan,imag)
              vcorn(1)=bpemag(1,icorn,iplan,imag)
              if (vcorn(1).lt.xmin) xmin=vcorn(1)
              if (vcorn(1).gt.xmax) xmax=vcorn(1)
            enddo !icorn
          enddo !iplan
        endif

        if (kpreset.eq.0) then
          bpebc(11:14,imag)=bpebc(4:7,imag)
          bpebc(11:13,imag)=bpebc(11:13,imag)/bpebc(14,imag)
        endif

      enddo !imag

      xmin = min(xmin,xcwmin)
      xmax = max(xmax,xcwmax)

      if (kxcenter.ne.0) then

        if (ixsym.eq.0) then
          dx=xcenter-(xmax+xmin)/2.0d0
        else
          dx=xcenter-xsymmm
        endif

        xmin=xmin+dx
        xmax=xmax+dx

        dxfb=dx
        if (iforce.ne.9999) then
          ubfcenx=ubfcenx+dx
          bfcenxmm=ubfcenx
          utorqcenx=utorqcenx+dx
          if (utorqcenx.eq.9999.0d0) utorqcenx=ubfcenx
          bfcenx=ubfcenx/1000.0d0
          torqcenxmm=utorqcenx
          torqcenx=utorqcenx/1000.0d0
        endif

        forxpl=forxpl+dx

        xcentershift=dx

        write(lun6,*)
        write(lun6,*) "xcenter, shift:",xcenter,dx
        write(lun6,*)

        do moth=1,nmoth
          xmoth(1:npmoth(moth),moth)=xmoth(1:npmoth(moth),moth)+dx
        enddo

        do imag=1,nmag
          bpebc(1,imag)=bpebc(1,imag)+dx
          do iplan=1,ibpeplan(imag)

            do i=1,3
              do j=1,3
                ts(i,j)=bpetm(i,j,iplan,imag)
              enddo
            enddo

            do icorn=1,ibpecorn(iplan,imag)

              bpemag(1,icorn,iplan,imag)=bpemag(1,icorn,iplan,imag)+dx

              r1lab(1)=bpemag(1,icorn,iplan,imag)
              r1lab(2)=bpemag(2,icorn,iplan,imag)
              r1lab(3)=bpemag(3,icorn,iplan,imag)

              r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
              r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
              r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

              bperot(1,icorn,iplan,imag)=r1(1)
              bperot(2,icorn,iplan,imag)=r1(2)
              bperot(3,icorn,iplan,imag)=r1(3)

            enddo !icorn
          enddo !iplan
        enddo !imag

      endif !kxcenter.ne.0

      g=0.0

      if (nmag.eq.0.or.(nxconv.eq.0.and.dxconv.eq.0.0d0)) then
        nxconv=1
        xconv(1)=0.0d0
        goto 1234
      endif

      nxconv=abs(nxconv)

      if (xconvmin.eq.9999.0d0) then
        xconvmin=xmin+mod(xmin,perlen)-1.0d0*perlen
        if (xconvmin.gt.xcwmin) xconvmin=xcwmin
      endif !(xconvmin.eq.9999.0d0) then

      if (xconvmax.eq.9999.0d0) then
        if (kxcenter.ne.0) then
          xconvmax=xcenter
        else
          xconvmax=xmax-mod(xmax,perlen)+2.0d0*perlen
        endif
        if (xconvmax.lt.xcwmax) xconvmax=xcwmax
      endif !(xconvmax.eq.9999.0d0) then

      if (xconvmax.le.xconvmin) xconvmin=xconvmax-perlen/2.0d0

      if (nxconv.eq.9999) then
        nxconv=(xconvmax-xconvmin)/perlen*2+1
      endif

      if (dxconv.eq.9999.0d0) dxconv=perlen/2.0d0

      if (abs(dxconv).gt.0.0d0) then
        nxconv=(xconvmax-xconvmin)/dxconv+1
        if (nxconv.gt.100) then
          write(lun6,*)"*** Warning in undmag_ini: dxconv changed to limit nxconv to 100 ***"
          nxconv=100
        endif
        dxconv=(xconvmax-xconvmin)/max(1,nxconv-1)
      else
        if (nxconv.gt.100) then
          write(lun6,*)"*** Warning in undmag_ini: nxconv limited to 100 ***"
          nxconv=100
        endif
        dxconv=(xconvmax-xconvmin)/max(1,nxconv-1)
      endif

      if (dxconv.lt.0.0d0) then
        dxcon(1)=0.0d0
        dx=1.0d0
        do i=2,nxconv
          dxcon(i)=dxcon(i-1) + dx
          dx=dx*abs(dxconv)
        enddo
        xlen=dxcon(nxconv)
        do i=2,nxconv
          xconv(i)=xconv(i-1) + (dxcon(i)-dxcon(i-1))*(xconvmax-xconvmin)/xlen
        enddo
      else
        do i=1,nxconv
          xconv(i)=xconvmin+dxconv*(i-1)
        enddo
      endif !(dxconv.lt.0.0d0) then

      do i=1,nxconv
        ! to avoid boundary effects:
        call util_random(2,g)
        g=g-0.5
        if (abs(g(1)).lt.randox10) then
          if (g(1).gt.0.0d0) then
            g(1)=g(1)+randox10
          else
            g(1)=g(1)-randox10
          endif
        endif
        xconv(i)=(xconv(i)+g(1)*randoxa)/1000.0d0
      enddo

      yconv=yconv/1000.0d0

      if (abs(g(2)).lt.randoz10) then
        if (g(2).gt.0.0d0) then
          g(2)=g(2)+randoz10
        else
          g(2)=g(2)-randoz10
        endif
      endif

      if (zconv.eq.0.0d0) then
        if (randoza.gt.0.0d0) then
          zconv=(zconv+g(2)*randoza)/1000.0d0
        else
          zconv=(zconv+randoza)/1000.0d0
        endif
      else
        zconv=zconv/1000.0d0
      endif

1234  continue

      nspecmag=0
      do imag=1,nmag
        if (bpebc(10,imag).ne.0) then
          nspecmag=nspecmag+1
        endif
      enddo

      if (nspecmag.gt.0) then
        allocate(kspecmag(nspecmag))
        nspecmag=0
        do imag=1,nmag
          if (bpebc(10,imag).ne.0) then
            nspecmag=nspecmag+1
            kspecmag(nspecmag)=imag
          endif
        enddo
      endif

c      xmin=xmin-dx0
c      xmax=xmax+dx0

      deallocate(ibpecornrec)
      deallocate(ibpeplanrec)
      deallocate(bpetmrec)
      deallocate(brotrec)
      deallocate(bmagrec)
      deallocate(bcrec)
      deallocate(ibpecolrec)

      deallocate(ibpecorniron)
      deallocate(ibpeplaniron)
      deallocate(bpetmiron)
      deallocate(brotiron)
      deallocate(bmagiron)
      deallocate(bciron,bc0rec,bc0iron)
      deallocate(ibpecoliron)

      if (ixsym.gt.0) then
        if (xmin.lt.xsymmm-tiny2.and.xmax.gt.xsymmm+tiny2) then
          write(lun6,*)"*** Error in input: Option ixsym is set, but not all x-values are on the same side of xsymm!"
          write(lun6,*)"*** Program undumag aborted ***"
          stop
        endif
        dx=xsymmm-xmin
        xmax=xsymmm+dx
        xsym=xsymmm/1000.0d0
      endif

      if (iysym.gt.0) then
        if (ymin.lt.-tiny2.and.ymax.gt.tiny2) then
          write(lun6,*)"*** Error in input: Option iysym is set, but not all y-values have the same sign!"
          if (iysymo.gt.0) then
            write(lun6,*)"*** Program undumag aborted ***"
            stop
          endif
        endif
        ymax=max(abs(ymax),abs(ymin))
        ymin=-ymax
      endif

      if (izsym.ne.0) then
        if (zmin.lt.-tiny2.and.zmax.gt.tiny2) then
          if (izsymo.gt.0) then
            write(lun6,*)"*** Error in input: Option izsym is set, but not all z-values have the same sign!"
            write(lun6,*)"*** Program undumag aborted ***"
            stop
          else if (izsymo.lt.0) then
            write(lun6,*)"*** Warning in input: Option izsym is set, but not all z-values have the same sign!"
          endif
        endif
        zmax=max(abs(zmax),abs(zmin))
        zmin=-zmax
      endif

      do imag=1,nmag

c        write(lun6,*)"1 Info:",imag,bpebc(15,imag),chmags(1:32,imag),chmoths(1:32,imag)
        write(chmoth,'(32a)')chmoths(1:32,imag)

        if (kdisplace.ne.0) then
          do idisp=1,ndisp
            if (chmoth.eq.chdisp(idisp)) then

              cosphi=cos(displace(6,idisp))
              sinphi=sin(displace(6,idisp))

              bpebc(1:3,imag)=bpebc(1:3,imag)+displace(1:3,idisp)

              y00=bpebc(2,imag)-displace(4,idisp)
              z00=bpebc(3,imag)-displace(5,idisp)
              bpebc(2,imag)= -sinphi*z00 + cosphi*y00
     &              +displace(4,idisp)
              bpebc(3,imag)=  cosphi*z00 + sinphi*y00
     &          +displace(5,idisp)

              bpebc(4:6,imag)=bpebc(4:6,imag)+displace(7:9,idisp)

              bcy=bpebc(5,imag)
              bcz=bpebc(6,imag)
              bpebc(5,imag)= -sinphi*bcz + cosphi*bcy
              bpebc(6,imag)=  cosphi*bcz + sinphi*bcy

              nplan=ibpeplan(imag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,imag)
                do icorn=1,ncorn

                  x00=bpemag(1,icorn,iplan,imag)+displace(1,idisp)
                  bpemag(1,icorn,iplan,imag)= x00

                  y00=bpemag(2,icorn,iplan,imag)+displace(2,idisp)
     &              -displace(4,idisp)
                  z00=bpemag(3,icorn,iplan,imag)+displace(3,idisp)
     &              -displace(5,idisp)
                  bpemag(2,icorn,iplan,imag)= -sinphi*z00 + cosphi*y00
     &              +displace(4,idisp)
                  bpemag(3,icorn,iplan,imag)=  cosphi*z00 + sinphi*y00
     &              +displace(5,idisp)
                enddo
              enddo
            endif
          enddo
        endif

c        write(lun6,*)imag,moth,chmoth,chmoths(1:32,imag)
      enddo

      if (kdisplace.ne.0) then
        write(lun6,*)
        write(lun6,*)
        write(lun6,*)"Displacement and change of magnetization activated:"
        write(lun6,*)
        do idisp=1,ndisp
          write(lun6,*)idisp,trim(chdisp(idisp)),sngl(displace(1:9,idisp))
        enddo
        write(lun6,*)
        write(lun6,*)
        write(lun6,*)
      endif

      open(newunit=lunmag,file='undumag.mag',form='formatted',status='unknown')

      write(lunmag,'(a)')trim(cundutit)

      do imag=1,nmag

        do iplan=1,ibpeplan(imag)
          do icorn=1,ibpecorn(iplan,imag)

            htup(1)=bpebc(15,imag)
            htup(2)=imag
            htup(3)=ibpecol(imag)
            htup(4)=iplan
            htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
            htup(6)=bpemag(1,icorn,iplan,imag)
            htup(7)=bpemag(2,icorn,iplan,imag)
            htup(8)=bpemag(3,icorn,iplan,imag)
            htup(9)=bpebc(4,imag)
            htup(10)=bpebc(5,imag)
            htup(11)=bpebc(6,imag)
            htup(12)=bpebc(9,imag)

            vmaglab(1)=bpebc(4,imag)
            vmaglab(2)=bpebc(5,imag)
            vmaglab(3)=bpebc(6,imag)

            bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
            bpebc(7,imag)=bc

            if (bc.ne.0.0d0) then
              do i=5,10
                if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
              enddo
              write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
              chmoth1a=chmoths(1:32,imag)
              c32a=chmags(1:32,imag)
              cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
              write(lunmag,'(a)') trim(cline)
            endif !BC

          enddo !ncorn
        enddo !nplan
      enddo !nmag

      if (kplsym.eq.0) then
        if (ixsymo.ne.0) then
          dx=xmax-xmin
          xmax=xmax-dx/2.
        endif
        if (iysymo.ne.0) then
          dy=ymax-ymin
          ymax=ymax-dy/2.
        endif
        if (izsymo.ne.0) then
          dz=zmax-zmin
          zmax=zmax-dz/2.
        endif
        goto 19
      endif

      if (ixsym.eq.0) then
        if (iysym.ne.0.and.izsym.eq.0) then
          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.ne.0) then

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym and izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        endif !(izsym.ne.) then

      else !:ixsym.eq.0

        if (iysym.eq.0.and.izsym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=xsymmm+(xsymmm-bpemag(1,icorn,iplan,imag))
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (iysym.ne.0.and.izsym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y1z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x2y1z1
                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=xsymmm+(xsymmm-bpemag(1,icorn,iplan,imag))
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x2y1z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=xsymmm+(xsymmm-bpemag(1,icorn,iplan,imag))
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.ne.0) then

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y1z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y2z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym and izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y2z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x2y1z1
                htup(1)=bpebc(15,imag)
                htup(2)=imag+4*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+5*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym and izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+6*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+7*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        endif !(izsym.ne.) then

      endif !(ixsym.eq.0) then

19    close(lunmag)
      close(lun76)

      deallocate(corn1,corn2,ncorn1,ncorn2)

+self,if=chmagpols.
      if (nmag.gt.0) then
        nmagpols=1
        chmagpols(1:32,nmagpols)=chmoths(1:32,1)
      endif

      do imag=2,nmag
        do imp=1,nmagpols
          ifound=1
          do ic=1,32
            if (chmoths(ic,imag).ne.chmagpols(ic,imp)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.0) then
            nmagpols=nmagpols+1
            chmagpols(1:32,nmagpols)=chmoths(1:32,imag)
            exit
          endif
        enddo
      enddo

      do imag=1,nmag
        do imp=1,nmagpols
          ifound=1
          do ic=1,32
            if (chmoths(ic,imag).ne.chmagpols(ic,imp)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.1) then
            bpebc(15,imag)=imp
            exit
          endif
        enddo
      enddo
+self.,if=chmagpols.

      kforcemag=0

      if (iforce.eq.9999.or.iforcedip.ne.0) then

        if (chforcemag.eq.'') then
          write(lun6,*)"*** iforce=9999, but chforcemag is an empty string ***"
          write(lun6,*)
          stop
        endif

        write(lun6,*)""
        write(lun6,*)"      chforcemag: ",trim(chforcemag)
        do imag=1,nmag
          do ic=1,32
            chmoth(ic:ic)=chmoths(ic,imag)
          enddo
          if (chmoth.eq.chforcemag) then
            kforcemag=imag
            exit
          endif
        enddo

c        call undumag_magpol_index(chforcemag,kforcemag)
        if (kforcemag.eq.0) then
          write(lun6,*)"*** Magnet ",trim(chforcemag),"  for force calculations not found ***"
          write(lun6,*)"*** Check undumag_magnets.lis ***"
          stop
        endif

        if (chforcemag.eq.'') then
          chforcemag='None'
        endif

      endif !iforce, iforcedip

      if (iforce.eq.9999) then

        moth=nint(bpebc(15,kforcemag))

        xminfb=1.0d30
        xmaxfb=-1.0d30
        yminfb=1.0d30
        ymaxfb=-1.0d30
        zminfb=1.0d30
        zmaxfb=-1.0d30

        do imag=1,nmag
          gcen=bpebc(1:3,imag)
          bpebc15=bpebc(15,imag)
          if (nint(bpebc15).ne.moth) cycle
          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              x=bpemag(1,icorn,iplan,imag)
              y=bpemag(2,icorn,iplan,imag)
              z=bpemag(3,icorn,iplan,imag)
              if (x.lt.xminfb) xminfb=x
              if (x.gt.xmaxfb) xmaxfb=x
              if (y.lt.yminfb) yminfb=y
              if (y.gt.ymaxfb) ymaxfb=y
              if (z.lt.zminfb) zminfb=z
              if (z.gt.zmaxfb) zmaxfb=z
            enddo !icorn
          enddo !iplan
        enddo

        ubfcenx=(xmaxfb+xminfb)/2.0d0
        ubflenx=(xmaxfb-xminfb)
        if (ixsym.ne.0.and.(xmin.le.xsym.or.xmax.ge.xsym)) then
          ubfcenz=xsym
          ubflenz=2.0d0*ubflenz
        endif

        ubfceny=(ymaxfb+yminfb)/2.0d0
        ubfleny=(ymaxfb-yminfb)

        ubfcenz=(zmaxfb+zminfb)/2.0d0
        ubflenz=(zmaxfb-zminfb)
        if (izsym.ne.0) then
          ubfcenz=0.0d0
          ubflenz=2.0d0*ubflenz
        endif

        ubflenx=ubflenx+dedgefb
        ubfleny=ubfleny+dedgefb
        ubflenz=ubflenz+dedgefb

        if (utorqcenx.eq.9999.0d0) utorqcenx=ubfcenx
        if (utorqceny.eq.9999.0d0) utorqceny=ubfceny
        if (utorqcenz.eq.9999.0d0) utorqcenz=ubfcenz

        bfcenxmm=ubfcenx
        bfcenymm=ubfceny
        bfcenzmm=ubfcenz
        bflenxmm=ubflenx
        bflenymm=ubfleny
        bflenzmm=ubflenz
        torqcenxmm=utorqcenx
        torqcenymm=utorqceny
        torqcenzmm=utorqcenz
        bfcenx=ubfcenx/1000.0d0
        bfceny=ubfceny/1000.0d0
        bfcenz=ubfcenz/1000.0d0
        bflenx=ubflenx/1000.0d0
        bfleny=ubfleny/1000.0d0
        bflenz=ubflenz/1000.0d0
        torqcenx=utorqcenx/1000.0d0
        torqceny=utorqceny/1000.0d0
        torqcenz=utorqcenz/1000.0d0
        jplforce=iplforce
        if (iforce.eq.0) then
          mbforcex=0
          mbforcey=0
          mbforcez=0
        endif
        nbforcx=mbforcex
        nbforcy=mbforcey
        nbforcz=mbforcez
        iforcol=mfcolor
        forcol=iforcol
        forxpl(1)=bfcenxmm-bflenxmm/2.
        forxpl(2)=bfcenxmm+bflenxmm/2.
        forypl(1)=bfcenymm-bflenymm/2.
        forypl(2)=bfcenymm+bflenymm/2.
        forzpl(1)=bfcenzmm-bflenzmm/2.
        forzpl(2)=bfcenzmm+bflenzmm/2.

      endif !(iforce.eq.9999) then

      if (mbforcex*mbforcey*mbforcez.gt.0) then
        outbox(1,1)=ubfcenx-ubflenx/2.
        outbox(2,1)=ubfcenx+ubflenx/2.
        outbox(1,2)=ubfceny-ubfleny/2.
        outbox(2,2)=ubfceny+ubfleny/2.
        outbox(1,3)=ubfcenz-ubflenz/2.
        outbox(2,3)=ubfcenz+ubflenz/2.
      else
        outbox(1,1)=+1.0d30
        outbox(2,1)=-1.0d30
        outbox(1,2)=+1.0d30
        outbox(2,2)=-1.0d30
        outbox(1,3)=+1.0d30
        outbox(2,3)=-1.0d30
      endif

      do i=1,ncwires
        wire(3,i)=wire(3,i)+xcentershift
        wire(6,i)=wire(6,i)+xcentershift
      enddo

      if (nmag.eq.0) then
        xmin=1.0d30
        xmax=-1.0d30
        ymin=1.0d30
        ymax=-1.0d30
        zmin=1.0d30
        zmax=-1.0d30
      endif

      do i=1,ncwires
        if (wire(3,i).lt.xmin) xmin=wire(3,i)
        if (wire(3,i).gt.xmax) xmax=wire(3,i)
        if (wire(6,i).lt.xmin) xmin=wire(6,i)
        if (wire(6,i).gt.xmax) xmax=wire(6,i)
        if (wire(4,i).lt.ymin) ymin=wire(4,i)
        if (wire(4,i).gt.ymax) ymax=wire(4,i)
        if (wire(7,i).lt.ymin) ymin=wire(7,i)
        if (wire(7,i).gt.ymax) ymax=wire(7,i)
        if (wire(5,i).lt.zmin) zmin=wire(5,i)
        if (wire(5,i).gt.zmax) zmax=wire(5,i)
        if (wire(8,i).lt.zmin) zmin=wire(8,i)
        if (wire(8,i).gt.zmax) zmax=wire(8,i)
      enddo

      if (xmapmin.eq.9999.0d0) then
        xmapmin=xmin+mod(xmin,perlen)-9.0d0*perlen
        if (xmapmin.gt.xcwmin) xmapmin=xcwmin
      else if (xmapmin.eq.9000.0d0) then
        xmapmin=xcenter-perlen/2.0d0
        if (xmapmin.gt.xcwmin) xmapmin=xcwmin
      else if (xmapmin.eq.-9000.0d0) then
        xmapmin=xcenter-perlen/4.0d0
        if (xmapmin.gt.xcwmin) xmapmin=xcwmin
      endif

      if (xmapmax.eq.9999.0d0) then
        xmapmax=xmax-mod(xmax,perlen)+10.0d0*perlen
        if (xmapmax.lt.xcwmax) xmapmax=xcwmax
      else if (xmapmax.eq.9000.0d0) then
        xmapmax=xcenter+perlen/2.0d0
        if (xmapmax.lt.xcwmax) xmapmax=xcwmax
      else if (xmapmax.eq.-9000.0d0) then
        xmapmax=xcenter+perlen/4.0d0
        if (xmapmax.lt.xcwmax) xmapmax=xcwmax
      endif

      if (iplot.ne.0.and.nmag+ncwires.ne.0) then
        xplmin=xminpl
        xplmax=xmaxpl
        yplmin=yminpl
        yplmax=ymaxpl
        zplmin=zminpl
        zplmax=zmaxpl
        if (xminpl.eq.9999.0d0) xplmin=xmin-(xmax-xmin)*0.1
        if (xmaxpl.eq.9999.0d0) xplmax=xmax+(xmax-xmin)*0.1
        if (yminpl.eq.9999.0d0) yplmin=ymin-(ymax-ymin)*0.1
        if (ymaxpl.eq.9999.0d0) yplmax=ymax+(ymax-ymin)*0.1
        if (zminpl.eq.9999.0d0) zplmin=zmin-(zmax-zmin)*0.1
        if (zmaxpl.eq.9999.0d0) zplmax=zmax+(zmax-zmin)*0.1
        call undumag_bpolyplot_old(iplot,xplmin,xplmax,yplmin,yplmax,zplmin,zplmax,
     &    theta,pphi,nwitems,ncwires,wire)
      endif !iplot

      if (dxmap.eq.0.0d0.and.nxmap.eq.0.0d0) then
        nxmap=1
      endif

      if (dxmap.eq.9999.0d0) then
        if (nxbeff.gt.1) then
          dxmap=perlen/(nxbeff-1)
        else
          dxmap=perlen
        endif
      endif
      if (dxmap.ne.0.0d0) nxmap=nint((xmapmax-xmapmin)/dxmap)+1
      if (nxmap.le.0) then
        write(lun6,*)"*** Warning in undumag_ini_old: nxmap.le.0 ***"
      endif

      if (nymap.le.0) nymap=1
      if (nzmap.le.0) nzmap=1

cdebug
      if (nmag.le.0.and.ncwires.eq.0) goto 9999

      if (kpreset.ne.0) then

        maxplan=0

        open(newunit=lunpre,file='undumag.pre',status='old')
        npre=0
12      continue
        read(lunpre,*,end=92)nplan
        if (nplan.gt.maxplan) maxplan=nplan
        do iplan=1,nplan
          read(lunpre,*,end=92)xx
        enddo
        npre=npre+1
        goto 12
92      rewind(lunpre)

        allocate(bcpre(6,maxplan,npre),bpre16(16,npre))

        do ipre=1,npre
          read(lunpre,*)nplan,bpre16(1:15,ipre)
          bpre16(16,ipre)=nplan
          do iplan=1,nplan
            read(lunpre,*)bcpre(1:6,iplan,ipre)
c            write(33,*),ipre,iplan,bcpre(1:6,iplan,ipre)
          enddo
        enddo

        close(lunpre)

        do imag=1,nmag

          xx=bpebc(1,imag)
          yy=bpebc(2,imag)
          zz=bpebc(3,imag)

          ifound=0

          do ipre=1,npre

            nplan=nint(bpre16(16,ipre))

            do iplan=1,nplan

              dlab(1)=xx-bcpre(1,iplan,ipre)
              dlab(2)=yy-bcpre(2,iplan,ipre)
              dlab(3)=zz-bcpre(3,iplan,ipre)

              vnormlab(1)=bcpre(4,iplan,ipre)
              vnormlab(2)=bcpre(5,iplan,ipre)
              vnormlab(3)=bcpre(6,iplan,ipre)

              if( dlab(1)*vnormlab(1)+dlab(2)*vnormlab(2)+
     &            dlab(3)*vnormlab(3).gt.0.0d0) then
                goto 99
              endif

            enddo !iplan

            ifound=ipre

            lmat=matmaps(2,nint(bpebc(9,imag)))

            bpebc(1:15,imag)=bpre16(1:15,ipre)
            bpebc(16,imag)=0.0d0

            if (lmat.eq.2) then
              bpebc(14,imag)=bpre16(7,ipre)
              bpebc(11:13,imag)=bpre16(4:6,ipre)/bpre16(7,ipre)
            else if (lmat.eq.1.and.maxiterrec.gt.0) then
              bn=bpre16(14,ipre)
              bpebc(4:6,imag)=bpre16(11:13,ipre)*bn
              bpebc(7,imag)=bn
            endif

            goto 999
99          continue

          enddo !npre
999       continue

          if (ifound.eq.0) then
            write(lun6,*)"*** Warning in undumag_ini_old: No preset values found for magnet:",imag,xx,yy,zz
            bpebc(4:7,imag)=0.0d0
          endif

        enddo !imag

        deallocate(bcpre,bpre16)

      endif !kpreset

      if (iundugeo.ne.0) then

        write(lun6,*)
        write(lun6,*)'Writing geometry to undumag.geo'
        write(lun6,*)

        open(newunit=lunvox,file="undumag.geo")

        write(lunvox,'(a)')
     &    "* mag type xcen ycen zcen mother ixdiv iydiv izdiv mate color bcx bcy bcz bc plane corn x y z"

        if (nmag.gt.0) then
          moth=1
          do ic=1,32
            chmag(ic:ic)=chmags(ic,moth)
          enddo
        endif

        do imag=1,nmag

          gcen=bpebc(1:3,imag)
          nplan=ibpeplan(imag)
          moth=bpebc(15,imag)

          if(moth.ne.motho) then

            do ic=1,32
              chmag(ic:ic)=chmags(ic,imag)
            enddo

            write(cline,*)"* ",trim(chmag),moth
            write(lunvox,'(a)')cline(2:len_trim(cline))

            motho=moth

          endif

          imat=bpebc(9,imag)
          ispec=bpebc(10,imag)
          bx=bpebc(11,imag)
          by=bpebc(12,imag)
          bz=bpebc(13,imag)
          bc=bpebc(14,imag)
          ncol=ibpecol(imag)
          itype=bpebc(8,imag)
          mothdiv(1,imag)=moth
          motho=0

          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              x=bpemag(1,icorn,iplan,imag)
              y=bpemag(2,icorn,iplan,imag)
              z=bpemag(3,icorn,iplan,imag)
              write(lunvox,*)imag,itype,
     &          sngl(gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &          ,mothdiv(1:4,imag),imat,ncol
     &          ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &          ,iplan,icorn
     &          ,sngl(x),sngl(y),sngl(z)
     &          ,chmags(:,imag),chmoths(:,imag)
              if (kplsym.ne.0) then
                if (ixsym.ne.0.and.iysym.ne.0.and.izsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)4*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)5*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)6*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)7*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(-y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (ixsym.ne.0.and.iysym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (ixsym.ne.0.and.izsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(-bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (iysym.ne.0.and.izsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(-bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (ixsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (iysym.ne.0.) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (izsym.ne.0.) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                endif !syms
              endif !(kplsym.ne.0) then
            enddo
          enddo
        enddo !nmag

        do i=1,ncwires
          mag=i
          itype=wire(1,i)
          moth=wire(10,i)
          icol=wire(9,i)
          x1=wire(3,i)
          y1=wire(4,i)
          z1=wire(5,i)
          ix=1
          iy=1
          iz=1
          mat=-1
          icol=wire(9,i)
          x2=wire(6,i)
          y2=wire(7,i)
          z2=wire(8,i)
          xc=(x2+x1)/2.0
          yc=(y2+y1)/2.0
          zc=(z2+z1)/2.0
          x21=(x2-x1)
          y21=(y2-y1)
          z21=(z2-z1)
          cw=wire(2,i)
          iplan=0
          icorn=0
          write(lunvox,*)mag,itype,xc,yc,zc,moth,ix,iy,iz,mat,icol,dx,dy,dz,cw,
     &      iplan,icorn,x1,y1,z1," wire", " wire"
        enddo !ncwires

        write(lun6,*)
        write(lun6,*)'Done'
        write(lun6,*)

        close(lunvox)

        if (iundugeo.lt.0) then
          open(newunit=lun,file="undumag.stat")
          write(lun,*)"0"
          flush(lun)
          close(lun)
          open(newunit=lun,file="undumag.sta")
          write(lun,*)'UNDUMAG finished due to iundugeo<0'
          flush(lun)
          close(lun)
          stop
        endif

      endif !(iundugeo.ne.0) then

      if (kseg.eq.1) then
+self,if=trace.
      print*,"-trace-: Leaving undumag_ini_old "
+self.
        return
      endif

      maxpoints=ncornmax*nplanmax

      if (ihullallo.ne.0) then
        deallocate(hull,khull,kface,kedge,xhull,yhull,zhull)
      endif

      allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
      allocate(khull(maxpoints))
      allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))

cdebug
      if (ivrml.ne.0) then

        write(lun6,*)
        write(lun6,*)'Writing geometry to CAD file undumag.wrl'
        write(lun6,*)

        allocate(khullmoth(maxpoints,nmoth),
     &    kfacemoth(maxpoints,nmoth),nplanmoth(nmoth))

        open(newunit=lunvrml,file="undumag.wrl")

        write(lunvrml,'(a)')"#VRML V2.0 utf8"
        write(lunvrml,*)
        write(cline,*)"# UNDUMAG: ",kundurun,trim(usercom),' ',
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
        write(lunvrml,*)cline(2:len_trim(cline))
        write(lunvrml,*)" "

        if (ivrml.eq.1.or.ivrml.eq.2) then

          do moth=1,nmoth

            do ic=1,32
              chmag(ic:ic)=chmags(ic,moth)
            enddo

            write(lunvrml,*)" "
            write(lunvrml,*)"# --- ",chmag
            write(lunvrml,*)" "

            korn=npmoth(moth)
            xhull(1:korn)=xmoth(1:korn,moth)
            yhull(1:korn)=ymoth(1:korn,moth)
            zhull(1:korn)=zmoth(1:korn,moth)

            call util_weed_points(korn,xhull,yhull,zhull,tiny)

            call util_convex_hull_3d(korn,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
              write(lun6,*)"*** writing of VRML-File"
              stop
            endif

            khullmoth(1:nhull,moth)=khull(1:nhull)
            kfacemoth(1:kfacelast,moth)=kface(1:kfacelast)
            nplanmoth(moth)=nface

! Magnet is represented by faces

            write(lunvrml,*)"Shape{"
            write(lunvrml,*)" "
            write(lunvrml,*)"  appearance Appearance{"
            write(lunvrml,*)"    material Material{"
            color(1)=1
            color(2)=1
            color(3)=1
            if (ncolmoth(moth).eq.1) then !black
              color(1)=0
              color(2)=0
              color(3)=0
            else if (ncolmoth(moth).eq.2) then !red
              color(1)=1
              color(2)=0
              color(3)=0
            else if (ncolmoth(moth).eq.3) then !bright green
              color(1)=0
              color(2)=1
              color(3)=0
            else if (matmoth(moth).eq.4) then !blue
              color(1)=0
              color(2)=0
              color(3)=1
            else if (ncolmoth(moth).eq.5) then !gelb
              color(1)=1.
              color(2)=1.
              color(3)=0
            else if (ncolmoth(moth).eq.6) then !magenta
              color(1)=1
              color(2)=0
              color(3)=1
            else if (ncolmoth(moth).eq.7) then !light blau
              color(1)=0
              color(2)=1
              color(3)=1
            else if (ncolmoth(moth).eq.8) then ! green
              color(1)=0.35
              color(2)=0.83
              color(3)=0.33
            else if (ncolmoth(moth).eq.9) then !dark blue
              color(1)=0.35
              color(2)=0.33
              color(3)=0.85
            endif

            write(lunvrml,*)"      diffuseColor", color
            write(lunvrml,*)"    } # End of Material"
            write(lunvrml,*)"  } # End of Appearance"
            write(lunvrml,*)" "
            write(lunvrml,*)"  geometry IndexedFaceSet {"
            write(lunvrml,*)
            write(lunvrml,*)"      coord Coordinate{"

            write(lunvrml,*)"         point ["

            do korn=1,nhull
              x=xhull(korn)
              y=yhull(korn)
              z=zhull(korn)
              write(lunvrml,*)"          ",sngl(x),sngl(y),sngl(z),","
            enddo !nhull
            write(lunvrml,*)"         ] # End of point"

            write(lunvrml,*)"      } # End of Coordinate"
            write(lunvrml,*)
            write(lunvrml,*)"       coordIndex ["

cdebug
            korn=1
            do iplan=1,nface
              ncorn=kface(korn)
              do icorn=1,ncorn
                korn=korn+1
                ipoi=kface(korn)-1
                if (icorn.eq.1) i=ipoi
                write(lunvrml,*)"              ",ipoi,","
              enddo
              write(lunvrml,*)"                 ",i,"-1,"
              korn=korn+1
            enddo !nplan

            write(lunvrml,*)"       ] # End of coordIndex"
            write(lunvrml,*)"  } # End of Geometry"
            write(lunvrml,*)"} # End of Shape"
            write(lunvrml,*)" "

            if (kplsym.ne.0) then
              if (ixsym.ne.0.and.iysym.ne.0.and.izsym.ne.0) then
              else if (ixsym.ne.0.and.iysym.ne.0) then
              else if (ixsym.ne.0.and.izsym.ne.0) then
              else if (iysym.ne.0.and.izsym.ne.0) then
              else if (ixsym.ne.0) then
              else if (iysym.ne.0.) then
              else if (izsym.ne.0.) then
              endif !syms
            endif !(kplsym.ne.0) then

          enddo !nmoth

        endif !ivrml.eq.1

! Magnets is represented by lines to visualize the segmentation

        if (ivrml.eq.2) then

          do moth=1,nmoth

            do imag=1,nmag

              npoi=0
              nplan=ibpeplan(imag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,imag)
                do icorn=1,ncorn
                  npoi=npoi+1
                  xhull(npoi)=bpemag(1,icorn,iplan,imag)
                  yhull(npoi)=bpemag(2,icorn,iplan,imag)
                  zhull(npoi)=bpemag(3,icorn,iplan,imag)
                enddo
              enddo

              call util_weed_points(npoi,xhull,yhull,zhull,tiny)

              call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &          nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

              if (ifailhull.ne.0.or.nhull.lt.4) then
                write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
                write(lun6,*)"*** writing of VRML-File"
                stop
              endif

              do ic=1,32
                chmag(ic:ic)=chmags(ic,imag)
              enddo

              write(lunvrml,*)" "
              write(lunvrml,*)"# ",chmag
              write(lunvrml,*)" "

              write(lunvrml,*)"Shape{"
              write(lunvrml,*)" "
              write(lunvrml,*)"  geometry IndexedLineSet {"
              write(lunvrml,*)
              write(lunvrml,*)"      coord Coordinate{"

              write(lunvrml,*)"         point ["

              do korn=1,npoi
                x=xhull(korn)
                y=yhull(korn)
                z=zhull(korn)
                write(lunvrml,*)"          ",sngl(x),sngl(y),sngl(z),","
              enddo !nhull

              write(lunvrml,*)"         ] # End of point"

              write(lunvrml,*)"      } # End of Coordinate"
              write(lunvrml,*)

              write(lunvrml,*)
              write(lunvrml,*)"       coordIndex ["

              korn=1
              do iplan=1,nface
                ncorn=kface(korn)
                gcen=0.0d0
                do icorn=1,ncorn
                  korn=korn+1
                  ipoi=kface(korn)
                  x=xhull(ipoi)
                  y=yhull(ipoi)
                  z=zhull(ipoi)
                  gcen(1)=gcen(1)+x
                  gcen(2)=gcen(2)+y
                  gcen(3)=gcen(3)+z
                enddo
                gcen=gcen/ncorn
                korn=korn+1
                kornmoth=1
                ifound=0
                do kplan=1,nplanmoth(moth)
                  npoimoth=kfacemoth(kornmoth,moth)
                  ipoimoth=kfacemoth(kornmoth+1,moth)
                  p1(1)=xmoth(ipoimoth,moth)
                  p1(2)=ymoth(ipoimoth,moth)
                  p1(3)=zmoth(ipoimoth,moth)
                  ipoimoth=kfacemoth(kornmoth+2,moth)
                  p2(1)=xmoth(ipoimoth,moth)
                  p2(2)=ymoth(ipoimoth,moth)
                  p2(3)=zmoth(ipoimoth,moth)
                  ipoimoth=kfacemoth(kornmoth+3,moth)
                  p3(1)=xmoth(ipoimoth,moth)
                  p3(2)=ymoth(ipoimoth,moth)
                  p3(3)=zmoth(ipoimoth,moth)
                  kornmoth=kornmoth+npoimoth+1
                  call util_plane(p1,p2,p3,gcen,vnor,dist,iover,istat)
                  if (abs(dist).lt.tiny) then
                    ifound=kplan
                    exit
                  endif
                enddo !kplan
                if (ifound.ne.0) then
                  korn=korn-ncorn-1
                  do icorn=1,ncorn
                    korn=korn+1
                    ipoi=kface(korn)-1
                    if (icorn.eq.1) i=ipoi
                    write(lunvrml,*)"              ",ipoi,","
                  enddo
                  korn=korn+1
                  write(lunvrml,*)"                 ",i,"-1,"
                endif
              enddo !nplan

              write(lunvrml,*)"       ] # End of coordIndex"

              write(lunvrml,*)"  } # End of Geometry"
              write(lunvrml,*)"} # End of Shape"
              write(lunvrml,*)" "

            enddo !nmag

          enddo !nmoth

        endif !vrml.eq.2

        if (ivrml.eq.-1) then

          do imag=1,nmag

            npoi=0
            nplan=ibpeplan(imag)
            ncol=ibpecol(imag)

            color(1)=1
            color(2)=1
            color(3)=1

            if (ncol.eq.1) then !black
              color(1)=0
              color(2)=0
              color(3)=0
            else if (ncol.eq.2) then !red
              color(1)=1
              color(2)=0
              color(3)=0
            else if (ncol.eq.3) then !bright green
              color(1)=0
              color(2)=1
              color(3)=0
            else if (ncol.eq.4) then !blue
              color(1)=0
              color(2)=0
              color(3)=1
            else if (ncol.eq.5) then !gelb
              color(1)=1.
              color(2)=1.
              color(3)=0
            else if (ncol.eq.6) then !magenta
              color(1)=1
              color(2)=0
              color(3)=1
            else if (ncol.eq.7) then !light blau
              color(1)=0
              color(2)=1
              color(3)=1
            else if (ncol.eq.8) then ! green
              color(1)=0.35
              color(2)=0.83
              color(3)=0.33
            else if (ncol.eq.9) then !dark blue
              color(1)=0.35
              color(2)=0.33
              color(3)=0.85
            endif

            do iplan=1,nplan
              ncorn=ibpecorn(iplan,imag)
              do icorn=1,ncorn
                npoi=npoi+1
                xhull(npoi)=bpemag(1,icorn,iplan,imag)
                yhull(npoi)=bpemag(2,icorn,iplan,imag)
                zhull(npoi)=bpemag(3,icorn,iplan,imag)
              enddo
            enddo

            call util_weed_points(npoi,xhull,yhull,zhull,tiny)

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
              write(lun6,*)"*** writing of VRML-File"
              stop
            endif

            do ic=1,32
              chmag(ic:ic)=chmags(ic,imag)
            enddo

            write(lunvrml,*)" "
            write(lunvrml,*)"# ",chmag
            write(lunvrml,*)" "

            write(lunvrml,*)"Shape{"
            write(lunvrml,*)" "
            write(lunvrml,*)"  geometry IndexedLineSet {"
            write(lunvrml,*)
            write(lunvrml,*)"      coord Coordinate{"

            write(lunvrml,*)"         point ["

            do korn=1,npoi
              x=xhull(korn)
              y=yhull(korn)
              z=zhull(korn)
              write(lunvrml,*)"          ",sngl(x),sngl(y),sngl(z),","
            enddo !nhull

            write(lunvrml,*)"         ] # End of point"

            write(lunvrml,*)"      } # End of Coordinate"
            write(lunvrml,*)

            write(lunvrml,*)"       color Color {"
            write(lunvrml,*)"         color [", color," ] # End of color"
            write(lunvrml,*)"       } # End of color Color"
            write(lunvrml,*)
            write(lunvrml,*)"       coordIndex ["

            korn=1
            nedge=0
            do iplan=1,nface
              ncorn=kface(korn)
              do icorn=1,ncorn
                nedge=nedge+1
                korn=korn+1
                ipoi=kface(korn)-1
                if (icorn.eq.1) i=ipoi
                write(lunvrml,*)"              ",ipoi,","
              enddo
              korn=korn+1
              write(lunvrml,*)"                 ",i,"-1,"
            enddo !nplan

            write(lunvrml,*)"       ] # End of coordIndex"
            write(lunvrml,*)

            write(lunvrml,*)"       colorIndex ["
            do iedge=1,nedge
              write(lunvrml,*)"       0, 0,"
            enddo
            write(lunvrml,*)"       ] # End of colorIndex"
            write(lunvrml,*)
            write(lunvrml,*)"  } # End of Geometry"
            write(lunvrml,*)"} # End of Shape"
            write(lunvrml,*)" "

          enddo !nmag

        endif !vrml.eq.-1

        write(lunvrml,*)
        write(lunvrml,*)"# Coils"
        write(lunvrml,*)

        do i=1,ncwires
          xp1=wire(3,i)
          yp1=wire(4,i)
          zp1=wire(5,i)
          xp2=wire(6,i)
          yp2=wire(7,i)
          zp2=wire(8,i)
          if (((xp2-xp1)**2+(yp2-yp1)**2+(zp2-zp1)**2)*abs(wire(2,i)).lt.1.0d-12)
     &      cycle
          write(lunvrml,*)"Shape{"
          write(lunvrml,*)" "
          write(lunvrml,*)"  geometry IndexedLineSet {"
          write(lunvrml,*)
          write(lunvrml,*)"      coord Coordinate{"
          write(lunvrml,*)"         point ["
          write(lunvrml,*)"          ",xp1,yp1,zp1,","
          write(lunvrml,*)"          ",xp2,yp2,zp2,","
          write(lunvrml,*)"         ] # End of point"
          write(lunvrml,*)"      } # End of Coordinate"
          write(lunvrml,*)
          write(lunvrml,*)
          write(lunvrml,*)"       coordIndex ["
          write(lunvrml,*)"                 0,"
          write(lunvrml,*)"                 1, -1,"
          write(lunvrml,*)"       ] # End of coordIndex"

          write(lunvrml,*)"  } # End of Geometry"
          write(lunvrml,*)"} # End of Shape"
          write(lunvrml,*)" "

        enddo !ncwires

        write(lunvrml,*)
        write(lunvrml,*)"# End of Coils"
        write(lunvrml,*)

        close(lunvrml)

        write(lun6,*)
        write(lun6,*)'Done'
        write(lun6,*)

        deallocate(khullmoth,kfacemoth,nplanmoth)
      endif !ivrml.ne.0

      bpebc(17,1:nmag)=0.0d0
      if (intmaglis.ne.0) then
        ifound=0
        write(lun6,*)
        write(lun6,*)" --- Due to flag intmaglis, only magnets on file undumag_magmap.lis do contribute to field map ---"
        write(lun6,*)
        open(newunit=lunlis,file="undumag_magmap.lis")
        do while (.true.)
          call util_skip_comment_end(lunlis,ieof)
          if (ieof.ne.0) exit
          read(lunlis,*)chsel,bpe17
          do imag=1,nmag
            write(chmoth,'(32a)')chmoths(1:32,imag)
            if (chmoth.eq.chsel) then
              if (bpe17.gt.0.0d0) then
                bpebc(17,imag)=1.0d0
              else if (bpe17.lt.0.0d0) then
                bpebc(17,imag)=2.0d0
              endif
              ifound=1
            endif
          enddo
        enddo
        close(lunlis)
      endif !intmaglis

      open(newunit=lun,file='undumag_magnets.lis')
      do imag=1,nmag
c        write(lun6,*)imag,chmags(1:32,imag),nint(bpebc(15,imag)),
c     &    chmoths(1:32,imag)
        write(lun,*)imag,chmags(1:32,imag),chmoths(1:32,imag),
     &    sngl(bpebc(1,imag)),sngl(bpebc(2,imag)),sngl(bpebc(3,imag))
      enddo

      close(lun)

      open(newunit=lun,file='undumag_mother_magnets.lis')

      npoi=0
      ncount=0
      if (nmag.gt.0) motho=nint(bpebc(15,1))
      maxpoints=0

      do imag=1,nmag

        moth=nint(bpebc(15,imag))
c        write(lun6,*)"2 Info:",imag,moth,chmags(1:32,imag),chmoths(1:32,imag),npoi,maxpoints

        if (moth.eq.motho) then

          nplan=ibpeplan(imag)

          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
            enddo
          enddo

          if (npoi.gt.maxpoints) maxpoints=npoi

        else if (moth.ne.motho.or.imag.eq.nmag) then

          motho=moth
          if (npoi.gt.maxpoints) maxpoints=npoi
          npoi=0
          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
            enddo
          enddo

        endif !moth.eq.motho

      enddo !nmag

      deallocate(xhull,yhull,zhull,khull,kedge,kface)
      allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints),
     &  khull(maxpoints),kedge(4,2*maxpoints-2),
     &  kface((maxpoints+1)*maxpoints),stat=ierr)
      if (ierr.ne.0) then
        write(lun6,*)"*** Error while allocating xhull, yhull, zhull... Try less magnets...***"
        write(lun6,*)"*** Skipping writing undumag_mother_magnets.lis ***"
        goto 877
      endif

      npoi=0
      imag=1
      if (nmag.gt.0) motho=nint(bpebc(15,imag))

      do imag=1,nmag

        moth=nint(bpebc(15,imag))
        write(chmoth,'(32a)')chmoths(1:32,imag)
c        write(lun6,*)"3 Info:",imag,moth,chmags(1:32,imag),chmoths(1:32,imag)
c        write(lun6,*)imag,moth,chmoth

        if (moth.eq.motho) then
          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
              xhull(npoi)=bpemag(1,icorn,iplan,imag)
              yhull(npoi)=bpemag(2,icorn,iplan,imag)
              zhull(npoi)=bpemag(3,icorn,iplan,imag)
            enddo
          enddo

        else if (moth.ne.motho.or.imag.eq.nmag) then

          xmin=1.0d30
          xmax=-1.0d30
          ymin=1.0d30
          ymax=-1.0d30
          zmin=1.0d30
          zmax=-1.0d30
          do ipoi=1,npoi
            if (xhull(ipoi).lt.xmin) xmin=xhull(ipoi)
            if (xhull(ipoi).gt.xmax) xmax=xhull(ipoi)
            if (yhull(ipoi).lt.ymin) ymin=yhull(ipoi)
            if (yhull(ipoi).gt.ymax) ymax=yhull(ipoi)
            if (zhull(ipoi).lt.zmin) zmin=xhull(ipoi)
            if (zhull(ipoi).gt.zmax) zmax=xhull(ipoi)
          enddo

          dx=xmax-xmin
          dy=ymax-ymin
          dz=zmax-zmin

          if (dy.gt.dx) dx=dy
          if (dz.gt.dx) dx=dz

          call util_weed_points(npoi,xhull,yhull,zhull,tiny)
!hull
          call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &      nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

          if (ifailhull.ne.0.or.nhull.lt.4) then
            write(lun6,*)"*** Error ",ifailhull," in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
            write(lun6,*)"*** writing of undumag_mother_magnets.lis"
            write(lun6,*)"*** Date written to util_convex_hull_3d.dat ***"
            open(newunit=lunf,file='util_convex_hull_3d.dat')
            do i=1,npoi
              write(lunf,*)xhull(i),yhull(i),zhull(i),i
            enddo
            close(lunf)
            nhull=npoi
            do icorn=1,nhull
              khull(icorn)=icorn
            enddo
c            stop
          endif

          gcen=0.0d0
          do icorn=1,nhull
            ipoi=khull(icorn)
            x=xhull(ipoi)
            y=yhull(ipoi)
            z=zhull(ipoi)
            gcen(1)=gcen(1)+x
            gcen(2)=gcen(2)+y
            gcen(3)=gcen(3)+z
c            write(lun6,*)chmoth1,motho,moth,imag,x,y,z
          enddo

          gcen=gcen/nhull
c          write(lun6,*)nhull,gcen

          ncount=ncount+1
c          write(lun6,*)"4 Info:",ncount,chmoth1,gcen
          write(lun,*) ncount,chmoth1,gcen

          motho=moth
          gcen=0.0d0
          npoi=0

          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
              xhull(npoi)=bpemag(1,icorn,iplan,imag)
              yhull(npoi)=bpemag(2,icorn,iplan,imag)
              zhull(npoi)=bpemag(3,icorn,iplan,imag)
            enddo
          enddo

        endif !moth.eq.motho

        chmoth1=chmoth

      enddo !nmag

877   flush(lun)
      close(lun)

      deallocate(xhull,yhull,zhull,khull,kedge,kface)

      call undumag_to_radia_old(kundurun,xsymmm,bpemag,ncornmax,nplanmax,nmag)

9999  deallocate(bpebc0,mothdiv,ncolmoth,
     &  xmoth,ymoth,zmoth,
     &  xmothm,ymothm,zmothm,
     &  xmothi,ymothi,zmothi,chmagsi,chmagsm,chmothsi,chmothsm,
     &  )

      if (nrec.eq.0) maxiterrec=1
      if (nrec.eq.0.and.ncwires.eq.0) then
        maxiteriron=1
        maxiter=1
      endif

      if (ncwires.ne.0.and.iforce.lt.0) then
        write(lun6,*)"*** Error in undumag_ini_old: Iforce<0 not yet implemented for coils and wires ***"
        write(lun6,*)"*** PROGRAM UNDUMAG ABORTED ***"
        stop
      endif

+self,if=randos.
      allocate(xyzsmear(3,nmag))
      do i=1,nmag
        call util_random(3,g)
        xyzsmear(1,i)=randos*g(1)
        xyzsmear(2,i)=randos*g(2)
        xyzsmear(3,i)=randos*g(3)
        bpebc(1:3,i)=bpebc(1:3,i)+xyzsmear(1:3,i)
      enddo
+self.

      zminprof=zplmin
      zmaxprof=zplmax

      if (iunduplot.lt.0) then
        open(newunit=lunst,file="undumag.stat")
        write(lunst,*)"0"
        flush(lunst)
        close(lunst)
        stop "--- Programm UNDUMAG terminated due to iunduplot < 0 ---"
      endif

+self,if=trace.
      print*,"-trace-: Leaving undumag_ini_old "
+self.
      end
+DECK,undumag_greeter.
*CMZ :  2.02/01 29/08/2023  15.04.24  by  Michael Scheer
*-- Author :    Michael Scheer   19/10/2021
      subroutine undumag_greeter
      use undumagf90m
      use commandlinef90m
      implicit none
+seq,unduver.
      return
      end
+DECK,clcmag_bpolyplot.
*CMZ :  2.04/11 28/08/2023  14.35.56  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.06.46  by  Michael Scheer
*CMZ :  2.04/09 16/08/2023  09.50.47  by  Michael Scheer
*CMZ :  2.04/07 07/08/2023  12.29.11  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  17.12.50  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  14.10.28  by  Michael Scheer
*CMZ :  2.03/00 23/07/2022  08.30.04  by  Michael Scheer
*CMZ :  2.02/02 18/02/2022  10.24.23  by  Michael Scheer
*CMZ :  2.02/01 30/01/2022  08.39.29  by  Michael Scheer
*CMZ :  2.02/00 21/10/2020  09.46.44  by  Michael Scheer
*CMZ :  2.01/03 15/02/2019  13.07.52  by  Michael Scheer
*CMZ :  2.01/02 25/04/2018  11.48.35  by  Michael Scheer
*CMZ :  1.25/01 19/03/2018  16.23.08  by  Michael Scheer
*CMZ :  1.25/00 15/03/2018  21.02.34  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.20.09  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  12.45.15  by  Michael Scheer
*CMZ :  1.17/08 27/05/2017  10.32.42  by  Michael Scheer
*CMZ :  1.11/00 04/01/2017  14.33.44  by  Michael Scheer
*CMZ :  1.10/00 18/11/2016  09.09.14  by  Michael Scheer
*CMZ :  1.09/01 06/10/2016  14.12.50  by  Michael Scheer
*CMZ :  1.07/02 25/09/2016  13.39.32  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.47.10  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  14.49.25  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.46.16  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.01.00  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  13.31.06  by  Michael Scheer
*CMZ :  1.02/01 08/09/2016  15.25.02  by  Michael Scheer
*CMZ :  1.02/00 23/08/2016  12.01.08  by  Michael Scheer
*CMZ :  0.00/13 31/07/2016  16.05.11  by  Michael Scheer
*CMZ :  0.00/01 25/04/2016  15.07.20  by  Michael Scheer
*CMZ :  1.17/06 01/04/2016  12.27.40  by  Michael Scheer
*CMZ :  1.17/02 09/10/2014  14.52.20  by  Michael Scheer
*CMZ :  1.17/01 03/10/2014  11.25.46  by  Michael Scheer
*CMZ :  1.17/00 25/08/2014  15.14.09  by  Michael Scheer
*CMZ :  1.16/04 16/04/2014  15.34.26  by  Michael Scheer
*CMZ :  1.16/01 14/03/2014  12.26.15  by  Michael Scheer
*CMZ :  1.12/16 01/06/2007  11.17.50  by  Michael Scheer
*CMZ :  1.12/08 02/08/2006  17.03.41  by  Michael Scheer
*CMZ :  1.11/03 21/06/2005  12.56.55  by  Michael Scheer
*CMZ :  1.11/01 01/03/2005  09.45.36  by  Michael Scheer
*CMZ :  1.10/04 25/02/2005  11.55.05  by  Michael Scheer
*CMZ :  2.52/05 17/08/2004  08.54.30  by  Michael Scheer
*CMZ :  1.01/01 11/08/2004  13.30.53  by  Michael Scheer
*CMZ :  1.01/00 02/03/2004  17.00.13  by  Michael Scheer
*CMZ :  1.00/01 27/02/2004  14.29.35  by  Michael Scheer
*CMZ :  1.00/00 26/02/2004  17.21.29  by  Michael Scheer
*CMZ :  0.99/13 26/02/2004  16.14.57  by  Michael Scheer
*CMZ :  0.99/12 26/02/2004  12.02.34  by  Michael Scheer
*CMZ :  0.99/11 25/02/2004  15.21.06  by  Michael Scheer
*CMZ :  0.99/10 25/02/2004  13.42.35  by  Michael Scheer
*CMZ :  0.99/09 20/02/2004  17.26.48  by  Michael Scheer
*CMZ :  0.99/08 20/02/2004  16.32.55  by  Michael Scheer
*CMZ :  0.99/07 16/02/2004  15.21.29  by  Michael Scheer
*CMZ :  0.99/03 12/02/2004  13.55.05  by  Michael Scheer
*CMZ :  0.99/00 26/01/2004  17.03.49  by  Michael Scheer
*CMZ :  0.00/08 23/01/2004  12.52.23  by  Michael Scheer
*CMZ :  0.00/07 16/01/2004  11.05.44  by  Michael Scheer
*CMZ :  0.00/06 09/01/2004  15.55.17  by  Michael Scheer
*CMZ :  0.00/05 23/12/2003  14.52.54  by  Michael Scheer
*CMZ :  0.00/04 23/12/2003  10.15.07  by  Michael Scheer
*CMZ :  0.00/02 15/12/2003  12.43.34  by  Michael Scheer
*CMZ :  0.00/01 10/12/2003  17.56.52  by  Michael Scheer
*-- Author :    Michael Scheer   02/12/2003
      subroutine clcmag_bpolyplot(iplot,xmin,xmax,ymin,ymax,zmin,zmax,
     &  theta,phi,nwitems,ncwires,wire)

+seq,bpolyederf90u.

      use commandlinef90m
      use magnets_structure

      implicit none

+seq,mshplt.
+seq,bpolyeder,if=static.

      integer npawp
      parameter (npawp=10000)

      integer nwitems,ncwires
      double precision wire(nwitems,ncwires)

      real, dimension (:), allocatable :: rmothb,rmagb,rcolb,rplanb,rcornb,
     &  xb,yb,zb,bxb,byb,bzb,rmatb

      real, dimension (:), allocatable :: xpl,ypl,zpl,zplm,xmpl,ympl,zmpl
      integer, dimension (:), allocatable :: ispole

      real
     &  xplb(2),yplb(2),zplb(2),xt(1),yt(1),zt(1),
     &  xplbo(2),yplbo(2),zplbo(2),rmtyp31,rmtyp24,rmtyp20,rlwidth,rlwidtho

      real xyzmin,xyzmax,xmin,xmax,ymin,ymax,zmin,zmax,theta,phi,
     &  x,y,z,bx,by,bz,dx,dy,dz,bxo,byo,bzo,bo,eps,
     &  xmn,xmx,ymn,ymx,zmn,zmx,
     &  xmmn,xmmx,ymmn,ymmx,zmmn,zmmx,
     &  xplmin,xplmax,yplmin,yplmax,zplmin,zplmax,
     &  rmoth,rmag,rcol,rplan,rcorn,rmat,
     &  xc,yc,zc,xmc(1),ymc(1),zmc(1),dot0,circ0,pscal,vn,vnx,vnz

      integer i,iplot,iplot1,iplot10,iplot100,idev,
     &  imag,icol,iplan,icorn,kpole,
     &  iplano,ncorno,iline,iw,nline,iallo,
     &  ncorn,ncornmax,igird,imago,impl,izero,nfirst,nlast

      integer luncnf,lunmag

      character(64) ctitle,cline
      character(32), dimension(:), allocatable ::  cnam,cmoth

      data dot0/25./
      data circ0/5./
      data rmtyp20/20./
      data rmtyp24/-9999./
      data rmtyp31/31./

      data eps/0.01/

      iallo=0

      write(lun6,*)
      if (kunduplot_mode.eq.0) then
        write(lun6,*) "Reading file undumag.mag and writing geometry to plotfile undumag.eps"
      else
        write(lun6,*) "Reading file undumag.mag and writing geometry to plotfile undumag_3d.eps"
      endif
      write(lun6,*)

      open(newunit=luncnf,file='.mshplt.cnf')

      write(luncnf,'(a)')"0 !idev, 0: viewer is not used"
      write(luncnf,'(a)')"-20. -20. !plot size in cm, negative values indicate HIGZ compatible mode"
      write(luncnf,'(a)')"1.0 !rescaling factor; if not one, plot files are copied and rescaled"
      write(luncnf,'(a)')"0 0 800 800 !bounding box"
      if (kunduplot_mode.ne.0) then
        write(luncnf,'(a)')"undumag_3d.eps !base name of plotfiles"
      else
        write(luncnf,'(a)')"undumag.eps !base name of plotfiles"
      endif
      write(luncnf,'(a)')"$UNDUMAG/shell/undumag_viewer.sh"
      write(luncnf,'(a)')"$UNDUMAG/shell/undumag_kill_viewer.sh"

      close(luncnf)

      iplano=0
      nline=0

      xmn=sngl(xmin_t)
      xmx=sngl(xmax_t)
      ymn=sngl(ymin_t)
      ymx=sngl(ymax_t)
      zmn=sngl(zmin_t)
      zmx=sngl(zmax_t)

      if (jrunnum.ne.0) then
        write(ctitle,*)kundurun
        call util_string_trim(ctitle,nfirst,nlast)
        ctitle=trim(usercom)//", Run: "//ctitle(nfirst:nlast)
      else
        ctitle=trim(usercom)
      endif

      ncornmax=ncornmax_t
      if (ncwires.gt.0) then
        ncornmax=max(2,ncornmax_t)
      endif

      open(newunit=lunmag,file='undumag.mag',status='old')
      read(lunmag,'(a)')cline
1     read(lunmag,*,end=9) rmoth,rmag,rcol,rplan,rcorn,x,y,z,bx,by,bz,rmat
      if (bx**2+by**2+bz**2.eq.0.0d0) goto 1
      nline=nline+1
      goto 1
9     rewind(lunmag)

      allocate(
     &  rmothb(nline),rmagb(nline),rcolb(nline),rplanb(nline),rcornb(nline),
     &  xb(nline),yb(nline),zb(nline),bxb(nline),byb(nline),bzb(nline),
     &  rmatb(nline),cnam(nline),cmoth(nline),ispole(nline))

      read(lunmag,'(a)')cline

      do i=1,nline
        read(lunmag,*)
     &  rmothb(i),rmagb(i),rcolb(i),rplanb(i),rcornb(i),
     &  xb(i),yb(i),zb(i),bxb(i),byb(i),bzb(i),
     &    rmatb(i),cnam(i),cmoth(i),ispole(i)
        if (rmatb(i).eq.0) then
          bxb(i)=0.0
          byb(i)=0.0
          bzb(i)=0.0
        endif
        imag=nint(rmagb(i))
        ispole(imag)=ispole(i)
      enddo

      close(lunmag)

      if (ncornmax.eq.0.and.ncwires.le.0) then
        write(lun6,*)"*** Warning in clcmag_bpolyplot: Nothing to plot!?"
        goto 9999
      endif

      allocate(xpl(ncornmax))
      allocate(ypl(ncornmax))
      allocate(zpl(ncornmax))
      allocate(zplm(ncornmax))

      allocate(xmpl(ncornmax*nplanmax_t))
      allocate(ympl(ncornmax*nplanmax_t))
      allocate(zmpl(ncornmax*nplanmax_t))

      iallo=1

      call mlimit(npawp)

      if (jdate.ne.0) then
        call mplopt('DATE',1)
      else
        call mplopt('NDAT',1)
      endif

      call mplint(idev)

      if (jdate.ne.0) then
        call mplopt('DATE',1)
      else
        call mplopt('NDAT',1)
      endif

      call mplset('YGTI',0.)
      call mplset('GSIZ',0.3)
      call mgset('TXCI',1.)

      iplot100=abs(iplot)/100
      iplot10=(abs(iplot)-iplot100*100)/10
      iplot1=abs(iplot)-iplot100*100-iplot10*10

      call mshplt_get_line_width(rlwidtho)
      rlwidth=rlwidtho
      call mshplt_set_line_width(rlwidtho/2.)

c--- Open plotfiles {

      if (iplot.gt.0) then

        if (idev.ne.0) then
          call mgmeta(98,-111)    !seite 22
        else
          call mgmeta(-98,-111)    !seite 22
        endif

      else if (iplot.lt.0) then

        if (idev.ne.0) then
          call mgmeta(98,-113)    !seite 22
        else
          call mgmeta(-98,-113)    !seite 22
        endif

      endif !iplot

c--- Open plotfiles }

      iplano=1

      if (xmin.eq.9999.) then
        xplmin=xmn
      else
        xplmin=xmin
      endif

      if (xmax.eq.9999.) then
        xplmax=xmx
      else
        xplmax=xmax
      endif

      if (ymin.eq.9999.) then
        yplmin=ymn
      else
        yplmin=ymin
      endif

      if (ymax.eq.9999.) then
        yplmax=ymx
      else
        yplmax=ymax
      endif

      if (zmin.eq.9999.) then
        zplmin=zmn
      else
        zplmin=zmin
      endif

      if (zmax.eq.9999.) then
        zplmax=zmx
      else
        zplmax=zmax
      endif

      if (nbforcx*nbforcy*nbforcy.ne.0) then
        dx=(sngl(outbox(2,1))-sngl(outbox(1,1)))*0.1
        if (xplmin.ge.sngl(outbox(1,1))) xplmin=sngl(outbox(1,1))-dx
        if (xplmax.le.sngl(outbox(2,1))) xplmax=sngl(outbox(2,1))+dx
        dy=(sngl(outbox(2,2))-sngl(outbox(1,2)))*0.1
        if (yplmin.ge.sngl(outbox(1,2))) yplmin=sngl(outbox(1,2))-dy
        if (yplmax.le.sngl(outbox(2,2))) yplmax=sngl(outbox(2,2))+dy
        dz=(sngl(outbox(2,3))-sngl(outbox(1,3)))*0.1
        if (zplmin.ge.sngl(outbox(1,3))) zplmin=sngl(outbox(1,3))-dz
        if (zplmax.le.sngl(outbox(2,3))) zplmax=sngl(outbox(2,3))+dz
      endif

      dx=(xplmax-xplmin)*0.05
      if (xmin.eq.9999.) then
        xplmin=xplmin-dx
      endif

      if (xmax.eq.9999.) then
        xplmax=xplmax+dx
      endif

      dy=(yplmax-yplmin)*0.05
      if (ymin.eq.9999.) then
        yplmin=yplmin-dy
      endif

      if (ymax.eq.9999.) then
        yplmax=yplmax+dy
      endif

      dz=(zplmax-zplmin)*0.05
      if (zmin.eq.9999.) then
        zplmin=zplmin-dz
      endif

      if (zmax.eq.9999.) then
        zplmax=zplmax+dz
      endif

      if (dx.eq.0.0d0) then
        dx=1.05
        xplmin=xplmin-dx
        xplmax=xplmax+dx
      endif

      if (dy.eq.0.0d0) then
        dy=1.05
        yplmin=yplmin-dy
        yplmax=yplmax+dy
      endif

      if (dz.eq.0.0d0) then
        dz=1.05
        zplmin=zplmin-dz
        zplmax=zplmax+dz
      endif

      if (xplmax.le.xplmin.or.zplmax.le.zplmin.or.zplmax.le.zplmin) then
        write(lun6,*)'*** Warning in clcmag_bpolyplot: Bad coordinate system for plotting '
        goto 9999
      endif

      pscal=min(3.,sqrt(10000./((xplmax-xplmin)*(zplmax-zplmin))))

c--- 3D, top and side views {

      if (jcomment.ne.0) call mtitle(trim(ctitle))

      call mplzon(1,1,1,' ')
      call mplfra(0.,10.,0.,10.,'AB')

      if (kunduplot_mode.eq.0) then

        call mplset('YMGL',0.5)

        if (theta.ne.0.0.or.phi.ne.0.0) then

          call mgset('CHHE',0.2)
          call mplzon(2,2,1,'S')
          call mplfr3(0.,1.,0.,1.,0.,1.,theta,phi,'W')

          xpl(1)=-0.8
          xpl(2)=-0.6
          ypl(1)=-0.8
          ypl(2)=-0.8
          zpl(1)=0.0
          zpl(2)=0.0
          xt(1)=xpl(1)+(xpl(2)-xpl(1))*1.3
          yt(1)=ypl(1)+(ypl(2)-ypl(1))*1.3
          zt(1)=zpl(1)+(zpl(2)-zpl(1))*1.3
          call mshplt_3dto2d(1,xt,-zt,yt,xt,zt)
          call mtx(xt(1),zt(1),'x')
          call mshplt_3dto2d(2,xpl,-zpl,ypl,xpl,ypl)
          call mpl(2,xpl,ypl)

          xpl(1)=-0.8
          xpl(2)=-0.8
          ypl(1)=-0.8
          ypl(2)=-0.6
          zpl(1)=0.0
          zpl(2)=0.0

          xt(1)=xpl(1)+(xpl(2)-xpl(1))*1.3
          yt(1)=ypl(1)+(ypl(2)-ypl(1))*1.3
          zt(1)=zpl(1)+(zpl(2)-zpl(1))*1.3
          call mshplt_3dto2d(1,xt,-zt,yt,xt,zt)
          call mtx(xt(1),zt(1),'y')
          call mshplt_3dto2d(2,xpl,-zpl,ypl,xpl,ypl)
          call mpl(2,xpl,ypl)

          xpl(1)=-0.8
          xpl(2)=-0.8
          ypl(1)=-0.8
          ypl(2)=-0.8
          zpl(1)=0.
          zpl(2)=0.2

          xt(1)=xpl(1)+(xpl(2)-xpl(1))*1.3
          yt(1)=ypl(1)+(ypl(2)-ypl(1))*1.3
          zt(1)=zpl(1)+(zpl(2)-zpl(1))*1.3
          call mshplt_3dto2d(1,xt,-zt,yt,xt,zt)
          call mtx(xt(1),zt(1),'z')
          call mshplt_3dto2d(2,xpl,-zpl,ypl,xpl,ypl)
          call mpl(2,xpl,ypl)
          call muwk(0,0)

          call mplzon(1,1,1,'S')
          call mplfra(0.,10.,0.,10.,'AB')
        endif

        call mgset('CHHE',0.5)
        call mtx(4.1,4.7,'upper magnets')
        call mtx(4.1,1.8,'lower magnets')
        call mgset('CHHE',0.4)
        call mtx(4.6,-0.75,'x[mm]')
        call mshplt_set_text_angle(90.)
        call mtx(-1.,2.4,'z[mm]')
        call mshplt_set_text_angle(0.)
        call mplset('YMGL',2.)
        call mplset('YMGL',0.5)
        call mgset('CHHE',0.4)
        call muwk(0,0)
        call mplzon(2,2,1,'S')
      else
        call mplset('YMGL',0.5)
        call mplzon(1,1,1,' ')
        call mgset('CHHE',0.4)
        if (theta.ne.0.0.or.phi.ne.0.0) then

          call mplfr3(0.,1.,0.,1.,0.,1.,theta,phi,'W')
          call mplfra(0.,1.,0.,1.,'AB')

          xpl(1)=0.2
          xpl(2)=0.3
          ypl(1)=0.0
          ypl(2)=0.0
          zpl(1)=0.0
          zpl(2)=0.0
          xt(1)=xpl(1)+(xpl(2)-xpl(1))*1.3
          yt(1)=ypl(1)+(ypl(2)-ypl(1))*1.3
          zt(1)=zpl(1)+(zpl(2)-zpl(1))*1.3
          call mshplt_3dto2d(1,xt,-zt,yt,xt,zt)
          call mtx(xt(1),zt(1),'x')
          call mshplt_3dto2d(2,xpl,-zpl,ypl,xpl,ypl)
          call mpl(2,xpl,ypl)

          xpl(1)=0.2
          xpl(2)=0.2
          ypl(1)=0.0
          ypl(2)=0.1
          zpl(1)=0.0
          zpl(2)=0.0
          xt(1)=xpl(1)+(xpl(2)-xpl(1))*1.3
          yt(1)=ypl(1)+(ypl(2)-ypl(1))*1.3
          zt(1)=zpl(1)+(zpl(2)-zpl(1))*1.3
          call mshplt_3dto2d(1,xt,-zt,yt,xt,zt)
          call mtx(xt(1),zt(1),'y')
          call mshplt_3dto2d(2,xpl,-zpl,ypl,xpl,ypl)
          call mpl(2,xpl,ypl)

          xpl(1)=0.2
          xpl(2)=0.2
          ypl(1)=0.0
          ypl(2)=0.0
          zpl(1)=0.0
          zpl(2)=0.1
          xt(1)=xpl(1)+(xpl(2)-xpl(1))*1.3
          yt(1)=ypl(1)+(ypl(2)-ypl(1))*1.3
          zt(1)=zpl(1)+(zpl(2)-zpl(1))*1.3
          call mshplt_3dto2d(1,xt,-zt,yt,xt,zt)
          call mtx(xt(1),zt(1),'z')
          call mshplt_3dto2d(2,xpl,-zpl,ypl,xpl,ypl)
          call mpl(2,xpl,ypl)
          call muwk(0,0)

        endif
        call mplzon(1,1,1,'S')
      endif

      iplano=1

c y is vertical (WAVE-system)
      if (theta.eq.0.0.and.phi.eq.0.0) then

        !call mplfra(xplmin,xplmax,yplmin,yplmax,' ')
        call mshplt_frame(xplmin,xplmax,yplmin,yplmax,'x[mm]','y[mm]',' ')
        !call mplax('x (mm)', 'y (mm)')
        !call muwk(0,0)

        if (nbforcx*nbforcy*nbforcz.ne.0)
     &    call undumag_bpolypl2(forxpl,forypl,forcol,12)

        do iline=1,nline

          x=xb(iline)
          y=yb(iline)
          z=zb(iline)
          bx=bxb(iline)
          by=byb(iline)
          bz=bzb(iline)

          if (bx**2+by**2+bz**2.eq.0.0d0) cycle

          imag=nint(rmagb(iline))
          icol=nint(rcolb(iline))
          iplan=nint(rplanb(iline))
          icorn=nint(rcornb(iline))

          ncorn=abs(icorn)

          if (iline.eq.nline) then

            xpl(ncorn)=x
            ypl(ncorn)=y
            zpl(ncorn)=z

            iplano=iplan
            ncorno=ncorn
            rcol=rcolb(iline)

          endif !(iline.eq.nline

          if(iplan.ne.iplano.or.iline.eq.nline) then

            do i=1,ncorno
              if (
     &          xpl(i).lt.xplmin.or.
     &          xpl(i).gt.xplmax.or.
     &          ypl(i).lt.yplmin.or.
     &          ypl(i).gt.yplmax.or.
     &          zpl(i).lt.zplmin.or.
     &          zpl(i).gt.zplmax
     &          ) cycle
            enddo

            do i=1,ncorno
              zplm(i)=-zpl(i)
            enddo

            call mshplt_set_line_width(rlwidth/5.)
            call mgset('PLCI',1.)
            call mpl(ncorno,xpl,ypl)

            xc=0.
            yc=0.
            zc=0.

            do i=1,ncorno-1
              xc=xc+xpl(i)
              yc=yc+ypl(i)
              zc=zc+zpl(i)
            enddo

            xc=xc/(ncorno-1)
            yc=yc/(ncorno-1)
            zc=zc/(ncorno-1)

            do i=1,ncorno
              xpl(i)=xpl(i)+(xc-xpl(i))*5.0*rlwidth
              ypl(i)=ypl(i)+(yc-ypl(i))*5.0*rlwidth
              zpl(i)=zpl(i)+(zc-zpl(i))*5.0*rlwidth
              zplm(i)=-zpl(i)
            enddo

            call mshplt_set_line_width(rlwidth/2.)
            call mgset('PLCI',rcol)
            call mpl(ncorno,xpl,ypl)

          endif !iplano

          xpl(ncorn)=x
          ypl(ncorn)=y
          zpl(ncorn)=z

          iplano=iplan
          ncorno=ncorn
          rcol=rcolb(iline)

        enddo !nline

        call mshplt_set_line_width(rlwidth*2.)
        do iw=1,ncwires
          rcol=sngl(wire(9,iw))
          call mgset('PLCI',rcol)
          xpl(1)=sngl(wire(3,iw))
          xpl(2)=sngl(wire(6,iw))
          ypl(1)=sngl(wire(4,iw))
          ypl(2)=sngl(wire(7,iw))
          call mpl(2,xpl,ypl)
        enddo
        call mshplt_set_line_width(rlwidth/2.)

      else !:if (theta.eq.0.0.and.phi.eq.0.0) then

        xyzmin=min(xplmin,yplmin,zplmin)!*0.8
        xyzmax=max(xplmax,yplmax,zplmax)!*0.8

        !dx=(xyzmax-xyzmin)*0.1*0.0
c        call mplfr3(xyzmin,xyzmax,
c     &    -xyzmax,-xyzmin,
c     &    xyzmin,xyzmax,theta,phi,'W')

        !call mplfr3(xplmin,xplmax,zplmin,zplmax,yplmin,yplmax,theta,phi,'W')
        call mplfr3(xyzmin,xyzmax,xyzmin,xyzmax,xyzmin,xyzmax,theta,phi,'W')
        !goto 9999

        do iline=1,nline

          x=xb(iline)
          y=yb(iline)
          z=zb(iline)
          bx=bxb(iline)
          by=byb(iline)
          bz=bzb(iline)

          if (bx**2+by**2+bz**2.eq.0.0d0) cycle

          imag=nint(rmagb(iline))
          icol=nint(rcolb(iline))
          iplan=nint(rplanb(iline))
          icorn=nint(rcornb(iline))

          ncorn=abs(icorn)

          if (iline.eq.nline) then

            xpl(ncorn)=x
            ypl(ncorn)=y
            zpl(ncorn)=z

            iplano=iplan
            ncorno=ncorn
            rcol=rcolb(iline)

          endif !(iline.eq.nline

          if(iplan.ne.iplano.or.iline.eq.nline) then

            do i=1,ncorno
              if (
     &          xpl(i).lt.xplmin.or.
     &          xpl(i).gt.xplmax.or.
     &          ypl(i).lt.yplmin.or.
     &          ypl(i).gt.yplmax.or.
     &          zpl(i).lt.zplmin.or.
     &          zpl(i).gt.zplmax
     &          ) cycle
            enddo

            do i=1,ncorno
              zplm(i)=-zpl(i)
            enddo

            call mgset('PLCI',1.)
            call mpl3(ncorno,xpl,zplm,ypl)

            xc=0.
            yc=0.
            zc=0.

            do i=1,ncorno-1
              xc=xc+xpl(i)
              yc=yc+ypl(i)
              zc=zc+zpl(i)
            enddo

            xc=xc/(ncorno-1)
            yc=yc/(ncorno-1)
            zc=zc/(ncorno-1)

            do i=1,ncorno
              xpl(i)=xpl(i)+(xc-xpl(i))*0.015*rcol
              ypl(i)=ypl(i)+(yc-ypl(i))*0.015*rcol
              zpl(i)=zpl(i)+(zc-zpl(i))*0.015*rcol
              zplm(i)=-zpl(i)
            enddo

            call mgset('PLCI',rcol)
            call mpl3(ncorno,xpl,zplm,ypl)

          endif !iplano

          xpl(ncorn)=x
          ypl(ncorn)=y
          zpl(ncorn)=z

          iplano=iplan
          ncorno=ncorn
          rcol=rcolb(iline)

        enddo !nline

        call mshplt_set_line_width(rlwidth*2.)
        do iw=1,ncwires
          rcol=sngl(wire(9,iw))
          call mgset('PLCI',rcol)
          xpl(1)=sngl(wire(3,iw))
          xpl(2)=sngl(wire(6,iw))
          ypl(1)=sngl(wire(4,iw))
          ypl(2)=sngl(wire(7,iw))
          zpl(1)=-sngl(wire(5,iw))
          zpl(2)=-sngl(wire(8,iw))
          call mpl3(2,xpl,zpl,ypl)
        enddo
        call mshplt_set_line_width(rlwidth/2.)

      endif !(theta.eq.0.0.and.phi.eq.0.0) then

      call muwk(0,0)

      if (kunduplot_mode.ne.0) goto 9999

c--- 3D }

c--- y vs z or z vs y {

      !call mplfra(zplmin,zplmax,yplmin,yplmax,' ')
      !call mplax('z (mm)', 'y (mm)')
      call mshplt_frame(zplmin,zplmax,yplmin,yplmax,'z[mm]','y[mm]',' ')
      if (nbforcx*nbforcy*nbforcz.ne.0)
     &  call undumag_bpolypl2(forzpl,forypl,forcol,23)

      iplano=1

      do iline=1,nline

        x=xb(iline)
        y=yb(iline)
        z=zb(iline)
        bx=bxb(iline)
        by=byb(iline)
        bz=bzb(iline)

        if (bx**2+by**2+bz**2.eq.0.0d0) cycle

        imag=nint(rmagb(iline))
        icol=nint(rcolb(iline))
        iplan=nint(rplanb(iline))
        icorn=nint(rcornb(iline))

        ncorn=abs(icorn)

        if (iline.eq.nline) then

          xpl(ncorn)=x
          ypl(ncorn)=y
          zpl(ncorn)=z

          iplano=iplan
          ncorno=ncorn
          rcol=rcolb(iline)

        endif !(iline.eq.nline

        if(iplan.ne.iplano.or.iline.eq.nline) then

          do i=1,ncorno
            zplm(i)=-zpl(i)
          enddo

          call mshplt_set_line_width(rlwidth/5.)
          call mgset('PLCI',1.)
          call mpl(ncorno,zpl,ypl)

          xc=0.
          yc=0.
          zc=0.

          do i=1,ncorno-1
            xc=xc+xpl(i)
            yc=yc+ypl(i)
            zc=zc+zpl(i)
          enddo

          xc=xc/(ncorno-1)
          yc=yc/(ncorno-1)
          zc=zc/(ncorno-1)

          izero=0
          do i=1,ncorno
            if (
     &        abs(yc-ypl(i)).gt.1.0e-6 .and. abs(zc-zpl(i)).gt.1.0e-6
     &        ) izero=1
            xpl(i)=xpl(i)+(xc-xpl(i))*2.0*rlwidth
            ypl(i)=ypl(i)+(yc-ypl(i))*2.0*rlwidth
            zpl(i)=zpl(i)+(zc-zpl(i))*2.0*rlwidth
            zplm(i)=-zpl(i)
          enddo

          call mgset('PLCI',rcol)

          if (izero.ne.0) call mpl(ncorno,zpl,ypl)

        endif !iplano

        xpl(ncorn)=x
        ypl(ncorn)=y
        zpl(ncorn)=z

        iplano=iplan
        ncorno=ncorn
        rcol=rcolb(iline)

      enddo !nline

      call mshplt_set_line_width(rlwidth*2.)
      do iw=1,ncwires
        rcol=sngl(wire(9,iw))
        call mgset('PLCI',rcol)
        xpl(1)=sngl(wire(3,iw))
        xpl(2)=sngl(wire(6,iw))
        ypl(1)=sngl(wire(4,iw))
        ypl(2)=sngl(wire(7,iw))
        zpl(1)=sngl(wire(5,iw))
        zpl(2)=sngl(wire(8,iw))
        call mpl(2,zpl,ypl)
      enddo
      call mshplt_set_line_width(rlwidth/2.)

      call mshplt_set_line_width(rlwidtho)

      if (nbforcx*nbforcy*nbforcz.ne.0)
     &  call undumag_bpolypl2(forzpl,forypl,forcol,23)

c--- y vs z or z vs y }

c--- top views of girder {

      call muwk(0,0)
      call mplzon(1,4,3,'S')

      do igird=1,2

c--- z vs x, y is vertical coordinate {
        !hier
        call mplfra(xplmin,xplmax,zplmin,zplmax,' ')
        !call mplax('x (mm)', 'z (mm)')
        !call mshplt_frame(xplmin,xplmax,zplmin,zplmax,'x[mm]','z[mm]',' ')

        if (nbforcx*nbforcy*nbforcz.ne.0)
     &    call undumag_bpolypl2(forxpl,forzpl,forcol,13)

        if (nline.gt.0) then
          imago=int(rmagb(nline))
          kpole=ispole(imago)
          iplano=1
          impl=0
        endif

        do iline=1,nline

          x=xb(iline)
          y=yb(iline)
          z=zb(iline)
          bx=bxb(iline)
          by=byb(iline)
          bz=bzb(iline)

          if (bx**2+by**2+bz**2.eq.0.0d0) cycle

          imag=nint(rmagb(iline))
          icol=nint(rcolb(iline))
          iplan=nint(rplanb(iline))
          icorn=nint(rcornb(iline))

          ncorn=abs(icorn)

          if (iline.eq.nline) then

            xpl(ncorn)=x
            ypl(ncorn)=y
            zpl(ncorn)=z

            iplano=iplan
            ncorno=ncorn
            rcol=rcolb(iline)

          endif !(iline.eq.nline

          if (imag.ne.imago.or.iline.eq.nline) then

            xmc(1)=0.
            ymc(1)=0.
            zmc(1)=0.

            xmmx=-1.0e30
            xmmn= 1.0e30
            ymmx=-1.0e30
            ymmn= 1.0e30
            zmmx=-1.0e30
            zmmn= 1.0e30

            do i=1,impl-1
              xmc(1)=xmc(1)+xmpl(i)
              ymc(1)=ymc(1)+ympl(i)
              zmc(1)=zmc(1)+zmpl(i)
              if (xmpl(i).gt.xmmx) xmmx=xmpl(i)
              if (xmpl(i).lt.xmmn) xmmn=xmpl(i)
              if (ympl(i).gt.ymmx) ymmx=ympl(i)
              if (ympl(i).lt.ymmn) ymmn=ympl(i)
              if (zmpl(i).gt.zmmx) zmmx=zmpl(i)
              if (zmpl(i).lt.zmmn) zmmn=zmpl(i)
            enddo

            xmc(1)=xmc(1)/(impl-1)
            ymc(1)=ymc(1)/(impl-1)
            zmc(1)=zmc(1)/(impl-1)

            dx=xmmx-xmmn
            dy=ymmx-ymmn
            dz=zmmx-zmmn

            impl=0

          endif !imag.ne.imago

          impl=impl+1

          if (iline.eq.nline) then

            xpl(ncorn)=x
            ypl(ncorn)=y
            zpl(ncorn)=z

            xmpl(impl)=x
            ympl(impl)=y
            zmpl(impl)=z

            bxo=bx
            byo=by
            bzo=bz

            iplano=iplan
            ncorno=ncorn
            rcol=rcolb(iline)

          endif !(iline.eq.nline

          if(iplan.ne.iplano.or.iline.eq.nline) then

            xc=0.
            yc=0.
            zc=0.

            do i=1,ncorno-1
              xc=xc+xpl(i)
              yc=yc+ypl(i)
              zc=zc+zpl(i)
            enddo

            xc=xc/(ncorno-1)
            yc=yc/(ncorno-1)
            zc=zc/(ncorno-1)

            if (igird.eq.1.and.yc.ge.0.0) then

              do i=1,ncorno
                zplm(i)=-zpl(i)
              enddo

              call mgset('PLCI',1.)
              call mpl(ncorno,xpl,zpl)

              izero=0
              do i=1,ncorno
                if (
     &            abs(xc-xpl(i)).gt.1.0e-6 .and. abs(zc-zpl(i)).gt.1.0e-6
     &            ) izero=1
                xpl(i)=xpl(i)+(xc-xpl(i))*0.03*rcol
                ypl(i)=ypl(i)+(yc-ypl(i))*0.03*rcol
                zpl(i)=zpl(i)+(zc-zpl(i))*0.03*rcol
                zplm(i)=-zpl(i)
              enddo

              call mgset('PLCI',rcol)
              if (izero.ne.0) call mpl(ncorno,xpl,zpl)

              if (imag.ne.imago.or.iline.eq.nline) then

                bo=sqrt(bxo*bxo+byo*byo+bzo*bzo)

                if (abs(bxo).lt.bo*eps) bxo=0.0
                if (abs(byo).lt.bo*eps) byo=0.0
                if (abs(bzo).lt.bo*eps) bzo=0.0

                xplb(1)=xmc(1)-2.*bxo/bo*dx/6.
                xplb(2)=xmc(1)+2.*bxo/bo*dx/6.
                yplb(1)=ymc(1)-2.*byo/bo*dy/8.
                yplb(2)=ymc(1)+2.*byo/bo*dy/8.
                zplb(1)=zmc(1)-2.*bzo/bo*dz/5.
                zplb(2)=zmc(1)+2.*bzo/bo*dz/5.

                xplbo(1)=xplb(1)
                xplbo(2)=xplb(2)
                yplbo(1)=yplb(1)
                yplbo(2)=yplb(2)
                zplbo(1)=zplb(1)
                zplbo(2)=zplb(2)

                if (kpole.eq.0) call mpl(2,xplbo,zplbo)

                vn=sqrt((xplbo(2)-xplbo(1))**2+(zplbo(2)-zplbo(1))**2)

                if (vn.ne.0.0d0) then

                  vnx=(xplbo(2)-xplbo(1))/vn
                  vnz=(zplbo(2)-zplbo(1))/vn

                  xplb(1)=xplbo(2)+vnz*dx/10.0-vnx*dx/10.0
                  zplb(1)=zplbo(2)-vnx*dz/10.0-vnz*dz/10.0

                  if (kpole.eq.0) call mpl(2,xplb,zplb)

                  xplb(1)=xplbo(2)-vnz*dx/10.0-vnx*dx/10.0
                  zplb(1)=zplbo(2)+vnx*dz/10.0-vnz*dz/10.0

                  if (kpole.eq.0) call mpl(2,xplb,zplb)

                endif !vn

                if (byo.gt.1.e-9) then
                  call mgset('MTYP',rmtyp24)
                  call mgset('MSCF',circ0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                  call mgset('MTYP',rmtyp20)
                  call mgset('MSCF',dot0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                else if (byo.lt.0.0) then
                  call mgset('MTYP',rmtyp24)
                  call mgset('MSCF',circ0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                  call mgset('MTYP',rmtyp31)
                  call mgset('MSCF',dot0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                endif

              endif !imago

            else if (igird.eq.2.and.yc.le.0.0) then

              do i=1,ncorno
                zplm(i)=-zpl(i)
              enddo

              call mgset('PLCI',1.)
              call mpl(ncorno,xpl,zpl)

              izero=0
              do i=1,ncorno
                if (
     &            abs(xc-xpl(i)).gt.1.0e-6 .and. abs(zc-zpl(i)).gt.1.0e-6
     &            ) izero=1
                xpl(i)=xpl(i)+(xc-xpl(i))*0.03*rcol
                ypl(i)=ypl(i)+(yc-ypl(i))*0.03*rcol
                zpl(i)=zpl(i)+(zc-zpl(i))*0.03*rcol
                zplm(i)=-zpl(i)
              enddo

              call mgset('PLCI',rcol)
              if (izero.ne.0) call mpl(ncorno,xpl,zpl)

              if (imag.ne.imago.or.iline.eq.nline) then

                bo=sqrt(bxo*bxo+byo*byo+bzo*bzo)
                if (abs(bxo).lt.bo*eps) bxo=0.0
                if (abs(byo).lt.bo*eps) byo=0.0
                if (abs(bzo).lt.bo*eps) bzo=0.0

                xplb(1)=xmc(1)-2.*bxo/bo*dx/6.
                xplb(2)=xmc(1)+2.*bxo/bo*dx/6.
                yplb(1)=ymc(1)-2.*byo/bo*dy/8.
                yplb(2)=ymc(1)+2.*byo/bo*dy/8.
                zplb(1)=zmc(1)-2.*bzo/bo*dz/5.
                zplb(2)=zmc(1)+2.*bzo/bo*dz/5.

                xplbo(1)=xplb(1)
                xplbo(2)=xplb(2)
                yplbo(1)=yplb(1)
                yplbo(2)=yplb(2)
                zplbo(1)=zplb(1)
                zplbo(2)=zplb(2)

                if (kpole.eq.0) call mpl(2,xplbo,zplbo)

                vn=sqrt((xplbo(2)-xplbo(1))**2+(zplbo(2)-zplbo(1))**2)

                if (vn.ne.0.0d0) then

                  vnx=(xplbo(2)-xplbo(1))/vn
                  vnz=(zplbo(2)-zplbo(1))/vn

                  xplb(1)=xplbo(2)+vnz*dx/10.0-vnx*dx/10.0
                  zplb(1)=zplbo(2)-vnx*dz/10.0-vnz*dz/10.0

                  if (kpole.eq.0) call mpl(2,xplb,zplb)

                  xplb(1)=xplbo(2)-vnz*dx/10.0-vnx*dx/10.0
                  zplb(1)=zplbo(2)+vnx*dz/10.0-vnz*dz/10.0

                  if (kpole.eq.0) call mpl(2,xplb,zplb)

                endif !vn

                if (byo.gt.1.e-9) then
                  call mgset('MTYP',rmtyp24)
                  call mgset('MSCF',circ0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                  call mgset('MTYP',rmtyp20)
                  call mgset('MSCF',dot0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                else if (byo.lt.0.0) then
                  call mgset('MTYP',rmtyp24)
                  call mgset('MSCF',circ0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                  call mgset('MTYP',rmtyp31)
                  call mgset('MSCF',dot0*pscal/5.)
                  call mpm(1,xmc(1),zmc(1))
                endif

              endif !imago

            endif !yc

          endif !iplano

          xpl(ncorn)=x
          ypl(ncorn)=y
          zpl(ncorn)=z

          xmpl(impl)=x
          ympl(impl)=y
          zmpl(impl)=z

          bxo=bx
          byo=by
          bzo=bz

          iplano=iplan
          ncorno=ncorn
          rcol=rcolb(iline)
          imago=imag
          kpole=ispole(imago)

        enddo !nline

        if (nbforcx*nbforcy*nbforcz.ne.0) call undumag_bpolypl2(forxpl,forzpl,forcol,13)

        if (igird.eq.1) then
          call mshplt_set_line_width(rlwidth*2.)
          do iw=1,ncwires
            rcol=sngl(wire(9,iw))
            call mgset('PLCI',rcol)
            xpl(1)=sngl(wire(3,iw))
            xpl(2)=sngl(wire(6,iw))
            ypl(1)=sngl(wire(4,iw))
            ypl(2)=sngl(wire(7,iw))
            zpl(1)=sngl(wire(5,iw))
            zpl(2)=sngl(wire(8,iw))
            if (ypl(1).gt.0.0.or.ypl(2).gt.0.0) call mpl(2,xpl,zpl)
          enddo
          call mshplt_set_line_width(rlwidth/2.)
        else
          call mshplt_set_line_width(rlwidth*2.)
          do iw=1,ncwires
            rcol=sngl(wire(9,iw))
            call mgset('PLCI',rcol)
            xpl(1)=sngl(wire(3,iw))
            xpl(2)=sngl(wire(6,iw))
            ypl(1)=sngl(wire(4,iw))
            ypl(2)=sngl(wire(7,iw))
            zpl(1)=sngl(wire(5,iw))
            zpl(2)=sngl(wire(8,iw))
            if (ypl(1).lt.0.0.or.ypl(2).lt.0.0) call mpl(2,xpl,zpl)
          enddo
          call mshplt_set_line_width(rlwidth/2.)
        endif

      enddo !igird

      call muwk(0,0)

c--- y vs x }

c--- top views of girder}

c--- 3D, top and side views }

9999  continue

      if (iallo.eq.1) then
        deallocate(xpl)
        deallocate(ypl)
        deallocate(zpl)
        deallocate(zplm)
        deallocate(xmpl)
        deallocate(ympl)
        deallocate(zmpl)
      endif

c      call mgmeta(0,0)
c      call mplend

      call mshplt_end

      write(lun6,*)"Done"
      write(lun6,*)

      deallocate(rmothb,rmagb,rcolb,rplanb,rcornb,
     &  xb,yb,zb,bxb,byb,bzb,rmatb)

      return
      end
+DECK,clcbuff_to_magnets.
*CMZ :  2.04/11 26/08/2023  10.27.59  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  08.02.18  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  16.11.22  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  12.23.20  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  16.43.57  by  Michael Scheer
*CMZ :  2.04/01 22/01/2023  13.04.45  by  Michael Scheer
*CMZ :  2.04/00 17/01/2023  09.24.20  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  12.31.51  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  15.17.16  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2021
      subroutine clcbuff_to_magnets

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

+seq,grarad.

      character(2048) cline,cbuff(5),cfile,cline1
      character(128) cword,ckey

      double precision, dimension (:), allocatable :: xp,yp,zp,xpc,ypc,zpc

      double precision undumag_variable_getval,size(3),dphi

      double precision x,dx,dy,dz,Br(5),xc,yc,zc,gcen(3),chamf,
     &  r,h,phi,radin,radout,height,angle,xyz(3),vol

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface

      integer i,k,l,m,kb,ib,ip,npoi,ir,ih,iphi,limit,
     &  nxdiv,nydiv,nzdiv,nhull,nface,nedge,kfacelast,kblockch

+self,if=debcm.
      integer n,ipoi,iplan
+self.
      integer ipos(2,1000),jpos(2,1000),nwords,istat,ibrn,ifound

      integer ifailhull,lun,ieof,kfail
      logical lexist

      !xhull,yhull,zhull are absolute at the end of this routine

      !call util_break
      nmag=nmag_t+nspecmag_t+nclccop_t

      allocate(t_magnets(nmag),t_magnets_copy(nmag))
      allocate(brnmat(2,nmag_t+nspecmag_t))

      nbrnmat=0

      nmag=0
      niron=0
      ncornmax=12
      nplanmax=8

      allocate(
     &  xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &  xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &  xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax),
     &  xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &  xpc(ncornmax),ypc(ncornmax),zpc(ncornmax),
     &  kface((ncornmax+1)*ncornmax),kedge(4,2*ncornmax-2),khull(ncornmax))

      ib=0
      kb=0

      limit=nclcmag+nclcspec

      do while (ib.lt.limit)

        if (kb.eq.0.and.ib.ge.nclcmag) then
          ib=0
          kb=1
          limit=nclcspec
        endif

        ib=ib+1

        if (kb.eq.0) then
          cline = clcmag(ib)
        else
          cline = clcspec(ib)
        endif

        call util_string_split(cline,1000,nwords,ipos,istat)

        if (cline(ipos(1,1):ipos(2,1)).eq.'Magnet'.or.
     &      cline(ipos(1,1):ipos(2,1)).eq.'Pole') then
          nmag=nmag+1
          t_magnets(nmag)%kmodule=magmodule(nmag)
          t_magnets(nmag)%IsSpecial=0
          cycle
        else if (cline(ipos(1,1):ipos(2,1)).eq.'Special_Magnet'.or.
     &      cline(ipos(1,1):ipos(2,1)).eq.'Special_Pole') then
          nspecmag=nspecmag+1
          nmag=nmag+1
          t_magnets(nmag)%kmodule=0
          t_magnets(nmag)%IsSpecial=1
          cycle
        endif

        ckey=cline(ipos(1,1):ipos(2,1))

        if (kb.eq.0) then
          cbuff=clcmag(ib:ib+4)
        else
          cbuff=clcspec(ib:ib+4)
        endif

        ib=ib+4

        t_magnets(nmag)%cnam=cline(ipos(1,2):ipos(2,2))
        t_magnets(nmag)%cmoth=cline(ipos(1,3):ipos(2,3))

        do m=1,nmag-1
          if (t_magnets(m)%cnam.eq.t_magnets(nmag)%cnam) then
            print*,""
            print*,"*** Error in clcbuff_to_magnets: Duplicate magnet ",
     &        t_magnets(m)%cnam
            print*,""
            stop "*** Program UNDUMAG aborted ***"
          endif
        enddo

        t_magnets(nmag)%cfile=''

        cword=cline(ipos(1,4):ipos(2,4))

        if (cword(1:1).eq.'$') then
          t_magnets(nmag)%icol=nint(undumag_variable_getval(cword))
        else
          read(cword,*)t_magnets(nmag)%icol
        endif

        cline=cbuff(2)
        call util_string_split(cline,1000,nwords,ipos,istat)

        do i=1,3
          cword=cline(ipos(1,i):ipos(2,i))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%xyz(i)=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%xyz(i)
          endif
        enddo

        xc=t_magnets(nmag)%xyz(1)
        yc=t_magnets(nmag)%xyz(2)
        zc=t_magnets(nmag)%xyz(3)

        cline=cbuff(3)
        call util_string_split(cline,1000,nwords,ipos,istat)

        if (kb.eq.0) then
          cline1=clcmag(ib-5)
        else
          cline1=clcspec(ib-5)
        endif

        if (cline1.eq.'Pole'.or.cline1.eq. 'Special_Pole') then
          niron=niron+1
          cword = cline(ipos(1,1):ipos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%imat=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%imat
          endif
          t_magnets(nmag)%IsPole=1
        else
          do i=1,5
            cword=cline(ipos(1,i):ipos(2,i))
            if (cword(1:1).eq.'$') then
              cword=cline(ipos(1,i):ipos(2,i))
              Br(i)=undumag_variable_getval(cword)
            else
              read(cword,*)br(i)
            endif
          enddo
          t_magnets(nmag)%IsPole=0
          if (norm2(br(2:4)).ne.0.0d0) br(2:4)=br(2:4)/norm2(br(2:4))
          if (br(5).eq.0.0d0) br=0.0d0

          t_magnets(nmag)%brn=br(1)
+self,if=trace
          print*,"--trace: CLCBUFF_TO_MAGNETS:",nmag,t_magnets(nmag)%brn
+self.
          t_magnets(nmag)%br=br(2:4)*br(1)
          t_magnets(nmag)%imat=nint(br(5))

          ifound=0
          do ibrn=1,nbrnmat
            if (br(1).eq.brnmat(2,ibrn).and.br(5).eq.brnmat(1,ibrn)) then
              ifound=1
              exit
            endif
          enddo
          if (ifound.eq.0) then
            nbrnmat=nbrnmat+1
            brnmat(1,nbrnmat)=br(5) !material index
            brnmat(2,nbrnmat)=br(1) !Br
          endif
        endif  !Pole

        t_magnets(nmag)%ctype=ckey(1:32)
        t_magnets(nmag)%IsBlock=0
        t_magnets(nmag)%IsRotated=0

        if (ckey.eq.'Block') then

          if (irecrepl.ne.0) then
            t_magnets(nmag)%IsBlock=1
          else
            t_magnets(nmag)%IsBlock=-1
          endif

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          do i=1,3
            cword=cline(jpos(1,i):jpos(2,i))
            if (cword(1:1).eq.'$') then
              t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
            else
              read(cword,*)t_magnets(nmag)%size(i)
            endif
            if (t_magnets(nmag)%IsPole.eq.0.and.coating.ne.0.0d0) then
              t_magnets(nmag)%size(i)=t_magnets(nmag)%size(i)-2.0d0*coating
            endif
            if (t_magnets(nmag)%size(i).le.0.0d0) then
              t_magnets(nmag)%brn=0.0d0
              t_magnets(nmag)%br=0.0d0
            endif
          enddo

          cline=cbuff(5)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%yfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%yfracdiv
          endif

          cword=cline(jpos(1,5):jpos(2,5))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%zfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%zfracdiv
          endif

          xc=t_magnets(nmag)%xyz(1)
          yc=t_magnets(nmag)%xyz(2)
          zc=t_magnets(nmag)%xyz(3)

          npoi=8

          xp(1)=xc-t_magnets(nmag)%size(1)/2.0d0
          xp(2)=xc+t_magnets(nmag)%size(1)/2.0d0
          xp(3)=xp(2)
          xp(4)=xp(1)
          xp(5:8)=xp(1:4)

          yp(1:4)=yc-t_magnets(nmag)%size(2)/2.0d0
          yp(5:8)=yc+t_magnets(nmag)%size(2)/2.0d0

          zp(1:2)=zc-t_magnets(nmag)%size(3)/2.0d0
          zp(3:4)=zc+t_magnets(nmag)%size(3)/2.0d0
          zp(5:8)=zp(1:4)

          else if (
     &        ckey.eq.'BlockChamf'.or.
     &        ckey.eq.'BlockUsChamf'.or.
     &        ckey.eq.'BlockDsChamf'
     &        ) then

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          do i=1,3
            cword=cline(jpos(1,i):jpos(2,i))
            if (cword(1:1).eq.'$') then
              t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
            else
              read(cword,*)t_magnets(nmag)%size(i)
            endif
            if (t_magnets(nmag)%size(i).le.0.0d0) then
              t_magnets(nmag)%brn=0.0d0
              t_magnets(nmag)%br=0.0d0
            endif
          enddo

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            chamf=undumag_variable_getval(cword)
          else
            read(cword,*) chamf
          endif

          kblockch=0
          t_magnets(nmag)%UsChamf=chamf
          t_magnets(nmag)%DsChamf=chamf

          if (ckey.eq.'BlockUsChamf') then
            kblockch=-1
            t_magnets(nmag)%DsChamf=0.0d0
          else if (ckey.eq.'BlockDsChamf') then
            kblockch=1
            t_magnets(nmag)%UsChamf=0.0d0
          endif

          npoi=12

          dx=t_magnets(nmag)%size(1)
          dy=t_magnets(nmag)%size(2)
          dz=t_magnets(nmag)%size(3)

          if (dx.le.0.0d0.or.dy.le.0.0d0.or.dz.le.0.0d0) then
            t_magnets(nmag)%brn=0.0d0
            t_magnets(nmag)%br=0.0d0
          endif

          if (t_magnets(nmag)%IsPole.ne.0.) then
            call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &        coating*0.0d0,npoi,xp,yp,zp)
          else
            call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &        coating,npoi,xp,yp,zp)
          endif

          xp=xp+xc
          yp=yp+yc
          zp=zp+zc

          cline=cbuff(5)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%yfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%yfracdiv
          endif

          cword=cline(jpos(1,5):jpos(2,5))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%zfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%zfracdiv
          endif

        else if (ckey.eq.'Cylinder') then

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          do i=1,3
            cword=cline(jpos(1,i):jpos(2,i))
            if (cword(1:1).eq.'$') then
              t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
            else
              read(cword,*)t_magnets(nmag)%size(i)
            endif
            if (t_magnets(nmag)%size(i).le.0.0d0) then
              t_magnets(nmag)%brn=0.0d0
              t_magnets(nmag)%br=0.0d0
            endif
          enddo

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%cylphi
          endif

          cline=cbuff(5)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)nydiv
            phi=t_magnets(nmag)%cylphi
            nydiv=max(nydiv,int(phi/45.0))+2
            t_magnets(nmag)%nydiv=nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          radin=t_magnets(nmag)%size(1)
          radout=t_magnets(nmag)%size(2)
          height=t_magnets(nmag)%size(3)
          angle=t_magnets(nmag)%cylphi

          xyz=t_magnets(nmag)%xyz

          if (radin.lt.tiny) radin=tiny

          npoi=4*(nydiv+1)

          if(npoi.gt.ncornmax) then
            ncornmax=npoi
            deallocate(xp,yp,zp,xpc,ypc,zpc,kface,kedge,khull,
     &        xpuffer1,ypuffer1,zpuffer1,
     &        xpuffer2,ypuffer2,zpuffer2,
     &        xpuffer3,ypuffer3,zpuffer3
     &        )
            allocate(
     &        xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &        xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &        xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax),
     &        xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &        xpc(ncornmax),ypc(ncornmax),zpc(ncornmax),
     &        kface((npoi+1)*npoi),kedge(4,2*npoi-2),khull(ncornmax))
          endif

          ip=0
          r=radin
          npoi=0
          dphi=angle/dble(nydiv)*grarad1
          do ir=1,2
            h=-height/2.0d0
            do ih=1,2
              phi=-angle/2.0d0*grarad1
              do iphi=1,nydiv+1
                ip=ip+1
                xp(ip)=r*sin(phi)+xc
                yp(ip)=h+yc
                zp(ip)=r*cos(phi)+zc
                phi=phi+dphi
              enddo
              h=height/2.0d0
            enddo
            r=radout
          enddo

          npoi=ip

          call clcmag_cut_cyl(nmag)

        else if (ckey.eq.'Corners'.or.ckey.eq.'File') then

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%yfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%yfracdiv
          endif

          cword=cline(jpos(1,5):jpos(2,5))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%zfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%zfracdiv
          endif

          if (ckey.eq.'Corners') then

            read(cbuff(5),*) npoi

            if(npoi.gt.ncornmax) then
              ncornmax=npoi
              deallocate(xp,yp,zp,xpc,ypc,zpc,kface,kedge,khull,
     &          xpuffer1,ypuffer1,zpuffer1,
     &          xpuffer2,ypuffer2,zpuffer2,
     &          xpuffer3,ypuffer3,zpuffer3
     &          )
              allocate(
     &          xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &          xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &          xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax),
     &          xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &          xpc(ncornmax),ypc(ncornmax),zpc(ncornmax),
     &          kface((npoi+1)*npoi),kedge(4,2*npoi-2),khull(ncornmax))
            endif

            do i=1,npoi

              ib=ib+1
              if (kb.eq.0) then
                cline=clcmag(ib)
              else
                cline=clcspec(ib)
              endif

              call util_string_split(cline,1000,nwords,ipos,istat)

              do k=1,3
                cword=cline(ipos(1,k):ipos(2,k))
                if (cword(1:1).eq.'$') then
                  x=undumag_variable_getval(cword)
                else
                  read(cword,*)x
                endif
                if (k.eq.1) then
                  xp(i)=x+xc
                else if (k.eq.2) then
                  yp(i)=x+yc
                else if (k.eq.3) then
                  zp(i)=x+zc
                endif
              enddo !k

            enddo !npoi

          else !ckey

            cfile=cbuff(5)
            cline=trim(cfile)
            l=len_trim(cfile)
            if (cfile(1:1).eq."'") then
              cline=cfile(2:l-1)
            endif
            cfile=cline
            t_magnets(nmag)%cfile=trim(cfile)

            inquire(file=trim(cfile),exist=lexist)
            if (lexist.eqv..false.) then
              write(lun6,*)"*** Error in clcbuff_to_magnets: File"
              write(lun6,*)trim(cfile)
              write(lun6,*)"not found ***"
              stop
            endif

            open(newunit=lun,file=trim(cfile),status='old')
            npoi=0
            do while(.true.)
              call util_skip_comment_empty_end(lun,ieof)
              if (ieof.ne.0) exit
              read(lun,'(a)')cline
              npoi=npoi+1
            enddo
            rewind(lun)

            if(npoi.gt.ncornmax) then
              ncornmax=npoi
              deallocate(xp,yp,zp,kface,kedge,khull,
     &          xpuffer1,ypuffer1,zpuffer1,
     &          xpuffer2,ypuffer2,zpuffer2,
     &          xpuffer3,ypuffer3,zpuffer3)
              allocate(xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &          kface((npoi+1)*npoi),kedge(4,2*npoi-2),khull(npoi),
     &          xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &          xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &          xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax)
     &          )
            endif

            do i=1,npoi
              call util_skip_comment_empty_end(lun,ieof)
              read(lun,'(a)')cline
              call util_string_split(cline,1000,nwords,ipos,istat)
              do k=1,3
                cword=cline(ipos(1,k):ipos(2,k))
                if (cword(1:1).eq.'$') then
                  x=undumag_variable_getval(cword)
                else
                  read(cword,*)x
                endif
                if (k.eq.1) then
                  xp(i)=x+xc
                else if (k.eq.2) then
                  yp(i)=x+yc
                else if (k.eq.3) then
                  zp(i)=x+zc
                endif
              enddo !k
            enddo !npoi

          endif !Corners and File

        else

          write(lun6,*)"*** Error in clcbuff_to_magnets: Unknown magnet type:"
          write(lun6,*)trim(ckey)
          stop

        endif

+self,if=debcm.
        do i=1,npoi
          write(887,*)xp(i),yp(i),zp(i),i
        enddo
        flush(887)
        close(887)
+self.

        if (t_magnets(nmag)%IsPole.eq.0.and.t_magnets(nmag)%brn.eq.0.0d0) then
          !print*,"Test:",nmag,t_magnets(nmag)%brn
          nmag=nmag-1
          cycle
        endif

        call util_convex_hull_3d_overwrite(npoi,xp,yp,zp,khull,kedge,kface,
     &    nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

+self,if=debcm.
        l=0
        do iplan=1,nface
          l=l+1
          n=kface(l)
          do i=1,n
            l=l+1
            ipoi=kface(l)
            write(900,*)iplan,i,l,ipoi,xp(ipoi),yp(ipoi),zp(ipoi)
          enddo
        enddo
+self.
        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in clcbuff_to_magnets: Subroutine util_convex_hull_3d failed for ",
     &      trim(t_magnets(nmag)%cnam)
          stop
        endif

        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in clcbuff_to_magnets: Subroutine util_convex_hull_3d failed for ",
     &      trim(t_magnets(nmag)%cnam)
          stop
        endif

        npoi=nhull

        allocate(t_magnets(nmag)%xhull0(npoi))
        allocate(t_magnets(nmag)%yhull0(npoi))
        allocate(t_magnets(nmag)%zhull0(npoi))
        allocate(t_magnets(nmag)%xhull(npoi))
        allocate(t_magnets(nmag)%yhull(npoi))
        allocate(t_magnets(nmag)%zhull(npoi))
        allocate(t_magnets(nmag)%khull(npoi))
        allocate(t_magnets(nmag)%kface(kfacelast))
        allocate(t_magnets(nmag)%kedge(4,nedge))

        t_magnets(nmag)%nhull=npoi
        t_magnets(nmag)%khull(1:npoi)=khull(1:npoi)

        gcen=0.0d0
        do i=1,npoi
          t_magnets(nmag)%xhull0(i)=xp(i)
          t_magnets(nmag)%yhull0(i)=yp(i)
          t_magnets(nmag)%zhull0(i)=zp(i)
          t_magnets(nmag)%xhull(i)=xp(i)
          t_magnets(nmag)%yhull(i)=yp(i)
          t_magnets(nmag)%zhull(i)=zp(i)
          gcen=gcen+[xp(i),yp(i),zp(i)]
        enddo

        if (t_magnets(nmag)%ctype.eq.'Cylinder') then
          size=t_magnets(nmag)%size
          vol=(size(2)**2-size(1)**2)*size(3)*t_magnets(nmag)%cylphi/360.0d0*pi1
        else
          call util_volume(npoi,xp,yp,zp,hulltiny,vol,kfail)
          if (kfail.ne.0) then
            write(lun6,*)"*** Error in clcbuff_to_magnets: Subroutine util_volume failed for ",
     &        trim(t_magnets(nmag)%cnam)
            stop
          endif
        endif

        t_magnets(nmag)%volume=vol

        gcen=gcen/npoi
        t_magnets(nmag)%gcen=gcen

        t_magnets(nmag)%kedge(:,1:nedge)=kedge(:,1:nedge)
        t_magnets(nmag)%nedge=nedge
        t_magnets(nmag)%kedge(:,1:nedge)=kedge(:,1:nedge)
        t_magnets(nmag)%nface=nface
        t_magnets(nmag)%kfacelast=kfacelast
        t_magnets(nmag)%kface(1:kfacelast)=kface(1:kfacelast)

        nplanmax=max(nplanmax,nface)

        nxdiv=t_magnets(nmag)%nxdiv
        nydiv=t_magnets(nmag)%nydiv
        nzdiv=t_magnets(nmag)%nzdiv

        if (t_magnets(nmag)%ctype.ne.'Cylinder') then
          t_magnets(nmag)%nvoxels=0
        endif

        allocate(t_magnets(nmag)%kvoxels(nxdiv,nydiv,nzdiv))
        t_magnets(nmag)%kvoxels=0
        allocate(t_magnets(nmag)%t_xyzcuts(nxdiv,nydiv,nzdiv))
        allocate(t_magnets(nmag)%t_xycuts(nxdiv,nydiv))
        allocate(t_magnets(nmag)%t_xcuts(nxdiv))

      enddo !nclcmag

      deallocate(xp,yp,zp,xpc,ypc,zpc,kface,kedge,khull)

      !call util_break


      nmag_t=0
      nspecmag_t=0
      do i=1,nmag
        if (t_magnets(i)%IsSpecial.eq.1) then
          nspecmag_t=nspecmag_t+1
        else
          nmag_t=nmag_t+1
        endif
      enddo

      nplanmax_t=nplanmax
      ncornmax_t=ncornmax

      nmagtot_t=nmag_t+nspecmag_t

      deallocate(magmodule)

      return
      end
+DECK,clctransrotcop.
*CMZ :  2.04/11 26/08/2023  09.53.27  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  08.05.44  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.49.50  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  09.15.04  by  Michael Scheer
*CMZ :  2.04/06 01/08/2023  15.05.17  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/01 20/01/2023  08.02.02  by  Michael Scheer
*CMZ :  2.04/00 16/01/2023  15.35.00  by  Michael Scheer
*CMZ :  2.02/01 26/01/2022  11.22.41  by  Michael Scheer
*-- Author :    Michael Scheer   29/12/2021
      subroutine clctransrotcop

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none
+seq,grarad.

      type(T_magnet) tmag
      double precision rm(3,3),t8(8),r(3),xmin,xmax,ymin,ymax,zmin,zmax
      integer imag,itr,ipoi,istat,ifound,iold,i,key,ipos(2,100),nwords,iv
      integer :: ndim=100,j,nvar
      character(2048) cline
      character(128) ctrans,cvar

      double precision undumag_variable_getval

+self,if=trace.
      print*,"-trace-: Entered clctransrotcop "
+self.

      do itr=1,ntransrotcop

        t8=transrotcop(:,itr)
        key=int(t8(8))
        i=int(t8(1))

        if (i.le.0) cycle

        nvar=3
        if (key.eq.3) nvar=6

        cline=clcbuff(i)
        call util_string_split(cline,ndim,nwords,ipos,istat)

        do j=1,nvar
          cvar=cline(ipos(1,j):ipos(2,j))
          if (cvar(1:1).eq.'$') then
            transrotcop(j,itr)=undumag_variable_getval(trim(cvar))
          else
            read(cvar,*) transrotcop(j,itr)
          endif
        enddo !nvar

        if (key.eq.2) then
          ! Rotation
          cline=clcbuff(i+1)
          call util_string_split(cline,ndim,nwords,ipos,istat)
          do j=1,4
            cvar=cline(ipos(1,j):ipos(2,j))
            if (cvar(1:1).eq.'$') then
              transrotcop(3+j,itr)=undumag_variable_getval(trim(cvar))
            else
              read(cvar,*) transrotcop(3+j,itr)
            endif
          enddo
        endif !key

      enddo !ntransrotcop

      iold=0
      ctrans=''
      do itr=1,ntransrotcop
        ifound=0
        do imag=1,nmagtot_t
          tmag=t_magnets(imag)
          if (tmag%ctype.eq.'Cylinder') then
            ifound=-1
            cycle
          endif
          t8=transrotcop(:,itr)
          if(
     &        tmag%cmoth.eq.ctransrotcop(itr).or.
     &        tmag%cnam.eq.ctransrotcop(itr)
     &        ) then
            ifound=itr
            if (t8(8).eq.0.0d0) then
              t_magnets(imag)%xmin=t_magnets(imag)%xmin+t8(1)
              t_magnets(imag)%xmax=t_magnets(imag)%xmax+t8(1)
              t_magnets(imag)%ymin=t_magnets(imag)%ymin+t8(2)
              t_magnets(imag)%ymax=t_magnets(imag)%ymax+t8(2)
              t_magnets(imag)%zmin=t_magnets(imag)%zmin+t8(3)
              t_magnets(imag)%zmax=t_magnets(imag)%zmax+t8(3)
              t_magnets(imag)%xyz=t_magnets(imag)%xyz+t8(1:3)
              t_magnets(imag)%gcen=t_magnets(imag)%gcen+t8(1:3)
              do ipoi=1,tmag%nhull
                t_magnets(imag)%xhull(ipoi)=t_magnets(imag)%xhull(ipoi)+t8(1)
                t_magnets(imag)%yhull(ipoi)=t_magnets(imag)%yhull(ipoi)+t8(2)
                t_magnets(imag)%zhull(ipoi)=t_magnets(imag)%zhull(ipoi)+t8(3)
              enddo
              do iv=1,t_magnets(imag)%nvoxels
                t_magnets(imag)%t_voxels(iv)%xmin=t_magnets(imag)%t_voxels(iv)%xmin+t8(1)
                t_magnets(imag)%t_voxels(iv)%xmax=t_magnets(imag)%t_voxels(iv)%xmax+t8(1)
                t_magnets(imag)%t_voxels(iv)%ymin=t_magnets(imag)%t_voxels(iv)%ymin+t8(2)
                t_magnets(imag)%t_voxels(iv)%ymax=t_magnets(imag)%t_voxels(iv)%ymax+t8(2)
                t_magnets(imag)%t_voxels(iv)%zmin=t_magnets(imag)%t_voxels(iv)%zmin+t8(3)
                t_magnets(imag)%t_voxels(iv)%zmax=t_magnets(imag)%t_voxels(iv)%zmax+t8(3)
                t_magnets(imag)%t_voxels(iv)%xyz=t_magnets(imag)%t_voxels(iv)%xyz+t8(1:3)
                t_magnets(imag)%t_voxels(iv)%gcen=t_magnets(imag)%t_voxels(iv)%gcen+t8(1:3)
                do ipoi=1,t_magnets(imag)%t_voxels(iv)%nhull
                  t_magnets(imag)%t_voxels(iv)%xhull(ipoi)=t_magnets(imag)%t_voxels(iv)%xhull(ipoi)+t8(1)
                  t_magnets(imag)%t_voxels(iv)%yhull(ipoi)=t_magnets(imag)%t_voxels(iv)%yhull(ipoi)+t8(2)
                  t_magnets(imag)%t_voxels(iv)%zhull(ipoi)=t_magnets(imag)%t_voxels(iv)%zhull(ipoi)+t8(3)
                enddo
              enddo
            else if (t8(8).eq.3.0d0) then
              if (tmag%IsPole.ne.0) then
                write(lun6,*)"*** Warning in clctransrotcop: Setting remanence not allowed for iron ***"
                write(lun6,*)"*** Pole:",tmag%cnam
                cycle
              endif
              t_magnets(imag)%Brn=t8(1)
              t_magnets(imag)%Br=0.0d0
              if(norm2(t8(2:4)).ne.0.0d0)
     &          t_magnets(imag)%Br=t8(1)*t8(2:4)/norm2(t8(2:4))
              t_magnets(imag)%imat=int(t8(5))
              t_magnets(imag)%icol=int(t8(6))
            else if (t8(8).eq.1.0d0.or.t8(8).eq.2.0d0) then
              if (t8(8).eq.2.0d0) t_magnets(imag)%IsRotated=1
              call util_rotmat(t8(4:6),t8(7)*grarad1,rm,istat)
              if (t8(8).eq.2) then
                call util_mat_mul_vec_3x3(rm,tmag%br,t_magnets(imag)%br)
              endif
              r=tmag%xyz-t8(1:3)
              call util_mat_mul_vec_3x3(rm,r,r)
              t_magnets(imag)%xyz=r+t8(1:3)
              r=tmag%gcen-t8(1:3)
              call util_mat_mul_vec_3x3(rm,r,r)
              t_magnets(imag)%gcen=r+t8(1:3)
              !xmin=1.0d30
              !xmax=-1.0d30
              !ymin=1.0d30
              !ymax=-1.0d30
              !zmin=1.0d30
              !zmax=-1.0d30
              do ipoi=1,tmag%nhull
                r=[tmag%xhull(ipoi)-t8(1),tmag%yhull(ipoi)-t8(2),tmag%zhull(ipoi)-t8(3)]
                call util_mat_mul_vec_3x3(rm,r,r)
                t_magnets(imag)%xhull(ipoi)=r(1)+t8(1)
                t_magnets(imag)%yhull(ipoi)=r(2)+t8(2)
                t_magnets(imag)%zhull(ipoi)=r(3)+t8(3)
                !if (r(1)+t8(1).lt.xmin) xmin=r(1)+t8(1)
                !if (r(1)+t8(1).gt.xmax) xmax=r(1)+t8(1)
                !if (r(2)+t8(2).lt.ymin) ymin=r(2)+t8(2)
                !if (r(2)+t8(2).gt.ymax) ymax=r(2)+t8(2)
                !if (r(3)+t8(3).lt.zmin) zmin=r(3)+t8(3)
                !if (r(3)+t8(3).gt.zmax) zmax=r(3)+t8(3)
              enddo
              do iv=1,t_magnets(imag)%nvoxels
                if (t8(8).eq.2) then
                  call util_mat_mul_vec_3x3(rm,tmag%br,t_magnets(imag)%t_voxels(iv)%br)
                endif
                r=t_magnets(imag)%t_voxels(iv)%xyz-t8(1:3)
                call util_mat_mul_vec_3x3(rm,r,r)
                t_magnets(imag)%t_voxels(iv)%xyz=r+t8(1:3)
                r=t_magnets(imag)%t_voxels(iv)%gcen-t8(1:3)
                call util_mat_mul_vec_3x3(rm,r,r)
                t_magnets(imag)%t_voxels(iv)%gcen=r+t8(1:3)
                !xmin=1.0d30
                !xmax=-1.0d30
                !ymin=1.0d30
                !ymax=-1.0d30
                !zmin=1.0d30
                !zmax=-1.0d30
                do ipoi=1,t_magnets(imag)%t_voxels(iv)%nhull
                  r=[t_magnets(imag)%t_voxels(iv)%xhull(ipoi)-t8(1),
     &              t_magnets(imag)%t_voxels(iv)%yhull(ipoi)-t8(2),
     &              t_magnets(imag)%t_voxels(iv)%zhull(ipoi)-t8(3)]
                  call util_mat_mul_vec_3x3(rm,r,r)
                  t_magnets(imag)%t_voxels(iv)%xhull(ipoi)=r(1)+t8(1)
                  t_magnets(imag)%t_voxels(iv)%yhull(ipoi)=r(2)+t8(2)
                  t_magnets(imag)%t_voxels(iv)%zhull(ipoi)=r(3)+t8(3)
                  !if (r(1)+t8(1).lt.xmin) xmin=r(1)+t8(1)
                  !if (r(1)+t8(1).gt.xmax) xmax=r(1)+t8(1)
                  !if (r(2)+t8(2).lt.ymin) ymin=r(2)+t8(2)
                  !if (r(2)+t8(2).gt.ymax) ymax=r(2)+t8(2)
                  !if (r(3)+t8(3).lt.zmin) zmin=r(3)+t8(3)
                  !if (r(3)+t8(3).gt.zmax) zmax=r(3)+t8(3)
                enddo
              enddo
            else if (t8(8).lt.0.0d0) then
              call clcmag_copy(-int(t8(8)))
            else
              ifound=0
            endif
          endif
        enddo !imag
c        if (ifound.eq.0.and.itr.ne.iold.and.ctrans.ne.ctransrotcop(itr)) then
        if (ifound.eq.0) then
          write(lun6,*)"*** Warning in clctransrotcop: No magnet found or undefined action ***"
          write(lun6,*)"Action, Magnet:",itr,ctransrotcop(itr)
          write(lun6,*)
          iold=itr
          ctrans=ctransrotcop(itr)
        endif
      enddo !ntransrotcop

+self,if=trace.
      print*,"-trace-: Leaving clctransrotcop "
+self.

      call transrotcopcyl

      return
      end
+DECK,clcmag_voxel_volume.
*CMZ :  2.04/10 23/08/2023  08.09.00  by  Michael Scheer
*CMZ :  2.04/07 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  19.29.01  by  Michael Scheer
*CMZ :  2.04/02 26/02/2023  21.47.15  by  Michael Scheer
*CMZ :  2.04/00 09/12/2022  11.08.58  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  10.13.35  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021

      subroutine clcmag_voxel_volume(imag,ivox)

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      type(T_Voxel) tvox

      double precision vol
      integer imag,ivox,kfail
+self,if=debvoxvol.
      integer ix,iy,iz
+self.
      character(32) ctype

      ctype=t_magnets(imag)%ctype

      tvox=t_magnets(imag)%t_voxels(ivox)

      if (tvox%isblock.eq.0.or.t_magnets(imag)%IsRotated.ne.0) then
        call util_volume(tvox%nhull,tvox%xhull,tvox%yhull,tvox%zhull,hulltiny,vol,kfail)
      else
        vol=t_magnets(imag)%volume/t_magnets(imag)%nvoxels
      endif

      t_magnets(imag)%t_voxels(ivox)%volume=vol

+self,if=debvoxvol.
      ix=tvox%ixdiv
      iy=tvox%iydiv
      iz=tvox%izdiv
      if (vol.ne.t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume) then
        print*,ix,iy,iz,vol,t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume
        stop
      endif
+self.
      if (kfail.ne.0) then
        write(lun6,*)"*** Error in clcbuff_to_magnets: Subroutine util_volume failed for ",
     &    trim(t_magnets(nmag)%cnam)
        stop
        endif

      return
      end
+DECK,clcmag_br_inhom_init.
*CMZ :  2.04/10 23/08/2023  13.17.43  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  12.57.46  by  Michael Scheer
*CMZ :  2.04/06 29/03/2023  15.13.19  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/00 13/01/2023  11.36.00  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  10.13.35  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021
      subroutine clcmag_br_inhom_init

      use magnets_structure

      implicit none

      double precision undumag_variable_getval,coef

      integer imag,i,ix,iy,iz,ipos(2,10),istat,nwords

      character(512) c512

      do imag=1,nmag_t+nspecmag_t

        do i=1,t_magnets(imag)%IsInhom

          c512=t_magnets(imag)%cinhom(i)
          call util_string_split(c512,10,nwords,ipos,istat)

          ix=nint(undumag_variable_getval(c512(ipos(1,2):ipos(2,2))))
          iy=nint(undumag_variable_getval(c512(ipos(1,3):ipos(2,3))))
          iz=nint(undumag_variable_getval(c512(ipos(1,4):ipos(2,4))))
          coef=undumag_variable_getval(c512(ipos(1,5):ipos(2,5)))

          write(t_magnets(imag)%cinhom(i),*) c512(ipos(1,1):ipos(2,1))," ",
     &      ix,iy,iz,coef

        enddo
      enddo !imag=1,nmag_t+nspecmag_t

      return
      end
+DECK,transrotcopcyl.
*CMZ :  2.04/11 26/08/2023  09.55.25  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  08.07.21  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.49.50  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  09.15.04  by  Michael Scheer
*CMZ :  2.04/06 01/08/2023  15.05.17  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/01 20/01/2023  08.02.02  by  Michael Scheer
*CMZ :  2.04/00 16/01/2023  15.35.00  by  Michael Scheer
*CMZ :  2.02/01 26/01/2022  11.22.41  by  Michael Scheer
*-- Author :    Michael Scheer   29/12/2021
      subroutine transrotcopcyl

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none
+seq,grarad.

      type(T_magnet) tmag
      double precision rm(3,3),t8(8),r(3)
      integer imag,itr,ipoi,istat,ifound,iold,iv

+self,if=trace.
      print*,"-trace-: Entered transrotcopcyl "
+self.

      if(nmagcyl.eq.0) return

      iold=0
      do itr=1,ntransrotcop
        ifound=0
        do imag=1,nmagtot_t
          tmag=t_magnets(imag)
          t8=transrotcop(:,itr)
          if(
     &        tmag%cmoth.eq.ctransrotcop(itr).or.
     &        tmag%cnam.eq.ctransrotcop(itr)
     &        ) then
            ifound=itr
            if (tmag%ctype.ne.'Cylinder') then
              ifound=-itr
              cycle
            endif
            if (t8(8).eq.0.0d0) then
              t_magnets(imag)%xmin=t_magnets(imag)%xmin+t8(1)
              t_magnets(imag)%xmax=t_magnets(imag)%xmax+t8(1)
              t_magnets(imag)%ymin=t_magnets(imag)%ymin+t8(2)
              t_magnets(imag)%ymax=t_magnets(imag)%ymax+t8(2)
              t_magnets(imag)%zmin=t_magnets(imag)%zmin+t8(3)
              t_magnets(imag)%zmax=t_magnets(imag)%zmax+t8(3)
              t_magnets(imag)%xyz=t_magnets(imag)%xyz+t8(1:3)
              t_magnets(imag)%gcen=t_magnets(imag)%gcen+t8(1:3)
              do ipoi=1,tmag%nhull
                t_magnets(imag)%xhull(ipoi)=t_magnets(imag)%xhull(ipoi)+t8(1)
                t_magnets(imag)%yhull(ipoi)=t_magnets(imag)%yhull(ipoi)+t8(2)
                t_magnets(imag)%zhull(ipoi)=t_magnets(imag)%zhull(ipoi)+t8(3)
              enddo
              do iv=1,t_magnets(imag)%nvoxels
c                t_magnets(imag)%t_voxels(iv)%xmin=t_magnets(imag)%t_voxels(iv)%xmin+t8(1)
c                t_magnets(imag)%t_voxels(iv)%xmax=t_magnets(imag)%t_voxels(iv)%xmax+t8(1)
c                t_magnets(imag)%t_voxels(iv)%ymin=t_magnets(imag)%t_voxels(iv)%ymin+t8(2)
c                t_magnets(imag)%t_voxels(iv)%ymax=t_magnets(imag)%t_voxels(iv)%ymax+t8(2)
c                t_magnets(imag)%t_voxels(iv)%zmin=t_magnets(imag)%t_voxels(iv)%zmin+t8(3)
c                t_magnets(imag)%t_voxels(iv)%zmax=t_magnets(imag)%t_voxels(iv)%zmax+t8(3)
c                t_magnets(imag)%t_voxels(iv)%xyz=t_magnets(imag)%t_voxels(iv)%xyz+t8(1:3)
c                t_magnets(imag)%t_voxels(iv)%gcen=t_magnets(imag)%t_voxels(iv)%gcen+t8(1:3)
                do ipoi=1,t_magnets(imag)%t_voxels(iv)%nhull
                  t_magnets(imag)%t_voxels(iv)%xhull(ipoi)=t_magnets(imag)%t_voxels(iv)%xhull(ipoi)+t8(1)
                  t_magnets(imag)%t_voxels(iv)%yhull(ipoi)=t_magnets(imag)%t_voxels(iv)%yhull(ipoi)+t8(2)
                  t_magnets(imag)%t_voxels(iv)%zhull(ipoi)=t_magnets(imag)%t_voxels(iv)%zhull(ipoi)+t8(3)
                enddo
              enddo
            else if (t8(8).eq.3.0d0) then
              if (tmag%IsPole.ne.0) then
                write(lun6,*)"*** Warning in ransrotcopcyl: Setting remanence not allowed for iron ***"
                write(lun6,*)"*** Pole:",tmag%cnam
                cycle
              endif
              t_magnets(imag)%Brn=t8(1)
              t_magnets(imag)%Br=0.0d0
              if(norm2(t8(2:4)).ne.0.0d0)
     &          t_magnets(imag)%Br=t8(1)*t8(2:4)/norm2(t8(2:4))
              t_magnets(imag)%imat=int(t8(5))
              t_magnets(imag)%icol=int(t8(6))
            else if (t8(8).eq.1.0d0.or.t8(8).eq.2.0d0) then
              if (t8(8).eq.2.0d0) t_magnets(imag)%IsRotated=1
              call util_rotmat(t8(4:6),t8(7)*grarad1,rm,istat)
              if (t8(8).eq.2) then
                call util_mat_mul_vec_3x3(rm,tmag%br,t_magnets(imag)%br)
              endif
              r=tmag%xyz-t8(1:3)
              call util_mat_mul_vec_3x3(rm,r,r)
              t_magnets(imag)%xyz=r+t8(1:3)
              r=tmag%gcen-t8(1:3)
              call util_mat_mul_vec_3x3(rm,r,r)
              t_magnets(imag)%gcen=r+t8(1:3)
              !xmin=1.0d30
              !xmax=-1.0d30
              !ymin=1.0d30
              !ymax=-1.0d30
              !zmin=1.0d30
              !zmax=-1.0d30
              do ipoi=1,tmag%nhull
                r=[tmag%xhull(ipoi)-t8(1),tmag%yhull(ipoi)-t8(2),tmag%zhull(ipoi)-t8(3)]
                call util_mat_mul_vec_3x3(rm,r,r)
                t_magnets(imag)%xhull(ipoi)=r(1)+t8(1)
                t_magnets(imag)%yhull(ipoi)=r(2)+t8(2)
                t_magnets(imag)%zhull(ipoi)=r(3)+t8(3)
                !if (r(1)+t8(1).lt.xmin) xmin=r(1)+t8(1)
                !if (r(1)+t8(1).gt.xmax) xmax=r(1)+t8(1)
                !if (r(2)+t8(2).lt.ymin) ymin=r(2)+t8(2)
                !if (r(2)+t8(2).gt.ymax) ymax=r(2)+t8(2)
                !if (r(3)+t8(3).lt.zmin) zmin=r(3)+t8(3)
                !if (r(3)+t8(3).gt.zmax) zmax=r(3)+t8(3)
              enddo
              do iv=1,t_magnets(imag)%nvoxels
                if (t8(8).eq.2) then
                  call util_mat_mul_vec_3x3(rm,tmag%br,t_magnets(imag)%t_voxels(iv)%br)
                endif
                r=t_magnets(imag)%t_voxels(iv)%xyz-t8(1:3)
                call util_mat_mul_vec_3x3(rm,r,r)
                t_magnets(imag)%t_voxels(iv)%xyz=r+t8(1:3)
                r=t_magnets(imag)%t_voxels(iv)%gcen-t8(1:3)
                call util_mat_mul_vec_3x3(rm,r,r)
                t_magnets(imag)%t_voxels(iv)%gcen=r+t8(1:3)
                !xmin=1.0d30
                !xmax=-1.0d30
                !ymin=1.0d30
                !ymax=-1.0d30
                !zmin=1.0d30
                !zmax=-1.0d30
                do ipoi=1,t_magnets(imag)%t_voxels(iv)%nhull
                  r=[t_magnets(imag)%t_voxels(iv)%xhull(ipoi)-t8(1),
     &              t_magnets(imag)%t_voxels(iv)%yhull(ipoi)-t8(2),
     &              t_magnets(imag)%t_voxels(iv)%zhull(ipoi)-t8(3)]
                  call util_mat_mul_vec_3x3(rm,r,r)
                  t_magnets(imag)%t_voxels(iv)%xhull(ipoi)=r(1)+t8(1)
                  t_magnets(imag)%t_voxels(iv)%yhull(ipoi)=r(2)+t8(2)
                  t_magnets(imag)%t_voxels(iv)%zhull(ipoi)=r(3)+t8(3)
                  !if (r(1)+t8(1).lt.xmin) xmin=r(1)+t8(1)
                  !if (r(1)+t8(1).gt.xmax) xmax=r(1)+t8(1)
                  !if (r(2)+t8(2).lt.ymin) ymin=r(2)+t8(2)
                  !if (r(2)+t8(2).gt.ymax) ymax=r(2)+t8(2)
                  !if (r(3)+t8(3).lt.zmin) zmin=r(3)+t8(3)
                  !if (r(3)+t8(3).gt.zmax) zmax=r(3)+t8(3)
                enddo
              enddo
            else if (t8(8).lt.0.0d0) then
              call clcmag_copy(-int(t8(8)))
            else
              ifound=0
            endif
          endif
        enddo !imag

        if (ifound.eq.0) then
          write(lun6,*)"*** Warning in transrotcopcyl: No magnet found or undefined action ***"
          write(lun6,*)"Action, Magnet:",itr,ctransrotcop(itr)
          write(lun6,*)
          iold=itr
        endif
      enddo !ntransrotcop

+self,if=trace.
      print*,"-trace-: Leaving transrotcopcyl "
+self.

      return
      end
+PATCH,KUMAC,T=KUMAC.
*CMZ :  0.00/00 20/04/2016  13.01.38  by  Michael Scheer
+DECK,dnamgh,T=KUMAC.
*CMZ :  2.04/10 23/08/2023  16.13.17  by  Michael Scheer
*-- Author :    Michael Scheer   22/08/2023
exec dnam
set $UNDUMAG_GITHUB/input/nam/*.nam -f
set
+DECK,dmod,T=KUMAC.
*CMZ :  2.04/10 23/08/2023  08.10.42  by  Michael Scheer
*-- Author :    Michael Scheer   22/08/2023
exec dgfor
set $UNDUMAG_INCL/for/mod/*.f -f
set $UNDUMAG_INCL/libundu_modules -l
cd /modules
+DECK,dmodgh,T=KUMAC.
*CMZ :  2.04/10 23/08/2023  16.10.27  by  Michael Scheer
*-- Author :    Michael Scheer   22/08/2023
exec dforgh
set $UNDUMAG_GITHUB/for/mod/*.f -f
set $UNDUMAG_GITHUB/libundu_modules -l
cd /modules
+PATCH,SEQ.
*CMZ :  0.00/00 20/04/2016  13.03.34  by  Michael Scheer
+KEEP,unduver.
*CMZ :  2.04/11 29/08/2023  15.03.24  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.14.31  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.16.48  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.57.08  by  Michael Scheer
*CMZ :  2.04/07 10/08/2023  09.14.02  by  Michael Scheer
*CMZ :  2.04/06 07/08/2023  10.05.29  by  Michael Scheer
*CMZ :  2.04/05 15/03/2023  13.22.48  by  Michael Scheer
*CMZ :  2.04/04 14/03/2023  11.22.26  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.38.01  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.57.20  by  Michael Scheer
*CMZ :  2.04/01 17/01/2023  13.16.06  by  Michael Scheer
*CMZ :  2.04/00 02/09/2022  07.23.21  by  Michael Scheer
*CMZ :  2.03/00 26/07/2022  07.27.06  by  Michael Scheer
*CMZ :  2.02/02 11/02/2022  10.16.30  by  Michael Scheer
*CMZ :  2.02/00 06/04/2021  15.55.28  by  Michael Scheer
*CMZ :  2.01/08 15/08/2020  08.40.43  by  Michael Scheer
*CMZ :  2.01/07 28/07/2020  10.27.15  by  Michael Scheer
*CMZ :  2.01/06 27/07/2020  12.07.59  by  Michael Scheer
*CMZ :  2.01/05 27/07/2020  10.28.00  by  Michael Scheer
*CMZ :  2.01/03 16/07/2019  09.36.59  by  Michael Scheer
*CMZ :  2.01/02 02/05/2018  14.22.15  by  Michael Scheer
*CMZ :  2.01/01 24/04/2018  17.18.04  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  15.17.18  by  Michael Scheer
*CMZ :  2.00/03 24/04/2018  13.33.50  by  Michael Scheer
*CMZ :  2.00/02 17/04/2018  13.44.53  by  Michael Scheer
*CMZ :  2.00/01 16/04/2018  15.48.23  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.51.26  by  Michael Scheer
*CMZ :  1.25/05 05/04/2018  19.30.01  by  Michael Scheer
*CMZ :  1.25/04 05/04/2018  16.14.01  by  Michael Scheer
*CMZ :  1.25/03 03/04/2018  08.32.34  by  Michael Scheer
*CMZ :  1.25/02 22/03/2018  15.10.45  by  Michael Scheer
*CMZ :  1.25/01 20/03/2018  16.23.14  by  Michael Scheer
*CMZ :  1.25/00 16/03/2018  15.06.30  by  Michael Scheer
*CMZ :  1.24/01 17/10/2017  10.11.38  by  Michael Scheer
*CMZ :  1.24/00 12/10/2017  15.01.01  by  Michael Scheer
*CMZ :  1.23/07 12/10/2017  08.31.17  by  Michael Scheer
*CMZ :  1.23/06 06/10/2017  14.22.02  by  Michael Scheer
*CMZ :  1.23/05 06/10/2017  12.51.05  by  Michael Scheer
*CMZ :  1.23/04 05/10/2017  12.36.30  by  Michael Scheer
*CMZ :  1.23/03 27/09/2017  09.39.17  by  Michael Scheer
*CMZ :  1.23/02 18/09/2017  15.33.46  by  Michael Scheer
*CMZ :  1.23/01 09/08/2017  08.38.14  by  Michael Scheer
*CMZ :  1.23/00 04/08/2017  09.35.04  by  Michael Scheer
*CMZ :  1.22/01 21/07/2017  15.02.00  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  10.36.01  by  Michael Scheer
*CMZ :  1.21/00 29/06/2017  16.12.16  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  16.11.17  by  Michael Scheer
*CMZ :  1.20/02 23/06/2017  14.23.56  by  Michael Scheer
*CMZ :  1.20/01 22/06/2017  14.46.47  by  Michael Scheer
*CMZ :  1.20/00 22/06/2017  11.27.31  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.34.58  by  Michael Scheer
*CMZ :  1.18/03 14/06/2017  11.29.53  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  15.11.00  by  Michael Scheer
*CMZ :  1.18/01 09/06/2017  08.54.59  by  Michael Scheer
*CMZ :  1.18/00 06/06/2017  14.48.14  by  Michael Scheer
*CMZ :  1.17/08 30/05/2017  16.29.12  by  Michael Scheer
*CMZ :  1.17/07 24/05/2017  13.12.04  by  Michael Scheer
*CMZ :  1.17/06 21/05/2017  14.25.54  by  Michael Scheer
*CMZ :  1.17/05 18/05/2017  12.07.07  by  Michael Scheer
*CMZ :  1.17/04 12/05/2017  13.52.43  by  Michael Scheer
*CMZ :  1.17/03 09/05/2017  13.37.52  by  Michael Scheer
*CMZ :  1.17/02 09/05/2017  13.11.36  by  Michael Scheer
*CMZ :  1.17/01 08/05/2017  20.51.09  by  Michael Scheer
*CMZ :  1.17/00 08/05/2017  16.57.03  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  14.11.11  by  Michael Scheer
*CMZ :  1.15/13 05/05/2017  10.21.44  by  Michael Scheer
*CMZ :  1.15/11 03/05/2017  09.26.17  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.48.35  by  Michael Scheer
*CMZ :  1.15/09 07/04/2017  15.00.04  by  Michael Scheer
*CMZ :  1.15/08 06/04/2017  15.01.20  by  Michael Scheer
*CMZ :  1.15/07 05/04/2017  16.02.20  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.33.09  by  Michael Scheer
*CMZ :  1.15/05 04/04/2017  12.48.22  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  13.12.53  by  Michael Scheer
*CMZ :  1.15/03 03/04/2017  11.00.07  by  Michael Scheer
*CMZ :  1.15/02 02/04/2017  09.46.32  by  Michael Scheer
*CMZ :  1.15/01 30/03/2017  11.37.22  by  Michael Scheer
*CMZ :  1.15/00 28/03/2017  12.03.00  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  12.54.38  by  Michael Scheer
*CMZ :  1.13/03 16/03/2017  17.18.19  by  Michael Scheer
*CMZ :  1.13/02 09/03/2017  17.35.51  by  Michael Scheer
*CMZ :  1.13/01 08/03/2017  17.07.42  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  17.04.56  by  Michael Scheer
*CMZ :  1.12/00 27/02/2017  15.49.37  by  Michael Scheer
*CMZ :  1.11/07 23/02/2017  17.25.07  by  Michael Scheer
*CMZ :  1.11/06 23/02/2017  13.48.56  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  16.08.44  by  Michael Scheer
*CMZ :  1.11/04 25/01/2017  16.58.21  by  Michael Scheer
*CMZ :  1.11/03 18/01/2017  09.43.51  by  Michael Scheer
*CMZ :  1.11/02 10/01/2017  10.20.14  by  Michael Scheer
*CMZ :  1.11/01 09/01/2017  13.56.32  by  Michael Scheer
*CMZ :  1.11/00 05/01/2017  09.37.44  by  Michael Scheer
*CMZ :  1.10/03 05/12/2016  16.30.30  by  Michael Scheer
*CMZ :  1.10/02 01/12/2016  13.35.11  by  Michael Scheer
*CMZ :  1.10/01 21/11/2016  13.02.21  by  Michael Scheer
*CMZ :  1.10/00 18/11/2016  09.20.28  by  Michael Scheer
*CMZ :  1.09/01 10/10/2016  10.18.30  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  12.55.22  by  Michael Scheer
*CMZ :  1.08/00 30/09/2016  13.55.02  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  19.17.35  by  Michael Scheer
*CMZ :  1.07/02 25/09/2016  13.41.46  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.51.16  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  15.02.55  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.52.28  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.02.46  by  Michael Scheer
*CMZ :  1.04/03 15/09/2016  17.38.28  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  16.33.46  by  Michael Scheer
*CMZ :  1.04/01 14/09/2016  15.26.25  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  13.37.05  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  14.36.16  by  Michael Scheer
*CMZ :  1.02/03 12/09/2016  11.55.27  by  Michael Scheer
*CMZ :  1.02/01 11/09/2016  12.34.04  by  Michael Scheer
*CMZ :  1.02/00 30/08/2016  13.27.12  by  Michael Scheer
*CMZ :  1.01/00 21/08/2016  12.52.29  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  18.47.41  by  Michael Scheer
*CMZ :  0.00/14 19/08/2016  14.37.09  by  Michael Scheer
*CMZ :  0.00/13 19/08/2016  14.12.39  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  09.27.38  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  16.30.10  by  Michael Scheer
*CMZ :  0.00/10 14/07/2016  14.01.01  by  Michael Scheer
*CMZ :  0.00/09 06/07/2016  08.51.18  by  Michael Scheer
*CMZ :  0.00/08 23/06/2016  15.45.45  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  14.00.43  by  Michael Scheer
*CMZ :  0.00/05 14/06/2016  13.56.01  by  Michael Scheer
*CMZ :  0.00/04 13/05/2016  14.51.39  by  Michael Scheer
*CMZ :  0.00/03 04/05/2016  11.43.21  by  Michael Scheer
*CMZ :  0.00/02 02/05/2016  10.24.12  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  16.04.05  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.51.37  by  Michael Scheer
*-- Author :    Michael Scheer   12/02/2004
      print *
      print *
      print *
      write(lun6,*)'     **********************************************************'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     *                       UNDUMAG                          *'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     *                    Version 2.04/11                     *'
      write(lun6,*)'     *                        29.8.2023                       *'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     *                     Michael Scheer                     *'
      write(lun6,*)'     *                       HZB/BESSY                        *'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     **********************************************************'
      print *
      print *
      print *

      call util_zeit_kommentar(lun6,"")

      open(unit=999,file="undumag.ver")
      chuvers="2.04/11"
      write(999,*)chuvers
      close(999)
+KEEP,inputver.
*CMZ :  2.04/11 29/08/2023  15.03.24  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.14.31  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.16.48  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.57.08  by  Michael Scheer
*CMZ :  2.04/07 10/08/2023  09.14.02  by  Michael Scheer
*CMZ :  2.04/06 07/08/2023  10.05.29  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.38.01  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.57.20  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  14.22.34  by  Michael Scheer
*CMZ :  2.04/00 02/09/2022  07.23.44  by  Michael Scheer
*CMZ :  2.01/08 15/08/2020  08.40.43  by  Michael Scheer
*CMZ :  2.01/07 28/07/2020  10.27.15  by  Michael Scheer
*CMZ :  2.01/02 02/05/2018  14.22.15  by  Michael Scheer
*CMZ :  2.01/01 24/04/2018  17.18.04  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  15.17.18  by  Michael Scheer
*CMZ :  2.00/03 24/04/2018  13.33.50  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.51.26  by  Michael Scheer
*CMZ :  1.25/05 05/04/2018  19.30.01  by  Michael Scheer
*CMZ :  1.25/04 05/04/2018  16.14.01  by  Michael Scheer
*CMZ :  1.25/02 22/03/2018  15.10.45  by  Michael Scheer
*CMZ :  1.25/01 16/03/2018  15.07.26  by  Michael Scheer
*CMZ :  1.24/01 17/10/2017  10.11.38  by  Michael Scheer
*CMZ :  1.24/00 12/10/2017  15.01.01  by  Michael Scheer
*CMZ :  1.23/07 12/10/2017  08.31.17  by  Michael Scheer
*CMZ :  1.23/06 06/10/2017  14.22.02  by  Michael Scheer
*CMZ :  1.23/05 06/10/2017  12.51.05  by  Michael Scheer
*CMZ :  1.23/04 05/10/2017  12.36.30  by  Michael Scheer
*CMZ :  1.23/03 27/09/2017  09.39.17  by  Michael Scheer
*CMZ :  1.23/02 18/09/2017  15.33.46  by  Michael Scheer
*CMZ :  1.23/01 09/08/2017  08.38.14  by  Michael Scheer
*CMZ :  1.23/00 04/08/2017  09.35.04  by  Michael Scheer
*CMZ :  1.22/01 21/07/2017  15.02.00  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  10.36.01  by  Michael Scheer
*CMZ :  1.21/00 29/06/2017  16.12.16  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  16.11.17  by  Michael Scheer
*CMZ :  1.20/02 23/06/2017  14.23.56  by  Michael Scheer
*CMZ :  1.20/01 22/06/2017  14.46.47  by  Michael Scheer
*CMZ :  1.20/00 22/06/2017  11.27.31  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.34.58  by  Michael Scheer
*CMZ :  1.18/03 14/06/2017  11.29.53  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  15.11.00  by  Michael Scheer
*CMZ :  1.17/08 30/05/2017  16.29.12  by  Michael Scheer
*CMZ :  1.17/07 24/05/2017  13.12.04  by  Michael Scheer
*CMZ :  1.17/06 21/05/2017  14.25.54  by  Michael Scheer
*CMZ :  1.17/05 18/05/2017  12.07.07  by  Michael Scheer
*CMZ :  1.17/04 12/05/2017  13.52.43  by  Michael Scheer
*CMZ :  1.17/03 09/05/2017  13.37.52  by  Michael Scheer
*CMZ :  1.17/02 09/05/2017  13.11.36  by  Michael Scheer
*CMZ :  1.17/01 08/05/2017  20.51.09  by  Michael Scheer
*CMZ :  1.17/00 08/05/2017  16.57.03  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  14.11.11  by  Michael Scheer
*CMZ :  1.15/13 05/05/2017  10.21.44  by  Michael Scheer
*CMZ :  1.15/11 03/05/2017  09.26.17  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.48.35  by  Michael Scheer
*CMZ :  1.15/09 07/04/2017  15.00.04  by  Michael Scheer
*CMZ :  1.15/08 06/04/2017  15.01.20  by  Michael Scheer
*CMZ :  1.15/07 05/04/2017  16.02.20  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.33.09  by  Michael Scheer
*CMZ :  1.15/05 04/04/2017  12.48.22  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  13.12.53  by  Michael Scheer
*CMZ :  1.15/03 03/04/2017  11.00.07  by  Michael Scheer
*CMZ :  1.15/02 02/04/2017  09.46.32  by  Michael Scheer
*CMZ :  1.15/01 30/03/2017  11.37.22  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  12.54.38  by  Michael Scheer
*CMZ :  1.13/03 16/03/2017  17.18.19  by  Michael Scheer
*CMZ :  1.13/02 09/03/2017  17.35.51  by  Michael Scheer
*CMZ :  1.13/01 08/03/2017  17.07.42  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  17.04.56  by  Michael Scheer
*CMZ :  1.12/00 27/02/2017  15.49.37  by  Michael Scheer
*CMZ :  1.11/07 23/02/2017  17.25.07  by  Michael Scheer
*CMZ :  1.11/06 23/02/2017  13.48.56  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  16.08.44  by  Michael Scheer
*CMZ :  1.10/01 21/11/2016  13.02.21  by  Michael Scheer
*CMZ :  1.10/00 18/11/2016  09.20.28  by  Michael Scheer
*CMZ :  1.09/01 10/10/2016  10.18.30  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  12.55.22  by  Michael Scheer
*CMZ :  1.08/00 30/09/2016  13.55.02  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  19.17.35  by  Michael Scheer
*CMZ :  1.07/02 25/09/2016  13.41.46  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.51.16  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  15.02.55  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.52.28  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.02.46  by  Michael Scheer
*CMZ :  1.05/00 17/09/2016  10.39.52  by  Michael Scheer
*CMZ :  1.04/03 15/09/2016  17.38.28  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  16.33.46  by  Michael Scheer
*CMZ :  1.04/01 14/09/2016  15.26.25  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  13.37.05  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  14.36.16  by  Michael Scheer
*CMZ :  1.02/03 12/09/2016  11.55.27  by  Michael Scheer
*CMZ :  1.02/01 11/09/2016  12.34.04  by  Michael Scheer
*CMZ :  1.02/00 30/08/2016  13.27.12  by  Michael Scheer
*CMZ :  1.01/00 21/08/2016  12.52.29  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  18.47.41  by  Michael Scheer
*CMZ :  0.00/14 19/08/2016  14.37.09  by  Michael Scheer
*CMZ :  0.00/13 19/08/2016  14.12.39  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  09.27.38  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  16.30.10  by  Michael Scheer
*CMZ :  0.00/10 14/07/2016  14.01.01  by  Michael Scheer
*CMZ :  0.00/09 06/07/2016  08.51.18  by  Michael Scheer
*CMZ :  0.00/08 23/06/2016  15.45.45  by  Michael Scheer
*CMZ :  0.00/07 23/06/2016  15.45.22  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  14.00.43  by  Michael Scheer
*CMZ :  0.00/05 14/06/2016  13.56.01  by  Michael Scheer
*CMZ :  0.00/04 13/05/2016  14.51.39  by  Michael Scheer
*CMZ :  0.00/03 04/05/2016  11.43.21  by  Michael Scheer
*CMZ :  0.00/02 02/05/2016  10.24.12  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  16.04.05  by  Michael Scheer
*-- Author :    Michael Scheer   27/02/2004
* Version 2.04/11
+PATCH,$VERSION.
*CMZ :  0.00/00 20/04/2016  13.04.28  by  Michael Scheer
+DECK,V2_04.
*CMZ :  2.04/11 29/08/2023  15.03.24  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.14.31  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.16.48  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.57.08  by  Michael Scheer
*CMZ :  2.04/07 10/08/2023  09.14.03  by  Michael Scheer
*CMZ :  2.04/06 07/08/2023  10.05.29  by  Michael Scheer
*CMZ :  2.04/05 15/03/2023  13.22.48  by  Michael Scheer
*CMZ :  2.04/04 14/03/2023  11.22.26  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.38.01  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.57.20  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  14.22.34  by  Michael Scheer
*CMZ :  2.04/00 17/01/2023  13.14.13  by  Michael Scheer
*-- Author :    Michael Scheer   17/01/2023
*________________________________________________________________________
*
*::>          VERSION  2.04/11   29/08/2023 15.03.24
*
* Bug from undumag_read_clc for cylinders removed
* Graphics in undugui improved, bugs removed
*________________________________________________________________________
*
*::>          VERSION  2.04/10   23/08/2023 16.14.31
*
* Postscript 3d graphic improved, bug in undumag_drop_zero_magnets removed
*________________________________________________________________________
*
*::>          VERSION  2.04/09   18/08/2023 19.16.48
*
* Bugs in undugui.py
*________________________________________________________________________
*
*::>          VERSION  2.04/08   11/08/2023 14.57.08
*
* Treatment of cylinders implemented for new syntax
*
*________________________________________________________________________
*
*::>          VERSION  2.04/07   10/08/2023 09.14.03
*
* Bug in CLCTRANSROTCOP removed. Check for rectangular block improved.
* Check for size of interaction matrix implemented
*________________________________________________________________________
*
*::>          VERSION  2.04/06   07/08/2023 10.05.29
*
* Bugs... Variables for translations etc., translations etc. in GUI
*
*________________________________________________________________________
*
*::>          VERSION  2.04/05   15/03/2023 13.22.48
*
* First GITLAB-Version
*________________________________________________________________________
*
*::>          VERSION  2.04/04   14/03/2023 11.22.26
*
* Before GITLAB-Version
*________________________________________________________________________
*
*::>          VERSION  2.04/03   05/03/2023 16.38.01
*
* Bugs of segmentation removed
*________________________________________________________________________
*
*::>          VERSION  2.04/02   27/02/2023 20.57.20
*
* Bugs of segmentation removed
*________________________________________________________________________
*
*::>          VERSION  2.04/01   13/02/2023 14.22.34
*
* Bugs of segmentation removed
*________________________________________________________________________
*
*::>          VERSION  2.04/00   17/01/2023 13.14.13
*
* Inhomogenities, bugs removed
*
+PATCH,TEX,T=LATEX.
*CMZ :  1.02/01 05/09/2016  08.18.58  by  Michael Scheer
+KEEP,udocvers,T=LATEX.
*CMZ :  2.04/11 29/08/2023  15.03.24  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.14.31  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.16.48  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.57.08  by  Michael Scheer
*CMZ :  2.04/07 10/08/2023  09.14.02  by  Michael Scheer
*CMZ :  2.04/06 07/08/2023  10.05.29  by  Michael Scheer
*CMZ :  2.04/04 14/03/2023  11.22.26  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.38.01  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.57.20  by  Michael Scheer
*CMZ :  2.04/00 17/01/2023  13.14.13  by  Michael Scheer
*CMZ :  2.03/00 02/09/2022  07.21.32  by  Michael Scheer
*CMZ :  2.02/02 07/07/2022  18.13.06  by  Michael Scheer
*CMZ :  2.01/08 15/08/2020  08.40.43  by  Michael Scheer
*CMZ :  2.01/07 28/07/2020  10.27.15  by  Michael Scheer
*CMZ :  2.01/06 27/07/2020  12.07.59  by  Michael Scheer
*CMZ :  2.01/05 27/07/2020  10.28.00  by  Michael Scheer
*CMZ :  2.01/04 29/07/2019  12.06.40  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  15.17.18  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.51.26  by  Michael Scheer
*CMZ :  1.25/00 16/03/2018  15.06.30  by  Michael Scheer
*CMZ :  1.24/00 12/10/2017  15.01.01  by  Michael Scheer
*CMZ :  1.23/00 04/08/2017  09.35.04  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  10.36.01  by  Michael Scheer
*CMZ :  1.21/00 29/06/2017  16.12.16  by  Michael Scheer
*CMZ :  1.20/00 22/06/2017  11.27.31  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.34.58  by  Michael Scheer
*CMZ :  1.18/00 06/06/2017  14.48.14  by  Michael Scheer
*CMZ :  1.17/00 08/05/2017  16.57.03  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  14.11.11  by  Michael Scheer
*CMZ :  1.15/00 28/03/2017  12.03.00  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  12.54.38  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  17.04.56  by  Michael Scheer
*CMZ :  1.12/00 27/02/2017  15.49.37  by  Michael Scheer
*CMZ :  1.11/00 05/01/2017  09.37.44  by  Michael Scheer
*CMZ :  1.10/00 18/11/2016  09.20.28  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  12.55.22  by  Michael Scheer
*CMZ :  1.08/00 30/09/2016  13.55.02  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  15.02.55  by  Michael Scheer
*CMZ :  1.06/00 20/09/2016  18.55.37  by  Michael Scheer
*CMZ :  1.02/01 05/09/2016  08.41.09  by  Michael Scheer
*-- Author :    Michael Scheer   05/09/2016
Version 2.04/11
+PATCH,PYTHON,T=PYTHON.
*CMZ :  2.01/05 26/02/2020  09.19.37  by  Michael Scheer
+KEEP,undumagseq,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  08.21.45  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  16.32.24  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  11.27.45  by  Michael Scheer
*-- Author :    Michael Scheer   22/08/2022
def _undumag(callkey=''):

+seq,uguiglobind.

  print("_undumag:Rmodus",Rmodus)
+self,if=trace.
  debug(NL,"trace::_undumag:",callkey,Rmodus)
+self.

  if IUNDUMAGisRunning:
    wError("UNDUNMAG IS RUNNING!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
    return
  #endif IUNDUMAGisRunning

  if NMagPolTot <= 0 and NCoil <= 0:
    wError("No magnetic items set-up so far...!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
  #endif IUNDUMAGisRunning

  if type(Rmodus) == str and len(Rmodus) and NCoil > 0:
    ureadfil("_undumag")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag after call to ureadfil")
+self.
    return
    #Quit("Ende in _undumag")

  Fnam = 'undumag.nam'
  Fclc = 'undumag.clc'

  #if MustWriteCLC:

  uwriteclc('UNDUMAG')
  uwritenam('UNDUMAG')

  uwait = Toplevel()
  uwait.title('Waiting for UNDUMAG to finish')

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)

  uwait.geometry(sgeo)
  uwait.attributes('-topmost', 1)

  lwarn = Label(uwait,text="   Be patient and check terminal...\n Plotting may also take some time ...  ",font=MyFont)
  lwarn.pack(fill=X)
  uwait.update()

  if len(Rmodus) == 0:

    IUNDUMAGisRunning = 1
    ifail = os.system(RunUndu)
    uwait.destroy()

    if ifail:
      IUNDUMAGisRunning = 0
      wError("\n*** UNDUMAG run failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
+self.
      return
    #endif

    undu_get_runnumber()
    nreloadupl()
    undu_overview()

    IUNDUMAGisRunning = 0

    ifail = 1
    itry = 0
    cline = '1'
    while itry < 10:
      try:
        Fsta = open("undumag.stat","r")
        cline = Fsta.readline().strip()
        break
      except:
        itry += 1
        sleep(3)
      #endtry
    #endwhile

    if cline == '0': ifail = 0
    if ifail: wError("\n*** UNDUMAG run failed ***")

  elif Rmodus.split()[0] == 'SEGMENTATION':

    IUNDUMAGisRunning = 1
    os.system(RunUndu + " " + Rmodus)
    uwait.destroy()
    IUNDUMAGisRunning = 0

    undu_get_runnumber()
    nreloadupl()

    try:
      Fsta = open("undumag.sta","r")
      cline = Fsta.readline().strip()
      cline = Fsta.readline().strip()
      if cline != 'Segmentation finished':
        wError("\n*** UNDUMAG run for segmentation failed ***")
      #endif trim(cline) != ' Segmentation finished'
    except:
      wError("\n*** UNDUMAG run for segmentation failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
      return
+self.
    #endtry

  #endif len(Rmodus) == 0
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag")
+self.

#enddef _undumag()

def _runundumag(callkey='',mode=''):

+seq,uguiglobind.

+self,if=trace.
  debug(NL,"trace::_runundumag:",callkey,mode)
+self.

  Rmodus = mode
  _undumag('_rundunmag')

#enddef
+KEEP,chtransrotcop,T=PYTHON.
*CMZ :  2.04/11 26/08/2023  09.00.15  by  Michael Scheer
*CMZ :  2.04/06 09/07/2023  11.43.51  by  Michael Scheer
*CMZ :  2.03/00 13/08/2022  20.38.26  by  Michael Scheer
*CMZ :  2.02/02 01/03/2022  12.28.33  by  Michael Scheer
*CMZ :  2.02/01 26/01/2022  11.22.41  by  Michael Scheer
*-- Author :    Michael Scheer   29/12/2021

def TransRot(cmag,cmoth,x,y,z):

  global TransRotCop,DictTransRotCop

  if not (cmag in DictTransRotCop or cmoth in DictTransRotCop) : return [x,y,z]

  if not cmag in DictTransRotCop: cmm = cmoth
  else: cmm = cmag

  xt = x
  yt = y
  zt = z

  for itrc in DictTransRotCop[cmm]:

    trc = TransRotCop[itrc]

    if trc[0] == 'Translate':

      xyz = trc[2].split()

      xt = xt  + calc_var(xyz[0])
      yt = yt  + calc_var(xyz[1])
      zt = zt  + calc_var(xyz[2])

    elif trc[0] == 'Rotate' or trc[0] == 'Rotate_Shape':

      tr = trc[2].split()
      rot = trc[3].split()

      xr = calc_var(tr[0])
      yr = calc_var(tr[1])
      zr = calc_var(tr[2])

      vrx = calc_var(rot[0])
      vry = calc_var(rot[1])
      vrz = calc_var(rot[2])

      phi = calc_var(rot[3]) * np.pi/180.

      istat, crot, rm = util_rotate([xr,yr,zr],[vrx,vry,vrz],phi,[xt,yt,zt])

      xt = crot[0]
      yt = crot[1]
      zt = crot[2]

  #endfor

  return [xt,yt,zt]
#enddef TransRot

def checktransrotcop():

+seq,uguiglobind.

  for trc in TransRotCop:

    key = trc[0]

    if key == 'Copy':

      w = trc[1].split()
      source = w[0]
      tarmag = w[1]
      tarmoth = w[2]

      try:
        kmoth = DictMoths[source]
      except:
        try:
          kmag = DictMagPolsTot[source]
        except:
          print(NL,"*** Error for key Copy: Magnet or mother not found for:")
          print("Copy", source, tarmag, tarmoth,NL)
        #endtry
      #endtry

      try:
        kmoth = DictMoths[tarmoth]
        print(NL,"*** Error for key Copy: Target mother exists already ***")
        print("Copy", source, tarmag, tarmoth,NL)
      except:
        try:
          kmag = DictMagPolsTot[tarmag]
          print(NL,"*** Error for key Copy: Target magnet exists already ***")
          print("Copy", source, tarmag,NL)
        except:
          pass
        #endtry
      #endtry

    elif key == 'Translate' or key == 'Rotate' or \
    key == 'Rotate_Shape' or key == 'Remanence':

      mp = trc[1]
      tr = trc[2].split()

      try:

        kmoth = DictMoths[mp]

        for mag in Moths[kmoth]:
          kmag = DictMagPolsTot[mag]
          mt = MagPolsTot[kmag]
          ckey = mt[3]
#          if key != 'Translate' and ckey != 'File' and ckey != 'Corners':
#            print("\n*** Error in checktransrotcop: Rotation only allowed for magnets of type Corners or file ***")
#            print("\n*** Check",mag," ***")
#            continue
#          #endif
        #endfor

      except:

        try:
          kmag = DictMagPolsTot[mp]
          mag = MagPolsTot[kmag]
          ckey = mag[3]
#          if key != 'Translate' and ckey != 'File' and ckey != 'Corners':
#            print("\n*** Error in checktransrotcop: Rotation only allowed for magnets of type Corners or file***")
#            print("\n*** Check",mag," ***")
#            continue
#          #endif
        except:
          print(NL,"*** Error for key",key,": Magnet or mother not found for:")
          print(key,mp,NL)
        #endtry
      #endtry

    #endif key

  #endfor trc

  TRCtoDTRC()

#enddef checktransrotcop()
+KEEP,listtrc,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  14.14.07  by  Michael Scheer
*CMZ :  2.04/06 11/07/2023  16.04.39  by  Michael Scheer
*CMZ :  2.02/02 27/02/2022  12.36.38  by  Michael Scheer
*CMZ :  2.02/00 29/12/2020  16.31.13  by  Michael Scheer
*-- Author :    Michael Scheer   19/12/2020

# +KEEP,listtrc,T=PYTHON{

S_Remanence = StringVar()
S_BrX = StringVar()
S_BrY = StringVar()
S_BrZ = StringVar()
S_BrM = StringVar()
S_BrC = StringVar()

S_CS = StringVar()
S_CT = StringVar()

S_Tx = StringVar()
S_Ty = StringVar()
S_Tz = StringVar()

S_Rx = StringVar()
S_Ry = StringVar()
S_Rz = StringVar()
S_Romx = StringVar()
S_Romy = StringVar()
S_Romz = StringVar()
S_Rang = StringVar()

S_RSx = StringVar()
S_RSy = StringVar()
S_RSz = StringVar()
S_RSomx = StringVar()
S_RSomy = StringVar()
S_RSomz = StringVar()
S_RSang = StringVar()

S_AddTRCmag = StringVar()
S_AddTx = StringVar()
S_AddTy = StringVar()
S_AddTz = StringVar()

S_AddCTmag = StringVar()
S_AddCTmoth = StringVar()

S_AddRTx = StringVar()
S_AddRTy = StringVar()
S_AddRTz = StringVar()
S_AddRomx = StringVar()
S_AddRomy = StringVar()
S_AddRomz = StringVar()
S_AddRang = StringVar()

S_AddRSTx = StringVar()
S_AddRSTy = StringVar()
S_AddRSTz = StringVar()
S_AddRSomx = StringVar()
S_AddRSomy = StringVar()
S_AddRSomz = StringVar()
S_AddRSang = StringVar()

def _clWlistTRC():
  global Umaster, WlistTRC,WediTRC,WaddTRC

  try:
    WediTRC.destroy()
  except:
    pass
  #endtry

  try:
    WaddTRC.destroy()
  except:
    pass
  #endtry

  WlistTRC.destroy()
#enddef _clWediTRC()

def _listTRC(key='list'):

+self,if=trace.
  print('\nEntered _listTRC::'+key)
+self.
  global TransRotCop
  global Umaster,WlistTRC, WediTRC

  if len(TransRotCop) <= 0:
    wError("No Operations defined")
    return
  #endif Nmodul < 0

  try:
    sgeo = WlistTRC.geometry()
  except:
    WlistTRC = Toplevel()
    WlistTRC.title("List of Operations")
    WlistTRC.attributes('-topmost', 1)
    x,y = Umaster.winfo_pointerxy()
    sgeo = ""
  #endtry

  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)

  if key == 'refresh':
    TRCtoDTRC()
    WlistTRC.destroy()
    WlistTRC = Toplevel()
    WlistTRC.title("List of Operations")
    WlistTRC.attributes('-topmost', 1)
  #endif

  WlistTRC.geometry(sgeo)

  ltrc = 0
  for it in range(len(TransRotCop)):
    trc = TransRotCop[it]
    ttrc = ''
    for tt in trc:
      ttrc = ttrc + tt + ' | '
    #endfor
    if len(ttrc) > ltrc: ltrc = len(ttrc)
  #endfor

  widlab = ltrc

  for it in range(len(TransRotCop)):

    trc = TransRotCop[it]
    print(trc)

    ttrc = ''
    for tt in trc:
      ttrc = ttrc + tt + ' | '
    #endfor

    ftrc = Frame(WlistTRC)

    lnum = Label(ftrc,text=ttrc,width=widlab,justify=LEFT,font=MyFont,anchor='w',bg='white',fg='black')
    lnum.pack(side=LEFT)

    bdel = Button(ftrc,text='delete',command= lambda ied=-it-1: _EdiTRC(ied))
    bedi = Button(ftrc,text='edit',command= lambda ied=it: _EdiTRC(ied))

    bdel.pack(fill=X,side=RIGHT)
    bedi.pack(fill=X,side=RIGHT)

    ftrc.pack()

  #endfor im in range(TransRotCop)

  bClose = Button(WlistTRC,text='Ok',command=_clWlistTRC)
  bClose.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _listTRC')
+self.
#enddef _listTRC(key='list')

MenuTRC.add_command(label='Add Copy', command= lambda key='copy': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='Add Translation', command= lambda key='trans': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='Add Rotation', command= lambda key='rotate': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='Add Shape Roation', command= lambda key='rotate_shape': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='List', command= lambda key='list': _listTRC(key),font=MyFont)

# }+KEEP,listtrc,T=PYTHON

def TRCtoDTRC():
  global TransRotCop,DictTransRotCop
  DictTransRotCop = {}
  for it in range(len(TransRotCop)):
    cmm = TransRotCop[it][1]
    if cmm in DictTransRotCop:
      DictTransRotCop[cmm].append(it)
    else:
      DictTransRotCop[cmm] = [it]
    #endif
  #endfor
#enddef TRCtoDTRC

def _EdiTRC(ied):

+self,if=trace.
  print('\nEntered _EdiTRC',ied)
+self.
  global TransRotCop
  global Umaster,WlistTRC, WediTRC

  global S_Remanence,S_BrX,S_BrY,S_BrZ,S_BrC,S_BrM
  global S_CS,S_CT
  global S_Tx,S_Ty,S_Tz
  global S_Rx,S_Ry,S_Rz,S_Romx,S_Romy,S_Romz,S_Rang
  global S_RSx,S_RSy,S_RSz,S_RSomx,S_RSomy,S_RSomz,S_RSang

  if ied < 0:
    trc = deepcopy(TransRotCop)
    TransRotCop = []
    ied = - (ied+1)
    for it in range(len(trc)):
      if it != ied: TransRotCop.append(trc[it])
    #endfor
    TRCtoDTRC()
    _listTRC('refresh')
    return
  #endif

  trc = TransRotCop[ied]
  key = trc[0]

  WediTRC = Toplevel()
  WediTRC.title("Edit Operation on " + trc[1])
  WediTRC.attributes('-topmost', 1)

  x,y = Umaster.winfo_pointerxy()
  sgeo = ""

  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)
  WediTRC.geometry(sgeo)

  ftrc = Frame(WediTRC)

  widlab = 20

  if key == 'Remanence':

    strc2 = str(trc[2]).split()

    S_Remanence.set(strc2[0])
    S_BrX.set(strc2[1])
    S_BrY.set(strc2[2])
    S_BrZ.set(strc2[3])
    S_BrM.set(strc2[4])
    S_BrC.set(strc2[5])

    frem = Frame(ftrc)
    lrem = Label(frem,width=widlab,text='Remanence [T]',justify=LEFT,font=MyFont)
    lrem.pack(side=LEFT)
    erem = Entry(frem,text=S_Remanence,justify=CENTER,font=MyFont)
    erem.pack(side=RIGHT)
    frem.pack()

    fbrx = Frame(ftrc)
    lbrx = Label(fbrx,width=widlab,text='Mx',justify=LEFT,font=MyFont)
    lbrx.pack(side=LEFT)
    ebrx = Entry(fbrx,text=S_BrX,justify=CENTER,font=MyFont)
    ebrx.pack(side=RIGHT)
    fbrx.pack()

    fbry = Frame(ftrc)
    lbry = Label(fbry,width=widlab,text='My',justify=LEFT,font=MyFont)
    lbry.pack(side=LEFT)
    ebry = Entry(fbry,text=S_BrY,justify=CENTER,font=MyFont)
    ebry.pack(side=RIGHT)
    fbry.pack()

    fbrz = Frame(ftrc)
    lbrz = Label(fbrz,width=widlab,text='Mz',justify=LEFT,font=MyFont)
    lbrz.pack(side=LEFT)
    ebrz = Entry(fbrz,text=S_BrZ,justify=CENTER,font=MyFont)
    ebrz.pack(side=RIGHT)
    fbrz.pack()

    fbrm = Frame(ftrc)
    lbrm = Label(fbrm,width=widlab,text='Material index',justify=LEFT,font=MyFont)
    lbrm.pack(side=LEFT)
    ebrm = Entry(fbrm,text=S_BrM,justify=CENTER,font=MyFont)
    ebrm.pack(side=RIGHT)
    fbrm.pack()

    fbrc = Frame(ftrc)
    lbrc = Label(fbrc,width=widlab,text='Color index',justify=LEFT,font=MyFont)
    lbrc.pack(side=LEFT)
    ebrc = Entry(fbrc,text=S_BrC,justify=CENTER,font=MyFont)
    ebrc.pack(side=RIGHT)
    fbrc.pack()

  elif key == 'Copy':

    strc = str(trc[1]).split()

    S_CS.set(strc[1])
    S_CT.set(strc[2])

    fcp = Frame(ftrc)
    lcp = Label(fcp,width=widlab,text='Source',justify=LEFT,font=MyFont)
    lcp.pack(side=LEFT)
    ecp = Entry(fcp,text=S_CS,justify=CENTER,font=MyFont)
    ecp.pack(side=RIGHT)
    fcp.pack()

    fta = Frame(ftrc)
    lta = Label(fta,width=widlab,text='Target',justify=LEFT,font=MyFont)
    lta.pack(side=LEFT)
    eta = Entry(fta,text=S_CT,justify=CENTER,font=MyFont)
    eta.pack(side=RIGHT)
    fta.pack()

  elif key == 'Translate':

    strc2 = str(trc[2]).split()

    S_Tx.set(strc2[0])
    S_Ty.set(strc2[1])
    S_Tz.set(strc2[2])

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_Tx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_Ty,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_Tz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

  elif key == 'Rotate_Shape':

    strc2 = str(trc[2]).split()

    S_RSx.set(strc2[0])
    S_RSy.set(strc2[1])
    S_RSz.set(strc2[2])

    strc3 = str(trc[3]).split()
    S_RSomx.set(strc3[0])
    S_RSomy.set(strc3[1])
    S_RSomz.set(strc3[2])
    S_RSang.set(strc3[3])

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='RotCenX [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_RSx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='RotCenY [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_RSy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='RotCenZ [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_RSz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_RSomx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_RSomy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_RSomz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fang = Frame(ftrc)
    lang = Label(fang,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lang.pack(side=LEFT)
    eang = Entry(fang,text=S_RSang,justify=CENTER,font=MyFont)
    eang.pack(side=RIGHT)
    fang.pack()

  elif key == 'Rotate':

    strc2 = str(trc[2]).split()

    S_Rx.set(strc2[0])
    S_Ry.set(strc2[1])
    S_Rz.set(strc2[2])

    strc3 = str(trc[3]).split()
    S_Romx.set(strc3[0])
    S_Romy.set(strc3[1])
    S_Romz.set(strc3[2])
    S_Rang.set(strc3[3])

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='RotCenX [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_Rx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='RotCenY [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_Ry,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='RotCenZ [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_Rz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_Romx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_Romy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_Romz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fang = Frame(ftrc)
    lang = Label(fang,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lang.pack(side=LEFT)
    eang = Entry(fang,text=S_Rang,justify=CENTER,font=MyFont)
    eang.pack(side=RIGHT)
    fang.pack()

  #endif key

  ftrc.pack()

  bClose = Button(WediTRC,text='Ok',command= lambda it = ied: _clWediTRC(it))
  bClose.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _EdiTRC')
+self.
#enddef _EdiTRC(ied)

def _clWediTRC(itrc):

+self,if=trace.
  print('\n_clWediTRC entered')
+self.
  global Umaster, WediTRC
  global TransRotCop
  global S_Remanence,S_BrX,S_BrY,S_BrZ,S_BrC,S_BrM
  global S_CS,S_CT
  global S_Tx,S_Ty,S_Tz
  global S_RSx,S_RSy,S_RSz,S_RSomx,S_RSomy,S_RSomz,S_RSang
  global S_Rx,S_Ry,S_Rz,S_Romx,S_Romy,S_Romz,S_Rang

  trc = TransRotCop[itrc]

  if TransRotCop[itrc][0] == 'Remanence':
    TransRotCop[itrc][2] = S_Remanence.get() + " " \
    + S_BrX.get() + " " + S_BrY.get() + " " + S_BrZ.get() + " " \
    + S_BrM.get() + " " + S_BrC.get()
  elif TransRotCop[itrc][0] == 'Copy':
    TransRotCop[itrc][1] = S_CS.get() + " " + S_CT.get()
  elif TransRotCop[itrc][0] == 'Translate':
    TransRotCop[itrc][2] = S_Tx.get() + " " + S_Ty.get() + " " + S_Tz.get()
  elif TransRotCop[itrc][0] == 'Rotate_Shape':
    TransRotCop[itrc][2] = S_RSx.get() + " " + S_RSy.get() + " " + S_RSz.get() \
    + " " + S_RSomx.get() + " " + S_RSomy.get() + " " + S_RSomz.get() \
    + " " + S_RSang.get()
  elif TransRotCop[itrc][0] == 'Rotate':
    TransRotCop[itrc][2] = S_Rx.get() + " " + S_Ry.get() + " " + S_Rz.get() \
    + " " + S_Romx.get() + " " + S_Romy.get() + " " + S_Romz.get() \
    + " " + S_Rang.get()
  #endif

  WediTRC.destroy()
  _listTRC('refresh')

+self,if=trace.
  print('\nLeaving _clWediTRC')
+self.
#enddef _clWediTRC()

def _AddTransRotCop(key=''):

+self,if=trace.
  print('\n_AddTransRotCop entered')
+self.

  global TransRotCop
  global Umaster,WaddTRC

  global S_AddRemanence,S_AddBrX,S_AddBrY,S_AddBrZ,S_AddBrC,S_AddBrM
  global S_AddCS,S_AddCT
  global S_AddTx,S_AddTy,S_AddTz
  global S_AddTRCmag, S_AddTx,S_AddTy,S_AddTz
  global S_AddCTmag, S_AddCTmoth
  global S_AddRTx,S_AddRTy,S_AddRTz,S_AddRomx,S_AddRomy,S_AddRomz,S_AddRang
  global S_AddRSTx,S_AddRSTy,S_AddRSTz,S_AddRSomx,S_AddRSomy,S_AddRSomz,S_AddRSang

  S_AddTRCmag.set('MagMoth')

  WaddTRC = Toplevel()
  WaddTRC.title("Add Translation")
  WaddTRC.attributes('-topmost', 1)

  x,y = Umaster.winfo_pointerxy()
  sgeo = ""

  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)
  WaddTRC.geometry(sgeo)

  ftrc = Frame(WaddTRC)

  widlab = 20

  if key == 'trans':

    S_AddTx.set('0.0')
    S_AddTy.set('0.0')
    S_AddTz.set('0.0')
    trc = ['Translate',S_AddTRCmag.get(),
           S_AddTx.get() + " " + S_AddTy.get() + " " + S_AddTz.get()]
    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_AddTx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_AddTy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_AddTz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

  elif key == 'rotate_shape':

    S_AddRSTx.set('0.0')
    S_AddRSTy.set('0.0')
    S_AddRSTz.set('0.0')

    S_AddRSomx.set('0.0')
    S_AddRSomy.set('0.0')
    S_AddRSomz.set('0.0')

    S_AddRSang.set('0.0')

    trc = ['Rotate',S_AddTRCmag.get(), \
    S_AddRSTx.get() + " " + S_AddRSTy.get() + " " + S_AddRSTz.get(), \
    + " " + S_AddRSomx.get() + " " + S_AddRSomy.get() + " " + S_AddRSomz.get() \
    + " " + S_AddRSang.get()]

    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_AddRSTx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_AddRSTy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_AddRSTz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_AddRSTx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_AddRSTy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRSTz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRSang,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

  elif key == 'rotate':

    S_AddRTx.set('0.0')
    S_AddRTy.set('0.0')
    S_AddRTz.set('0.0')

    S_AddRomx.set('0.0')
    S_AddRomy.set('0.0')
    S_AddRomz.set('0.0')

    S_AddRang.set('0.0')

    trc = ['Rotate',S_AddTRCmag.get(), \
    S_AddRTx.get() + " " + S_AddRTy.get() + " " + S_AddRTz.get(), \
    S_AddRomx.get() + " " + S_AddRomy.get() + " " + S_AddRomz.get() \
    + " " + S_AddRang.get()]

    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_AddRTx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_AddRTy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_AddRTz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_AddRTx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_AddRTy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRTz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRang,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

  elif key == 'copy':

    S_AddCTmag.set('Magnet')
    S_AddCTmoth.set('Mother')

    trc = ['Copy',S_AddTRCmag.get() + " " + S_AddCTmag.get() + " " + S_AddCTmoth.get()]
    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet to copy',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftmag = Frame(ftrc)
    lmag = Label(ftmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(ftmag,text=S_AddCTmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    ftmag.pack()

    ftmoth = Frame(ftrc)
    lmag = Label(ftmoth,width=widlab,text='Mother',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(ftmoth,text=S_AddCTmoth,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    ftmoth.pack()

  #endif key

  ftrc.pack()

  bClose = Button(WaddTRC,text='Ok',command=_clWaddTRC)
  bClose.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _AddTransRotCop')
+self.
#enddef _AddTransRotCop(key='')

def _clWaddTRC():
  global WaddTRC, TransRotCop

+self,if=trace.
  print('\n_clWaddTRC entered')
+self.

  WaddTRC.destroy()
  _listTRC('refresh')

+self,if=trace.
  print('\nLeaving _clWaddTRC')
+self.

#enddef _clWaddTRC()
+KEEP,undumag,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  08.17.19  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  16.32.24  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  11.27.45  by  Michael Scheer
*-- Author :    Michael Scheer   22/08/2022
def _undumag(callkey=''):

+seq,uguiglobind.

  print("_undumag:Rmodus",Rmodus)
+self,if=trace.
  debug(NL,"trace::_undumag:",callkey,Rmodus)
+self.

  if IUNDUMAGisRunning:
    wError("UNDUNMAG IS RUNNING!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
    return
  #endif IUNDUMAGisRunning

  if NMagPolTot <= 0 and NCoil <= 0:
    wError("No magnetic items set-up so far...!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
  #endif IUNDUMAGisRunning

  if type(Rmodus) == str and len(Rmodus) and NCoil > 0:
    ureadfil("_undumag")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag after call to ureadfil")
+self.
    return
    #Quit("Ende in _undumag")

  Fnam = 'undumag.nam'
  Fclc = 'undumag.clc'

  #if MustWriteCLC:

  uwriteclc('UNDUMAG')
  uwritenam('UNDUMAG')

  uwait = Toplevel()
  uwait.title('Waiting for UNDUMAG to finish')

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)

  uwait.geometry(sgeo)
  uwait.attributes('-topmost', 1)

  lwarn = Label(uwait,text="   Be patient and check terminal...\n Plotting may also take some time ...  ",font=MyFont)
  lwarn.pack(fill=X)
  uwait.update()

  Quit("Rmodus:",Rmodus)

  if len(Rmodus) == 0:

    IUNDUMAGisRunning = 1
    ifail = os.system(RunUndu)
    uwait.destroy()

    if ifail:
      IUNDUMAGisRunning = 0
      wError("\n*** UNDUMAG run failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
+self.
      return
    #endif

    undu_get_runnumber()
    nreloadupl()
    undu_overview()

    IUNDUMAGisRunning = 0

    ifail = 1
    itry = 0
    cline = '1'
    while itry < 10:
      try:
        Fsta = open("undumag.stat","r")
        cline = Fsta.readline().strip()
        break
      except:
        itry += 1
        sleep(3)
      #endtry
    #endwhile

    if cline == '0': ifail = 0
    if ifail: wError("\n*** UNDUMAG run failed ***")

  elif Rmodus.split()[0] == 'SEGMENTATION':

    IUNDUMAGisRunning = 1
    os.system(RunUndu + " " + Rmodus)
    uwait.destroy()
    IUNDUMAGisRunning = 0

    undu_get_runnumber()
    nreloadupl()

    try:
      Fsta = open("undumag.sta","r")
      cline = Fsta.readline().strip()
      cline = Fsta.readline().strip()
      if cline != 'Segmentation finished':
        wError("\n*** UNDUMAG run for segmentation failed ***")
      #endif trim(cline) != ' Segmentation finished'
    except:
      wError("\n*** UNDUMAG run for segmentation failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
      return
+self.
    #endtry

  #endif len(Rmodus) == 0
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag")
+self.

#enddef _undumag()

def _runundumag(callkey='',mode=''):

+seq,uguiglobind.

+self,if=trace.
  debug(NL,"trace::_runundumag:",callkey,mode)
+self.

  Rmodus = mode
  _undumag('_rundunmag')

#enddef
+KEEP,listmags,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  20.25.26  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  12.38.26  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.15.12  by  Michael Scheer
*CMZ :  2.04/06 07/07/2023  16.37.01  by  Michael Scheer
*CMZ :  2.02/02 05/03/2022  07.51.22  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  10.36.21  by  Michael Scheer
*-- Author :    Michael Scheer   07/12/2020

# +KEEP,listmags,T=PYTHON.{

S_Iron_Cmag = StringVar()
S_Iron_Cmoth = StringVar()

S_Iron_Ispec = StringVar()

S_Iron_Xcen = StringVar()
S_Iron_Ycen = StringVar()
S_Iron_Zcen = StringVar()

S_Iron_Xlen = StringVar()
S_Iron_Ylen = StringVar()
S_Iron_Zlen = StringVar()

S_Iron_ChamfUs = StringVar()
S_Iron_ChamfDs = StringVar()
S_Iron_Coating = StringVar()

S_Iron_corns = StringVar()
S_Iron_Ncorn = StringVar()
S_Iron_CornFile = StringVar()

S_Iron_nXdiv = StringVar()
S_Iron_nYdiv = StringVar()
S_Iron_nZdiv = StringVar()
S_Iron_FracDivY = StringVar()
S_Iron_FracDivZ = StringVar()

S_Iron_Key = StringVar()
S_Iron_Mat = StringVar()

S_Iron_Bc = StringVar()
S_Iron_Bxn = StringVar()
S_Iron_Byn = StringVar()
S_Iron_Bzn = StringVar()

S_Iron_Color = StringVar()

S_Cmag = StringVar()
S_Cmoth = StringVar()

S_Ispec = StringVar()

S_Xcen = StringVar()
S_Ycen = StringVar()
S_Zcen = StringVar()

S_Xlen = StringVar()
S_Ylen = StringVar()
S_Zlen = StringVar()

S_ChamfUs = StringVar()
S_ChamfDs = StringVar()
S_Coating = StringVar()

S_corns = StringVar()
S_Ncorn = StringVar()
S_CornFile = StringVar()

S_nXdiv = StringVar()
S_nYdiv = StringVar()
S_nZdiv = StringVar()
S_FracDivY = StringVar()
S_FracDivZ = StringVar()

S_Key = StringVar()
S_Mat = StringVar()

S_Bc = StringVar()
S_Bxn = StringVar()
S_Byn = StringVar()
S_Bzn = StringVar()

S_Color = StringVar()

MaddMag.add_command(label='REC block', command= lambda key='Block': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='REC polyhedron', command= lambda key='File': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='REC cylinder', command= lambda key='Cylinder': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='Iron block', command= lambda key='Block': _WaddPol(key), font=MyFont)
MaddMag.add_command(label='Iron polyhedron', command= lambda key='File': _WaddPol(key), font=MyFont)
MaddMag.add_command(label='Iron cylinder', command= lambda key='Cylinder': _WaddPol(key), font=MyFont)

def varlis_to_num(varlis):
  vnum = []

  for v in varlis:
    try:
      val = calc_var(v)
      vnum.append(val)
    except:
      vnum = []
      break
  #endfor v in varlis

  return vnum
#enddef varlis_to_num(varlis)

def read_cornfile(cornfile):

  corns = []

  if not os.path.exists(cornfile):
    wError("File " + cornfile + " not found!")
    return corns
  #endif not os.path.exists(cornfile)

  try:
    Fcorn = open(cornfile,'r')
    lines = Fcorn.readlines()
    Fcorn.close()
  except:  pass
  #endtry

  for line in lines:
    varis = line.strip().split()
    for var in varis:
      try:
        val = calc_var(var)
      except:
        corns = []
        wError("Could not resolve: " + var)
        return ifail, corns
      #endtry
      corns.append(varis)
  #endfor line in lines

  try:
    cornsnum = []
    for c in corns:
      c1 = calc_var(c[0])
      c2 = calc_var(c[1])
      c3 = calc_var(c[2])
      cornsnum.append([c1,c2,c3])
    #endfor
    verts,ifaces,faces,bounds = hull3d(cornsnum)
    if type(verts) != Tdf:
      hull = pd.DataFrame(verts)
    else:
      hull = verts
    #endif
  except:
    corns = []
  #endtry

  return corns
#enddef read_cornfile()

def update_magnets():
+seq,uguiglobind.

  if MagPolsTot == MagPolsUpdate: return

  Nmoth = 0
  Moths = []
  DictMoths = {}
  DictMagPolsTot = {}
  DictCoils = {}
  DictCoilsHead = {}
  MyMoth = {}
  Hulls = []
  SpecMagPols = []

  for mag in MagPolsDel:
    cnam = mag[0][0]
    if cnam in DictMagPolsSel:
      isel = DictMagPolsSel[mag]
      mpop = MagPolsSel.pop(isel)
    #endif
  #endfor mag in MagPolSel

  NMagPolTot = len(MagPolsTot)
  NMagPolSel = len(MagPolsSel)
  NMagPolDel = len(MagPolsDel)

  for m in range(NMagPolTot):

    mp = MagPolsTot[m]

    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    DictMagPolsTot[cnam] = m

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

    cen = mp[4]

    xcen = cen[0]
    ycen = cen[1]
    zcen = cen[2]

    xcen = calc_var(xcen)
    ycen = calc_var(ycen)
    zcen = calc_var(zcen)

    if typ.find('Block') > -1:
      corns = blockcorners(mp)
    elif typ == 'Cylinder':
      #print("update_magnets: Cyl hier einfügen")
      MagPolsTot[m][-1] = [xcen,ycen,zcen]
      continue
    elif typ == 'Corners':
      corns = []
      for corn in mp[7]:
        c1 = calc_var(corn[0])
        c2 = calc_var(corn[1])
        c3 = calc_var(corn[2])
        corns.append([c1,c2,c3])
      #endfor
    elif typ == 'File':
      corns = []
      for ic in range(len(mp[7])):
        c1 = calc_var(mp[7][ic][0])
        c2 = calc_var(mp[7][ic][1])
        c3 = calc_var(mp[7][ic][2])
        corns.append([c1,c2,c3])
      #endfor ic in range(len(mp[7]))
    else:
      print("*** Bad key " + typ + " in ureadclc ***")
    #endif typ == 'Block'

    xmin = 1.e30
    xmax = -1.e30
    ymin = 1.e30
    ymax = -1.e30
    zmin = 1.e30
    zmax = -1.e30

    for corn in corns:
      x = corn[0] + xcen
      y = corn[1] + ycen
      z = corn[2] + zcen
      if x < xmin: xmin = x
      if x > xmax: xmax = x
      if y < ymin: ymin = y
      if y > ymax: ymax = y
      if z < zmin: zmin = z
      if z > zmax: zmax = z
    #endfor corn in corns

    x = (xmin+xmax)/2.
    y = (ymin+ymax)/2.
    z = (zmin+zmax)/2.

    MagPolsTot[m][-1] = [x,y,z]

    verts,ifaces,faces,bounds = hull3d(corns)
    if type(verts) != Tdf:
      hull = pd.DataFrame(verts)
    else:
      hull = verts
    #endif
    hull.columns = ['xr','yr','zr']

    hull['x'] = hull.xr+xcen
    hull['y'] = hull.yr+ycen
    hull['z'] = hull.zr+zcen

    Hulls.append(hull)

  #endfor m in range(NMagPolTot)

  if NMagPolTot:

    # sort mothers by x

    xmins = 1.e30
    xmaxs = -1.e30
    ymins = 1.e30
    ymaxs = -1.e30
    zmins = 1.e30
    zmaxs = -1.e30

    moli = []

    for mo in range(Nmoth):

      moth = Moths[mo]

      xmin = 1.e30
      xmax = -1.e30
      ymin = 1.e30
      ymax = -1.e30
      zmin = 1.e30
      zmax = -1.e30

      xmins = 1.e30
      xmaxs = -1.e30
      ymins = 1.e30
      ymaxs = -1.e30
      zmins = 1.e30
      zmaxs = -1.e30

      for cmag in moth:
        mag = DictMagPolsTot[cmag]
        mp = MagPolsTot[mag]
        typ = mp[3]
        if typ == 'Cylinder':
          cyl = Ntcyls[DictCyls[cmag]]
          nc = nget(cyl[2])
          nh = Nhead[Ind]
          xmn = nh[6][1]
          xmx = nh[6][2]
          zmn = nh[5][1]
          zmx = nh[7][2]
          ymn = nh[8][1]
          ymx = nh[9][2]
        else:
          nhu = DictHulls[cmag]
          xmn = Hulls[nhu].x.min()
          xmx = Hulls[nhu].x.max()
          ymn = Hulls[nhu].y.min()
          ymx = Hulls[nhu].y.max()
          zmn = Hulls[nhu].z.min()
          zmx = Hulls[nhu].z.max()
        #endif Cyl
        if xmn < xmin: xmin = xmn
        if xmx > xmax: xmax = xmx
        if ymn < ymin: ymin = ymn
        if ymx > ymax: ymax = ymx
        if zmn < zmin: zmin = zmn
        if zmx > zmax: zmax = zmx
        if mp[2] == 'yes' or str(mp[2]) == '1':
          if xmn < xmins: xmins = xmn
          if xmx > xmaxs: xmaxs = xmx
          if ymn < ymins: ymins = ymn
          if ymx > ymaxs: ymaxs = ymx
          if zmn < zmins: zmins = zmn
          if zmx > zmaxs: zmaxs = zmx
        #endif MagPolsTot[mag][2] == 'yes'
      #endfor mag in moth

      moli.append([mo,
                   xmin,xmax,(xmin+xmax)/2.,
                   ymin,ymax,(ymin+ymax)/2.,
                   zmin,zmax,(zmin+zmax)/2.])

    #endfor mo in range(len(Moths))

    MothsXYZ = pd.DataFrame(moli)
    MothsXYZ.columns = ['imoth',
                        'xmin','xmax','x',
                        'ymin','ymax','y',
                        'zmin','zmax','z']
    MothsXYZ = MothsXYZ.sort_values(by=['x','y','z'])
    #print("lima:,MothsXYZ",MothsXYZ.query("imoth==0"))
    #print(MothsXYZ)

    SpecXYZ = [xmins,xmaxs,ymins,ymaxs,zmins,zmaxs]

    mocop = Moths
    Moths = []

    for mo in range(len(mocop)):
      Moths.append(mocop[MothsXYZ.imoth[mo]])
    #endfor mo in range(len(mocop))

    # sort by mothers

    mpcop = MagPolsTot

    MagPolsTot = []

    for mo in range(len(Moths)):
      moth = Moths[mo]
      for mag in moth:
        MyMoth[mag] = mo
        mag = DictMagPolsTot[mag]
        mag = mpcop[mag]
        MagPolsTot.append(mag)
        if mag[2] == 'yes': SpecMagPols.append(mag)
      #endfor mag in moth
    #endfor mo in range(len(Moths))

    NspecMagPol = len(SpecMagPols)

  #endif NMagPolTot

  MagPolsUpdate = deepcopy(MagPolsTot)

  Moths = []
  Nmoth = 0
  DictMoths = {}

  for m in range(NMagPolTot):

    mp = MagPolsTot[m]

    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    DictMagPolsTot[cnam] = m

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

  #endfor

#enddef update_magnets()

def default_mag(key):
+seq,uguiglobind.

  Npol = 0
  for mp in MagPolsTot:
    if mp[1] == 'Iron': Npol += 1
  #endfor mp in MagPolsTot

  if key == 'Block':

    ifound = -1
    l = NMagPol

    for i in range(NMagPol):

      l -= 1

      mp = MagPolsTot[l]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      mattype = mp[1]
      magkey = mp[3]

#      if mattype == 'Iron': Npol += 1

      if mattype == 'REC' and magkey.find('Block') > -1:

        ispec = mp[2]
        cen = mp[4]
        xcen = cen[0]
        ycen = cen[1]
        zcen = cen[2]
        vmat = mp[5]
        bc = calc_var(vmat[0])
        bxn = calc_var(vmat[1])
        byn = calc_var(vmat[2])
        bzn = calc_var(vmat[3])
        mat = vmat[4]
        col = vmat[5]
        siz = mp[6]
        xlen = siz[0]
        ylen = siz[1]
        zlen = siz[2]
        div = mp[7]
        nxdiv = div[0]
        nydiv = div[1]
        nzdiv = div[2]
        fracdivy = div[3]
        fracdivz = div[4]

        if magkey != 'Block':
          chamfus = siz[3]
          chamfds = siz[3]
          if magkey == "BlockUsChamf": chamfds = 0.0
          elif magkey == "BlockDsChamf": chamfus = 0.0
          #endif magkey == "BlockUsChamf"
        #endif magkey != 'Block'

        ifound = l
        break

      #endif mattype == 'REC' and magkey == 'Block'

    #endfor i in range(NMagPlot)

    if ifound > -1:
      S_Cmag.set(cnam)
      S_Cmoth.set(cmoth)
      S_Mat.set(mat)
      S_Color.set(col)
      S_Bc.set(bc)
      S_Bxn.set(bxn)
      S_Byn.set(byn)
      S_Bzn.set(bzn)
      S_Ispec.set(ispec)
      S_Xcen.set(xcen)
      S_Ycen.set(ycen)
      S_Zcen.set(zcen)
      S_Xlen.set(xlen)
      S_Ylen.set(ylen)
      S_Zlen.set(zlen)
      S_ChamfUs.set(chamfus)
      S_ChamfDs.set(chamfds)
      S_nXdiv.set(nxdiv)
      S_nYdiv.set(nydiv)
      S_nZdiv.set(nzdiv)
      S_FracDivY.set(fracdivy)
      S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-15.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("-20.0")
      S_Xlen.set("10.0")
      S_Ylen.set("40.")
      S_Zlen.set("40.")
      S_ChamfUs.set("0.3")
      S_ChamfDs.set("0.3")
      S_nXdiv.set("1")
      S_nYdiv.set("3")
      S_nZdiv.set("3")
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'Cylinder':

    ifound = -1
    l = NMagPol

    for i in range(NMagPol):

      l -= 1

      mp = MagPolsTot[l]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      mattype = mp[1]
      magkey = mp[3]

      if mattype == 'REC' and key == 'Cylinder':

        ispec = mp[2]
        cen = mp[4]
        xcen = cen[0]
        ycen = cen[1]
        zcen = cen[2]
        vmat = mp[5]
        bc = calc_var(vmat[0])
        bxn = calc_var(vmat[1])
        byn = calc_var(vmat[2])
        bzn = calc_var(vmat[3])
        mat = vmat[4]
        col = vmat[5]

        size = mp[6]
        rin = float(size[0])
        rout = float(size[1])
        h = float(size[2])
        dphi = float(size[3])
        nphi = int(size[6])+1
        if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3

        size = mp[6]
        rin = float(size[0])
        rout = float(size[1])
        h = float(size[2])
        dphi = float(size[3])
        nphi = int(size[6])+1
        if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3
        div = mp[7]
        nxdiv = div[0]
        nydiv = div[1]
        nzdiv = nphi
        fracdivy = div[3]
        fracdivz = div[4]
        ifound = l
        break

      #endif mattype == 'REC' and magkey == 'Block'

    #endfor i in range(NMagPlot)

    if ifound > -1:
      S_Cmag.set(cnam)
      S_Cmoth.set(cmoth)
      S_Mat.set(mat)
      S_Color.set(col)
      S_Bc.set(bc)
      S_Bxn.set(bxn)
      S_Byn.set(byn)
      S_Bzn.set(bzn)
      S_Ispec.set(ispec)
      S_Xcen.set(xcen)
      S_Ycen.set(ycen)
      S_Zcen.set(zcen)

      S_CylrIn.set(rin)
      S_CylrOut.set(rout)
      S_CylHeight.set(h)
      S_CyldPhi.set(dphi)

      S_nXdiv.set(nxdiv)
      S_nYdiv.set(nydiv)
      S_nZdiv.set(nzdiv)
      S_FracDivY.set(fracdivy)
      S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-15.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("-20.0")

      S_CylrIn.set('0.0')
      S_CylrOut.set('40')
      S_CylHeight.set('40.')
      S_CyldPhi.set('360.')

      S_nXdiv.set('1')
      S_nYdiv.set('1')
      S_nZdiv.set('5')
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'File':

    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):

        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]

        if mattype == 'REC' and magkey == 'File':
          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          bxn = calc_var(vmat[1])
          byn = calc_var(vmat[2])
          bzn = calc_var(vmat[3])
          mat = vmat[4]
          col = vmat[5]
          div = mp[8]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]
          ifound = l
          break
        #endif mattype == 'REC' and magkey == 'Block'
      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Cmag.set(cnam)
        S_Cmoth.set(cmoth)
        S_Mat.set(mat)
        S_Color.set(col)
        S_Bc.set(bc)
        S_Bxn.set(bxn)
        S_Byn.set(byn)
        S_Bzn.set(bzn)
        S_Ispec.set(ispec)
        S_Xcen.set(xcen)
        S_Ycen.set(ycen)
        S_Zcen.set(zcen)
        S_CornFile.set("")
        S_nXdiv.set(str(int(nxdiv)))
        S_nYdiv.set(str(int(nydiv)))
        S_nZdiv.set(str(int(nzdiv)))
        S_FracDivY.set(fracdivy)
        S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-20.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("0.0")
      S_CornFile.set("")
      S_nXdiv.set("1")
      S_nYdiv.set("1")
      S_nZdiv.set("1")
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  else:
    wError("In default_mag fehlt noch key " + key)
    return
  #endif key == 'Block'

#enddef default_mag(key)

def default_pol(key):
+seq,uguiglobind.

  if key == 'Block':

    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):

        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]

        if mattype == 'Iron' and magkey.find('Block') > -1:

          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          if bc == 0.0:  bc = 0.001
          mat = vmat[4]
          col = vmat[5]
          siz = mp[6]
          xlen = siz[0]
          ylen = siz[1]
          zlen = siz[2]
          div = mp[7]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]

          if magkey != 'Block':
            chamfus = siz[3]
            chamfds = siz[3]
            if magkey == "BlockUsChamf": chamfds = 0.0
            elif magkey == "BlockDsChamf": chamfus = 0.0
            #endif magkey == "BlockUsChamf"
          #endif magkey != 'Block'

          ifound = l
          break

        #endif mattype == 'REC' and magkey == 'Block'

      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Iron_Cmag.set(cnam)
        S_Iron_Cmoth.set(cmoth)
        S_Iron_Mat.set(mat)
        S_Iron_Color.set(col)
        S_Iron_Bc.set(bc)
        S_Iron_Ispec.set(ispec)
        S_Iron_Xcen.set(xcen)
        S_Iron_Ycen.set(ycen)
        S_Iron_Zcen.set(zcen)
        S_Iron_Xlen.set(xlen)
        S_Iron_Ylen.set(ylen)
        S_Iron_Zlen.set(zlen)
        S_Iron_ChamfUs.set(chamfus)
        S_Iron_ChamfDs.set(chamfds)
        S_Iron_nXdiv.set(nxdiv)
        S_Iron_nYdiv.set(nydiv)
        S_Iron_nZdiv.set(nzdiv)
        S_Iron_FracDivY.set(fracdivy)
        S_Iron_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      if len(Materials):
        im = 0
        for m in Materials:
          im += 1
          if m[1] == 'Iron':
            S_Iron_Mat.set(str(im))
            break
          #endif
        #endfor
      else:
        S_Iron_Mat.set("2")
      #endif
      S_Iron_Color.set("blue")
      S_Iron_Bc.set("0.001")
      S_Iron_Ispec.set("yes")
      S_Iron_Xcen.set("-5.0")
      S_Iron_Ycen.set("-22.5")
      S_Iron_Zcen.set("-17.5")
      S_Iron_Xlen.set("10.0")
      S_Iron_Ylen.set("35.")
      S_Iron_Zlen.set("35.")
      S_Iron_ChamfUs.set("0.1")
      S_Iron_ChamfDs.set("0.1")
      S_Iron_nXdiv.set("3")
      S_Iron_nYdiv.set("5")
      S_Iron_nZdiv.set("5")
      S_Iron_FracDivY.set("1.")
      S_Iron_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'File':
    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):
        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]
        if mattype == 'Iron' and magkey == 'File':
          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          if bc == 0.0:  bc = 0.001
          mat = vmat[4]
          col = vmat[5]
          div = mp[8]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]
          ifound = l
          break
        #endif mattype == 'REC' and magkey == 'Block'
      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Iron_Cmag.set(cnam)
        S_Iron_Cmoth.set(cmoth)
        S_Iron_Mat.set(mat)
        S_Iron_Color.set(col)
        S_Iron_Bc.set(bc)
        S_Iron_Ispec.set(ispec)
        S_Iron_Xcen.set(xcen)
        S_Iron_Ycen.set(ycen)
        S_Iron_Zcen.set(zcen)
        S_Iron_CornFile.set("")
        S_Iron_nXdiv.set(str(int(nxdiv)))
        S_Iron_nYdiv.set(str(int(nydiv)))
        S_Iron_nZdiv.set(str(int(nzdiv)))
        S_Iron_FracDivY.set(fracdivy)
        S_Iron_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Iron_Mat.set("1")
      S_Iron_Color.set("blue")
      S_Iron_Bc.set("0.001")
      S_Iron_Ispec.set("yes")
      S_Iron_Xcen.set("-20.0")
      S_Iron_Ycen.set("-25.0")
      S_Iron_Zcen.set("0.0")
      S_Iron_CornFile.set("")
      S_Iron_nXdiv.set("1")
      S_Iron_nYdiv.set("1")
      S_Iron_nZdiv.set("1")
      S_Iron_FracDivY.set("1.")
      S_Iron_FracDivZ.set("1.")
    #endif NMagPols > 0

  else:
    wError("In default_pol fehlt noch key " + key)
    return
  #endif key == 'Block'

#enddef default_pol(key)

def _WaddMag(key):
+seq,uguiglobind.

  #print("_WaddMag")
  WaddMag = Toplevel()

  ewid=20

  S_Cmag.set("mag" + str(NMagPolTot+1))
  fName = Frame(WaddMag)
  tName = 'name'
  lName = Label(fName,text=tName,font=MyFont)
  eName = Entry(fName,text=S_Cmag,justify=CENTER,font=MyFont,width=ewid)
  lName.pack(side=LEFT,fill=X)
  eName.pack(side=RIGHT,fill=X)
  fName.pack(fill=X)

  S_Cmoth.set("Moth" + str(Nmoth+1))
  fMoth = Frame(WaddMag)
  tMoth = 'mother volume'
  lMoth = Label(fMoth,text=tMoth,font=MyFont)
  eMoth = Entry(fMoth,text=S_Cmoth,justify=CENTER,font=MyFont,width=ewid)
  lMoth.pack(side=LEFT,fill=X)
  eMoth.pack(side=RIGHT,fill=X)
  fMoth.pack(fill=X)

  default_mag(key)

#  fMatType = Frame(WaddMag)
#  tMatType = 'material type'
#  lMatType = Label(fMatType,text=tMatType,font=MyFont)
#  eMatType = Entry(fMatType,text=S_MateType,justify=CENTER,font=MyFont,width=ewid)
#  lMatType.pack(side=LEFT,fill=X)
#  eMatType.pack(side=RIGHT,fill=X)
#  fMatType.pack(fill=X)

  fMat = Frame(WaddMag)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  fColor = Frame(WaddMag)
  tColor = 'color'
  lColor = Label(fColor,text=tColor,font=MyFont)
  eColor = Entry(fColor,text=S_Color,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fBc = Frame(WaddMag)
  tBc = 'remanence'
  lBc = Label(fBc,text=tBc,font=MyFont)
  eBc = Entry(fBc,text=S_Bc,justify=CENTER,font=MyFont,width=ewid)
  lBc.pack(side=LEFT,fill=X)
  eBc.pack(side=RIGHT,fill=X)
  fBc.pack(fill=X)

  fBxn = Frame(WaddMag)
  tBxn = 'x - component'
  lBxn = Label(fBxn,text=tBxn,font=MyFont)
  eBxn = Entry(fBxn,text=S_Bxn,justify=CENTER,font=MyFont,width=ewid)
  lBxn.pack(side=LEFT,fill=X)
  eBxn.pack(side=RIGHT,fill=X)
  fBxn.pack(fill=X)

  fByn = Frame(WaddMag)
  tByn = 'y - component'
  lByn = Label(fByn,text=tByn,font=MyFont)
  eByn = Entry(fByn,text=S_Byn,justify=CENTER,font=MyFont,width=ewid)
  lByn.pack(side=LEFT,fill=X)
  eByn.pack(side=RIGHT,fill=X)
  fByn.pack(fill=X)

  fBzn = Frame(WaddMag)
  tBzn = 'z - component'
  lBzn = Label(fBzn,text=tBzn,font=MyFont)
  eBzn = Entry(fBzn,text=S_Bzn,justify=CENTER,font=MyFont,width=ewid)
  lBzn.pack(side=LEFT,fill=X)
  eBzn.pack(side=RIGHT,fill=X)
  fBzn.pack(fill=X)

  fIspec = Frame(WaddMag)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  fXcen = Frame(WaddMag)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddMag)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddMag)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key == 'Block':

    WaddMag.title("Add Magnet Block")

    fXlen = Frame(WaddMag)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddMag)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddMag)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fChamfUS = Frame(WaddMag)
    tChamfUS = 'Up-stream chamfer'
    lChamfUS = Label(fChamfUS,text=tChamfUS,font=MyFont)
    eChamfUS = Entry(fChamfUS,text=S_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChamfUS.pack(side=LEFT,fill=X)
    eChamfUS.pack(side=RIGHT,fill=X)
    fChamfUS.pack(fill=X)

    fChamfDS = Frame(WaddMag)
    tChamfDS = 'Down-stream chamfer'
    lChamfDS = Label(fChamfDS,text=tChamfDS,font=MyFont)
    eChamfDS = Entry(fChamfDS,text=S_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChamfDS.pack(side=LEFT,fill=X)
    eChamfDS.pack(side=RIGHT,fill=X)
    fChamfDS.pack(fill=X)

  elif key == 'Cylinder':

    WaddMag.title("Add Magnet Cylinder")

    fXlen = Frame(WaddMag)
    tXlen = 'R_inner'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_CylrIn,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddMag)
    tYlen = 'R_outer'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_CylrOut,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddMag)
    tZlen = 'Height'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_CylHeight,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fPhi = Frame(WaddMag)
    tPhi = 'Angle range'
    lPhi = Label(fPhi,text=tPhi,font=MyFont)
    ePhi = Entry(fPhi,text=S_CyldPhi,justify=CENTER,font=MyFont,width=ewid)
    lPhi.pack(side=LEFT,fill=X)
    ePhi.pack(side=RIGHT,fill=X)
    fPhi.pack(fill=X)

  elif key == 'File':

    WaddMag.title("Add REC Polyhedron")

    fcfil = Frame(WaddMag)
    tcfil = 'Filename'
    lcfil = Label(fcfil,text=tcfil,font=MyFont)
    ecfil = Entry(fcfil,text=S_CornFile.get(),justify=CENTER,font=MyFont,width=ewid)
    lcfil.pack(side=LEFT,fill=X)
    ecfil.pack(side=RIGHT,fill=X)
    fcfil.pack(fill=X)

  else:
    wError("In _WaddMag fehlt noch key " + key)
    return
  #endif key == 'Block'

  if key != 'Cylinder':

    fnXdiv = Frame(WaddMag)
    tnXdiv = 'nXdiv'
    lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
    enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
    lnXdiv.pack(side=LEFT,fill=X)
    enXdiv.pack(side=RIGHT,fill=X)
    fnXdiv.pack(fill=X)

    fnYdiv = Frame(WaddMag)
    tnydiv = 'nYdiv'
    lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
    enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
    lnYdiv.pack(side=LEFT,fill=X)
    enYdiv.pack(side=RIGHT,fill=X)
    fnYdiv.pack(fill=X)

    fnZdiv = Frame(WaddMag)
    tnzdiv = 'nZdiv'
    lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
    enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
    lnZdiv.pack(side=LEFT,fill=X)
    enZdiv.pack(side=RIGHT,fill=X)
    fnZdiv.pack(fill=X)

    fFracDivY = Frame(WaddMag)
    tfracdivy = 'FracDivY'
    lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
    eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
    lFracDivY.pack(side=LEFT,fill=X)
    eFracDivY.pack(side=RIGHT,fill=X)
    fFracDivY.pack(fill=X)
    fFracDivY = Frame(WaddMag)

    fFracDivZ = Frame(WaddMag)
    tfracdivz = 'FracDivZ'
    lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
    eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
    lFracDivZ.pack(side=LEFT,fill=X)
    eFracDivZ.pack(side=RIGHT,fill=X)
    fFracDivZ.pack(fill=X)
  else:

    fnXdiv = Frame(WaddMag)
    tnXdiv = 'nR_div'
    lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
    enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
    lnXdiv.pack(side=LEFT,fill=X)
    enXdiv.pack(side=RIGHT,fill=X)
    fnXdiv.pack(fill=X)

    fnYdiv = Frame(WaddMag)
    tnydiv = 'nH_div'
    lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
    enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
    lnYdiv.pack(side=LEFT,fill=X)
    enYdiv.pack(side=RIGHT,fill=X)
    fnYdiv.pack(fill=X)

    fnZdiv = Frame(WaddMag)
    tnzdiv = 'nAng_div'
    lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
    enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
    lnZdiv.pack(side=LEFT,fill=X)
    enZdiv.pack(side=RIGHT,fill=X)
    fnZdiv.pack(fill=X)

    #fFracDivY = Frame(WaddMag)
    #tfracdivy = 'FracDivY'
    #lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
    #eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
    #lFracDivY.pack(side=LEFT,fill=X)
    #eFracDivY.pack(side=RIGHT,fill=X)
    #fFracDivY.pack(fill=X)
    #fFracDivY = Frame(WaddMag)

    #fFracDivZ = Frame(WaddMag)
    #tfracdivz = 'FracDivZ'
    #lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
    #eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
    #lFracDivZ.pack(side=LEFT,fill=X)
    #eFracDivZ.pack(side=RIGHT,fill=X)
    #fFracDivZ.pack(fill=X)

  #endif Cylinder

  WaddMag.attributes('-topmost', 1)

  fbott = Frame(WaddMag)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddMag)
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)
  bClose = Button(fbott,text='Ok',width=ewid+2,command = lambda kw=key: _clWaddMag(kw))
  bClose.pack(side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  sgeo = Wmaster.geometry().split('+')
  whw = sgeo[0].split('x')
  ww = int(whw[0])
  wh = int(whw[1])
  xw = int(sgeo[1])
  yw = int(sgeo[2])
  x = xw + int(ww/10)
  y = yw + int(wh/10)
  sgeo = '+' + str(x) + '+' + str(y)
  WaddMag.geometry(sgeo)
#  smgeo = Umaster.geometry()
#  smoff = smgeo.split('+')
#  WaddMag.geometry("+" + str(int(smoff[1])+50) + "+" + str(int(smoff[1])+20))

  Umaster.wait_window(WaddMag)

#enddef _WaddMag(key)

def _WaddPol(key):
+seq,uguiglobind.

  #print("_WaddPol")
  WaddPol = Toplevel()
  sgeo = Wmaster.geometry().split('+')
  whw = sgeo[0].split('x')
  ww = int(whw[0])
  wh = int(whw[1])
  xw = int(sgeo[1])
  yw = int(sgeo[2])
  x = xw + int(ww/10)
  y = yw + int(wh/10)
  sgeo = '+' + str(x) + '+' + str(y)
  WaddPol.geometry(sgeo)
  WaddPol.attributes('-topmost', 1)

  ewid=20

  S_Iron_Cmag.set("pol" + str(Npol+1))
  fName = Frame(WaddPol)
  tName = 'name'
  lName = Label(fName,text=tName,font=MyFont)
  eName = Entry(fName,text=S_Iron_Cmag,justify=CENTER,font=MyFont,width=ewid)
  lName.pack(side=LEFT,fill=X)
  eName.pack(side=RIGHT,fill=X)
  fName.pack(fill=X)

  S_Iron_Cmoth.set("Moth" + str(Nmoth+1))
  fMoth = Frame(WaddPol)
  tMoth = 'mother volume'
  lMoth = Label(fMoth,text=tMoth,font=MyFont)
  eMoth = Entry(fMoth,text=S_Iron_Cmoth,justify=CENTER,font=MyFont,width=ewid)
  lMoth.pack(side=LEFT,fill=X)
  eMoth.pack(side=RIGHT,fill=X)
  fMoth.pack(fill=X)

  default_pol(key)

  fMat = Frame(WaddPol)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Iron_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  fColor = Frame(WaddPol)
  tColor = 'color'
  lColor = Label(fColor,text=tColor,font=MyFont)
  eColor = Entry(fColor,text=S_Iron_Color,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fIspec = Frame(WaddPol)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Iron_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  fXcen = Frame(WaddPol)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Iron_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddPol)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Iron_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddPol)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Iron_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key == 'Block':

    WaddPol.title("Add Iron Block")

    fXlen = Frame(WaddPol)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Iron_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddPol)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Iron_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddPol)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Iron_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fChamfUS = Frame(WaddPol)
    tChamfUS = 'Up-stream chamfer'
    lChamfUS = Label(fChamfUS,text=tChamfUS,font=MyFont)
    eChamfUS = Entry(fChamfUS,text=S_Iron_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChamfUS.pack(side=LEFT,fill=X)
    eChamfUS.pack(side=RIGHT,fill=X)
    fChamfUS.pack(fill=X)

    fChamfDS = Frame(WaddPol)
    tChamfDS = 'Down-stream chamfer'
    lChamfDS = Label(fChamfDS,text=tChamfDS,font=MyFont)
    eChamfDS = Entry(fChamfDS,text=S_Iron_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChamfDS.pack(side=LEFT,fill=X)
    eChamfDS.pack(side=RIGHT,fill=X)
    fChamfDS.pack(fill=X)

  elif key == 'File':

    WaddPol.title("Add Iron Polyhedron")

    fcfil = Frame(WaddPol)
    tcfil = 'Filename'
    lcfil = Label(fcfil,text=tcfil,font=MyFont)
    ecfil = Entry(fcfil,text=S_Iron_CornFile.get(),justify=CENTER,font=MyFont,width=ewid)
    lcfil.pack(side=LEFT,fill=X)
    ecfil.pack(side=RIGHT,fill=X)
    fcfil.pack(fill=X)

  else:
    wError("In _WaddPol fehlt noch key " + key)
    return
  #endif key == 'Block'

  fnXdiv = Frame(WaddPol)
  tnXdiv = 'nXdiv'
  lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
  enXdiv = Entry(fnXdiv,text=S_Iron_nXdiv,justify=CENTER,font=MyFont,width=ewid)
  lnXdiv.pack(side=LEFT,fill=X)
  enXdiv.pack(side=RIGHT,fill=X)
  fnXdiv.pack(fill=X)

  fnYdiv = Frame(WaddPol)
  tnydiv = 'nYdiv'
  lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
  enYdiv = Entry(fnYdiv,text=S_Iron_nYdiv,justify=CENTER,font=MyFont,width=ewid)
  lnYdiv.pack(side=LEFT,fill=X)
  enYdiv.pack(side=RIGHT,fill=X)
  fnYdiv.pack(fill=X)

  fnZdiv = Frame(WaddPol)
  tnzdiv = 'nZdiv'
  lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
  enZdiv = Entry(fnZdiv,text=S_Iron_nZdiv,justify=CENTER,font=MyFont,width=ewid)
  lnZdiv.pack(side=LEFT,fill=X)
  enZdiv.pack(side=RIGHT,fill=X)
  fnZdiv.pack(fill=X)

  fFracDivY = Frame(WaddPol)
  tfracdivy = 'FracDivY'
  lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
  eFracDivY = Entry(fFracDivY,text=S_Iron_FracDivY,justify=CENTER,font=MyFont,width=ewid)
  lFracDivY.pack(side=LEFT,fill=X)
  eFracDivY.pack(side=RIGHT,fill=X)
  fFracDivY.pack(fill=X)

  fFracDivZ = Frame(WaddPol)
  tfracdivz = 'FracDivZ'
  lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
  eFracDivZ = Entry(fFracDivZ,text=S_Iron_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
  lFracDivZ.pack(side=LEFT,fill=X)
  eFracDivZ.pack(side=RIGHT,fill=X)
  fFracDivZ.pack(fill=X)

  fbott = Frame(WaddPol)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddPol)
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fbott,text='Ok',width=ewid+2,command = lambda kw=key: _clWaddPol(kw))
  bClose.pack(side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  Umaster.wait_window(WaddPol)

#enddef _WaddPol(key)

def try_calc_var(stvar):
  try:
    calc_var(stvar)
    return 'ok'
  except:
    wError("Bad input: " + stvar)
  #endtry
#enddef try_calc_var(stvar)

def _cnWaddMag():
  global WaddMag
  WaddMag.destroy()
#enddef _cnWaddMag()

def _cnWaddPol():
  global WaddPol
  WaddPol.destroy()
#enddef _cnWaddPol()

def _clWaddPol(key):
+seq,uguiglobind.

  mp = []

  cnam = S_Iron_Cmag.get()
  if cnam.strip() == "": wError("Name must be given!"); return
  if NMagPol and  cnam in DictMagPolsTot: wError("Magnet is already defined"); return

  cmoth = S_Iron_Cmoth.get()
  if cmoth.strip() == "": wError("Name of mother volume must be given!"); return

  mp.append([cnam,cmoth])

  #smattype = S_Iron_MatType.get().strip()
  #if smattype != 'REC': wError("Unknown material " + mattype); return
  mp.append('Iron')

  sispec = S_Iron_Ispec.get().strip().lower()
  if sispec[0] == 'y' or sispec == '1': sis = 'yes'
  elif sispec[0] == 'n' or sispec == '0': sis = 'no'
  else: wError("Bad input " + sispec); return
  mp.append(sis)

  if key == 'Block':
    schamfus = S_Iron_ChamfUs.get().strip()
    if try_calc_var(schamfus) != 'ok': return
    chamfus = calc_var(schamfus)
    schamfds = S_Iron_ChamfDs.get().strip()
    if try_calc_var(schamfds) != 'ok': return
    chamfds = calc_var(schamfds)
    if chamfus == 0.0 and chamfds == 0.0: mp.append('Block')
    elif chamfus != 0.0 and chamfds != 0.0:
      if chamfus != chamfds:
        wError("Chamfer must be equal or one must be zero")
        return
      #endif chamfus != chamfds
      mp.append('BlockChamf')
    elif chamfus != 0.0: mp.append('BlockUsChamf')
    elif chamdus != 0.0: mp.append('BlockDsChamf')
  elif key == 'File':
    mp.append('File')
  else:
    wError("In _clWaddPol fehlt noch key " + key)
    return
  #endif key == 'RECBlock'

  sxcen = S_Iron_Xcen.get().strip()
  if try_calc_var(sxcen) != 'ok': return
  sycen = S_Iron_Ycen.get().strip()
  if try_calc_var(sycen) != 'ok': return
  szcen = S_Iron_Zcen.get().strip()
  if try_calc_var(szcen) != 'ok': return

  mp.append([sxcen,sycen,szcen])

  sBc = S_Iron_Bc.get().strip()
  if try_calc_var(sBc) != 'ok': return

  scolor = S_Iron_Color.get().strip()
  if scolor not in Variables and scolor not in DictUnduColors:
    wError(scolor + " not in: " + str(DictUnduColors))
    return
  #endif scolor not in UnduColors

  if try_calc_var(sxcen) != 'ok': return

  smatindex = S_Iron_Mat.get()
  ifound = 0

  if smatindex[0] == '$':
    if try_calc_var(smatindex) != 'ok': return
    sval = str(calc_var(smatindex))
  else:
    sval = smatindex
  #endif smatindex[0] == '$'

  for mat in Materials:
    if mat[0] == sval:
      ifound = 1
      break
  #endfor mat in Materials

  if ifound == 0:
    wError("Undefined material index in _clWaddPole")
    _MaddMatIron()
    return
  #endif ifound == 0

  mp.append([sBc,"0.0","1.0","0.0",smatindex,scolor])

  if key == 'Block':

    sxlen = S_Iron_Xlen.get().strip()
    if try_calc_var(sxlen) != 'ok': return
    sylen = S_Iron_Ylen.get().strip()
    if try_calc_var(sylen) != 'ok': return
    szlen = S_Iron_Zlen.get().strip()
    if try_calc_var(szlen) != 'ok': return

    if chamfus == 0.0 and chamfds == 0.0: mp.append([sxlen,sylen,szlen,'0.0'])
    elif chamfus != 0.0: mp.append([sxlen,sylen,szlen,schamfus])
    else: mp.append([sxlen,sylen,szlen,schamfds])

  elif key == 'File':
    cfile = S_Iron_CornFile.get().strip()
    if cfile == "": wError("Filename must be given!")
    corns = read_cornfile(cfile)
    if corns == []:
      wError("Problems with " + cfile)
      return
    #endif corns == []
    mp.append(corns)

  #endif key == 'RECBlock'

  snxdiv = S_Iron_nXdiv.get().strip()
  if try_calc_var(snxdiv) != 'ok': return
  snydiv = S_Iron_nYdiv.get().strip()
  if try_calc_var(snydiv) != 'ok': return
  snzdiv = S_Iron_nZdiv.get().strip()
  if try_calc_var(snzdiv) != 'ok': return
  sfracdivy = S_Iron_FracDivY.get().strip()
  if try_calc_var(sfracdivy) != 'ok': return
  sfracdivz = S_Iron_FracDivZ.get().strip()
  if try_calc_var(sfracdivz) != 'ok': return

  mp.append([snxdiv,snydiv,snzdiv,sfracdivy,sfracdivz])

  xloc=None
  yloc = None
  zloc = None
  mp.append([xloc,yloc,zloc])

  MagPolsTot.append(mp)
  NMagPolTot += 1
  update_magnets()

  WaddPol.destroy()
#enddef _clWaddPol()

def _clWaddMag(key):
+seq,uguiglobind.
  global UnduColors, DictUnduColors

  mp = []

  cnam = S_Cmag.get()
  if cnam.strip() == "": wError("Name must be given!"); return
  if NMagPol and  cnam in DictMagPolsTot: wError("Magnet is already defined"); return

  cmoth = S_Cmoth.get()
  if cmoth.strip() == "": wError("Name of mother volume must be given!"); return

  mp.append([cnam,cmoth])

  #smattype = S_MateType.get().strip()
  #if smattype != 'REC': wError("Unknown material " + mattype); return
  mp.append('REC')

  sispec = S_Ispec.get().strip().lower()

  if sispec[0] == 'y' or sispec == '1': sis = 'yes'
  elif sispec[0] == 'n' or sispec == '0': sis = 'no'
  else: wError("Bad input " + sispec); return

  mp.append(sis)

  if key == 'Block':

    schamfus = S_ChamfUs.get().strip()

    if try_calc_var(schamfus) != 'ok': return

    chamfus = calc_var(schamfus)
    schamfds = S_ChamfDs.get().strip()

    if try_calc_var(schamfds) != 'ok': return
    chamfds = calc_var(schamfds)

    if chamfus == 0.0 and chamfds == 0.0:
      mp.append('Block')
    elif chamfus != 0.0 and chamfds != 0.0:
      if chamfus != chamfds:
        wError("Chamfer must be equal or one must be zero")
        return
      #endif chamfus != chamfds
      mp.append('BlockChamf')
    elif chamfus != 0.0: mp.append('BlockUsChamf')
    elif chamdus != 0.0: mp.append('BlockDsChamf')
    #endif

  elif key == 'Cylinder':

    mp.append('Cylinder')

  elif key == 'File':
    mp.append('File')
  else:
    wError("In _clWaddMag fehlt noch key " + key)
    return
  #endif key == 'RECBlock'

  sxcen = S_Xcen.get().strip()
  if try_calc_var(sxcen) != 'ok': return
  sycen = S_Ycen.get().strip()
  if try_calc_var(sycen) != 'ok': return
  szcen = S_Zcen.get().strip()
  if try_calc_var(szcen) != 'ok': return

  mp.append([sxcen,sycen,szcen])

  sBc = S_Bc.get().strip()
  if try_calc_var(sBc) != 'ok': return
  sBxn = S_Bxn.get().strip()
  if try_calc_var(sBxn) != 'ok': return
  sByn = S_Byn.get().strip()
  if try_calc_var(sByn) != 'ok': return
  sBzn = S_Bzn.get().strip()
  if try_calc_var(sBzn) != 'ok': return

  scolor = S_Color.get().strip()
  if scolor not in Variables and scolor not in DictUnduColors:
    wError(scolor + " not in: " + str(DictUnduColors))
    return
  #endif scolor not in UnduColors

  if try_calc_var(sxcen) != 'ok': return

  smatindex = S_Mat.get()
  ifound = 0

  if smatindex[0] == '$':
    if try_calc_var(smatindex) != 'ok': return
    sval = str(calc_var(smatindex))
  else:
    sval = smatindex
  #endif smatindex[0] == '$'

  for mat in Materials:
    if mat[0] == sval:
      ifound = 1
      break
  #endfor mat in Materials

  if ifound == 0:
    wError("Undefined material index _clWaddMag")
    _MaddMatREClin()
    return
  #endif ifound == 0

  mp.append([sBc,sBxn,sByn,sBzn,smatindex,scolor])

  if key == 'Block':

    sxlen = S_Xlen.get().strip()
    if try_calc_var(sxlen) != 'ok': return
    sylen = S_Ylen.get().strip()
    if try_calc_var(sylen) != 'ok': return
    szlen = S_Zlen.get().strip()
    if try_calc_var(szlen) != 'ok': return

    if chamfus == 0.0 and chamfds == 0.0: mp.append([sxlen,sylen,szlen,'0.0'])
    elif chamfus != 0.0: mp.append([sxlen,sylen,szlen,schamfus])
    else: mp.append([sxlen,sylen,szlen,schamfds])

  elif key == 'Cylinder':

    srin = S_CylrIn.get().strip()
    if try_calc_var(srin) != 'ok': return
    srout = S_CylrOut.get().strip()
    if try_calc_var(srout) != 'ok': return
    shig = S_CylHeight.get().strip()
    if try_calc_var(shig) != 'ok': return
    sdphi = S_CyldPhi.get().strip()
    if try_calc_var(sdphi) != 'ok': return

    mp.append([srin,srout,shig,sdphi])

  elif key == 'File':
    cfile = S_CornFile.get().strip()
    if cfile == "": wError("Filename must be given!")
    corns = read_cornfile(cfile)
    if corns == []:
      wError("Problems with " + cfile)
      return
    #endif corns == []
    mp.append(corns)

  #endif key == 'Block'

  snxdiv = S_nXdiv.get().strip()
  if try_calc_var(snxdiv) != 'ok': return
  snydiv = S_nYdiv.get().strip()
  if try_calc_var(snydiv) != 'ok': return
  snzdiv = S_nZdiv.get().strip()
  if try_calc_var(snzdiv) != 'ok': return
  sfracdivy = S_FracDivY.get().strip()
  if try_calc_var(sfracdivy) != 'ok': return
  sfracdivz = S_FracDivZ.get().strip()
  if try_calc_var(sfracdivz) != 'ok': return

  mp.append([snxdiv,snydiv,snzdiv,sfracdivy,sfracdivz])

  xloc=None
  yloc = None
  zloc = None

  mp.append([xloc,yloc,zloc])
  MagPolsTot.append(mp)

  if mp[3] == 'Cylinder':
    size = mp[6]
    Quit(mp,'\n',size)
    rin = float(size[0])
    rout = float(size[1])
    h = float(size[2])
    dphi = float(size[3])
    nphi = int(size[4][3])+1
    if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3
    Ncylinder += 1
    ccyl = 'ncyl_' + str(Ncylinder)
    ncyl = ncylinder(ccyl,
                     xcen,ycen,zcen,rout-rin,rin,rin,h,0.0,90.,dphi,nphi,1)
    poly = cylinderpoly(ccyl)
    Ntcyls.append([imp,mp,ccyl,poly])
  #endif

  NMagPolTot += 1

  update_magnets()

  WaddMag.destroy()
#enddef _clWaddMag()

def _EditMagGet(mag):
+seq,uguiglobind.

  #print("Baustelle _EditMagGet")

# Concept of magnets

# Block:
#  mp[0] = [name, mother]
#  mp[1] = material Type
#  mp[2] = special flag
#  mp[3] = shape key-word
#  mp[4] = [xcen,ycen,zcen]
#  mp[5] = [Bc, Bxn, Byn, Bzn, material index, color index]
#  mp[6] = [xlen,ylen,zlen,chamf]
#  mp[7] = [nxdiv,nydiv,nzdiv,fracdivy]
#  mp[8] = [xloc,yloc,zloc]

# File:
#  mp[0] = [name, mother]
#  mp[1] = material Type
#  mp[2] = special flag
#  mp[3] = shape key-word
#  mp[4] = [xcen,ycen,zcen]
#  mp[5] = [Bc, Bxn, Byn, Bzn, material index, color index]
#  mp[6] = number of points
#  mp[7] = points
#  mp[8] = [nxdiv,nydiv,nzdiv,fracdivy]
#  mp[9] = [xloc,yloc,zloc]

  MagPol = MagPolsTot[mag]

#  mattype = _EditMagGetSplit(MagPol[1],S_MateType.get())
#  MagPol[1] = mattype

  key = S_Key.get()
  if key != MagPol[3]:
    wError("Shape key-word can not be changed!")
  #endif key != MagPol[4]

  cen = MagPol[4]

  xcen = _EditMagGetSplit(cen[0],S_Xcen.get())
  ycen = _EditMagGetSplit(cen[1],S_Ycen.get())
  zcen = _EditMagGetSplit(cen[2],S_Zcen.get())

  cen = [xcen,ycen,zcen]
  MagPol[4] = [xcen,ycen,zcen]

  vmat = MagPol[5]
  bc = _EditMagGetSplit(vmat[0],S_Bc.get())
  bxn = _EditMagGetSplit(vmat[1],S_Bxn.get())
  byn = _EditMagGetSplit(vmat[2],S_Byn.get())
  bzn = _EditMagGetSplit(vmat[3],S_Bzn.get())
  mat = _EditMagGetSplit(vmat[4],S_Mat.get())
  col = _EditMagGetSplit(vmat[5],S_Color.get())
  MagPol[5] = [bc,bxn,byn,bzn,mat,col]

  if key.find('Block') > -1:

    leng = MagPol[6]
    xlen = _EditMagGetSplit(leng[0],S_Xlen.get())
    ylen = _EditMagGetSplit(leng[1],S_Ylen.get())
    zlen = _EditMagGetSplit(leng[2],S_Zlen.get())

    chamf = '0.0'
    chamfus = _EditMagGetSplit(leng[3],S_ChamfUs.get())
    chamfds = _EditMagGetSplit(leng[3],S_ChamfDs.get())

    if key == 'BlockChamf':
      if chamfus != chamfds:
        wError("Up-stream and down-stream chamfer must be the same for key 'BlockChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfus
    elif key == 'BlockUsChamf':
      if chamfds != '0.0':
        wError("Down-stream chamfer must be zero for key 'BlockUsChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfus
    elif key == 'BlockDsChamf':
      if chamfus != '0.0':
        wError("Up-stream chamfer must be zero for key 'BlockUsChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfds
    #endif key == 'BlockChamf')

    MagPol[6] = [xlen,ylen,zlen,chamf]

    div = MagPol[7]

    nxdiv = _EditMagGetSplit(div[0],S_nXdiv.get())
    nydiv = _EditMagGetSplit(div[1],S_nYdiv.get())
    nzdiv = _EditMagGetSplit(div[2],S_nZdiv.get())

    fracdivy = _EditMagGetSplit(div[3],S_FracDivY.get())
    fracdivz = _EditMagGetSplit(div[4],S_FracDivZ.get())

    MagPol[7] = [nxdiv,nydiv,nzdiv,fracdivy,fracdivz]

  elif key == 'File':

    cmag = MagPol[0][0]
    fnam = DictCornFiles[cmag]
    fget = S_CornFile.get()
    corns = MagPol[7]

    if fnam != fget:
      if not os.path.exists(fget):
        wError("File " + fget + " not found!")
      else:
        try:
          corns = read_cornfile(fget)
          cornsnum = []
          for c in corns:
            c1 = calc_var(c[0])
            c2 = calc_var(c[1])
            c3 = calc_var(c[2])
            cornsnum.append([c1,c2,c3])
          #endfor
          verts,ifaces,faces,bounds = hull3d(cornsnum)
          if type(verts) != Tdf:
            hull = pd.DataFrame(verts)
          else:
            hull = verts
          #endif
          DictCornFiles[cname[0]] = cmag
          MagPol[7] = corns
          MagPol[6] = str(len(corns))
        except:
          wError("Could not process " + fget + "!")
        #endtry
      #endif not os.path.exists(fnam)
    #endif fnam != S_CornFile

    div = MagPol[8]
    nxdiv = _EditMagGetSplit(div[0],S_nXdiv.get())
    nydiv = _EditMagGetSplit(div[1],S_nYdiv.get())
    nzdiv = _EditMagGetSplit(div[2],S_nZdiv.get())
    fracdivy = _EditMagGetSplit(div[3],S_FracDivY.get())
    fracdivz = _EditMagGetSplit(div[4],S_FracDivZ.get())
    MagPol[8] = [nxdiv,nydiv,nzdiv,fracdivy,fracdivz]

  else:
    wError("_EditMagGet: " + key + " einfügen!")
  #endif key == 'Block'

  MagPolsTot[mag] = MagPol
  #print("_EditMagGet:",MagPolsTot[mag])

  WEditMag.destroy()

#enddef _EditMagGet(mag)

def _EditMagGetSplit(var,stvar):

  split = stvar.split('=')

  if var != split[0]:
    try :
      var = calc_var(split[0])
    except:
      wError("Bad input " + stvar)
    #endtry
  #endif cenold[0] != split[0]

  return str(var)

#enddef _EditMagGetSplit(stvar)

MagPolsDel = []
NMagPolDel = 0

def _delmagpol(imp):
  global DictMagPolsTot, MagPolsTot, MagPolsDel

  print("_delmagpol",imp)

  mag = MagPolsTot[imp]
  cnam = mag[0][0]
  cmoth = mag[0][1]

  if not cnam in DictMagPolsTot:
    wError("Magnet is not defined")
    return
  #endif cnam in MagPolsTot

  mp = MagPolsTot.pop(imp)
  MagPolsDel.append(mp)

  update_magnets()
  _listMags('update')
#enddef _delmagpol(imp)

def _resmagpol(imp):
  global DictMagPolsTot, MagPolsTot, MagPolsDel

  print("_resmagpol",imp)

  mp = MagPolsTotDel.pop(imp)
  MagPolsTots.append(mp)

  update_magnets()
  _listMags('update')
#enddef _resmagpol(imp)

def addmagpol_to_list(mag):
  global DictMagPolsTot, MagPolsTot
  cnam = mag[0][0]
  cmoth = mag[0][1]
  if cnam in DictMagPolsTot:
    wError("Magnet is already defined")
    return
  #endif cnam in MagPolsTot
  MagPolsTot.append(mag)
  update_magnets()
#enddef addmagpol_to_list()

def _clWCopyMag(mag):
  global MagPolsTot, S_newname, S_newmother, NMagPol, WCopyMag

  mp = deepcopy(MagPolsTot[mag])

  CopyMagX = -1
  CopyMagY = -1
  CopyMag_CheckMode = 0

  mp[0][0] = S_newname.get()
  mp[0][1] = S_newmother.get()

  NMagPol += 1
  MagPolsTot.append(mp)
  update_magnets()

  WCopyMag.destroy()
  _listMags('update')

#def _clWCopyMag(mag)

def _cnWCopyMag(mag):
  WCopyMag.destroy()
#def _cnWCopyMag(mag)

def _copyMag(imp):
  global MagPolsTot, S_newname, S_newmother, WCopyMag

  mp = MagPolsTot[imp]

  cmag = mp[0][0]
  cmoth = mp[0][1]

  WCopyMag = Toplevel()
  WCopyMag.title("Copy Magnetic Item")

  try:
    if CopyMagX: pass
  except:
    CopyMag_CheckMode = 0
    CopyMagX = -1
    CopyMagY = -1
  #endtry

  if CopyMagX == -1: CopyMagX, CopyMagY = Umaster.winfo_pointerxy()

  sgeo = '+' + str(CopyMagX-200) + '+' + str(CopyMagY)
  WCopyMag.geometry(sgeo)

  WCopyMag.title("Copy of " + cmag)
  WCopyMag.attributes('-topmost', 1)

  ewid = 25

  S_newname = StringVar()
  S_newname.set("")
  fnewname = Frame(WCopyMag)
  tnewname = 'name'
  lnewname = Label(fnewname,text=tnewname,font=MyFont)
  enewname = Entry(fnewname,text=S_newname,justify=CENTER,font=MyFont,width=ewid)
  lnewname.pack(side=LEFT,fill=X)
  enewname.pack(side=RIGHT,fill=X)
  fnewname.pack(fill=X)

  S_newmother = StringVar()
  S_newmother.set("")
  fnewmother = Frame(WCopyMag)
  tnewmother = 'mother volume'
  lnewmother = Label(fnewmother,text=tnewmother,font=MyFont)
  enewmother = Entry(fnewmother,text=S_newmother,justify=CENTER,font=MyFont,width=ewid)
  lnewmother.pack(side=LEFT,fill=X)
  enewmother.pack(side=RIGHT,fill=X)
  fnewmother.pack(fill=X)

  fC = Frame(WCopyMag)

  bCancel = Button(fC,text='Cancel',command= lambda mag=imp: _cnWCopyMag(mag))
  bCancel.bind('<Return>', lambda event, mag=imp: _cnWCopyMag(mag))
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fC,text='Ok',command= lambda mag=imp: _clWCopyMag(mag),width=ewid)
  bClose.bind('<Return>',lambda event, mag=imp: _clWCopyMag(mag))
  bClose.pack(side=LEFT,fill=X)

  fC.pack(fill=X)

#enddef _copyMag(imp)

def _ccWEditMag(mag):
  # Check
  global EditMag_CheckMode,CopyMag_CheckMode,  WEditMag, MagPolsTot,MagPolOld
  global SgeoWeditMag
  #print("_ccWEditMag(mag):",mag)

  EditMag_CheckMode = 1
  sgeo = WEditMag.geometry().split('+')
  SgeoWeditMag = '+' + sgeo[1] + '+' + sgeo[2]
  WEditMag.destroy()

  _editMag(mag)
  #print("Check:",stat)

  EditMag_CheckMode = 0
#def _ccWEditMag(mag)

def _cnWEditMag(mag):
  # Cancel
  global EditMag_CheckMode,CopyMag_CheckMode,EditMagX,EditMagY,WEditMag, \
  WCopyMag,MagPol,MagPolOld, MagPolsTot, \
  Nvar,Ncalc,Variables,Calcs,VariablesOld,CalcOld

  #print("_cnWEditMag(mag):",mag)
  EditMag_CheckMode = 0
  EditMagX = -1
  EditMagY = -1
  #print("_cn:",MagPolOld)
  MagPolsTot[mag] = MagPolOld
  Variables = VariablesOld
  Calcs = CalcsOld
  Nvar = len(Variables)
  Ncalc = len(Calcs)
  WEditMag.destroy()
#def _cnWEditMag(mag)

def _crWEditMag(mag):
  # Restore
  global MagPolOld,MagPolsTot
  #print("_cr:",NL,MagPolOld)
  MagPolsTot[mag] = MagPolOld
  WEditMag.destroy()
  _editMag(mag)
#def _crWEditMag(mag)

def _clWEditMag(mag):
+seq,uguiglobind.

  EditMagX = -1
  EditMagY = -1
  EditMag_CheckMode = 0

  _EditMagGet(mag)

  WEditMag.destroy()
  _listMags('update')

#def _clWEditMag(mag)

def _focoEditMag(ev,imp,idx,kdx):
+seq,uguiglobind.
  print(ev,imp,idx,kdx)
#enddef focoEditMag(imp,idx,kdx)

def _editMag(imp):
+seq,uguiglobind.
  global SgeoWeditMag, VariablesOld, CalcsOld

  #print("_editMag::CheckMode:",EditMag_CheckMode)
  #print("_editMag::imp:",imp)

  if not EditMag_CheckMode:
    MagPolOld = deepcopy(MagPolsTot[imp])
    VariablesOld = deepcopy(Variables)
    CalcsOld = deepcopy(Calcs)
  else:
    _EditMagGet(imp)
  #endif not EditMag_CheckMode

  MagPol = MagPolsTot[imp]
  #print(MagPol)
  mp = MagPol

  cmag = mp[0][0]
  cmoth = mp[0][1]

  WEditMag = Toplevel()
  WEditMag.title("Edit Magnetic Item")

  try:
    if EditMagX: pass
  except:
    EditMag_CheckMode = 0
    EditMagX = -1
    EditMagY = -1
  #endtry

  if EditMagX == -1:
    EditMagX, EditMagY = Umaster.winfo_pointerxy()
    EditMagX -= 200
  #endif EditMagX == -1

  if not EditMag_CheckMode:
    sgeo = '+' + str(EditMagX) + '+' + str(EditMagY)
  else:
    sgeo = SgeoWeditMag
  #endif not EditMag_CheckMode

  WEditMag.geometry(sgeo)

  WEditMag.title(cmag)
  WEditMag.attributes('-topmost', 1)

  #([cname,mag,ispec,key,cen,vmat,siz,div]

  ewid = 30

  mattype = mp[1]

  if mattype.find("$") > -1:
    V_MatType = calc_var(mattype)
    tvmattype = mattype + " = " + str(V_MatType)
  else:
    tvmattype = mattype
  #endif mattype.find("$") > -1

  S_MateType.set(mattype)

#  ewid = max(ewid,len(tvmattype))

  #ewid = len(mattype)
  ispec = mp[2]
  ewid = max(ewid,len(ispec))

  key = mp[3]
  ewid = max(ewid,len(key))

  cen = mp[4]

  xcen = cen[0]
  ycen = cen[1]
  zcen = cen[2]

  if type(xcen) == str and xcen.find("$") > -1:
    V_Xcen = calc_var(xcen)
    tvxcen = xcen + " = " + str(V_Xcen)
  else:
    tvxcen = xcen
  #endif xcen.find("$")

  ewid = max(ewid,len(tvxcen))

  if type(ycen) == str and ycen.find("$") > -1:
    V_Ycen = calc_var(ycen)
    tvycen = ycen + " = " + str(V_Ycen)
  else:
    tvycen = ycen
  #endif ycen.find("$")

  ewid = max(ewid,len(tvycen))

  if type(zcen) == str and ycen.find("$") > -1:
    V_Zcen = calc_var(zcen)
    tvzcen = zcen + " = " + str(V_Zcen)
  else:
    tvzcen = zcen
  #endif zcen.find("$")

  ewid = max(ewid,len(tvzcen))

  vmat = mp[5]
  bc = vmat[0]

  if type(bc) == str and bc.find("$") > -1:
    V_Bc = calc_var(bc)
    tvbc = bc + " = " + str(V_Bc)
  else:
    tvbc = bc
  #endif bc.find("$")

  ewid = max(ewid,len(tvbc))

  bxn = calc_var(vmat[1])
  byn = calc_var(vmat[2])
  bzn = calc_var(vmat[3])

  if type(bxn) == str and bxn.find("$") > -1:
    V_Bxn = calc_var(bxn)
    tvbxn = bxn + " = " + str(V_Bxn)
  else:
    tvbxn = str(bxn)
  #endif bxn.find("$") > -1

  ewid = max(ewid,len(tvbxn))

  if type(byn) == str and byn.find("$") > -1:
    V_Byn = calc_var(byn)
    tvbyn = byn + " = " + str(V_Byn)
  else:
    tvbyn = str(byn)
  #endif byn.find("$") > -1

  ewid = max(ewid,len(tvbyn))

  if type(bzn) == str and bzn.find("$") > -1:
    V_Bzn = calc_var(bzn)
    tvbzn = bzn + " = " + str(V_Bzn)
  else:
    tvbzn = str(bzn)
  #endif bzn.find("$") > -1

  ewid = max(ewid,len(tvbzn))

  mat = vmat[4]
  col = vmat[5]

  if type(mat) == str and mat.find("$") > -1:
    V_Mat = calc_var(mat)
    tvmat = mat + " = " + str(V_Mat)
  else:
    tvmat = mat
  #endif mat.find("$") > -1

  ewid = max(ewid,len(tvmat))

  if type(col) == str and col.find("$") > -1:
    vcol = calc_var(col)
    tvcol = col + " = " + str(vcol)
  else:
    tvcol = col
  #endif col.find("$") > -1

  ewid = max(ewid,len(tvcol))

  siz = mp[6]

  if key.find('Block') > -1:

    xlen = siz[0]
    ylen = siz[1]
    zlen = siz[2]

    chamf = siz[3]

    tvchus = '0.0'
    tvchds = '0.0'

    if type(chamf) == str and chamf.find("$") > -1:
      V_Chamf = calc_var(chamf)
      if key == 'BlockUsChamf':
        tvchus = chamf + " = " + str(V_Chamf)
      elif key == 'BlockDsChamf':
        tvchds = chamf + " = " + str(V_Chamf)
      elif key == 'BlockChamf':
        tvchus = chamf + " = " + str(V_Chamf)
        tvchds = chamf + " = " + str(V_Chamf)
      #endif key == 'BlockUsChamf'
    else:
      if key == 'BlockUsChamf':
        tvchus = chamf
      elif key == 'BlockDsChamf':
        tvchds = chamf
      elif key == 'BlockChamf':
        tvchus = chamf
        tvchds = chamf
      #endif key == 'BlockUsChamf'
    #endif xlen.find("$")

    ewid = max(ewid,len(tvchus))
    ewid = max(ewid,len(tvchds))

    if type(xlen) == str and xlen.find("$") > -1:
      V_Xlen = calc_var(xlen)
      tvxlen = xlen + " = " + str(V_Xlen)
    else:
      tvxlen = xlen
    #endif xlen.find("$")
    ewid = max(ewid,len(tvxlen))

    if type(ylen) == str and ylen.find("$") > -1:
      V_Ylen = calc_var(ylen)
      tvylen = ylen + " = " + str(V_Ylen)
    else:
      tvylen = ylen
    #endif ylen.find("$")
    ewid = max(ewid,len(tvylen))

    if type(zlen) == str and zlen.find("$") > -1:
      V_Zlen = calc_var(zlen)
      tvzlen = zlen + " = " + str(V_Zlen)
    else:
      tvzlen = zlen
    #endif zlen.find("$")
    ewid = max(ewid,len(tvzlen))

    div = mp[7]

  elif key == 'File':

    div = mp[8]
    ewid = max(ewid,len(DictCornFiles[cmag]))

  else:
    Quit("In _editMag fehlt noch key " + key)
  #endif key == 'Block'

  nxdiv = div[0]
  nydiv = div[1]
  nzdiv = div[2]
  fracdivy = div[3]
  fracdivz = div[4]

  vxcen = calc_var(xcen)
  vycen = calc_var(ycen)
  vzcen = calc_var(zcen)

  vbc = calc_var(bc)
  vbxn = calc_var(bxn)
  vbyn = calc_var(byn)
  vbzn = calc_var(bzn)

  vnxdiv = calc_var(nxdiv)
  vnydiv = calc_var(nydiv)
  vnzdiv = calc_var(nzdiv)
  vfracdivy = calc_var(fracdivy)

  if type(nxdiv) == str and nxdiv.find("$") > -1:
    tnxdiv = nxdiv + " = " + str(vnxdiv)
  else:
    tnxdiv = nxdiv
  #endif nxdiv.find("$")
  ewid = max(ewid,len(tnxdiv))

  if type(nydiv) == str and nydiv.find("$") > -1:
    tnydiv = nydiv + " = " + str(vnydiv)
  else:
    tnydiv = nydiv
  #endif nydiv.find("$")
  ewid = max(ewid,len(tnydiv))

  if type(nzdiv) == str and nzdiv.find("$") > -1:
    tnzdiv = nzdiv + " = " + str(vnzdiv)
  else:
    tnzdiv = nzdiv
  #endif nzdiv.find("$")
  ewid = max(ewid,len(tnzdiv))

  if type(fracdivy) == str and fracdivy.find("$") > -1:
    tfracdivy = fracdivy + " = " + str(vfracdivy)
  else:
    tfracdivy = fracdivy
  #endif fracdivy.find("$")
  ewid = max(ewid,len(tfracdivy))

  #S_MateType.set(tvmattype)
  #fMatType = Frame(WEditMag)
  #tMatType = 'material type'
  #lMatType = Label(fMatType,text=tMatType,font=MyFont)
  #eMatType = Entry(fMatType,text=S_MateType,justify=CENTER,font=MyFont,width=ewid)
  #lMatType.pack(side=LEFT,fill=X)
  #eMatType.pack(side=RIGHT,fill=X)
  #fMatType.pack(fill=X)

  S_Mat.set(tvmat)
  fMat = Frame(WEditMag)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  S_Color.set(tvcol)
  fcol = Frame(WEditMag)
  tcol = 'color'
  lcol = Label(fcol,text=tcol,font=MyFont)
  ecol = Entry(fcol,text=S_Color,justify=CENTER,font=MyFont,width=ewid)
  lcol.pack(side=LEFT,fill=X)
  ecol.pack(side=RIGHT,fill=X)
  fcol.pack(fill=X)

  S_Bc.set(tvbc)
  fBc = Frame(WEditMag)
  tBc = 'remanence'
  lBc = Label(fBc,text=tBc,font=MyFont)
  eBc = Entry(fBc,text=S_Bc,justify=CENTER,font=MyFont,width=ewid)
  lBc.pack(side=LEFT,fill=X)
  eBc.pack(side=RIGHT,fill=X)
  fBc.pack(fill=X)

  S_Bxn.set(tvbxn)
  fBxn = Frame(WEditMag)
  tBxn = 'x - component'
  lBxn = Label(fBxn,text=tBxn,font=MyFont)
  eBxn = Entry(fBxn,text=S_Bxn,justify=CENTER,font=MyFont,width=ewid)
  lBxn.pack(side=LEFT,fill=X)
  eBxn.pack(side=RIGHT,fill=X)
  fBxn.pack(fill=X)

  S_Byn.set(tvbyn)
  fByn = Frame(WEditMag)
  tByn = 'y - component'
  lByn = Label(fByn,text=tByn,font=MyFont)
  eByn = Entry(fByn,text=S_Byn,justify=CENTER,font=MyFont,width=ewid)
  lByn.pack(side=LEFT,fill=X)
  eByn.pack(side=RIGHT,fill=X)
  fByn.pack(fill=X)

  S_Bzn.set(tvbzn)
  fBzn = Frame(WEditMag)
  tBzn = 'z - component'
  lBzn = Label(fBzn,text=tBzn,font=MyFont)
  eBzn = Entry(fBzn,text=S_Bzn,justify=CENTER,font=MyFont,width=ewid)
  lBzn.pack(side=LEFT,fill=X)
  eBzn.pack(side=RIGHT,fill=X)
  fBzn.pack(fill=X)

  S_Ispec.set(ispec)
  fIspec = Frame(WEditMag)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  S_Key.set(key)
#  fKey = Frame(WEditMag)
#  tKey = 'shape key-word'
#  lKey = Label(fKey,text=tKey,font=MyFont)
#  eKey = Entry(fKey,text=S_Key,justify=CENTER,font=MyFont,width=ewid)
#  lKey.pack(side=LEFT,fill=X)
#  eKey.pack(side=RIGHT,fill=X)
#  fKey.pack(fill=X)

#  if key == 'File':
#    S_CornFile.set(DictCornFiles[cmag])
#    ffile = Frame(WEditMag)
#    tfile = 'filename'
#    lfile = Label(ffile,text=tfile,font=MyFont)
#    efile = Entry(ffile,text=S_CornFile,justify=CENTER,font=MyFont,width=ewid)
#    lfile.pack(side=LEFT,fill=X)
#    efile.pack(side=RIGHT,fill=X)
#    ffile.pack(fill=X)
#  #endif key == 'File'

  S_Xcen.set(tvxcen)
  fXcen = Frame(WEditMag)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  S_Ycen.set(tvycen)
  fYcen = Frame(WEditMag)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  S_Zcen.set(tvzcen)
  fZcen = Frame(WEditMag)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key.find('Block') > -1:

    S_Xlen.set(tvxlen)
    fXlen = Frame(WEditMag)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    S_Ylen.set(tvylen)
    fYlen = Frame(WEditMag)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    S_Zlen.set(tvzlen)
    fZlen = Frame(WEditMag)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    S_ChamfUs.set(tvchus)
    fChUs = Frame(WEditMag)
    tChUs = 'Up-stream chamfer'
    lChUs = Label(fChUs,text=tChUs,font=MyFont)
    eChUs = Entry(fChUs,text=S_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChUs.pack(side=LEFT,fill=X)
    eChUs.pack(side=RIGHT,fill=X)
    fChUs.pack(fill=X)

    S_ChamfDs.set(tvchds)
    fChDs = Frame(WEditMag)
    tChDs = 'Down-stream chamfer'
    lChDs = Label(fChDs,text=tChDs,font=MyFont)
    eChDs = Entry(fChDs,text=S_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChDs.pack(side=LEFT,fill=X)
    eChDs.pack(side=RIGHT,fill=X)
    fChDs.pack(fill=X)

  elif key == 'File':
    pass
  else:
    Quit("In _editMag fehlt noch key " + key)
  #endif key == 'Block'

  S_nXdiv.set(tnxdiv)
  fnXdiv = Frame(WEditMag)
  tnxdiv = 'nXdiv'
  lnXdiv = Label(fnXdiv,text=tnxdiv,font=MyFont)
  enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
  lnXdiv.pack(side=LEFT,fill=X)
  enXdiv.pack(side=RIGHT,fill=X)
  fnXdiv.pack(fill=X)

  S_nYdiv.set(tnydiv)
  fnYdiv = Frame(WEditMag)
  tnydiv = 'nYdiv'
  lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
  enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
  lnYdiv.pack(side=LEFT,fill=X)
  enYdiv.pack(side=RIGHT,fill=X)
  fnYdiv.pack(fill=X)

  S_nZdiv.set(tnzdiv)
  fnZdiv = Frame(WEditMag)
  tnzdiv = 'nZdiv'
  lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
  enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
  lnZdiv.pack(side=LEFT,fill=X)
  enZdiv.pack(side=RIGHT,fill=X)
  fnZdiv.pack(fill=X)

  S_FracDivY.set(tfracdivy)
  fFracDivY = Frame(WEditMag)
  tfracdivy = 'FracDivY'
  lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
  eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
  lFracDivY.pack(side=LEFT,fill=X)
  eFracDivY.pack(side=RIGHT,fill=X)
  fFracDivY.pack(fill=X)

  S_FracDivZ.set(tfracdivz)
  fFracDivZ = Frame(WEditMag)
  tfracdivz = 'FracDivZ'
  lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
  eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
  lFracDivZ.pack(side=LEFT,fill=X)
  eFracDivZ.pack(side=RIGHT,fill=X)
  fFracDivZ.pack(fill=X)

  WEditMag.update()

  widtot = WEditMag.winfo_width()
  wide = eXcen.winfo_width()
  wscale = ewid / wide
  wforce = int(widtot/2.*wscale) + 2

  fCheckRestore = Frame(WEditMag)
  fCheckRestore.pack(fill=X)

  bCheck = Button(fCheckRestore,text='Check',command= lambda mag=imp: _ccWEditMag(mag))
  bCheck.bind('<Return>',lambda event, mag=imp: _ccWEditMag(mag))
  bCheck.pack(expand=TRUE,side=LEFT,fill=X)

  bRestore = Button(fCheckRestore,text='Restore',command= lambda mag=imp: _crWEditMag(mag),width=wforce)
  bRestore.bind('<Return>',lambda event, mag=imp: _crWEditMag(mag))
  bRestore.pack(side=LEFT,fill=X)

  fC = Frame(WEditMag)
  fC.pack(fill=X)

  bClose = Button(fC,text='Ok',command= lambda mag=imp: _clWEditMag(mag),width=wforce)
  bClose.bind('<Return>',lambda event, mag=imp: _clWEditMag(mag))
  bClose.pack(expand=TRUE,side=LEFT,fill=X)

  WEditMag.update()

  #print("Leaving _editMag")

#enddef _editMag(imp)

def _clWallListMags():
  global WallListMags
  WallListMags.destroy()
#enddef _clWallListMags()

def _clWselListMags():
#+seq,uguiglobind.
  global WselListMags
  WselListMags.destroy()
#enddef _clWselListMags()

def _clWdelListMags():
#+seq,uguiglobind.
  global WdelListMags
  WdelListMags.destroy()
#enddef _clWdelListMags()

NMagPolSel = -1
DictMagPolsSel = {}
MagPolsSel = []

def _selectMag(cmag):

  global NMagPolSel, MagPolsSel,DictMagPolsSel,WallListMags, \
  DictMagPolsTot, MyMoth, Moths, NMothSel, DictMothsSel

  #print('_selectMag(cmag):',cmag)
  #print('_selectMag(cmag):',DictMagPolsSel)

  if cmag in DictMagPolsSel:

    #print('_selectMag(cmag): cmag in DictMagPolsSel')

    mag = MagPolsTot[DictMagPolsTot[cmag]]
    cmoth = mag[0][1]
    moth = MyMoth[cmag]

    NMagPolSel -= 1
    DictMagPolsSel.pop(cmag)

    MagPolsSel = []
    dm = {}
    i = -1

    for cm in DictMagPolsSel:
      MagPolsSel.append(cm)
      i += 1
      dm[cm] = i
    #endfor cm in DictMagPolsSel

    DictMagPolsSel = dm

    if NMothSel > 0 and cmoth in DictMothsSel:
      NMothSel -= 1
      DictMothsSel.pop(cmoth)
      MothsSel = []
      dm = {}
      i = -1
      for cm in DictMothsSel:
        MothsSel.append(cm)
        i += 1
        dm[cm] = i
      #endfor cm in DictMothsSel
      DictMothsSel = dm
    #endif NMothSel > 0

  else:

    #print('_selectMag(cmag): cmag NOT in DictMagPolsSel')
    MagPolsSel.append(cmag)
    DictMagPolsSel[cmag] = NMagPolSel
    NMagPolSel += 1

  #endif not mag in DictMagsSel
  _configMagButts()
  WallListMags.update()

#enddef _selectMag(mag)

NMothSel = 0
DictMothsSel = {}
MothsSel = []

def _selectMoth(cmoth):

  global NMothSel, MothsSel,DictMothsSel, DictMoths,DictMagPolsSel

  #print("selecMoth:cmoth",cmoth)

  if cmoth in DictMothsSel:
    moth = DictMoths[cmoth]
    for cmag in Moths[moth]:
      if cmag in DictMagPolsSel:
        _selectMag(cmag)
#        break
      #endif cmag in DictMagPolsSeleted
    #endfor mag in Moths[moth]
  else:
    MothsSel.append(cmoth)
    DictMothsSel[cmoth] = NMothSel
    moth = DictMoths[cmoth]
    NMothSel += 1
    for mag in Moths[moth]: _selectMag(mag)
  #endif not moth in DictMothsSel

#enddef _selectMag(imp)

def _configMagButts():

  global NMagPolSel, MagPolsSel,DictMagPolsSel
  global All_butts, ndmp, NMothSel

  #print('configMagButts()?\n',DictMothsSel,'\n',DictMagPolsSel)
  for i in range(len(All_butts)):
    butts = All_butts[i]
    cmoth = butts[0]['text']
    butts[0].configure(fg= 'black', bg='white')
    cmag = butts[1]['text']
    #print(cmoth,cmag)
    if cmag in DictMagPolsSel:
      for j in range(1,len(All_butts[i])):
        b = All_butts[i][j]
        b.configure(fg= 'black', bg='cyan')
    else:
      for b in All_butts[i]: b.configure(fg= 'black', bg='white')
    #endif cmag in DictMagPolsSel

  for i in range(len(All_butts)):
    butts = All_butts[i]
    cmoth = butts[0]['text']
    if cmoth in DictMothsSel:
      butts[0].configure(fg= 'black', bg='cyan')
    #endif cmag in DictMothsSel
  #endfor i in range(ndmp)
  #print('configMagButts()!\n')

#enddef _configMagButts()

def _selectAll():

  global DictMagPolsSel, DictMothsSel,NMothSel,NMagPolSel,MagPolsSel,MothSel
  global MagPolsTot,Moths

  DictMagPolsSel = {}
  DictMothsSel = {}
  MothsSel = []
  MagPolsSel = []
  NMothSel = 0
  NMagPolSel = 0

  for cmoth in DictMoths:
    imoth = DictMoths[cmoth]
    MothsSel.append(Moths[imoth])
    DictMothsSel[cmoth] = NMothSel
    NMothSel += 1
  #endif

  for mag in MagPolsTot:
    cmag = mag[0][0]
    MagPolsSel.append(cmag)
    DictMagPolsSel[cmag] = NMagPolSel
    NMagPolSel += 1
  #endif

  #print("_selectAll:\n",DictMothsSel,'\n',DictMagPolsSel)

  _configMagButts()
#enddef _selectAll()

def _deselectAll():
  global DictMagPolsSel, DictMothsSel,NMothSel,NMagPolSel,MagPolsSel,MothSel
  DictMagPolsSel = {}
  DictMothsSel = {}
  MothsSel = []
  MagPolsSel = []
  NMothSel = 0
  NMagPolSel = 0
  _configMagButts()
#enddef _deselectAll()

def _listMags(mode='all'):
+seq,uguiglobind.

  global WselListMags, WdelListMags
  global ndmp, WselGeo, WallGeo, WdelGeo
  global all_fmagmoth, all_fmoth, all_fmag, All_butts, all_lastmp, \
  all_firstmp, all_fxyz, all_fbott, all_fpn, bPrev,bCont, all_fb, all_fedi, \
  all_fcop, all_fdel, all_fplot, isopen_all,isopen_sel,isopen_del, \
  all_fplotxy, all_fplotxz, all_fplotyz

  global sel_fmagmoth, sel_fmoth, sel_fmag, sel_butts, sel_lastmp, \
  sel_firstmp, sel_fxyz, sel_fbott, sel_fpn, bPrev,bCont, sel_width, \
  sel_width_old, sel_width_ini, sel_fb, sel_fedi, sel_del, sel_fplot, sel_fcop

  global del_fmagmoth, del_fmoth, del_fmag, del_butts, del_lastmp, \
  del_firstmp, del_fxyz, del_fbott, del_fpn, bPrev,bCont, del_width, \
  del_width_old, del_width_ini, del_fb, del_fedi, del_del, del_fplot, del_fcop

  if not NMagPolTot:
    wError("No magnets or poles defined so far")
    return
  #endif NMagPolTot

  # counter, i.e. indices + 1
  try:
    all_firstmp = all_lastmp + 1
  except:
    EditMag_CheckMode = 0
    CopyMag_CheckMode = 0
    ndmp = 10
    all_firstmp = 1
  #endtry:

  #print('_listMags:mode,all_firstmp',mode,all_firstmp)
  iupdateall = 0
  iupdatesel = 0
  iupdatedel = 0

  try:
    WallGeo = WallListMags.geometry()
    if mode == 'update':
      iupdateall = 1
      mode = 'all'
      WallListMags.destroy()
    #endif
  except: WallGeo = WallMags=""
  try:
    WselGeo = WselListMags.geometry()
    if mode == 'update':
      iupdatesel = 1
      mode = 'selected'
      WselListMags.destroy()
    #endif
  except: WselGeo=""
  try:
    WdelGeo = WdelListMags.geometry()
    if mode == 'update':
      iupdatedel = 1
      mode = 'deleted'
      WalldelMags.destroy()
    #endif
  except: WdelGeo=""

  #print('_listMags:mode,all_firstmp vor update_magnets',mode,all_firstmp)
  update_magnets()
  #print('_listMags:mode,all_firstmp nach update_magnets',mode,all_firstmp)

  if mode == 'all' or iupdateall == 1:

    if mode == 'all':
      all_lastmp = all_firstmp + ndmp - 1
      all_firstmp = 1
      all_lastmp = min(ndmp,NMagPolTot)
    else:
      if all_lastmp > NMagPolTot - 1:
        all_lastmp = NMagPolTot -1
        all_firstmp = all_lastmp - ndmp
      #if all_lastmp > NMagPolTot - 1
      WallListMags.destroy()
    #endif mode == 'all'

    WallListMags = Toplevel()
    WallListMags.title("List of Magnetic Items")
    WallListMags.attributes('-topmost', 1)

    All_butts = []
    all_frames = []

    all_fmagmoth = Frame(WallListMags)
    all_fmoth = Frame(all_fmagmoth)
    all_fmag = Frame(all_fmagmoth)
    all_fkey = Frame(all_fmagmoth)
    all_fxyz = Frame(all_fmagmoth)
    all_fb = Frame(all_fmagmoth)
    all_fedi = Frame(all_fmagmoth)
    all_fdel = Frame(all_fmagmoth)
    all_fcop = Frame(all_fmagmoth)
    all_fplot = Frame(all_fmagmoth)
    all_fplotxy = Frame(all_fmagmoth)
    all_fplotxz = Frame(all_fmagmoth)
    all_fplotzy = Frame(all_fmagmoth)
    all_fsel = Frame(WallListMags)
    all_fbott = Frame(WallListMags)
    all_fpn = Frame(WallListMags)

    all_fmoth.pack(side=LEFT)

    #print("List:",mode,NL,MagPolsTot[0])

    for imp in range(all_lastmp):

      mp = MagPolsTot[imp]

      cmag = mp[0][0]
      cmoth = mp[0][1]

      buttmoth = Button(all_fmoth,text=cmoth,
                        command= lambda moth=cmoth: _selectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)

      buttmag = Button(all_fmag,text=cmag,
                       command= lambda mag = cmag: _selectMag(mag))
      buttmag.pack(side=TOP,fill=X)

      ckey = mp[3]
      buttkey = Button(all_fkey,text=ckey,bg='white')
      buttkey.pack(side=TOP,fill=X)

      mp1 = round(mp[-1][0],3)
      mp2 = round(mp[-1][1],3)
      mp3 = round(mp[-1][2],3)
      txyz = str([mp1,mp2,mp3])
      buttxyz = Button(all_fxyz,text=txyz)
      buttxyz.pack(side=TOP,fill=X)

      vmat = mp[5]

      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])

      mat = vmat[4]

      tb = " P " #Pole

      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        try: tb = str(bc) + sxyz
        except: tb = bc + sxyz
      #endif Variables[mat] == 1

      buttb = Button(all_fb,text=tb)
      buttb.pack(side=TOP,fill=X)

      buttcop = Button(all_fcop,text='Copy',
                       command= lambda mag = imp: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttedi = Button(all_fedi,text='Edit',
                       command= lambda mag = imp: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttdel = Button(all_fdel,text='Delete',
                       command= lambda mag = imp: _delmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttplot = Button(all_fplot,text='Plot 3d',
                       command= lambda mag = imp, key = '3dselected': _plotMag(mag,key))
      buttplot.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotxy,text='XY',
                       command= lambda mag = imp, key = 'xy': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotxz,text='XZ',
                       command= lambda mag = imp, key = 'xz': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotzy,text='ZY',
                       command= lambda mag = imp, key = 'zy': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

#      All_butts.append([buttmoth,buttmag,buttkey,buttxyz,buttb,buttedi,buttcop,\
#      buttdel,buttplot])
      All_butts.append([buttmoth,buttmag,buttkey,buttxyz,buttb])
    #endfor imp in range( NMagPolsTot)

    WallListMags.update()

    if NMagPolTot > ndmp:
      bPrev = Button(all_fpn,text='Previous',command= lambda key='all_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bPlotSel = Button(all_fpn,text='Plot Selection',command= lambda item=-2: _showGeo('3d',item))
      bPlotSel.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(all_fpn,text='Next',command= lambda key='all_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolTot > 0

    #bsel = Button(all_fsel,text='Select All',command=_selectAll)
    #bsel.pack(side=LEFT,expand=TRUE,fill=BOTH)
    #bdsel = Button(all_fsel,text='Deselect All',command=_deselectAll)
    #bdsel.pack(side=RIGHT,expand=TRUE,fill=BOTH)
    bdsel = Button(all_fsel,text='Plot whole device',command=_showGeo)
    bdsel.pack(side=RIGHT,expand=TRUE,fill=BOTH)
    bClose = Button(all_fbott,text='Close',command=_clWallListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    all_fmag.pack(side=LEFT)
    all_fmoth.pack(side=LEFT)
    all_fkey.pack(side=LEFT)
    all_fxyz.pack(side=LEFT)
    all_fb.pack(side=LEFT)
    all_fedi.pack(side=LEFT)
    all_fcop.pack(side=LEFT)
    all_fdel.pack(side=LEFT)
    all_fplot.pack(side=LEFT)
    all_fplotxy.pack(side=LEFT)
    all_fplotxz.pack(side=LEFT)
    all_fplotzy.pack(side=LEFT)

    all_fmagmoth.pack(side=TOP)
    all_fpn.pack(side=TOP,fill=X)
    all_fsel.pack(side=TOP,fill=X)
    all_fbott.pack(side=TOP,fill=X)

    if iupdateall == 1:
      sgeo = WallGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WallListMags.geometry(sgeo)
    else:
      sgeo = Wmaster.geometry().split('+')
      whw = sgeo[0].split('x')
      ww = int(whw[0])
      wh = int(whw[1])
      xw = int(sgeo[1])
      yw = int(sgeo[2])
      x = xw + int(ww/3)
      y = yw + int(wh/10)
      sgeo = '+' + str(x) + '+' + str(y)
      #WallListMags.geometry(sgeo)
    #endif mode == 'update'

    _configMagButts()
    WallListMags.update()

  elif mode == 'all_prev':

    all_lastmp = all_firstmp + ndmp - 1
    all_lastmp = max(all_lastmp-2*ndmp, ndmp)
    all_firstmp = max(all_firstmp-2*ndmp,1)

    ibut = ndmp
    for imp in range(all_lastmp-1,all_firstmp-2,-1):
      mp = MagPolsTot[imp]
      cmag = mp[0][0]
      cmoth = mp[0][1]
      All_butts[ibut-1][0].config(text=cmoth, command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      All_butts[ibut-1][1].config(text=cmag,command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsTot[imp][-1])
      All_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      All_butts[ibut-1][3].configure(text=tb)
      All_butts[ibut-1][4].config(text='Edit',command= lambda mag = imp: _editMag(mag))
      All_butts[ibut-1][5].config(text='Copy',command= lambda mag = imp: _copyMag(mag))
      All_butts[ibut-1][6].config(text='Plot',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(all_lastmp,all_firstmp,-1)

    _configMagButts()
    WallListMags.update()

  elif mode == 'all_next':

    all_lastmp = all_firstmp + ndmp - 1

    if all_lastmp > NMagPolTot - 1:
      all_lastmp = NMagPolTot -1
      all_firstmp = all_lastmp - ndmp
    #if all_lastmp > NMagPolTot - 1

    ibut = ndmp
    for imp in range(all_lastmp-1,all_firstmp-2,-1):
      mp = MagPolsTot[imp]
      cmag = mp[0][0]
      cmoth = mp[0][1]
      All_butts[ibut-1][0].config(text=cmoth, command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      All_butts[ibut-1][1].config(text=cmag,command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsTot[imp][-1])
      All_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      All_butts[ibut-1][3].configure(text=tb)
      All_butts[ibut-1][4].config(text='Edit',command= lambda mag = imp: _editMag(mag))
      All_butts[ibut-1][4].config(text='Copy',command= lambda mag = imp: _copyMag(mag))
      All_butts[ibut-1][5].config(text='Plot',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(all_lastmp,all_firstmp,-1)

    _configMagButts()
    WallListMags.update()

  #endif mode == 'all'

  # counter, i.e. indices + 1
  try:
    sel_firstmp = sel_lastmp + 1
  except:
    ndmp = 10
    sel_firstmp = 1
  #endtry:

  if mode == 'selected' or iupdatesel == 1:

    if NMagPolSel < 0: return

    if mode == 'selected':
      sel_lastmp = sel_firstmp + ndmp - 1
      sel_firstmp = 1
      sel_lastmp = min(ndmp,NMagPolSel)
    else:
      if sel_lastmp > NMagPolSel - 1:
        sel_lastmp = NMagPolSel -1
        sel_firstmp = sel_lastmp - ndmp
      #endif sel_lastmp > NMagPolSel - 1
      mode == 'selected'
    #endif mode == 'selected'

    WselListMags = Toplevel()
    WselListMags.title("List of Selected Magnetic Items")
    WselListMags.attributes('-topmost', 1)

    sel_butts = []
    sel_frames = []

    sel_fmagmoth = Frame(WselListMags)
    sel_fmoth = Frame(sel_fmagmoth)
    sel_fmag = Frame(sel_fmagmoth)
    sel_fxyz = Frame(sel_fmagmoth)
    sel_fb = Frame(sel_fmagmoth)
    sel_fedi = Frame(sel_fmagmoth)
    sel_fdel = Frame(sel_fmagmoth)
    sel_fcop = Frame(sel_fmagmoth)
    sel_fplot = Frame(sel_fmagmoth)
    sel_fbott = Frame(WselListMags)
    sel_fpn = Frame(WselListMags)

    sel_fmoth.pack(side=LEFT)

    sel_width_ini = WselListMags.winfo_reqwidth()
    sel_width = sel_width_ini

    for isel in range(sel_lastmp):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      buttmoth = Button(sel_fmoth,text=cmoth, bg='white',
                        command= lambda moth=cmoth: _selectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)
      buttmag = Button(sel_fmag,text=cmag, bg='white',
                       command= lambda mag = cmag: _selectMag(mag))
      buttmag.pack(side=TOP,fill=X)
      txyz = str(mp[-1])
      buttxyz = Button(sel_fxyz,text=txyz, bg='white')
      buttxyz.pack(side=TOP,fill=X)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        tb = str(bc) + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1

      buttb = Button(sel_fb,text=tb, bg='white')
      buttb.pack(side=TOP,fill=X)

      buttdel = Button(sel_fdel,text='Delete', bg='white',
                       command= lambda mag = imp: _delmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttedi = Button(sel_fedi,text='Edit', bg='white',
                       command= lambda mag = imp: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttcop = Button(sel_fcop,text='Copy', bg='white',
                       command= lambda mag = imp: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttplot = Button(sel_fplot,text='Plot', bg='white',
                       command= lambda mag = imp: _plotMag(mag))
      buttplot.pack(side=TOP,fill=X)

      sel_butts.append([buttmoth,buttmag,buttxyz,buttb,buttedi,buttcop,buttplot])
    #endfor imp in range( NMagPolSel)

    WselListMags.update()

    sel_width_ini = WselListMags.winfo_width()
    sel_width = sel_width_ini

    if NMagPolSel > ndmp:
      bPrev = Button(sel_fpn,text='Previous',command= lambda key='sel_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(sel_fpn,text='Next',command= lambda key='sel_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolSel > 0

    bClose = Button(sel_fbott,text='Ok',command=_clWselListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    sel_fmag.pack(side=LEFT)
    sel_fmoth.pack(side=LEFT)
    sel_fxyz.pack(side=LEFT)
    sel_fb.pack(side=LEFT)
    sel_fedi.pack(side=LEFT)
    sel_fcop.pack(side=LEFT)
    sel_fdel.pack(side=LEFT)
    sel_fplot.pack(side=LEFT)

    sel_fmagmoth.pack(side=TOP)
    sel_fpn.pack(side=TOP,fill=X)
    sel_fbott.pack(side=TOP,fill=X)

    if iupdatesel == 1:
      sgeo = WselGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WselListMags.geometry(sgeo)
    #endif mode == 'update'
    #x,y = Umaster.winfo_pointerxy()
    #sgeo = '+' + str(x) + '+' + str(y)
    #WselListMags.geometry(sgeo)

    WselListMags.update()
    sel_width = WselListMags.winfo_width()
    #sel_width = sel_fmagmoth.winfo_width()
    sel_width_old = sel_width

  elif mode == 'sel_prev':

    sel_lastmp = sel_firstmp + ndmp - 1

    sel_lastmp = max(sel_lastmp-2*ndmp, ndmp)
    sel_firstmp = max(sel_firstmp-2*ndmp,1)

    ibut = ndmp
    for isel in range(sel_lastmp-1,sel_firstmp-2,-1):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      sel_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      sel_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsSel[imp][-1])
      sel_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      sel_butts[ibut-1][3].configure(text=tb)
      sel_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = imp: _editMag(mag))
      sel_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(sel_lastmp,sel_firstmp,-1)

  elif mode == 'sel_next':

    sel_lastmp = sel_firstmp + ndmp - 1

    if sel_lastmp > NMagPolSel - 1:
      sel_lastmp = NMagPolSel -1
      sel_firstmp = sel_lastmp - ndmp
    #if sel_lastmp > NMagPolSel - 1

    ibut = ndmp
    for isel in range(sel_lastmp-1,sel_firstmp-2,-1):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      sel_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      sel_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsSel[imp][-1])
      sel_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      sel_butts[ibut-1][3].configure(text=tb)
      sel_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = imp: _editMag(mag))
      sel_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(sel_lastmp,sel_firstmp,-1)

  #endif mode == 'sel'

  # counter, i.e. indices + 1
  try:
    del_firstmp = del_lastmp + 1
  except:
    ndmp = 10
    del_firstmp = 1
  #endtry:

  if mode == 'deleted' or iupdatedel == 1:

    if NMagPolDel < 0: return

    if mode == 'deleted':
      del_lastmp = del_firstmp + ndmp - 1
      del_firstmp = 1
      del_lastmp = min(ndmp,NMagPolDel)
    else:
      if del_lastmp > NMagPolDel - 1:
        del_lastmp = NMagPolDel -1
        del_firstmp = del_lastmp - ndmp
      #endif del_lastmp > NMagPolDel - 1
      mode == 'delected'
    #endif mode == 'delected'

    WdelListMags = Toplevel()
    WdelListMags.title("List of Delected Magnetic Items")
    WdelListMags.attributes('-topmost', 1)

    del_butts = []
    del_frames = []

    del_fmagmoth = Frame(WdelListMags)
    del_fmoth = Frame(del_fmagmoth)
    del_fmag = Frame(del_fmagmoth)
    del_fxyz = Frame(del_fmagmoth)
    del_fb = Frame(del_fmagmoth)
    del_fedi = Frame(del_fmagmoth)
    del_fdel = Frame(del_fmagmoth)
    del_fcop = Frame(del_fmagmoth)
    del_fplot = Frame(del_fmagmoth)
    del_fbott = Frame(WdelListMags)
    del_fpn = Frame(WdelListMags)

    del_fmoth.pack(side=LEFT)

    del_width_ini = WdelListMags.winfo_reqwidth()
    del_width = del_width_ini

    for idel in range(del_lastmp):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      buttmoth = Button(del_fmoth,text=cmoth, bg='white',
                        command= lambda moth=cmoth: _delectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)
      buttmag = Button(del_fmag,text=cmag, bg='white',
                       command= lambda mag = cmag: _delectMag(mag))
      buttmag.pack(side=TOP,fill=X)
      txyz = str(mp[-1])
      buttxyz = Button(del_fxyz,text=txyz, bg='white')
      buttxyz.pack(side=TOP,fill=X)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        tb = str(bc) + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1

      buttb = Button(del_fb,text=tb, bg='white')
      buttb.pack(side=TOP,fill=X)

      buttdel = Button(del_fdel,text='Restore', bg='white',
                       command= lambda mag = idel: _resmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttedi = Button(del_fedi,text='Edit', bg='white',
                       command= lambda mag = idel: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttcop = Button(del_fcop,text='Copy', bg='white',
                       command= lambda mag = idel: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttplot = Button(del_fplot,text='Plot', bg='white',
                       command= lambda mag = idel: _plotMag(mag))
      buttplot.pack(side=TOP,fill=X)

      del_butts.append([buttmoth,buttmag,buttxyz,buttb,buttedi,buttcop,buttplot])
    #endfor idel in range( NMagPolDel)

    WdelListMags.update()

    del_width_ini = WdelListMags.winfo_width()
    del_width = del_width_ini

    if NMagPolDel > ndmp:
      bPrev = Button(del_fpn,text='Previous',command= lambda key='del_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(del_fpn,text='Next',command= lambda key='del_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolDel > 0

    bClose = Button(del_fbott,text='Ok',command=_clWdelListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    del_fmag.pack(side=LEFT)
    del_fmoth.pack(side=LEFT)
    del_fxyz.pack(side=LEFT)
    del_fb.pack(side=LEFT)
    del_fedi.pack(side=LEFT)
    del_fcop.pack(side=LEFT)
    del_fdel.pack(side=LEFT)
    del_fplot.pack(side=LEFT)

    del_fmagmoth.pack(side=TOP)
    del_fpn.pack(side=TOP,fill=X)
    del_fbott.pack(side=TOP,fill=X)

    if iupdatedel == 1:
      sgeo = WdelGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WdelListMags.geometry(sgeo)
    #endif mode == 'update'
    #x,y = Umaster.winfo_pointerxy()
    #sgeo = '+' + str(x) + '+' + str(y)
    #WdelListMags.geometry(sgeo)

    WdelListMags.update()
    del_width = WdelListMags.winfo_width()
    #del_width = del_fmagmoth.winfo_width()
    del_width_old = del_width

  elif mode == 'del_prev':

    del_lastmp = del_firstmp + ndmp - 1

    del_lastmp = max(del_lastmp-2*ndmp, ndmp)
    del_firstmp = max(del_firstmp-2*ndmp,1)

    ibut = ndmp
    for idel in range(del_lastmp-1,del_firstmp-2,-1):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      del_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _delectMoth(cmoth))
      del_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = idel: _delectMag(cmag))
      txyz = str(MagPolsDel[idel][-1])
      del_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      del_butts[ibut-1][3].configure(text=tb)
      del_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = idel: _editMag(mag))
      del_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = idel: _plotMag(mag))
      ibut -= 1
    #endfor idel in range(del_lastmp,del_firstmp,-1)

  elif mode == 'del_next':

    del_lastmp = del_firstmp + ndmp - 1

    if del_lastmp > NMagPolDel - 1:
      del_lastmp = NMagPolDel -1
      del_firstmp = del_lastmp - ndmp
    #if del_lastmp > NMagPolDel - 1

    ibut = ndmp
    for idel in range(del_lastmp-1,del_firstmp-2,-1):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      del_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _delectMoth(cmoth))
      del_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = idel: _delectMag(cmag))
      txyz = str(MagPolsDel[idel][-1])
      del_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]

      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      del_butts[ibut-1][3].configure(text=tb)
      del_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = idel: _editMag(mag))
      del_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = idel: _plotMag(mag))
      ibut -= 1
    #endfor idel in range(del_lastmp,del_firstmp,-1)

  #endif mode == 'del'

#enddef _listMags()

# +KEEP,listmags,T=PYTHON.}
+KEEP,showgeo,T=PYTHON.
*CMZ :  2.04/11 29/08/2023  14.59.29  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  13.18.56  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.12.52  by  Michael Scheer
*CMZ :  2.04/06 09/07/2023  12.23.11  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  08.28.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  11.43.34  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  11.36.44  by  Michael Scheer
*-- Author :    Michael Scheer   13/10/2020
+seq,unduplgeo.

def _ucoilplot(view='3d', modus='same', item=-1,callkey=''):

  global Coils, Filaments, UnduColors, CurrLoops, NMagPolTot

+self,if=trace.
  print(NL,"trace:: _ucoilplot:",view,modus,item,callkey)
+self.

  if NMagPolTot >= 0 and len(Filaments) == 0:
+self,if=trace.
    print(NL,"trace:: Leaving _ucoilplot, no coils...")
+self.
    return
  #endif

  xmin = 1.e30
  xmax = -1.e30
  ymin = 1.e30
  ymax = -1.e30
  zmin = 1.e30
  zmax = -1.e30

  coiltit = "Coils"
  icoil = -1
  ifound = 0

  for coil in Filaments:

    icoil += 1
    if item > -1 and icoil != item: continue
    coiltit = Coils[icoil][0][1]
    ifound = 1
    for wire in coil:
      xmin = min(xmin,wire[2],wire[5])
      xmax = max(xmax,wire[2],wire[5])
      ymin = min(ymin,wire[3],wire[6])
      ymax = max(ymax,wire[3],wire[6])
      zmin = min(zmin,wire[4],wire[7])
      zmax = max(zmax,wire[4],wire[7])
    #endfor wire in coil

  #endfor coil in Filaments

  dx = (xmax-xmin)*0.1
  dy = (ymax-ymin)*0.1
  dz = (zmax-zmin)*0.1

  if dx == 0.0: dx = 1.
  if dy == 0.0: dy = 1.
  if dz == 0.0: dz = 1.

  if ifound == 0:
    wError("No coils to plot")
+self,if=trace.
    print(NL,"trace:: Leaving _ucoilplot due to error")
+self.
    return
  #endif

  if view.lower() == 'xz' or view.lower() == 'top':

    if not modus == 'same':
      null(xmin-dx,xmax+dx,zmin-dz,zmax+dz)
      txyz(coiltit,"x/mm","z/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        Ax.plot([w[2],w[5]],[w[4],w[7]],color)
      #endfor
    #endfor

  elif view.lower() == 'xy' or view.lower() == 'side':

    if not modus == 'same':
      null(xmin-dx,xmax+dx,ymin-dy,ymax+dy)
      txyz(coiltit,"x/mm","y/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        Ax.plot([w[2],w[5]],[w[3],w[6]],color)
      #endfor
    #endfor

  elif view.lower() == 'yz' or view.lower() == 'beam':

    if not modus == 'same':
      null(zmin-dz,zmax+dz,ymin-dy,ymax+dy)
      txyz(coiltit,"z/mm","y/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        Ax.plot([w[3],w[6]],[w[4],w[7]],color)
      #endfor
    #endfor

  else:

    if not modus == 'same':
      #null3d(xmin-dx,xmax+dx,zmin-dx,zmax+dz,ymin-dy,ymax+dy)
      null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
      txyz(coiltit,"x/mm","z/mm","y/mm")
    #endif

    icoil = -1

    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
      #endfor
#      Ax.plot(
#              [coil[-1][5],coil[0][2]],
#              [coil[-1][7],coil[0][4]],
#              [coil[-1][6],coil[0][3]],
#              color)
    #endfor

  #endif modus

+self,if=trace.
  print(NL,"trace:: Leaving _ucoilplot")
+self.

#enddef _ucoilplot(view='3d', modus='same')

def _h3d(h3d,sx,sy,sz):
  global Hull3D
  Hull3D = []
  for plan in h3d:
    pl = []
    for p in plan:
      xzy = [sx*p[0],sy*p[2],sz*p[1]]
      pl.append(xzy)
    #endfor p in plan
    Hull3D.append(pl)
  #endfor p in plan
#enddef _h3d(h3d,sx,sy,sz)

def plothull3dxzy(isame=0,facecolor='blue',alpha=0.5,edgecolor='black', ishow=1,modus='line'):
+seq,uguiglobind.

  h3d =deepcopy(Hull3D)

  if cIxSym == 'yes' and cIySym == 'yes' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'yes' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'no' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'yes' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'no' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'yes' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'no' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'no' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  #endif cIxSym == 'yes' and cIySym == 'yes' and if cIzSym == 'yes'

#enddef plothull3dxzy(isame=0,facecolor='blue',alpha=0.5,edgecolor='black', ishow=1)

def _plotMag(imp,key='3dselected'):

  if imp>=0:
    cmag = MagPolsTot[imp][0][0]
    if not cmag in DictMagPolsSel: _selectMag(cmag)
  #endif

  #print('plotMag()?\n',imp,key,'\nDictMothsSel:\n',DictMothsSel,\
  #'\nDictMagPolsSel:\n',DictMagPolsSel)

  if len(DictMagPolsSel) == 0:
    wError(" Nothing selected! ")
    return
  #endif

  setisame(0)

  if key == '3d' or key == '3dselected':
    _showGeoPython(modus='3dselected',item=-4,callkey='plotMag')
  else:
    _showGeoPythonXYZ(modus=key,item=-2,callkey='plotMag')
  #endif

#enddef _plotMag(imp,key='3d'):


def _plotSingleMag(imp,key='xy',isame=0,nmodules=0,itrans=1):

  global MagPolsTot,WallListMags,Isame
  global Xmin,Xmax,Zmin,Zmax,Ymin,Ymax
  global Ntcyls

  mp = MagPolsTot[imp]
  cmag = MagPolsTot[imp][0][0]
  cmoth = MagPolsTot[imp][0][1]

  col = mp[5][5]

  if not col in DictUnduColors:
    kcol = int(calc_var(col))
    col = UnduColors[kcol]
  #endif col not in UnduColors

  points = []
  cen = mp[4]

  if isame <= 0:
    store_kdump_kpdf(); optdump(False); optpdf(False)
  #endif

  if isame == 0:
    ms = getmarkersize()
    setmarkersize(0)
  #endif

  xc = calc_var(cen[0])
  yc = calc_var(cen[1])
  zc = calc_var(cen[2])

  if mp[3].find('Block') > -1:

    corns = blockcorners(mp)

    if itrans != 0 and (cmoth in DictTransRotCop or cmag in DictTransRotCop):
      ctr = []
      for c in corns:
        trc = TransRot(cmag,cmoth,c[0],c[1],c[2])
        ctr.append(trc)
      #endfor
      corns = ctr
    #endif

    if key == 'xy':
      for c in corns: points.append([xc+c[0],yc+c[1]])
    elif key == 'xz':
      for c in corns: points.append([xc+c[0],zc+c[2]])
    elif key == 'zy':
      for c in corns: points.append([zc+c[2],yc+c[1]])
    #endif

    verts, iedges, edges, bounds = qhull2d(points)

  elif mp[3] == 'File' or mp[3] == 'Corners':

    for ic in range(len(mp[7])):

      c1 = xc + calc_var(mp[7][ic][0])
      c2 = yc + calc_var(mp[7][ic][1])
      c3 = zc + calc_var(mp[7][ic][2])

      if itrans != 0 and (cmoth in DictTransRotCop or cmag in DictTransRotCop):
        trc = TransRot(cmag,cmoth,c[0],c[1],c[2])
      else:
        trc = [c1,c2,c3]
      #endif
      if key == 'xy':
        pass
        #c1 = xc + calc_var(mp[7][ic][0])
        #c2 = yc + calc_var(mp[7][ic][1])
      elif key == 'xz':
        c2 = c3
      elif key == 'zy':
        c1 = c3
      #endif

      points.append([c1,c2])

    #endfor ic in range(len(mp[7]))

    verts, iedges, edges, bounds = qhull2d(points)

  elif mp[3] == 'Cylinder':
    ifound = 0
    for ntc in Ntcyls:
      if ntc[1][0][0] == cmag:

        imag = DictMagPolsTot[cmag]
        cen = MagPolsTot[imag][4]

        xc = calc_var(cen[0])
        yc = calc_var(cen[1])
        zc = calc_var(cen[2])

        cen = [xc,yc,zc]

        poly,bounds = cylinderpoly(ntc[2])
        verts = poly

        bounds = [1.e30,-1.e30,1.e30,-1.e30,1.e30,-1.e30]

        iedges = []
        edges = []

        for pgn in poly:

          n = len(pgn)

          for i in range(n):

            j = i + 1
            if j == n: j = 0

            q1 = pgn[i]
            p1 = [q1[0] + xc,q1[1] + yc,q1[2] + zc]
            q2 = pgn[j]
            p2 = [q2[0] + xc,q2[1] + yc,q2[2] + zc]

            if itrans != 0:
              if cmoth in DictTransRotCop or cmag in DictTransRotCop:
                p1 = TransRot(cmag,cmoth,p1[0],p1[1],p1[2])
                p2 = TransRot(cmag,cmoth,p2[0],p2[1],p2[2])
              #endif
            #endif

            if p1[0] < bounds[0]: bounds[0] = p1[0]
            if p2[0] < bounds[0]: bounds[0] = p2[0]
            if p1[0] > bounds[1]: bounds[1] = p1[0]
            if p2[0] > bounds[1]: bounds[1] = p2[0]
            if p1[1] < bounds[2]: bounds[2] = p1[1]
            if p2[1] < bounds[2]: bounds[2] = p2[1]
            if p1[1] > bounds[3]: bounds[3] = p1[1]
            if p2[1] > bounds[3]: bounds[3] = p2[1]
            if p1[2] < bounds[4]: bounds[4] = p1[2]
            if p2[2] < bounds[4]: bounds[4] = p2[2]
            if p1[2] > bounds[5]: bounds[5] = p1[2]
            if p2[2] > bounds[5]: bounds[5] = p2[2]

            if key == 'xy':
              edges.append([[p1[0],p1[1]],[p2[0],p2[1]]])
            elif key == 'xz':
              edges.append([[p1[0],p1[2]],[p2[0],p2[2]]])
            elif key == 'zy':
              edges.append([[p1[2],p1[1]],[p2[2],p2[1]]])
            #endif
            iedges.append([i,j])
          #endfor pgn
        #endfor poly
        break
      #endif cmag
    #endfor Ntcyls

    if key == 'xy':
      pass
    elif key == 'xz':
      bounds[2]= bounds[4]
      bounds[3]= bounds[5]
    elif key == 'zy':
      bounds[0]= bounds[4]
      bounds[1]= bounds[5]
    #endif

  else:
    print('\n*** ', mp[3], 'noch in  _plotSingleMag einfuegen\n')
  #endif type of magnet

  edges = np.array(edges)

  if nmodules <= 0 or itrans == 0:
    for ed in edges:
      et = ed.T
      plt.plot(et[0],et[1],c=col)
    #endfor

  else:

    for m in range(nmodules):

      nper,[tx,ty,tz],rm,ang = _module_to_shift_and_rot(m)

      xrmin = 1.e30
      xrmax = -1.e30
      yrmin = 1.e30
      yrmax = -1.e30
      zrmin = 1.e30
      zrmax = -1.e30

      for ed in edges:
        if ang != 0:
          edr = []
          for i in range(len(ed)):
            if key == 'xy':
              x = ed[i][0]
              y = ed[i][1]
              xr = r[0][0]*x + r[0][1]*y
              yr = r[1][0]*x + r[1][1]*y
              if xr < xrmin: xrmin = xr
              if xr > xrmax: xrmax = xr
              if yr < yrmin: yrmin = yr
              if yr > yrmax: yrmax = yr
            elif key == 'xz':
              x = ed[i][0]
              y = ed[i][2]
              xr = r[0][0]*x + r[0][2]*y
              yr = r[2][0]*x + r[2][2]*y
              if xr < xrmin: xrmin = xr
              if xr > xrmax: xrmax = xr
              if yr < zrmin: zrmin = yr
              if yr > zrmax: zrmax = yr
            #endif
            elif key == 'zy':
              x = ed[i][2]
              y = ed[i][1]
              xr = r[2][2]*x + r[2][1]*y
              yr = r[1][2]*x + r[2][1]*y
              if xr < zrmin: zrmin = xr
              if xr > zrmax: zrmax = xr
              if yr < yrmin: yrmin = yr
              if yr > yrmax: yrmax = yr
            #endif
            edr.append([xr,yr])
          #endfor
          edr = np.array(edr)
          bounds = [xrmin,xrmax,yrmin,yrmax]
        else:
          edr = np.array(edges)
        #endif
      #endfor edges

      for iper in range(nper):

        ett = []
        for e in edr:
          et = e.T
          ett.append(et)
        #endfor

        for e in ett:
          e[0] += iper * tx
          e[1] += iper * ty
          plt.plot(e[0],e[1],c=col)
        #endfor

      #endfor nper

      if nper > 1:
        if key == 'xy':
          tx = (nper-1) * tx
          ty = (nper-1) * ty
        elif key == 'xz':
          tx = (nper-1) * tx
          ty = (nper-1) * tz
        elif key == 'zy':
          tx = (nper-1) * tz
          ty = (nper-1) * ty
        #endif
        if tx > 0: bounds[1] += tx
        else: bounds[0] -= tx
        if ty > 0: bounds[3] += ty
        else: bounds[2] -= ty
      #endif

    #endfor nmodules

  #endif

  return bounds

#enddef _plotSingleMag(imp)

def _showGeo(modus='3d',item=-1,kseg=0,callkey=''):
+self,if=trace.
  print(NL,"trace:: _showGeo:",modus,item,kseg,callkey)
+self.
  if modus == 'undu3d' or modus == 'eps':
    _showGeoUndu(modus,item,1,callkey='showGeo')
  else:
    _showGeoPython(modus,item,callkey='showGeo')
+self,if=trace.
    print(NL,"trace:: Leaving _showGeo")
+self.
#enddef _showGeo(modus='3d',item=-1,kseg=0)

def _module_to_shift_and_rot(imodu):
  global Modules

  mo = Modules[imodu]

  lcen = mo[0]

  w = lcen.split()

  offx = calc_var(w[0])
  offy = calc_var(w[1])
  offz = calc_var(w[2])

  nper = calc_var(mo[1])
  s = mo[2].split()

  perlen = calc_var(s[0])

  vspace = [calc_var(s[1]),calc_var(s[2]),calc_var(s[3])]
  ang = calc_var(s[4])

  cen = [0.0,0.0,0.0]
  vin = [1.0,0.0,0.0]
  istat, vdum, rm = util_rotate(cen,vspace,ang,vin)

  rot11 = rm[0][0]; rot12 = rm[0][1]; rot13 = rm[0][2]
  rot21 = rm[1][0]; rot22 = rm[1][1]; rot23 = rm[1][2]
  rot31 = rm[2][0]; rot32 = rm[2][1]; rot33 = rm[2][2]

  tx = vspace[0] * perlen
  ty = vspace[1] * perlen
  tz = vspace[2] * perlen

  w = mo[3].split()

  bsx = calc_var(w[0])
  bsy = calc_var(w[1])
  bsz = calc_var(w[2])

  return nper,[tx,ty,tz],rm,ang
#enddef _module_to_shift_and_rot(imodu)

def _showGeoPython(modus='3d',item=-1,callkey=''):

+seq,uguiglobind.
+seq,UnduColorsind.

+self,if=trace,debugsgp.
  print(NL,"trace:: _showGeoPython:",modus,item,callkey)
+self.

  isameo = getisame()

  if not isameo: zone(1,1)

  if NMagPolTot == 0 and len(Filaments) == 0:
    print("Nothing to plot!")
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPython")
+self.
    return
  #endif NMagPolTot == 0

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30
  zplmin = 1.e30
  zplmax = -1.e30

  if not NMagPolTot:
    _ucoilplot('3d','notsame',callkey='ShowGeoPython')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPython after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: showGeoPython")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  if item == -4 and len(DictMagPolsSel) == 0:
    wError(" Nothing selected! ")
    return
  #endif

  plopt = ''

  Kpdf = False
  Kdump = False
  Kecho = False

  dot()
  getzone('3d')

  null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
  setisame(1)

  if len(Filaments) and modus == '3d': _ucoilplot(callkey='ShowGeoPython')

  if item == -3: nmodul = 1
  else: nmodul = Nmodul

  for mm in range(nmodul):

    nper,[tx,ty,tz],rm,ang = _module_to_shift_and_rot(mm)

    if item == -3: nper = 1

    rot11 = rm[0][0]; rot12 = rm[0][1]; rot13 = rm[0][2]
    rot21 = rm[1][0]; rot22 = rm[1][1]; rot23 = rm[1][2]
    rot31 = rm[2][0]; rot32 = rm[2][1]; rot33 = rm[2][2]

    w = Modules[mm][3].split()
    bsx = calc_var(w[0])
    bsy = calc_var(w[1])
    bsz = calc_var(w[2])

    nmp = NMagPolTot

    if item == -4:
      nmp = NMagPolSel
    #endif

    for imp in range(nmp):

      if item == -4:
        cmag = MagPolsSel[imp]
        imag = DictMagPolsTot[cmag]
        mp = MagPolsTot[imag]
        print(mp)
      else:
        mp = MagPolsTot[imp]
      #endif

      sspec = str(mp[2])

      if sspec == '1' or sspec == 'yes': ispec=1
      else: ispec = 0

      if item == -2 and ispec !=0: continue # skip specials
      if item == -3 and ispec ==0: continue # only specials

      cmag = mp[0][0]
      cmoth = mp[0][1]

      col = mp[5][5]

      if not col in DictUnduColors:
        kcol = int(calc_var(col))
        col = UnduColors[kcol]
      #endif col not in UnduColors

      points = []
      iscyl = 0

      cen = mp[4]

      xc = calc_var(cen[0])
      yc = calc_var(cen[1])
      zc = calc_var(cen[2])

      if mp[3].find('Block') > -1:

        corns = blockcorners(mp)

        for corn in corns:

          xx = corn[0]; yy = corn[1]; zz = corn[2]

          if callkey != 'plotMag':
            if cmoth in DictTransRotCop or cmag in DictTransRotCop:
              t = TransRot(cmag,cmoth,xx,yy,zz)
              xx = t[0]
              yy = t[1]
              zz = t[2]
              #print("t:",cmag,yy,t[2])
            #endif
            x = xc + rot11*xx + rot12*yy + rot13*zz
            y = yc + rot21*xx + rot22*yy + rot23*zz
            z = zc + rot31*xx + rot32*yy + rot33*zz
          else:
            x = xc
            y = yc
            z = zc
          #endif

          points.append([x,y,z])

        #endfor corn in corns

      elif mp[3] == 'File' or mp[3] == 'Corners':

        for ic in range(len(mp[7])):

          xx = xc + calc_var(mp[7][ic][0])
          yy = yc + calc_var(mp[7][ic][1])
          zz = zc + calc_var(mp[7][ic][2])

          if callkey != 'plotMag':
            if cmoth in DictTransRotCop or cmag in DictTransRotCop:
              t = TransRot(cmag,cmoth,c1,c2,c3)
              xx = t[0]
              yy = t[1]
              zz = t[2]
            #endif
            x = xc + rot11*xx + rot12*yy + rot13*zz
            y = yc + rot21*xx + rot22*yy + rot23*zz
            z = zc + rot31*xx + rot32*yy + rot33*zz
          else:
            x = xc
            y = yc
            z = zc
          #endif

          points.append([x,y,z])

        #endfor ic in range(len(mp[7]))

      elif mp[3] == 'Cylinder':
        iscyl = 1
      else:
        Quit("_showGeoPython: " + mp[3] + " hier einfügen")
      #endif mp[3] == 'Block'

      dtx = -tx; dty = -ty; dtz = -tz

      mper = nper

      for iper in range(mper):

        if not iscyl:

          pp = []

          for p in points:
            pp.append([p[0]+dtx,p[1]+dty,p[2]+dtz])
          #endfor p in points

          verts,ifaces,faces,bounds = hull3d(pp)
          plothull3dxzy(isame=1,edgecolor=col,ishow=0,modus='line')

          if bounds[0] < xplmin: xplmin = bounds[0]
          if bounds[1] > xplmax: xplmax = bounds[1]
          if bounds[2] < yplmin: yplmin = bounds[2]
          if bounds[3] > yplmax: yplmax = bounds[3]
          if bounds[4] < zplmin: zplmin = bounds[4]
          if bounds[5] > zplmax: zplmax = bounds[5]

        else: #iscyl

          for ntc in Ntcyls:
            if ntc[1][0][0] == cmag:

              poly,bounds = cylinderpoly(ntc[2])

              for pgn in poly:

                pp = []

                for poi in pgn:

                  p = [poi[0] + xc,poi[1] + yc,poi[2] + zc]

                  if callkey != 'plotMag':
                    if cmoth in DictTransRotCop or cmag in DictTransRotCop:
                      p = TransRot(cmag,cmoth,p[0],p[1],p[2])
                    #endif
                    if ang != 0:
                      x = rot11*p[0] + rot12*p[1] + rot13*p[3] + dtx
                      y = rot21*p[0] + rot22*p[1] + rot23*p[3] + dty
                      z = rot31*p[0] + rot32*p[1] + rot33*p[3] + dtz
                    else:
                      x = p[0] + dtx
                      y = p[1] + dty
                      z = p[2] + dtz
                    #endif
                  else:
                    x = p[0]
                    y = p[1]
                    z = p[2]
                  #endif

                  if x < xplmin: xplmin = x
                  if x > xplmax: xplmax = x
                  if y < yplmin: yplmin = y
                  if y > yplmax: yplmax = y
                  if z < zplmin: zplmin = z
                  if z > zplmax: zplmax = z

                  pp.append([x,y,z])

                #endfor

                pt = np.array(pp).T
                vplxyz(pt[0],pt[2],pt[1],'samelineclosed',color=col)

              #endfor
              break
            #endif
          #endfor

        #endif iscyl

        if ispec != 0: break
        dtx += tx; dty += ty; dtz += tz

      #endfor iper in range(1,nper+1):

    #endfor mag in range(nmag)

    if ispec != 0: break
  #endfor mm in range(Nmodul)

  dx = (xplmax - xplmin) * 0.05
  dy = (yplmax - yplmin) * 0.05
  dz = (zplmax - zplmin) * 0.05

  ax = plt.gca()

  ax.set_xlim(xplmin-dx,xplmax+dx)
  ax.set_zlim(yplmin-dy,yplmax+dy)
  ax.set_ylim(zplmin-dz,zplmax+dz)

  txyz(Ucomment,"x [mm]","z [mm]","y [mm]")

  setisame(isameo)

#enddef _showGeoPython(modus='3d',item=-1)

def _showGeoPythonXYZ(modus='xy',item=-1,callkey=''):

+seq,uguiglobind.
+seq,UnduColorsind.

+self,if=trace,debugsgp.
  print(NL,"trace:: _showGeoPythonXYZ:",modus,item,callkey)
+self.

  isameo = getisame()

  if not isameo: zone(1,1)

  if NMagPolTot == 0 and len(Filaments) == 0:
    print("Nothing to plot!")
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ")
+self.
    return
  #endif NMagPolTot == 0

  isameo = getisame()

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30
  zplmin = 1.e30
  zplmax = -1.e30

  if not NMagPolTot:
    _ucoilplot(modus,'notsame',callkey='ShowGeoPythonXYZ')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: showGeoPythonXYZ")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  dot()
  getzone()

  plopt = ''

  Kpdf = False
  Kdump = False
  Kecho = False

  kgo = getgrid()
  if kgo: optgrid()
  setishow(0)

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30

  null()

  itrans = 1
  if callkey == 'plotMag': itrans = 0

  if item == -4: # specials

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 0: continue
      bounds = _plotSingleMag(imag,modus,1,0,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  elif item == -2: #selected

    for cmag in MagPolsSel:
      imag = DictMagPolsTot[cmag]
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      print(bounds)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor


  elif item == -3: # periodic

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 1: continue
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  else: # all

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 0: itrans = 1
      else: itrans = 0
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  #endif item

  dx = (xplmax - xplmin) * 0.05
  dy = (yplmax - yplmin) * 0.05

  ax = plt.gca()

  ax.set_xlim(xplmin-dx,xplmax+dx)
  ax.set_ylim(yplmin-dy,yplmax+dy)

  setishow(1)

  if modus == 'xy':
    txyz(Ucomment,"x [mm]","y [mm]")
  elif modus == 'xz':
    txyz(Ucomment,"x [mm]","z [mm]")
  elif modus == 'zy':
    txyz(Ucomment,"z [mm]","y [mm]")
  #endif

  if not NMagPolTot:
    _ucoilplot(modus,'notsame',callkey='ShowGeoPythonXYZ')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: Leaving _showGeoPythonXYZ")
+self.

  setisame(isameo)

#enddef _showGeoPythonXYZ(modus='3d',item=-1)

def _showGeoUndu(modus='3d',item=-1,kseg=0,callkey=''):
+seq,uguiglobind.
+seq,UnduColorsind.

  isameo = get_isame()
  print("_showGeoUndu:",modus,item,kseg,callkey)
  print("_showGeoUndu:MustUpdate:",MustUpdate)

  Rmodus = 'SEGMENTATION STDOUT=undumag.lun6'

  if NMagPolTot == 0:
    print("Nothing to plot!")
    return
  #endif NMagPolTot == 0

  if MustUpdate:
+self,if=debpy.
    Quit("*** _undumag in showgeo wegen MustUpdate ***")
+self.

    _undumag("showGeoUndu")  #run undumag

    if nexist("Ngeo"): Ngeo = ndelete("Ngeo")
    Ngeo = ncread("Ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
    MustUpdate = 0

  #endif MustUpdate

  if modus == 'undu3d':

    if item < 0:

      if not nexist("Ngeo"):
        Ngeo = ncread("Ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
      #endif not nexist("Ngeo")

      plopt = ''

      Kpdf = False
      Kdump = False
      Kecho = False

      dot()
      getzone('3d')
      #nplot("Ngeo","x:z:y","mag<10")
      nmag = int(Ngeo.mag.max())

      xmin = Ngeo.x.min()
      xmax = Ngeo.x.max()
      ymin = Ngeo.y.min()
      ymax = Ngeo.y.max()
      zmin = Ngeo.z.min()
      zmax = Ngeo.z.max()

      dx = (xmax - xmin) / 10.
      dy = (ymax - ymin) / 10.
      dz = (zmax - zmin) / 10.

      #null3d(xmin-dx,xmax+dx,zmin-dz,zmax+dz,ymin-dy,ymax+dy)
      null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
      txyz(Ucomment,"x [mm]","z [mm]", "y [mm]")

      for mag in range(nmag):
        selmag = 'mag==' + str(mag+1)
        kcol = Ngeo.query(selmag + ' and iplan==1 and icorn==1').icol.max()
        col = UnduColors[kcol]
        mhull3d(Ngeo,"x:z:y",selmag,edgecolor=col,isame=1)
      #endfor mag in range(nmag)

    #endif item < 0

  elif modus == 'eps':
    eps = Image.open('undumag.eps')
    eps.show()
  #endif modus == '3d'

  Isame = isameo

+self,if=trace.
  print(NL,"trace:: Leaving _showGeoUndu",NL)
+self.

#enddef _showGeoUndu(modus)
+KEEP,ureadclc,T=PYTHON.
*CMZ :  2.04/11 28/08/2023  14.47.53  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  12.18.59  by  Michael Scheer
*CMZ :  2.04/09 16/08/2023  22.49.41  by  Michael Scheer
*CMZ :  2.04/06 09/07/2023  10.46.00  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  09.21.13  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  06.51.21  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  12.16.54  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 17/03/2021  12.15.56  by  Michael Scheer
*-- Author :    Michael Scheer   14/10/2020
+seq,utransrotcop.
+seq,chtransrotcop.

def undumag_wind_to_fila(coilin):
  global Filaments, Coils, CurrLoops, DictUnduColors,UnduColors

  if coilin[0][0].upper() != 'RECTWINDINGS':
    wError("Unknown coil type " + coilin[0] + " in undumag_wind_to_fila")
    return
  #if coil[0].upper() != 'RECTWINDINGS'

  print("wind_to_fila:",NL,coilin)
  debug("debug: Wind")

  coil = []
  for v in coilin[1]:
    try:
      val = calc_var(v)
      coil.append(val)
    except:
      wError("  Error in undumag_wind_to_fila: Could not resolve " + str(v) + "   ")
      return
  #endfor v in coil

  kcolor = int(coil[18])

  x0 = float(coil[3])
  y0 = float(coil[4])
  z0 = float(coil[5])

  vx = float(coil[6])
  vy = float(coil[7])
  vz = float(coil[8])

  vn = np.sqrt(vx**2+vy**2+vz**2)
  if vn == 0.0:
    wError("*** Error in undumag_wind_to_fila: Zero normal vector for coil")
    return
  #endif vn == 0.0

  alpha = float(coil[9])

  xo = float(coil[10]/2.0)
  zi = float(coil[11]/2.0)
  zo = float(coil[12]/2.0)
  ri = float(coil[13])
  h = float(coil[14])

  ny = int(coil[15])
  nz = int(coil[16])
  nphi = int(coil[17])

  kolor = int(coil[18])

  w=zo-zi
  xi=xo-w
  ro=ri+w

  yc=0.0

  if xi < ri:
    wError("*** Error in undumag_wind_to_fila: The inner length is smaller than twice the inner radius ***")
    return
  #endif xi < ri

  dphi=pi/2.0/nphi
  dy=h/ny
  dz=w/nz

  z = []
  for iz in range(nz):
    z.append(zi+(iz+0.5)*dz)
  #endfor

  y = []
  for iy in range(ny):
    y.append(yc-h/2.0+(iy+0.5)*dy)
  #endfor

  fila = []

  ielem = 0
  for iy in range(ny):
    for iz in range(nz):

      # first x bar
      wire = []
      wire.append(xi-ri)
      wire.append(+y[iy])
      wire.append(-z[iz])
      wire.append(-xi+ri)
      wire.append(+y[iy])
      wire.append(-z[iz])
      wire.append(kolor)
#      wire.append(1)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # first arc

      xc=-xi+ri
      zc=-zi+ri

      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc-r*sinphi1)
        wire.append(+y[iy])
        wire.append(+zc-r*cosphi1)
        wire.append(+xc-r*sinphi2)
        wire.append(+y[iy])
        wire.append(+zc-r*cosphi2)
        wire.append(kolor)
#        wire.append(2)
        wire.append(iy)
        wire.append(iz)
        fila.append(wire)
        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)

      # first z bar

      wire = []
      wire.append(-xi-(iz+0.5)*dz)
      wire.append(+y[iy])
      wire.append(-zi+ri)
      wire.append(wire[0])
      wire.append(+y[iy])
      wire.append(+zi-ri)
      wire.append(kolor)
#      wire.append(3)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # second arc

      xc=-xi+ri
      zc=zi-ri
      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc-r*cosphi1)
        wire.append(+y[iy])
        wire.append(+zc+r*sinphi1)
        wire.append(+xc-r*cosphi2)
        wire.append(+y[iy])
        wire.append(zc+r*sinphi2)
        wire.append(kolor)
#        wire.append(4)
        wire.append(iy)
        wire.append(iz)

        fila.append(wire)

        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)

      # second x bar

      wire = []
      wire.append(-xi+ri)
      wire.append(+y[iy])
      wire.append(z[iz])
      wire.append(+xi-ri)
      wire.append(+y[iy])
      wire.append(z[iz])
      wire.append(kolor)
#      wire.append(5)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # third arc

      xc=xi-ri
      zc=zi-ri

      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc+r*sinphi1)
        wire.append(+y[iy])
        wire.append(+zc+r*cosphi1)
        wire.append(+xc+r*sinphi2)
        wire.append(+y[iy])
        wire.append(+zc+r*cosphi2)
        wire.append(kolor)
#        wire.append(6)
        wire.append(iy)
        wire.append(iz)

        fila.append(wire)

        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)

      # second z bar
      wire = []
      wire.append(+xi+(iz+0.5)*dz)
      wire.append(+y[iy])
      wire.append(+zi-ri)
      wire.append(wire[0])
      wire.append(+y[iy])
      wire.append(-zi+ri)
      wire.append(kolor)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # fourth arc
      xc=xi-ri
      zc=-zi+ri
      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc+r*cosphi1)
        wire.append(+y[iy])
        wire.append(+zc-r*sinphi1)
        wire.append(+xc+r*cosphi2)
        wire.append(+y[iy])
        wire.append(+zc-r*sinphi2)
        wire.append(kolor)
#        wire.append(2)
        wire.append(iy)
        wire.append(iz)

        fila.append(wire)
        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)
    #endfor iz
  #endfor iy

  #rotate and translate coil

  vx = vx/vn
  vy = vy/vn
  vz = vz/vn

  istat, rotmat =  util_rotate_vector_to_y_axis([vx,vy,vz])

  rmat = deepcopy(rotmat)
  for i in range(3):
    for j in range(3):
      rmat[i][j]=rotmat[j][i]
    #endfor j in range(3)
  #endfor i in range(3)

  cosa=np.cos(alpha/180.0*pi)
  sina=np.sin(alpha/180.0*pi)

  currloopx = []
  currloopy = []
  currloopz = []

  iw = -1
  for wire in fila:

    iw += 1

    wx=cosa*wire[0]+sina*wire[2]
    wy=wire[1]
    wz=-sina*wire[0]+cosa*wire[2]

    fila[iw][0]=rmat[0][0]*wx+rmat[0][1]*wy+rmat[0][2]*wz+x0
    fila[iw][1]=rmat[1][0]*wx+rmat[1][1]*wy+rmat[1][2]*wz+y0
    fila[iw][2]=rmat[2][0]*wx+rmat[2][1]*wy+rmat[2][2]*wz+z0

    wx=cosa*wire[3]+sina*wire[5]
    wy=wire[4]
    wz=-sina*wire[3]+cosa*wire[5]

    fila[iw][3]=rmat[0][0]*wx+rmat[0][1]*wy+rmat[0][2]*wz+x0
    fila[iw][4]=rmat[1][0]*wx+rmat[1][1]*wy+rmat[1][2]*wz+y0
    fila[iw][5]=rmat[2][0]*wx+rmat[2][1]*wy+rmat[2][2]*wz+z0

    currloopx.append(fila[iw][0])
    currloopy.append(fila[iw][1])
    currloopz.append(fila[iw][2])

  #endfor w in fila

  currloopx.append(currloopx[0])
  currloopy.append(currloopy[0])
  currloopz.append(currloopz[0])

  CurrLoops.append([kcolor,currloopx,currloopy,currloopz])

  Filaments.append(fila)

#enddef undumag_wind_to_fila(coil)

def util_rotate_vector_to_y_axis(vin):

  istat=0
  vn=np.sqrt(vin[0]**2+vin[1]**2+vin[2]**2)

  rotmat=[[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0]]

  if vn == 0.0:
    istat=-1
    return istat, rotmat
  #endif

  vx=vin[0]/vn
  vy=vin[1]/vn
  vz=vin[2]/vn

  if vx**2+vz**2 > 1.0e-9:
    cosphi=vx/np.sqrt(vx**2+vz**2)
    sinphi=vz/np.sqrt(vx**2+vz**2)
  else:
    cosphi=1.0e0
    sinphi=0.0e0
  #endif

  wx=cosphi*vx+sinphi*vz
  wy=vy
  wz=-sinphi*vx+cosphi*vz

  if wx**2+wy**2 > 1.0e-9:
    costhe=wy/np.sqrt(wx**2+wy**2)
    sinthe=wx/np.sqrt(wx**2+wy**2)
  else:
    costhe=1.0e0
    sinthe=0.0e0
  #endif

  rotphi = deepcopy(rotmat)
  rotthe = deepcopy(rotmat)

  rotphi[0][0]=cosphi
  rotphi[0][1]=0.0e0
  rotphi[0][2]=sinphi

  rotphi[1][0]=0.0e0
  rotphi[1][1]=1.0e0
  rotphi[1][2]=0.0e0

  rotphi[2][0]=-sinphi
  rotphi[2][1]=0.0e0
  rotphi[2][2]=cosphi

  rotthe[0][0]=costhe
  rotthe[0][1]=-sinthe
  rotthe[0][2]=0.0e0

  rotthe[1][0]=sinthe
  rotthe[1][1]=costhe
  rotthe[1][2]=0.0e0

  rotthe[2][0]=0.0e0
  rotthe[2][1]=0.0e0
  rotthe[2][2]=1.0e0

  rotmat[0][0] = \
  rotthe[0][0]*rotphi[0][0]+rotthe[0][1]*rotphi[1][0]+rotthe[0][2]*rotphi[2][0]
  rotmat[0][1] = \
  rotthe[0][0]*rotphi[0][1]+rotthe[0][1]*rotphi[1][1]+rotthe[0][2]*rotphi[2][1]
  rotmat[0][2] = \
  rotthe[0][0]*rotphi[0][2]+rotthe[0][1]*rotphi[1][2]+rotthe[0][2]*rotphi[2][2]

  rotmat[1][0] = \
  rotthe[1][0]*rotphi[0][0]+rotthe[1][1]*rotphi[1][0]+rotthe[1][2]*rotphi[2][0]
  rotmat[1][1] = \
  rotthe[1][0]*rotphi[0][1]+rotthe[1][1]*rotphi[1][1]+rotthe[1][2]*rotphi[2][1]
  rotmat[1][2] = \
  rotthe[1][0]*rotphi[0][2]+rotthe[1][1]*rotphi[1][2]+rotthe[1][2]*rotphi[2][2]

  rotmat[2][0] = \
  rotthe[2][0]*rotphi[0][0]+rotthe[2][1]*rotphi[1][0]+rotthe[2][2]*rotphi[2][0]
  rotmat[2][1] = \
  rotthe[2][0]*rotphi[0][1]+rotthe[2][1]*rotphi[1][1]+rotthe[2][2]*rotphi[2][1]
  rotmat[2][2] = \
  rotthe[2][0]*rotphi[0][2]+rotthe[2][1]*rotphi[1][2]+rotthe[2][2]*rotphi[2][2]

  return istat,rotmat
#enddef util_rotate_vector_to_y_axis(vin,rotmat,istat)

def undu_coils_to_filaments(kcoil=-1,callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print(NL,"trace:: undu_coils_to_filaments",kcoil,callkey,NL)
+self.

  if len(Coils) == 0:
    Filaments = []
    return
  #endif

  Fclc = open("filaments.clc","w")
  Fclc.write("& User_Comment\nCoils to Filaments\n\n")

  fil = []
  if kcoil > -1:
    filo = deepcopy(Filaments)
  #endif

  write_variables(Fclc)
  write_coils(Coils,Fclc,kcoil)

  Fclc.close()

  Rmodus = 'FILAMENTS STDOUT=undumag.lun6'
  _undumag("Filaments")

  #Quit("Ende nach undumag")

+self,if=trace.
  print(NL,"trace:: Leaving undu_coils_to_filaments",NL)
+self.
#enddef undu_coils_to_filaments()

def blockcorners(mp):

  cen = mp[4]
  siz = mp[6]
  #print(NL,NL,mp)

  xcen = cen[0]
  ycen = cen[1]
  zcen = cen[2]

  xcen = calc_var(xcen)
  ycen = calc_var(ycen)
  zcen = calc_var(zcen)

  typ = mp[3]

  if typ.find('Block') > -1:
    siz = mp[6]
    xcen = calc_var(xcen)
    ycen = calc_var(ycen)
    zcen = calc_var(zcen)
    x = calc_var(siz[0]) / 2.
    y = calc_var(siz[1]) / 2.
    z = calc_var(siz[2]) / 2.
    chamf = calc_var(siz[3])
  #endif typ.find('Block') > -1

  if typ == 'Block':
    corns = [
             [-x,-y,-z],[-x,+y,-z],[+x,-y,-z],[+x,+y,-z],
             [-x,-y,+z],[-x,+y,+z],[+x,-y,+z],[+x,+y,+z]
            ]
  elif typ == 'BlockChamf':

    if chamf >= 0:
      c = chamf; xc = x-c; yc = y-c; zc = z-c
    else:
      c = -chamf; xc = x-c; yc = - (y-c); zc = z-c; y = -y
    #endif

    corns = [
             [-x,-yc,-z],[x,-yc,-z],[x,-yc,z],[-x,-yc,z],
             [-x,+yc,-z],[x,+yc,-z],[x,+yc,z],[-x,+yc,z],
             [-xc,+y,-z],[xc,+y,-z],[xc,+y,z],[-xc,+y,z]
            ]

  elif typ == 'BlockDsChamf':

    chamf = calc_var(siz[3])

    if chamf >= 0:
      c = chamf; xc = x-c; yc = y-c; zc = z-c
    else:
      c = -chamf; xc = x-c; yc = - (y-c); zc = z-c; y = -y
    #endif

    corns = [
             [-x,-yc,-z],[x,-yc,-z],[x,-yc,z],[-x,-yc,z],
             [-x,+y,-z],[x,+yc,-z],[x,+yc,z],[-x,+y,z],
             [-xc,+y,-z],[xc,+y,-z],[xc,+y,z],[-xc,+y,z]
            ]

  elif typ == 'BlockUsChamf':

    chamf = calc_var(siz[3])
    if chamf >= 0:
      c = chamf; xc = x-c; yc = y-c; zc = z-c
    else:
      c = -chamf; xc = x-c; yc = - (y-c); zc = z-c; y = -y
    #endif

    corns = [
             [-x,-yc,-z],[x,-yc,-z],[x,-yc,z],[-x,-yc,z],
             [-x,+y,-z],[x,+yc,-z],[x,+yc,z],[-x,+y,z],
             [-xc,+y,-z],[xc,+y,-z],[xc,+y,z],[-xc,+y,z]
            ]

  else:
    Quit("Error in blockcorners(mp): Unknown type '" + typ + "'")
  #endif typ == 'Block'

  return corns

#enddef blockcorners(mp)

def ureadclc(callkey=''):
+seq,uguiglobind.

  NL = "\n"

+self,if=trace.
  debug("trace: ureadclc:callkey:",callkey)
+self.

  undugui_clean(callkey)

  if not os.path.exists(FileCLC):
    if os.path.exists("FileCLC" + ".clc"):
      FileCLC = FileCLC + ".clc"
      print("\nReading " + FileCLC)
    elif os.path.exists("../input/" + FileCLC):
      print(FileCLC + " not found in current directory, but in ../input")
      FileCLC = "../input/" + FileCLC
    elif os.path.exists("../input/" + FileCLC + ".clc"):
      FileCLC = "../input/" + FileCLC + ".clc"
      print(FileCLC + " not found in current directory, but in ../input")
    else:
      wError(FileCLC + " not found!")
      return
    #endif
  #endif not os.path.exists(FileCLC)

  Fclc = open(FileCLC,"r")

  LastCLC = FileCLC

  Flast = open("unduclc.lst","w")
  Flast.write(FileCLC+NL)
  Flast.close()

  Uclcorig = Fclc.readlines()
  IclcRead = 1

  Fclc.close()

  iline = -1
  nlines = len(Uclcorig)
  icomm = 0

  #print(NL,NL)

  AppleII_Mode = 0
  Hybrid_Mode = 0

  if EchoCLC: print("\nundumag.clc:\n")

  while iline < nlines - 1:

    iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
    if not len(cline): break

    #if EchoCLC: print(cline)

    words = cline.split()
    w1 = words[0]
    c1 = cline[0]

    if words[0] == 'Mode':
      if words[1] == 'AppleII':
        AppleII_Mode = 1
      elif words[1] == 'Hybrid':
        Hybrid_Mode = 1
      elif words[1] == 'Mirror':
        Hybrid_Mode = 2
      #endif
    #endif

    if w1 == '&':

      ckey =  words[1]

      if ckey.upper() == "USER_COMMENT":
        iline += 1
        Ucomment =  Uclcorig[iline].strip()
        print(NL,NL,"User comment:",NL,Ucomment,NL,NL)
      #endif

      elif ckey.upper() == "MAGNET" \
      or ckey.upper() == "SPECIAL_MAGNET" \
      or ckey.upper() == "SPECIAL_POLE" \
      or ckey.upper() == "POLE":

        if ckey.upper() == "SPECIAL_MAGNET" or ckey.upper() == "SPECIAL_POLE":
          ispec = 1
        else:
          ispec = 0
        #endif

        if ckey.upper() == "SPECIAL_POLE" or ckey.upper() == "POLE":
          ispole = 1
        else:
          ispole = 0
        #endif

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          key = words[0]
          cnam = words[1]
          cmoth = words[2]
          col = words[3]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry
        cname = [cnam,cmoth]

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          xcen = words[0]
          ycen = words[1]
          zcen = words[2]
          cen = [xcen,ycen,zcen]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          if not ispole:
            bc = words[0]
            xm = words[1]
            ym = words[2]
            zm = words[3]
            mat = words[4]
          else:
            bc = '0.0'
            xm = '0.0'
            ym = '0.0'
            zm = '0.0'
            mat = words[0]
          #endif
          vmat = [bc,xm,ym,zm,mat,col]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        if key.upper() != 'FILE' and key.upper() != 'CORNERS':
          try:
            words = cline.split()
            size = ['0.0','0.0','0.0','0.0','0.0','0.0','0.0']
            for i in range(len(words)):
              size[i] = words[i]
            #endfor
          except:
            Quit("*** Error in ureadclc: Bad line:\n" + cline)
          #endtry
        else:
          iline -= 1
        #endif

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          nxdiv = words[0]
          nydiv = words[1]
          nzdiv = words[2]
          yfracdiv = words[3]
          zfracdiv = words[4]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry

        div = [nxdiv,nydiv,nzdiv,yfracdiv,zfracdiv]

        corns = []
+self,if=debugureadclc.
        print("cnam,key,ispec,ispole:",cnam,key,ispec,ispole)
+self.

        if key.upper() == 'CORNERS':

          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          if not len(cline): break
          sncorn = cline
          ncorn = eval(sncorn)

          for i in range(ncorn):
            iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
            words = cline.split()
#            x = calc_var(words[0])
#            y = calc_var(words[1])
#            z = calc_var(words[2])
#            corns.append([x,y,z])
            corns.append([words[0],words[1],words[2]])
          #endfor i in range(ncorn))

          for mpt in MagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          for mpt in SpecMagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          if ispec:
            SpecMagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          else:
            MagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          #endif

        elif key.upper() == 'FILE':

          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          if not len(cline): break
          fname = cline
          Fcorn = open(fname,'r')
          cornlines = Fcorn.readlines()
          Fcorn.close()
          for cline in cornlines:
            words = cline.split()
            if cline[0] == '*' or len(words) < 3: continue
            words = cline.split()
#            x = calc_var(words[0])
#            y = calc_var(words[1])
#            z = calc_var(words[2])
#            corns.append([x,y,z])
            corns.append([words[0],words[1],words[2]])
          #endfor cline in cornlines
          sncorn = str(len(corns))
          DictCornFiles[cname[0]] = fname

          for mpt in MagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          for mpt in SpecMagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          if ispec:
            SpecMagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          else:
            MagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          #endif

        else:
+self,if=debugureadclc.
          #debug(cnam)
+self.
          for mpt in MagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          for mpt in SpecMagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          if ispec:
            SpecMagPols.append([cname,None,ispec,key,cen,vmat,size,div])
          else:
            MagPols.append([cname,None,ispec,key,cen,vmat,size,div])
          #endif

        #endif  'CORNERS'

      elif ckey.upper() == "COIL":

        #debug("debug: Coil")
        coil = []

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        words = cline.split()

        key = words[0]
        idxcoil = len(Coils)

        if len(words) > 1:
          cnam = words[1]
        else:
          cnam = 'coil_' + str(idxcoil+1)
        #endif

        if not key in DictCoils: DictCoils[key] = []
        DictCoils[key].append(idxcoil)

#        debug(key + " " + cnam)

        coil.append([key,cnam])

#        for w in words: coil.append(w)

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        words = cline.split()

        if key == 'Filaments':
          coil.append(words[0])
          fil = []
          for i in range(int(coil[1])):
            iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
            words = cline.split()
            fi = []
            for f in words: fi.append(f)
            fil.append(fi)
          #endfor
          coil.append(fil)
          Coils.append(coil)
        elif key == 'File':
          if words[0][0] == '"' or  words[0][0] == "'":
            coil.append(words[0][1:-1])
          else:
            coil.append(words[0])
          #endif
          Coils.append(coil)
        elif key == 'RectWindings' or key == 'Rectangular' or key == 'RectangCirc':
          wl = []
          for w in words: wl.append(w)
          #debug("wl")
          coil.append(wl)
          Coils.append(coil)
        elif key == 'RectArc' or key == 'RectBar' \
        or key == 'ThickWire' or key == 'CircArc':
          #debug("debug: RectBar")
          ww = []
          wl = []
          for w in words: wl.append(w)
          ww.append(wl)
          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          words = cline.split()
          wl = []
          for w in words: wl.append(w)
          ww.append(wl)
          coil.append(ww)
          Coils.append(coil)
        else:
          print("*** Error in ureadclc: Unknown coil key: " + key + NL)
        #endif

      elif ckey == "Translate":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)
      elif ckey == "Remanence":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)
      elif ckey == "Copy":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)
      elif ckey == "Rotate" or ckey == "Rotate_Shape":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)

      elif ckey == "Module":

        Nmodul += 1

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trans = cline
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        nper = cline
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        space = cline
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        scale = cline

        modu = [trans,nper,space,scale]
        Modules.append(modu)

      elif ckey == "Materials":

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        Nmat = int(cline)

        for i in range(Nmat):
          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          words = cline.split()
          if words[1] == '1': words[1] = 'REC'
          if words[1] == '2': words[1] = 'Iron'
          if words[1] == '3':
            words[1] = 'Mirror'
            Quit("Spiegel")
          Fmat = open(words[3],'r')
          flines = Fmat.readlines()
          Fmat.close()
          words.append(flines)
          Materials.append(words)
        #endfor i in range(Nmat)

      else:
        print("*** Error in ureadclc: Unknown key: " + ckey + NL)
      #endif ckey

    elif c1 == '$':

      words = cline.split('=')
      if len(words) == 1: continue

      vnam = words[0].strip()
      CalcLines.append([vnam,words[1].strip(),com])
      DictVcomments[vnam] = com

    elif w1.lower() == 'p':

      words = cline.split("=")
      pnam = '$' + words[0].split()[1].strip()
      pval = words[1].strip()

      if pnam == '$PerLen':
        if Parameters[0][0] == '$PerLen':
          Parameters[0][1] = pval
          Pars[pnam] = float(pval)
        else:
          Quit("Reserved Parameter $PerLen not found in Parameters[0]")
        #endif
        DictPcomments[pnam] = com
        continue
      #endif

      if pnam == '$Mcoating':
        if Parameters[1][0] == '$Mcoating':
          Parameters[1][1] = pval
          Pars[pnam] = float(pval)
        else:
          Quit("Reserved Parameter $Mcoating not found in Parameters[1]")
        #endif
        DictPcomments[pnam] = com
        continue
      #endif
      DictPcomments[pnam] = com
      Parameters.append([pnam,pval])
    #endif

  #endwhile iline < nlines - 1

  Npar = len(Parameters)

  NMagPol = len(MagPols)
  NspecMagPol = len(SpecMagPols)

  ugui_calc()

  imag = 0
  for imp in range(NMagPol):

    # MagPols.append([cname,mag,ispec,key,cen,vmat,siz,div])
    # MagPols.append([cname,mag,ispec,key,cen,vmat,sncorn,corns,div])

    imag += 1
+self,if=debugureadclc.
    #debug("debug ureadclc imag")
+self.
    mp = MagPols[imp]

    cname = mp[0]
    DictMagPolsTot[cname[0]] = imp

    #vmat = [bc,xm,ym,zm,mat,col]

    vmat = mp[5]
    mat = vmat[4]

    if mat[0] == '$':
      mat = int(Variables[mat])
    #endif mat[0] == '$'

    tmat = Materials[int(mat)-1][1]

+self,if=debugureadclc.
    print("tmat:",tmat)
+self.

    if tmat == 'REC':
      mp[1] = 'REC'
      Magnets.append(cname)
    elif tmat == 'Iron':
      mp[1] = 'Iron'
      Pols.append(cname)
    #endif

    MagPolsTot.append(mp)

  #endfor imp in range(NMagPol)

  ispec = 0

  for imp in range(NspecMagPol):

    # MagPols.append([cname,mag,ispec,key,cen,vmat,siz,div])
    # MagPols.append([cname,mag,ispec,key,cen,vmat,sncorn,corns,div])

    imag += 1
    ispec += 1
    mp = SpecMagPols[imp]

    cname = mp[0]
    DictMagPolsTot[cname[0]] = NMagPol + imp

    #vmat = [bc,xm,ym,zm,mat,col]

    vmat = mp[5]
    mat = vmat[4]
    if mat[0] == '$':
      mat = Variables[mat]
    #endif mat[0] == '$'
+self,if=debugureadclc.
    print("mat:",mat)
+self.
    if int(mat) < 1 or int(mat) > Nmat:
+self,if=debugureadclc.
      debug()
+self.
      print("*** Error in ureadclc: Bad Material index for",mp[0])
      Quit()
    #endif

    tmat = Materials[int(mat)-1][1]

+self,if=debugureadclc.
    print("tmat:",tmat)
+self.

    if tmat == 'REC':
      mp[1] = 'REC'
      SpecMags.append(cname)
    elif tmat == 'Iron':
      mp[1] = 'Iron'
      SpecPols.append(cname)
    #endif

    MagPolsTot.append(mp)

  #endfor imp in range(NSpecMagPol)

  Nmag = len(Magnets)
  Npol = len(Pols)

  NspecMag = len(SpecMags)
  NspecPol = len(SpecPols)

  NMagPolTot = len(MagPolsTot)

+self,if=DEBUGUREADCLC.
  if callkey == 'clWhyrid':
    print('*******************************************')
    print(Nmag,Npol)
    print(NspecMag,NspecPol)
    for m in range(NMagPolTot):
      mp = MagPolsTot[m]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      typ = mp[3]
      print(cnam,cmoth)
    #endif
    print('*******************************************')
    print("DictMoths",DictMoths)
    print("Moths",Moths)
  #endif
  debug("debug: ureadclc 1")
+self.

  for m in range(NMagPolTot):

    mp = MagPolsTot[m]
    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth-1].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

    cen = mp[4]

    xcen = cen[0]
    ycen = cen[1]
    zcen = cen[2]

    xcen = calc_var(xcen)
    ycen = calc_var(ycen)
    zcen = calc_var(zcen)

+self,if=debugrspec.
    print("debugrspec:",m,NL,mp)
+self.
    if typ.upper().find('BLOCK') > -1:
      corns = blockcorners(mp)
    elif typ.upper() == 'CYLINDER':
      DictCyls[cnam] = Ncylinder
      size = mp[6]
      rin = float(size[0])
      rout = float(size[1])
      h = float(size[2])
      dphi = float(size[3])
      nphi = int(mp[7][2])
      if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3
      Ncylinder += 1
      ccyl = 'ncyl_' + str(Ncylinder)
      ncyl = ncylinder(ccyl,
                       0.,0.,0.,rout-rin,rin,rin,h,0.0,90.,dphi,nphi,1)
      poly = cylinderpoly(ccyl)
      Ntcyls.append([imp,mp,ccyl,poly])
    elif typ.upper() == 'FILE' or typ.upper() == 'CORNERS':
      corns = []
      for ic in range(len(mp[7])):
        c1 = calc_var(mp[7][ic][0])
        c2 = calc_var(mp[7][ic][1])
        c3 = calc_var(mp[7][ic][2])
        corns.append([c1,c2,c3])
      #endfor ic in range(len(corns))
    else:
      print("*** Bad key " + typ + " in ureadclc ***")
    #endif typ == 'Block'

    if typ.upper() == 'CYLINDER':
      MagPolsTot[m].append(mp[4])
      continue
    #endif

    xmin = 1.e30
    xmax = -1.e30
    ymin = 1.e30
    ymax = -1.e30
    zmin = 1.e30
    zmax = -1.e30

    for corn in corns:
      x = corn[0] + xcen
      y = corn[1] + ycen
      z = corn[2] + zcen
      if x < xmin: xmin = x
      if x > xmax: xmax = x
      if y < ymin: ymin = y
      if y > ymax: ymax = y
      if z < zmin: zmin = z
      if z > zmax: zmax = z
    #endfor corn in corns

    x = (xmin+xmax)/2.
    y = (ymin+ymax)/2.
    z = (zmin+zmax)/2.

    MagPolsTot[m].append([x,y,z])

    verts,ifaces,faces,bounds = hull3d(corns)
    if type(verts) != Tdf:
      hull = pd.DataFrame(verts)
    else:
      hull=verts
    #endif
    hull.columns = ['xr','yr','zr']

    hull['x'] = hull.xr+xcen
    hull['y'] = hull.yr+ycen
    hull['z'] = hull.zr+zcen

    DictHulls[cnam] = len(Hulls)
    #print(NL,"Hulls ------",cnam,NL,DictHulls[cnam],NL,hull)
    Hulls.append(hull)

  #endfor m in range(NMagPolTot)

+self,if=DEBUGUREADCLC.
  for mp in MagPolsTot: print(NL,mp)
  debug("debug: ureadclc 2")
+self.

  Xmin = 1.0e30
  Xmax = -1.0e30
  Ymin = 1.0e30
  Ymax = -1.0e30
  Zmin = 1.0e30
  Zmax = -1.0e30

  if NMagPolTot:

    # sort mothers by x

    moli = []

    xmins = 1.e30
    xmaxs = -1.e30
    ymins = 1.e30
    ymaxs = -1.e30
    zmins = 1.e30
    zmaxs = -1.e30

    ispec = 0

    for mo in range(len(Moths)):

      moth = Moths[mo]

      xmin = 1.e30
      xmax = -1.e30
      ymin = 1.e30
      ymax = -1.e30
      zmin = 1.e30
      zmax = -1.e30

      xmins = 1.e30
      xmaxs = -1.e30
      ymins = 1.e30
      ymaxs = -1.e30
      zmins = 1.e30
      zmaxs = -1.e30

      for cmag in moth:
        mag = DictMagPolsTot[cmag]
        mp = MagPolsTot[mag]
        typ = mp[3]
        if typ == 'Cylinder':
          cyl = Ntcyls[DictCyls[cmag]]
          nc = nget(cyl[2])
          nh = Nhead[Ind]
          xmn = nh[6][1]
          xmx = nh[6][2]
          zmn = nh[5][1]
          zmx = nh[7][2]
          ymn = nh[8][1]
          ymx = nh[9][2]
        else:
          nhu = DictHulls[cmag]
          xmn = Hulls[nhu].x.min()
          xmx = Hulls[nhu].x.max()
          ymn = Hulls[nhu].y.min()
          ymx = Hulls[nhu].y.max()
          zmn = Hulls[nhu].z.min()
          zmx = Hulls[nhu].z.max()
        #endif Cyl

        if xmn < xmin: xmin = xmn
        if xmx > xmax: xmax = xmx
        if ymn < ymin: ymin = ymn
        if ymx > ymax: ymax = ymx
        if zmn < zmin: zmin = zmn
        if zmx > zmax: zmax = zmx

        if mp[2] == 'yes' or str(mp[2]) == '1':
          if xmn < xmins: xmins = xmn
          if xmx > xmaxs: xmaxs = xmx
          if ymn < ymins: ymins = ymn
          if ymx > ymaxs: ymaxs = ymx
          if zmn < zmins: zmins = zmn
          if zmx > zmaxs: zmaxs = zmx
        #endif MagPolsTot[mag][2] == 'yes'

        if xmins < Xmin: Xmin = xmins
        if xmaxs > Xmax: Xmax = xmaxs
        if ymins < Ymin: Ymin = ymins
        if ymaxs > Ymax: Ymax = ymaxs
        if zmins < Zmin: Zmin = zmins
        if zmaxs > Zmax: Zmax = zmaxs
        if xmin < Xmin: Xmin = xmin
        if xmax > Xmax: Xmax = xmax
        if ymin < Ymin: Ymin = ymin
        if ymax > Ymax: Ymax = ymax
        if zmin < Zmin: Zmin = zmin
        if zmax > Zmax: Zmax = zmax

      #endfor mag in moth

      dx = Xmax - Xmin
      Xmin -= dx*0.1
      Xmax += dx*0.1

      dy = Ymax - Ymin
      Ymin -= dy*0.1
      Ymax += dy*0.1

      dz = Zmax - Zmin
      Zmin -= dz*0.1
      Zmax += dz*0.1

      #print(xmin,xmax,ymin,ymax,zmin,zmax)
      moli.append([mo,
                   xmin,xmax,(xmin+xmax)/2.,
                   ymin,ymax,(ymin+ymax)/2.,
                   zmin,zmax,(zmin+zmax)/2.])
    #endfor mo in range(len(Moths))

+self,if=DEBUGUREADCLC.
    debug("debug: ureadclc 3")
+self.
    MothsXYZ = pd.DataFrame(moli)
    MothsXYZ.columns = ['imoth',
                        'xmin','xmax','x',
                        'ymin','ymax','y',
                        'zmin','zmax','z']

    MothsXYZ = MothsXYZ.sort_values(by=['x','y','z'])
    SpecXYZ = [xmins,xmaxs,ymins,ymaxs,zmins,zmaxs]

    mocop = deepcopy(Moths)
    Moths = []

    for mo in range(len(mocop)):
      Moths.append(mocop[MothsXYZ.imoth[mo]])
    #endfor mo in range(len(mocop))

    # sort by mothers

    mpcop = MagPolsTot
    MagPolsTot = []
    MagPolsSelected = []

    for mo in range(len(Moths)):
      moth = Moths[mo]
      for mag in moth:
        MyMoth[mag] = mo
        mag = DictMagPolsTot[mag]
        MagPolsTot.append(mpcop[mag])
      #endfor mag in moth
    #endfor mo in range(len(Moths))

  #endif NMagPolTot

+self,if=DEBUGUREADCLC.
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
  debug("debug: ureadclc 4")
+self.

  for imp in range(NMagPolTot):
    cnam = MagPolsTot[imp][0][0]
    DictMagPolsTot[cnam] = imp
  #endfor mo in range(len(Moths))

  NCalc = len(Calcs)
  DictCalcs = {}
  for ic in range(NCalc):
    cnam = Calcs[ic][0]
    DictCalcs[cnam] = [ic,Calcs[ic][1]]
  #endfor mo in range(len(Moths))

  if Nmag + Npol + NspecMag + NspecPol != NMagPolTot:
    Quit("*** Error in ureadclc: Bad sum of magnets and poles ***")
  #endif Nmag + Npol + NspecMag + NspecPol != NMagPolTot

  NCoil = len(Coils)
  if NCoil: undu_coils_to_filaments()

  #if len(TransRotCop): utransrotcop()
  if len(TransRotCop): checktransrotcop()

  #debug("debug: Ende von ureadclc")

#enddef ureadclc()

+KEEP,uguiini,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  13.54.11  by  Michael Scheer
*CMZ :  2.04/09 16/08/2023  22.04.30  by  Michael Scheer
*CMZ :  2.04/06 09/07/2023  11.56.56  by  Michael Scheer
*CMZ :  2.04/00 06/09/2022  12.56.43  by  Michael Scheer
*CMZ :  2.03/00 19/08/2022  11.26.28  by  Michael Scheer
*CMZ :  2.02/02 06/03/2022  13.42.00  by  Michael Scheer
*CMZ :  2.02/00 17/03/2021  11.52.59  by  Michael Scheer
*-- Author :    Michael Scheer   14/10/2020
def undugui_clean(key=''):
+seq,uguiglobind.

  Ucomment = ""

  TransRotCop = []
  DictTransRotCop = {}

  DictCornFiles = {}
  Uclcorig = []

  Pars = {}
  DictPcomments = {}

  Npar = 1
  PerLen = 100.0
  Parameters = [['$PerLen',str(PerLen),'']]

  Pars['$PerLen'] = PerLen
  DictPcomments['$PerLen'] = "Period length [mm]"

  Npar += 1
  Coating = 0.0
  Parameters.append(['$Mcoating','0.0',''])
  Pars['$Mcoating'] = 0.0
  DictPcomments['$Mcoating'] = "Coating of REC-Magnets"

  Nvar = 0
  Variables = {}
  DictVcomments = {}

  Ncalc = 0
  Calcs = []
  DictCalcs = {}
  CalcLines = []

  Hybrid = {}
  VHybrid = {}
  Mirror = {}
  VMirror = {}
  Hybrid_Mode = 0

  AppleII = {}
  VAppleII = {}
  AppleII["MatIndex"] = -1
  AppleII["xMagCen"] = 0.0

  VAppleII = {}
  AppleII_Mode = 0

  MagPolsUpdate = []
  DictMagPolsTot = {}
  DictCoils = {}

  NMagPol = 0
  MagPols = []

  Nmag = 0
  Magnets = []
  Npol = 0
  Pols = []

  NspecMagPol = 0
  SpecMagPols = []

  NspecMag = 0
  SpecMags = []

  NspecPol = 0
  SpecPols = []

  NMagPolTot = 0
  MagPolsTot = []

  Nmoth = 0
  Moths = []
  MothsSelected = []
  DictMoths = {}
  MyMoth = {}
  Hulls = []

  Ncalc = 0
  CalcLines = []

  Modules = []
  Nmodul = 0

  Nmat = 0
  Materials = []

  MustUpdate = 1
  MustWriteCLC = 1

  NCoil = 0
  Coils = []
  Filaments = []
  CurrLoops = []
  Selected_Coil = None
  Restore_Coil = None

#enddef undugui_clean()

undugui_clean('init')

def calc_var(svar):
+seq,uguiglobind.

  svar = str(svar)

  svar = re.sub("\("," ( ",svar)
  svar = re.sub("\)"," ) ",svar)

  svar = re.sub("\[","(",svar)
  svar = re.sub("\]",")",svar)

  svar = re.sub("-"," - ",svar)
  svar = re.sub("\+"," + ",svar)
  svar = re.sub("\/"," / ",svar)
  svar = re.sub("\*"," * ",svar)
  svar = re.sub("\*  \*"," ** ",svar)

  atoms = svar.split()

  for k in range(len(atoms)):
    a = atoms[k]
    if a.find("$") >= 0 and a in Variables: atoms[k] = str(Variables[a])
  #endwhile itodo

  svar = ""
  for k in range(len(atoms)):
    svar += atoms[k].strip()
  #endfor k in range(len(atoms))

  return eval(svar)
#enddef calc_var(svar)

def ugui_get_clc_line(iline,nlines,icomm):
+seq,uguiglobind.

  iline += 1
  cline = ''
  icomm = 0

  if iline > nlines-1: return iline,cline, icomm

  while iline < nlines:

    cline = Uclcorig[iline].strip()
+self,if=debugread.
    print("ugui_get_clc_line::",iline,":",cline)
+self.
    #if Debug: debug("\n"+cline+"\n")

    if not len(cline):
      iline += 1
      continue
    #endif not len(cline):

    words = cline.split()

    if not len(words):
      iline += 1
      continue
    #endif not len(words):

    c1 = words[0][0]

    if c1 == '{':
      icomm += 1
      if icomm > 1: Quit("*** Error in ugui_get_clc_line: Missing closing curled brackets *** ")
    elif c1 == '}':
      icomm -= 1
      if icomm < 0: Quit("*** Error in ugui_get_clc_line: Missing opening curled brackets *** ")
      iline += 1
      continue
    #endif c1 == '{'

    if words[0].upper() == '*ENDCALC':
      return iline,cline, icomm
    #endif words[0].upper() == '*ENDCALC'

    if icomm == 1 or re.search("[*!%#]",c1):
      iline += 1
      continue
    #endif icomm == 1 or re.search("[*!%#]",c1)

    if EchoCLC: print(cline)
    return iline,cline, icomm

  #endwhile iline < nlines

#  debug("debug: get_clc")
  iline += 1
  cline = ''
  icomm = 0

  return iline,cline, icomm

#  Quit("*** Error in ugui_get_clc_line: End of file  *** ")

#def ugui_get_clc_line(iline)

def usortvars(varis):
  n = len(varis)
  for i in range(n):
    p = varis[i]
    lmax = len(p[0])
    kmax = i
    for j in range(i,n):
      q = varis[j]
      if len(q[0]) > lmax:
        lmax = len(q[0])
        kmax = j
    #endfor j in range(i+1,n)
    pq = varis[i]
    varis[i] = varis[kmax]
    varis[kmax] = pq
  #endfor i in range(n)
  return varis
#enddef usortvars(varis)

def ugui_calc():
+seq,uguiglobind.

  Ncalc = len(CalcLines)
  Calcs = deepcopy(CalcLines)
  Pars = deepcopy(Parameters)

  #convert parameters to variables

  kill = -1
  kpar = -1
  for par in Pars:
    kpar += 1
    key = par[0]
    if key == '$Mcoating': kill = kpar
  #endif

  for ic in range(Ncalc):
    key = Calcs[ic][0]
    if key == '$Mcoating' and kill >= 0:
      Pars.pop(kill)
      Parameters.pop(kill)
  #endfor

  kill = -1
  kpar = -1
  for par in Pars:
    kpar += 1
    key = par[0]
    if key == '$PerLen':
      kill = kpar
  #endif

  for ic in range(Ncalc):
    key = Calcs[ic][0]
    if key == '$PerLen' and kill >= 0:
      Pars.pop(kill)
      Parameters.pop(kill)
  #endfor

  Npar = len(Pars)

  for par in Pars:
    Nvar += 1
    key = par[0]
    if key in Variables: Quit("*** Error in ugui_calc(): Duplicate Parameter " + key)
    Variables[key] = par[1]
    DictVcomments[key] = DictPcomments[key]
  #endfor par in Pars

  for ic in range(Ncalc):
    key = Calcs[ic][0]
    if key in Variables: Quit("*** Error in ugui_calc(): Duplicate Variable " + key)
    Variables[key] = Calcs[ic][1]
    Nvar += 1
  #endfor ic in range(Ncalc)

  for v in Variables:
    val = Variables[v]
    try:
      val = calc_var(val)
      Variables[v] = val
    except:
      Quit("*** Error in ugui_calc(): Unresolved Variable " + v)
    #endtry
  #endfor v in Variables:

  for ic in range(Ncalc):
    Calcs[ic][-1] = calc_var(Calcs[ic][1])
  #endfor ic in range(Ncalc)

  if Nvar != len(Variables): Quit("*** Bad number of variables ***")

  pdum = deepcopy(Pars)
  Pars = {}

  for par in pdum:
    Pars[par[0]] = eval(par[1])
  #endfor par in pdum

#enddef ugui_calc()

def ugui_calc_check(variables,calcs,dictcalcs):

  for v in variables:
    val = variables[v]

    try:
      val = calc_var(val)
      variables[v] = val
    except:
      code = ["Unresolved Variable",v]
      return code
    #endtry
  #endfor v in variables:

  ncalc = len(calcs)
  for ic in range(ncalc):
    calcs[ic][-1] = calc_var(calcs[ic][1])
    dictcalcs[calcs[ic][0]] = [ic,calcs[ic][1]]
  #endfor ic in range(ncalc)

  return ["ok",variables,calcs,dictcalcs]

#def ugui_calc_check()

def ugui_calc_line(cline):
+seq,uguiglobind.

+self,if=trace.
  print(NL,"trace:: ugui_calc_line:",cline)
+self.

  idebug = 0

  if idebug > 0:
    try:
      Ical += 1
    except:
      Ical = 0
      #endtry

      print("\nugui_calc_line: ",Ical)
      print(cline)
  #endif idebug > 0

  try:
    retval = eval(str(cline))
    return retval
  except: pass

  #if cline == '$nPeriods': print("hallo")

  while cline.find("$") >= 0:
    for var in Variables:
      if cline.find(var) >= 0:
        val = Variables[var]
        scline = re.sub('\\' + var,str(eval(str(val))),cline)
        try:
          retval = eval(scline)
          return retval
        except: pass
      #endif cline.find(par) >= 0
    #endfor var in Variables
  #endwhile

  Quit("Error in ugui_calc_line(cline): " + cline)
+self,if=trace.
  print(NL,"trace:: Leaving ugui_calc_line:",cline)
+self.
#enddef ugui_calc_line()

def ugui_ini():
+seq,uguiglobind.

  Debug = 0

  Ncalc = 0
  CalcLines = []

  NMagPol = 0
  MagPols = []

  Nmag = 0
  Magnets = []
  Npol = 0
  Pols = []

  NspecMagPol = 0
  SpecMagPols = []

  NspecMag = 0
  SpecMags = []

  NspecPol = 0
  SpecPols = []

  NMagPolTot = 0
  MagPolsTot = []

  Nmat = 0
  Materials = []

  MustUpdate = 1

  Uclcorig = []
  Apple = {}
  FileMu = 'undumag_mu.dat'

  IUNDUMAGisRunning = 0

  if os.path.exists("unduclc.lst"):
    Fclc = open("unduclc.lst",'r')
    FileCLC = Fclc.readline().strip()
  else:
    FileCLC = "undumag.clc"
  #endif os.path.exists("unduclc.lst")

  if os.path.exists("undunam.lst"):
    Fnam = open("undunam.lst",'r')
    FileNAM = Fnam.readline().strip()
    if len(FileNAM) == 0: FileNAM = "undumag.nam"
  else:
    FileNAM = "undumag.nam"
  #endif os.path.exists("undunam.lst")

  DictCoils = {}
  DictCoilsHeader = {}

  DictCoilsHeader["RectWindings"] = \
  ["Current","Windings","Filling","Xcen","Ycen","Zcen",\
  "VnX","VnY","VnZ","RotAng","Lx_out","Lz_in","Lz_Out","R_in","Height",\
  "nDivH","nDivL","nDivArc","Color"]

  DictCoilsHeader["Rectangular"] = \
  ["Current","Xcen","Ycen","Zcen","VnX","VnY","VnZ","RotAng",\
  "RectLen","W_in","W_out","R_in","Height","nDivV","nDivH","nDivArc","Color"]

  DictCoilsHeader["RectangCirc"] = \
  ["Current","Xcen","Ycen","Zcen","VnX","VnY","VnZ","RotAng",\
  "RectLen","W_in","W_out","R_in","Height","nDivV","nDivH","nDivArc","Color"]

  DictCoilsHeader["File"] = ["Filename"]

  DictCoilsHeader["Filaments"] = \
  ["Current","X1","Y1","Z1","X2","Y2","Y2","Color","Number"]

  DictCoilsHeader["RectArc"] = \
  ["Current","Xcen","Ycen","Zcen","Radius","Width","Height","Angle","nDivH","nDivV","nDivR",\
  "Color","RM11","RM12","RM13","RM21","RM22","RM23","RM31","RM32","RM33"]

  DictCoilsHeader["RectBar"] = \
  ["Current","Xcen","Ycen","Zcen","Radius","Width","Height","Angle","nDivH","nDivV",\
  "Color","RM11","RM12","RM13","RM21","RM22","RM23","RM31","RM32","RM33"]

  DictCoilsHeader["ThickWire"] = \
  ["Current","Xcen","Ycen","Zcen","Length","Radius","Rad_Div","Ang_Div",\
  "Color","RM11","RM12","RM13","RM21","RM22","RM23","RM31","RM32","RM33"]

  DictCoilsHeader["CircArc"] = \
  ["Current","Xcen","Ycen","Zcen","Radius","Width","Height","Angle","nDivH","nDivV","nDivR",\
  "Color","RM11","RM12","RM13","RM21","RM22","RM23","RM31","RM32","RM33"]

  #debug("debug: DictCoilsHeader 1")

#enddef ugui_ini()

def ugui_get_clc_line_com(iline,nlines,icomm):
  iline,cline,icomm = ugui_get_clc_line(iline,nlines,icomm)
  scom = cline.strip().split('!')
  if len(scom) > 1:
    com = scom[1].strip()
    cline = scom[0].strip()
  else: com = ''
  return iline,cline,icomm,com
#enddef
+KEEP,mmaterial,T=PYTHON.
*CMZ :  2.04/11 24/08/2023  19.42.56  by  Michael Scheer
*CMZ :  2.02/00 24/03/2021  08.12.30  by  Michael Scheer
*-- Author :    Michael Scheer   13/10/2020

global S_MateType, S_MateMode, S_MuPar, S_KsiPerp, S_FileMat
global WaddMatIron, S_RmodusIron, S_FileIron, FileIron, RmodusIron

S_MateMode = StringVar()
S_MateType = StringVar()

S_MuPar = StringVar()
S_MuPar.set("1.06")
S_KsiPerp = StringVar()
S_KsiPerp.set("0.17")
S_FileMat = StringVar()

S_RmodusIron = StringVar()
RmodusIron = "2"
S_RmodusIron.set(RmodusIron)

S_FileIron = StringVar()
FileIron = "Vanadium_Permendur_Radia.dat"
S_FileIron.set(FileIron)

def _cnWaddMatIron():
  WaddMatIron.destroy()
#enddef _cnWaddMatIron()

def addMatIron(fileiron='Vanadium_Permendur_Radia.dat',rmodeiron=2,iwidget=0):

  global FileIron, RmodusIron, Nmat, Materials

  if not os.path.exists(fileiron):
    if iwidget: print(" File not found ")
    else: print("*** Error: File not found ")
    return
  #endif not os.path.exists(S_FileIron)

  if str(rmodeiron) != "2" and str(rmodeiron) != "3":
    if iwidget: wError(" Relaxation mode must be 2 or 3!")
    else: print("*** Error: Relaxation mode must be 2 or 3!")
    return
  #endif S_RmodusIron.get() != "2" and S_RmodusIron.get() != "3"

  Nmat = len(Materials)

  for m in Materials:
    if fileiron == m[3]:
      if iwidget: wError("Filename " + fileiron + " already in use")
      else: print("*** Error: Filename " + fileiron + " already in use")
      return
    #endif sfile == m[3]
  #endfor m in Materials

  mat = [str(Nmat+1)]

  mat.append('Iron')
  mat.append("2")
  mat.append(fileiron)
  mat.append([str(rmodeiron) + "\n"])

  Materials.append(mat)
  Nmat += 1

  FileIron = fileiron
  RmodusIron = str(rmodeiron)

  S_FileIron.set(FileIron)
  S_RmodusIron.set(RmodusIron)
#enddef addMatIron()

def _clWaddMatIron():
  global WaddMatIron, S_FileIron, S_RmodusIron

  fileiron = S_FileIron.get()
  rmodeiron = S_RmodusIron.get()

  addMatIron(fileiron,rmodeiron,iwidget=1)

  WaddMatIron.destroy()
#enddef _clWaddMatIron()

def _MaddMatIron():
+seq,uguiglobind.

  global WaddMatIron, S_RmodusIron, S_FileIron, FileIron, RmodusIron

  try: WaddMatIron.destroy()
  except: pass

  WaddMatIron = Toplevel()
  WaddMatIron.attributes('-topmost', 1)

  S_FileIron.set(FileIron)
  S_RmodusIron.set(RmodusIron)

  widlab = 20
  wident = len(FileIron)+10

  firon = Frame(WaddMatIron)
  liron = Label(firon,text=" File of MH-curve ",font=MyFont,width=widlab)
  liron.pack(side=LEFT)
  eiron = Entry(firon,text=S_FileIron,justify=CENTER,font=MyFont,width=wident)
  eiron.pack(side=LEFT)
  firon.pack()

  frmode = Frame(WaddMatIron)
  lrmode = Label(frmode,text="Relaxation mode [2/3]",font=MyFont,width=widlab)
  lrmode.pack(side=LEFT)
  ermode = Entry(frmode,text=S_RmodusIron,justify=CENTER,font=MyFont,width=wident)
  ermode.pack(side=LEFT)
  frmode.pack()

  fbott = Frame(WaddMatIron)

  bCancel = Button(fbott,text='Cancel',width=widlab+2,command=_cnWaddMatIron)
  bCancel.pack(side=LEFT)

  bClose = Button(fbott,text='Ok',command=_clWaddMatIron)
  bClose.pack(expand=TRUE,side=LEFT,fill=X)

  fbott.pack(expand=TRUE,side=LEFT,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)

  WaddMatIron.title("Add iron")
  WaddMatIron.geometry(sgeo)

  Umaster.wait_window(WaddMatIron)

#enddef _MaddMatIron()

def _MaddMatREClin():
+seq,uguiglobind.

  global S_MuPar, S_KsiPerp, S_FileMat, WaddMat, S_MateType, S_MateMode

  try: WaddMat.destroy()
  except: pass

  S_MateMode.set('1')
  S_MateType.set('REC')

  WaddMat = Toplevel()
  WaddMat.attributes('-topmost', 1)

  widlab = 20

  fmu = Frame(WaddMat)
  lmu = Label(fmu,text="mu of easy-axis ",font=MyFont,width=widlab)
  lmu.pack(side=LEFT)
  emu = Entry(fmu,text=S_MuPar,justify=CENTER,font=MyFont)
  emu.pack(side=LEFT)
  fmu.pack()

  fksi = Frame(WaddMat)
  lksi = Label(fksi,text="ksi perpendicular",font=MyFont,width=widlab)
  lksi.pack(side=LEFT)
  eksi = Entry(fksi,text=S_KsiPerp,justify=CENTER,font=MyFont)
  eksi.pack(side=LEFT)
  fksi.pack()

  smu = S_MuPar.get()
  sksi = S_KsiPerp.get()

  S_FileMat.set("undugui_" + smu + "_" + sksi + ".dat")

  ffile = Frame(WaddMat)
  lfile = Label(ffile,text="file",font=MyFont,width=widlab)
  lfile.pack(side=LEFT)
  efile = Entry(ffile,text=S_FileMat,justify=CENTER,font=MyFont)
  efile.pack(side=LEFT)
  ffile.pack()

  fbott = Frame(WaddMat)

  bCancel = Button(fbott,text='Cancel',width=widlab,command=_cnWaddMat)
  #bCancel.pack(expand=TRUE,side=LEFT,fill=X)
  bCancel.pack(side=LEFT)

  bClose = Button(fbott,text='Ok',command=_clWaddMatREClin)
  bClose.pack(expand=TRUE,side=LEFT,fill=X)

  fbott.pack(expand=TRUE,side=LEFT,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)

  WaddMat.title("Add linear REC")
  WaddMat.geometry(sgeo)

  Umaster.wait_window(WaddMat)

#enddef _MaddMatREClin()

def _cnWaddMat():
  global WaddMat
  WaddMat.destroy()
#enddef _cnWaddMat()

def _clWaddMatREClin():
+seq,uguiglobind.
  global S_MuPar, S_KsiPerp, S_FileMat, WaddMat

  sfile = S_FileMat.get()
  smu = S_MuPar.get()
  sksi = S_KsiPerp.get()

  addMatREClin(sfile,smu,sksi,iwdiget=1)

  WaddMat.destroy()
#enddef _clWaddMatREClin()

def addMatREClin(recfile='undugui_1.06_0.17.dat',rmu=1.06,rksi=0.17,iwdiget=0):
+seq,uguiglobind.

  global S_MuPar, S_KsiPerp, S_FileMat, S_MateMode, S_MateType, Nmat

  Nmat = len(Materials)

  for m in Materials:
    if recfile == m[3]:
      if iwidget: wError("Filename " + recfile + " already in use")
      else: print("*** Error: Filename " + recfile + " already in use")
      return
    #endif recfile == m[3]
  #endfor m in Materials

  mat = [str(Nmat+1)]

  styp = 'REC'
  smu = str(rmu)
  sksi = str(rksi)

  smatemode = '1'
  if styp != 'REC':
    wError("Unrecognized material type")
    return
  #endif styp == 'REC'

  mat.append(styp)
  mat.append(smatemode)
  mat.append(recfile)
  mat.append([smu + " " + sksi + " ! mu_Par and ksi_Per\n"])

  Materials.append(mat)
  Nmat += 1

  S_FileMat.set(recfile)
  S_MateMode.set(smatemode)
  S_MateType.set(styp)
  S_MuPar.set(str(smu))
  S_KsiPerp.set(str(sksi))

#enddef addMatREClin()

def _clWlistMat():
  global WlistMat
  WlistMat.destroy()
#enddef _clWlistMat()

def _delMat(im):
  global Nmat, Materials, WlistMat
  mat = Materials.pop(im)
  Nmat -= 1
  sgeo = WlistMat.geometry()
  sgeo = sgeo.split('+')
  sgeo = '+' + sgeo[1] + '+' + sgeo[2]
  WlistMat.destroy()
  _MlistMat(sgeo)
#enddef _delMat(im)

def _MlistMat(sgeo=""):
+seq,uguiglobind.
  global WlistMat

  Nmat = len(Materials)

  WlistMat = Toplevel()
  WlistMat.title("List of Materials")
  WlistMat.attributes('-topmost', 1)

  x,y = Umaster.winfo_pointerxy()
  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)
  WlistMat.geometry(sgeo)

  mat_butts = []
  mat_frames = []

  mainframe = Frame(WlistMat)
  mat_fnum = Frame(mainframe)
  mat_ftype = Frame(mainframe)
  mat_fmode = Frame(mainframe)
  mat_fmu = Frame(mainframe)
  mat_fksi = Frame(mainframe)
  mat_ffile = Frame(mainframe)
  mat_fdel = Frame(mainframe)

  lnum = Label(mat_fnum,text='Index',font=MyFont, bg='white')
  lnum.pack(expand=TRUE,fill=X)
  ltyp = Label(mat_ftype,text='Type',font=MyFont, bg='white')
  ltyp.pack(expand=TRUE,fill=X)
  lmod = Label(mat_fmode,text='Mode',font=MyFont, bg='white')
  lmod.pack(expand=TRUE,fill=X)
  lmu = Label(mat_fmu,text='mu_Par',font=MyFont, bg='white')
  lksi = Label(mat_fksi,text='ksi_Per',font=MyFont, bg='white')
  lksi.pack(expand=TRUE,fill=X)
  lmu.pack(expand=TRUE,fill=X)
  lfil = Label(mat_ffile,text='File',font=MyFont, bg='white')
  lfil.pack(expand=TRUE,fill=X)

  for im in range(Nmat):
    mat = Materials[im]

    snum = mat[0]
    stype = mat[1]
    smode = mat[2]
    sfile = mat[3]
    slines =  mat[4]

    lnum = Label(mat_fnum,text=snum,font=MyFont, bg='white')
    lnum.pack(expand=TRUE,fill=X)
    ltyp = Label(mat_ftype,text=stype,font=MyFont, bg='white')
    ltyp.pack(expand=TRUE,fill=X)
    lmod = Label(mat_fmode,text=smode,font=MyFont, bg='white')
    lmod.pack(expand=TRUE,fill=X)
    ldel = Label(mat_fdel,text="      ",font=MyFont, bg='white')
    ldel.pack(expand=TRUE,fill=X)

    nlines = len(slines)

    if stype == 'REC':
      if nlines == 1:
        smuksi = slines[0].split("!")
        smuksi = smuksi[0].split(" ")
      else:
        smuksi = ['*','*']
      #endif nlines == 1
      lmu = Label(mat_fmu,text=smuksi[0],font=MyFont, bg='white')
      lksi = Label(mat_fksi,text=smuksi[1],font=MyFont, bg='white')
      lksi.pack(expand=TRUE,fill=X)
      lmu.pack(expand=TRUE,fill=X)
    #endif stype == 'REC'
    lfil = Label(mat_ffile,text=sfile,font=MyFont, bg='white')
    lfil.pack(expand=TRUE,fill=X)
    bdel = Button(mat_fdel,text='delete',command= lambda ma=im: _delMat(im),
                  font=MyFont, bg='red', fg='white')
    bdel.pack(expand=TRUE,fill=X)
  #endfor mat in Material

  mat_fnum.pack(side=LEFT)
  mat_ftype.pack(side=LEFT)
  mat_fmu.pack(side=LEFT)
  mat_fksi.pack(side=LEFT)
  mat_ffile.pack(side=LEFT)
  mat_fdel.pack(side=LEFT)

  mainframe.pack(expand=TRUE,fill=X)

  bClose = Button(WlistMat,text='Ok',command=_clWlistMat)
  bClose.pack(expand=TRUE,fill=X)

  Umaster.wait_window(WlistMat)

#enddef _MlistMat()
+KEEP,mgeometry,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  16.36.33  by  Michael Scheer
*CMZ :  2.04/10 19/08/2023  20.51.51  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  08.47.17  by  Michael Scheer
*CMZ :  2.04/06 08/07/2023  11.41.00  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  10.11.28  by  Michael Scheer
*CMZ :  2.02/02 04/03/2022  08.58.13  by  Michael Scheer
*CMZ :  2.02/01 30/04/2021  08.25.40  by  Michael Scheer
*CMZ :  2.02/00 27/03/2021  13.54.39  by  Michael Scheer
*-- Author :    Michael Scheer   13/10/2020

# +KEEP,mgeometry,T=PYTHON.

def framelabentry(win,text,var,stvar,font,widlab,wident):
  stvar.set(var)
  f = Frame(win)
  l = Label(f,text=text,font=font, width=widlab)
  l.pack(side=LEFT)
  e = Entry(f,text=stvar,width=wident,justify=CENTER,font=font)
  e.pack(side=LEFT)
  f.pack(fill='x')
#enddef framelabentry():

def framelabentrycomment(win,text,var,stvar,com,stcom,font,widlab,wident,widcom):
  stvar.set(var)
  stcom.set(com)
  f = Frame(win)
  l = Label(f,text=text,font=font, width=widlab)
  l.pack(side=LEFT)
  e = Entry(f,text=stvar,width=wident,justify=CENTER,font=font)
  e.pack(side=LEFT)
  c = Entry(f,text=stcom,width=widcom,justify=CENTER,font=font)
  c.pack(side=LEFT)
  f.pack(fill='x')
  return l,e,c
#enddef framelabentry():

+seq,showgeo.

+seq,hybridvars.

def _GetMirror(key=''):
+seq,uguiglobind.
+seq,hybridvarsind.

  if key == 'menu' and fexist("mirror.lst"):
    print(NL,"--- Initializing quasi infinite undulator, reading default values from mirror.lst ---")
    Mirror = {}
    flst = open("mirror.lst","r")
    lines =  flst.readlines()
    flst.close()
    for line in lines:
      mir = line.strip().split()
      print(mir)
      Mirror[mir[0]] = mir[1]
    #endfor
    return
  #endif

  Mirror["PerLen_Mirror"] = _EntryVarGet(S_PerLen_Mirror)
  Mirror["FullGap_Mirror"] = _EntryVarGet(S_FullGap_Mirror)

  Mirror["Br_Mirror"] = _EntryVarGet(S_Br_Mirror)
  Mirror["mu_Mirror"] = _EntryVarGet(S_mu_Mirror)
  Mirror["KsiPerp_Mirror"] = _EntryVarGet(S_KsiPerp_Mirror)

  Mirror["LyMag_Mirror"] = _EntryVarGet(S_LyMag_Mirror)
  Mirror["LzMagFull_Mirror"] = _EntryVarGet(S_LzMagFull_Mirror)
  Mirror["ChamfMag_Mirror"] = _EntryVarGet(S_ChamfMag_Mirror)

  Mirror["Mcoating_Mirror"] = _EntryVarGet(S_Mcoating_Mirror)

  Mirror["nDivX_Mag_Mirror"] = _EntryVarGet(S_nDivX_Mag_Mirror)
  Mirror["nDivY_Mag_Mirror"] = _EntryVarGet(S_nDivY_Mag_Mirror)
  Mirror["nDivZ_MagHalf_Mirror"] = _EntryVarGet(S_nDivZ_MagHalf_Mirror)
  Mirror["FracDivY_Mag_Mirror"] = _EntryVarGet(S_FracDivY_Mag_Mirror)
  Mirror["FracDivZ_Mag_Mirror"] = _EntryVarGet(S_FracDivZ_Mag_Mirror)

  Mirror["MatPol_Mirror"] = _EntryVarGet(S_MatPol_Mirror)

  Mirror["LxPol_Mirror"] = _EntryVarGet(S_LxPol_Mirror)
  Mirror["LyPol_Mirror"] = _EntryVarGet(S_LyPol_Mirror)
  Mirror["LzPolFull_Mirror"] = _EntryVarGet(S_LzPolFull_Mirror)
  Mirror["ChamfPol_Mirror"] = _EntryVarGet(S_ChamfPol_Mirror)

  Mirror["nDivX_Pol_Mirror"] = _EntryVarGet(S_nDivX_Pol_Mirror)
  Mirror["nDivY_Pol_Mirror"] = _EntryVarGet(S_nDivY_Pol_Mirror)
  Mirror["nDivZ_PolHalf_Mirror"] = _EntryVarGet(S_nDivZ_PolHalf_Mirror)
  Mirror["FracDivY_Pol_Mirror"] = _EntryVarGet(S_FracDivY_Pol_Mirror)
  Mirror["FracDivZ_Pol_Mirror"] = _EntryVarGet(S_FracDivZ_Pol_Mirror)
  Mirror["Space_Mag_Pol_Mirror"] = _EntryVarGet(S_Space_Mag_Pol_Mirror)

  Mirror["LxMirror"] = _EntryVarGet(S_LxMirror)
  Mirror["LyMirror"] = _EntryVarGet(S_LyMirror)
  Mirror["LzMirror"] = _EntryVarGet(S_LzMirror)

  Mirror["nMirDivX"] = _EntryVarGet(S_nMirDivX)
  Mirror["nMirDivY"] = _EntryVarGet(S_nMirDivY)
  Mirror["nMirDivZ"] = _EntryVarGet(S_nMirDivZ)

  Mirror["FracDivMirY"] = _EntryVarGet(S_FracDivMirY)
  Mirror["FracDivMirZ"] = _EntryVarGet(S_FracDivMirZ)

  Mirror["Mat_Mirror"] = _EntryVarGet(S_Mat_Mirror)

  if int(Mirror["RECIndex_Mirror"])  < 0:
    Nmat += 1
    Mirror["RECIndex_Mirror"] = Nmat
    Materials.append([str(Nmat),"1","1","undugui_Hybrid_mu.dat", \
    [str(Mirror["mu_Mirror"]) + " " + str(Mirror["KsiPerp_Mirror"]) + "! mu_Par and ksi_Perp_Mirror"]])
  #endif

  if int(Mirror["IronIndex_Hybrid"]) < 0:
    Nmat += 1
    Mirror["IronIndex_Hybrid"] = Nmat
    Materials.append([str(Nmat),"2","3",Mirror["MatPol_Mirror"],""])
  #endif

  Mirror["Mat_Mirror"] = _EntryVarGet(S_Mat_Mirror)

  if int(Mirror["IronIndex_Mirror"]) < 0:
    Nmat += 1
    Mirror["IronIndex_Mirror"] = Nmat
    Materials.append([str(Nmat),"2","0",Mirror["Mat_Mirror"],""])
    #print("MatMir:",Nmat,Materials[len(Materials)-1])
  #endif

  Fsav = open("mirror.lst","w")
  for par in Mirror: Fsav.write(par + " " + str(Mirror[par]) + "\n" )
  Fsav.close()

#enddef _GetMirror()

def _GetHybrid():
+seq,uguiglobind.
+seq,hybridvarsind.

  Hybrid["nPeriods_Hybrid"] = _EntryVarGet(S_nPer_Hybrid)
  Hybrid["PerLen_Hybrid"] = _EntryVarGet(S_PerLen_Hybrid)
  Hybrid["FullGap_Hybrid"] = _EntryVarGet(S_FullGap_Hybrid)

  Hybrid["Br_Hybrid"] = _EntryVarGet(S_Br_Hybrid)
  Hybrid["mu_Hybrid"] = _EntryVarGet(S_mu_Hybrid)
  Hybrid["KsiPerp_Hybrid"] = _EntryVarGet(S_KsiPerp_Hybrid)

  #Hybrid["LxMag_Hybrid"] = _EntryVarGet(S_LxMag_Hybrid)
  Hybrid["LyMag_Hybrid"] = _EntryVarGet(S_LyMag_Hybrid)
  Hybrid["LzMagFull_Hybrid"] = _EntryVarGet(S_LzMagFull_Hybrid)
  Hybrid["ChamfMag_Hybrid"] = _EntryVarGet(S_ChamfMag_Hybrid)

  Hybrid["Mcoating_Hybrid"] = _EntryVarGet(S_Mcoating_Hybrid)

  Hybrid["nDivX_Mag_Hybrid"] = _EntryVarGet(S_nDivX_Mag_Hybrid)
  Hybrid["nDivY_Mag_Hybrid"] = _EntryVarGet(S_nDivY_Mag_Hybrid)
  Hybrid["nDivZ_MagHalf_Hybrid"] = _EntryVarGet(S_nDivZ_MagHalf_Hybrid)
  Hybrid["FracDivY_Mag_Hybrid"] = _EntryVarGet(S_FracDivY_Mag_Hybrid)
  Hybrid["FracDivZ_Mag_Hybrid"] = _EntryVarGet(S_FracDivZ_Mag_Hybrid)

  Hybrid["Space_Mag_Pol_Hybrid"] = _EntryVarGet(S_Space_Mag_Pol_Hybrid)

  Hybrid["MatPol_Hybrid"] = _EntryVarGet(S_MatPol_Hybrid)

  Hybrid["LxPol_Hybrid"] = _EntryVarGet(S_LxPol_Hybrid)
  Hybrid["LyPol_Hybrid"] = _EntryVarGet(S_LyPol_Hybrid)
  Hybrid["LzPolFull_Hybrid"] = _EntryVarGet(S_LzPolFull_Hybrid)
  Hybrid["ChamfPol_Hybrid"] = _EntryVarGet(S_ChamfPol_Hybrid)
  Hybrid["OffPol_Hybrid"] = _EntryVarGet(S_OffPol_Hybrid)

  Hybrid["nDivX_Pol_Hybrid"] = _EntryVarGet(S_nDivX_Pol_Hybrid)
  Hybrid["nDivY_Pol_Hybrid"] = _EntryVarGet(S_nDivY_Pol_Hybrid)
  Hybrid["nDivZ_PolHalf_Hybrid"] = _EntryVarGet(S_nDivZ_PolHalf_Hybrid)
  Hybrid["FracDivY_Pol_Hybrid"] = _EntryVarGet(S_FracDivY_Pol_Hybrid)
  Hybrid["FracDivZ_Pol_Hybrid"] = _EntryVarGet(S_FracDivZ_Pol_Hybrid)
  Hybrid["Space_Pol_Mag_Hybrid"] = _EntryVarGet(S_Space_Pol_Mag_Hybrid)

  if Hybrid["RECIndex_Hybrid"]  < 0:
    Nmat += 1
    Hybrid["RECIndex_Hybrid"] = Nmat
    Materials.append([str(Nmat),"1","1","undugui_Hybrid_mu.dat", \
    [str(Hybrid["mu_Hybrid"]) + " " + str(Hybrid["KsiPerp_Hybrid"]) + "! mu_Par and ksi_Perp_Hybrid"]])
  #endif

  if Hybrid["IronIndex_Hybrid"] < 0:
    Nmat += 1
    Hybrid["IronIndex_Hybrid"] = Nmat
    Materials.append([str(Nmat),"2","3",Hybrid["MatPol_Hybrid"],""])
  #endif

#enddef _GetHybrid()

def _clWsetMirror():
  global WsetMirror

  _GetMirror("clWset")

  MustWriteCLC = 1

  WsetMirror.destroy()
#enddef _clsetmirror()

def _clWmirror():

  global Hybrid_Mode,Wmirror, FileCLCO, FileCLC, Mirror

  _GetMirror('clWmirror')
  Hybrid_Mode = 2

  uwritenam('clWmirror')
  uwriteclc('_clWmirror')

  MustWriteCLC = 0

  ureadclc('clWmirror')
  _showGeoPython(callkey='clWmirror')

  FileCLCO = FileCLC

#  _showGeoPython()

#  FileCLCO = FileCLC

  Wmirror.destroy()
#enddef _clmirror()

def _clWhybrid():
  global Hybrid_Mode,Whybrid, FileCLCO, FileCLC

  _GetHybrid()
  Hybrid_Mode = 1

  uwritenam('_clWhybrid')
  uwriteclc('_clWhybrid')

  MustWriteCLC = 0

  ureadclc('clWhyrid')
+self,if=trace.
  global NMagPolTot,MagPolsTot
  print("\ntrace:: List of magnets in _clWhybrid")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  _showGeoPython(callkey='clWhybrid')

  FileCLCO = FileCLC

  Whybrid.destroy()
#enddef _clhybrid()

def _cnWhyEnd():
  global WhyEnd
  WhyEnd.destroy()
#enddef _cnhybrid()

def GetHybridEnd():
+seq,uguiglobind.
+seq,hybridvarsind.

  Hybrid["LyEndMag1_Hybrid"] = _EntryVarGet(S_LyEndMag1_Hybrid)
  Hybrid["SpaceEndMag1_Hybrid"] = _EntryVarGet(S_SpaceEndMag1_Hybrid)
  Hybrid["OffEndMag1_Hybrid"] = _EntryVarGet(S_OffEndMag1_Hybrid)

  Hybrid["LyEndMag2_Hybrid"] = _EntryVarGet(S_LyEndMag2_Hybrid)
  Hybrid["SpaceEndMag2_Hybrid"] = _EntryVarGet(S_SpaceEndMag2_Hybrid)
  Hybrid["OffEndMag2_Hybrid"] = _EntryVarGet(S_OffEndMag2_Hybrid)

  Hybrid["LyEndMag3_Hybrid"] = _EntryVarGet(S_LyEndMag3_Hybrid)
  Hybrid["SpaceEndMag3_Hybrid"] = _EntryVarGet(S_SpaceEndMag3_Hybrid)
  Hybrid["OffEndMag3_Hybrid"] = _EntryVarGet(S_OffEndMag3_Hybrid)

  Hybrid["LyEndPol1_Hybrid"] = _EntryVarGet(S_LyEndPol1_Hybrid)
  Hybrid["SpaceEndPol1_Hybrid"] = _EntryVarGet(S_SpaceEndPol1_Hybrid)
  Hybrid["OffEndPol1_Hybrid"] = _EntryVarGet(S_OffEndPol1_Hybrid)

  Hybrid["LyEndPol2_Hybrid"] = _EntryVarGet(S_LyEndPol2_Hybrid)
  Hybrid["SpaceEndPol2_Hybrid"] = _EntryVarGet(S_SpaceEndPol2_Hybrid)
  Hybrid["OffEndPol2_Hybrid"] = _EntryVarGet(S_OffEndPol2_Hybrid)

#enddef GetHybridEnd()

def _clWhyEnd():
  global WhyEnd
  GetHybridEnd()
  WhyEnd.destroy()
#enddef _clhybrid()

def _cnWhybrid():
  global Whybrid
  Whybrid.destroy()
#enddef _cnhybrid()

def _setMirror():

  global WsetMirror, Mirror

  WsetMirror = Toplevel()
  WsetMirror.title("Mirror Plate")
  WsetMirror.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  #_GetMirror('menu')

  framelabentry(WsetMirror,'length of mirror',Mirror["LxMirror"],S_LxMirror,MyFont,widlab,wident)
  framelabentry(WsetMirror,'height of mirror',Mirror["LyMirror"],S_LyMirror,MyFont,widlab,wident)
  framelabentry(WsetMirror,'width of mirror',Mirror["LzMirror"],S_LzMirror,MyFont,widlab,wident)

  framelabentry(WsetMirror,'number of segments in x',Mirror["nMirDivX"],S_nMirDivX,MyFont,widlab,wident)
  framelabentry(WsetMirror,'number of segments in y',Mirror["nMirDivY"],S_nMirDivY,MyFont,widlab,wident)
  framelabentry(WsetMirror,'number of segments in z',Mirror["nMirDivZ"],S_nMirDivZ,MyFont,widlab,wident)
  framelabentry(WsetMirror,'fraction of  y-seg.',Mirror["FracDivMirY"],S_FracDivMirY,MyFont,widlab,wident)
  framelabentry(WsetMirror,'fraction of  z-seg.',Mirror["FracDivMirZ"],S_FracDivMirZ,MyFont,widlab,wident)

  framelabentry(WsetMirror,'MH-Curve',Mirror["Mat_Mirror"],S_Mat_Mirror,MyFont,widlab,wident)

  fbot = Frame(WsetMirror)

  bCancel = Button(fbot,text='Cancel',command=_cnWsetMirror)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)

  bClose = Button(fbot,text='Ok',command=_clWsetMirror)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)

  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WsetMirror.geometry(sgeo)

  Umaster.wait_window(WsetMirror)

#enddef

def _cnWsetMirror():
  global WsetMirror
  WsetMirror.destroy()
#enddef

def _cnWmirror():
  global Wmirror
  Wmirror.destroy()
#enddef _cnhybrid()

def _EndPoles_Whybrid():
+seq,uguiglobind.
+seq,hybridvarsind.

  WhyEnd = Toplevel()
  WhyEnd.title("Endpoles of Hybrid Undulator")
  WhyEnd.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  framelabentry(WhyEnd,'Height of 1st endmagnet',Hybrid["LyEndMag1_Hybrid"],S_LyEndMag1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 1st endmagnet',Hybrid["OffEndMag1_Hybrid"],S_OffEndMag1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 1st endmagnet',Hybrid["SpaceEndMag1_Hybrid"],S_SpaceEndMag1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Height of 1st endpole',Hybrid["LyEndPol1_Hybrid"],S_LyEndPol1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 1st endpole',Hybrid["OffEndPol1_Hybrid"],S_OffEndPol1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 1st endpole',Hybrid["SpaceEndPol1_Hybrid"],S_SpaceEndPol1_Hybrid,MyFont,widlab,wident)

  framelabentry(WhyEnd,'Height of 2nd endmagnet',Hybrid["LyEndMag2_Hybrid"],S_LyEndMag2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 2nd endmagnet',Hybrid["OffEndMag2_Hybrid"],S_OffEndMag2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 2nd endmagnet',Hybrid["SpaceEndMag2_Hybrid"],S_SpaceEndMag2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Height of 2nd endpole',Hybrid["LyEndPol2_Hybrid"],S_LyEndPol2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 2nd endpole',Hybrid["OffEndPol2_Hybrid"],S_OffEndPol2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 2nd endpole',Hybrid["SpaceEndPol2_Hybrid"],S_SpaceEndPol2_Hybrid,MyFont,widlab,wident)

  framelabentry(WhyEnd,'Height of 3rd endmagnet',Hybrid["LyEndMag3_Hybrid"],S_LyEndMag3_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 3rd endmagnet',Hybrid["OffEndMag3_Hybrid"],S_OffEndMag3_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 3rd endmagnet',Hybrid["SpaceEndMag3_Hybrid"],S_SpaceEndMag3_Hybrid,MyFont,widlab,wident)

  fbot = Frame(WhyEnd)
  bCancel = Button(fbot,text='Cancel',command=_cnWhyEnd)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)
  bClose = Button(fbot,text='Ok',command=_clWhyEnd)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)
  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x-200) + '+' + str(y-500)
  WhyEnd.geometry(sgeo)

  Umaster.wait_window(WhyEnd)

#enddef _EndPoles_Whybrid()

def _mirror():

+seq,uguiglobind.
+seq,hybridvarsind.

  undugui_clean('mirror')
  ugui_ini_mirror('mirror')

  Wmirror = Toplevel()
  Wmirror.title("Infinite Hybrid Undulator")
  Wmirror.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  framelabentry(Wmirror,'period-length',Mirror["PerLen_Mirror"],S_PerLen_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'full gap',Mirror["FullGap_Mirror"],S_FullGap_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'remanence',Mirror["Br_Mirror"],S_Br_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'mu linear',Mirror["mu_Mirror"],S_mu_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'ksi perpendicular',Mirror["KsiPerp_Mirror"],S_KsiPerp_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'height of magnets',Mirror["LyMag_Mirror"],S_LyMag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'width of magnets',Mirror["LzMagFull_Mirror"],S_LzMagFull_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'chamfer of magnets',Mirror["ChamfMag_Mirror"],S_ChamfMag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'Coating',Mirror["Mcoating_Mirror"],S_Mcoating_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'x-segmentation of magnets',Mirror["nDivX_Mag_Mirror"],S_nDivX_Mag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'y-segmentation of magnets',Mirror["nDivY_Mag_Mirror"],S_nDivY_Mag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'z-segmentation of magnets',Mirror["nDivZ_MagHalf_Mirror"],S_nDivZ_MagHalf_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  y-seg. of magnets',Mirror["FracDivY_Mag_Mirror"],S_FracDivY_Mag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  z-seg. of magnets',Mirror["FracDivZ_Mag_Mirror"],S_FracDivZ_Mag_Mirror,MyFont,widlab,wident)
  #framelabentry(Wmirror,'spacer  magnet to pole',Mirror["Space_Mag_Pol_Mirror"],S_Space_Mag_Pol_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'MH-curve of poles',Mirror["MatPol_Mirror"],S_MatPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'length of poles',Mirror["LxPol_Mirror"],S_LxPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'width of poles',Mirror["LzPolFull_Mirror"],S_LzPolFull_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'height of poles',Mirror["LyPol_Mirror"],S_LyPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'chamfer of poles',Mirror["ChamfPol_Mirror"],S_ChamfPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'x-segmentation of poles',Mirror["nDivX_Pol_Mirror"],S_nDivX_Pol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'y-segmentation of poles',Mirror["nDivY_Pol_Mirror"],S_nDivY_Pol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'z-segmentation of poles',Mirror["nDivZ_PolHalf_Mirror"],S_nDivZ_PolHalf_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  y-seg. of poles',Mirror["FracDivY_Pol_Mirror"],S_FracDivY_Pol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  z-seg. of poles',Mirror["FracDivZ_Pol_Mirror"],S_FracDivZ_Pol_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'spacer between pole and mag.',Mirror["Space_Mag_Pol_Mirror"],S_Space_Mag_Pol_Mirror,MyFont,widlab,wident)

  fbot = Frame(Wmirror)

  bCancel = Button(fbot,text='Cancel',command=_cnWmirror)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)

  bMirror = Button(fbot,text='Mirror',command=_setMirror)
  bMirror.pack(side=LEFT,expand=TRUE,fill=X)

  bClose = Button(fbot,text='Ok',command=_clWmirror)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)

  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  Wmirror.geometry(sgeo)

  Umaster.wait_window(Wmirror)
#enddef _mirror()

def _hybrid():

+seq,uguiglobind.
+seq,hybridvarsind.

  undugui_clean('hybrid')
  ugui_ini_hybrid()

  Whybrid = Toplevel()
  Whybrid.title("Hybrid Undulator")
  Whybrid.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  framelabentry(Whybrid,'number of periods',Hybrid["nPeriods_Hybrid"],S_nPer_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'period-length',Hybrid["PerLen_Hybrid"],S_PerLen_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'full gap',Hybrid["FullGap_Hybrid"],S_FullGap_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'remanence',Hybrid["Br_Hybrid"],S_Br_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'mu linear',Hybrid["mu_Hybrid"],S_mu_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'ksi perpendicular',Hybrid["KsiPerp_Hybrid"],S_KsiPerp_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'height of magnets',Hybrid["LyMag_Hybrid"],S_LyMag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'width of magnets',Hybrid["LzMagFull_Hybrid"],S_LzMagFull_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'chamfer of magnets',Hybrid["ChamfMag_Hybrid"],S_ChamfMag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'Coating',Hybrid["Mcoating_Hybrid"],S_Mcoating_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'x-segmentation of magnets',Hybrid["nDivX_Mag_Hybrid"],S_nDivX_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'y-segmentation of magnets',Hybrid["nDivY_Mag_Hybrid"],S_nDivY_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'z-segmentation of magnets',Hybrid["nDivZ_MagHalf_Hybrid"],S_nDivZ_MagHalf_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  y-seg. of magnets',Hybrid["FracDivY_Mag_Hybrid"],S_FracDivY_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  z-seg. of magnets',Hybrid["FracDivZ_Mag_Hybrid"],S_FracDivZ_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'spacer from magnet to pole',Hybrid["Space_Mag_Pol_Hybrid"],S_Space_Mag_Pol_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'MH-curve of poles',Hybrid["MatPol_Hybrid"],S_MatPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'length of poles',Hybrid["LxPol_Hybrid"],S_LxPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'width of poles',Hybrid["LzPolFull_Hybrid"],S_LzPolFull_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'height of poles',Hybrid["LyPol_Hybrid"],S_LyPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'vert. offset of poles',Hybrid["OffPol_Hybrid"],S_OffPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'chamfer of poles',Hybrid["ChamfPol_Hybrid"],S_ChamfPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'x-segmentation of poles',Hybrid["nDivX_Pol_Hybrid"],S_nDivX_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'y-segmentation of poles',Hybrid["nDivY_Pol_Hybrid"],S_nDivY_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'z-segmentation of poles',Hybrid["nDivZ_PolHalf_Hybrid"],S_nDivZ_PolHalf_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  y-seg. of poles',Hybrid["FracDivY_Pol_Hybrid"],S_FracDivY_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  z-seg. of poles',Hybrid["FracDivZ_Pol_Hybrid"],S_FracDivZ_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'spacer from pole to magnet',Hybrid["Space_Mag_Pol_Hybrid"],S_Space_Mag_Pol_Hybrid,MyFont,widlab,wident)

  fbot = Frame(Whybrid)
  bCancel = Button(fbot,text='Cancel',command=_cnWhybrid)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)
  bEndPol = Button(fbot,text='End poles',command=_EndPoles_Whybrid)
  bEndPol.pack(side=LEFT,expand=TRUE,fill=X)
  bClose = Button(fbot,text='Ok',command=_clWhybrid)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)
  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  Whybrid.geometry(sgeo)

  Umaster.wait_window(Whybrid)

#enddef _hybrid()

def _updateMenu(menu):
+seq,uguiglobind.
  pass
#def _updateMenu(ev,menu)

def _enterMenu(ev,menu):
+seq,uguiglobind.
  ew = ev.widget
  key=ev.keysym
  _updateMenu(menu)
#def _enterMenu(ev,menu)

def _keypressMenu(ev,menu):
+seq,uguiglobind.
  ew = ev.widget
  key=ev.keysym
  _updateMenu(menu)
#def _keypressMenu(ev,menu)

def _leaveMenu(ev,menu):
+seq,uguiglobind.
  ew = ev.widget
  key=ev.keysym
  _updateMenu(menu)
#def _leaveMenu(ev,menu)

def _ccWfclc():
  global WFileCLC
  WFileCLC.destroy()
#enddef _ccWfclc()

def _clWfclc(key):
+seq,uguiglobind.

  FileCLC = S_FileCLC.get()
  Ucomment = S_Ucomment.get()

+self,if=debugread.
  ureadclc('debugread')
+self,if=debugread,if=debugshow.
  print("Nach Test von ureadclc!")
  _showGeo('3d')
+self,if=debugread.
  Quit("Ende nach Test!")
+self.

  if key == 'LoadCLC':

    ureadclc('clWfclc')

    try:

      MustUpdate = 1

      try:
        keyclc = Uclcorig[1].strip().split('!')[1].strip()
      except:
        keyclc = ""
      #endtry

      if keyclc == 'Obsolete AppleII':

        for a in AppleII:
          AppleII[a] = Pars[a]
          del Pars[a]
        #endfor a in AppleII

        Npar = len(Pars)

        fmat = Materials[0][3]
        AppleII["MatIndex"] = Materials[0]

        if os.path.exists(fmat):
          Fmat = open(fmat,"r")
          cline = Fmat.readline()
          words = cline.split()
          Fmat.close()
        else:
         print("Could not find " + fmat)
         return
        #endif os.path.exists(fmat)

        AppleII["Mu"] = eval(words[0])
        AppleII["KsiPerp"] = eval(words[1])

        S_nPer_AppleII.set(AppleII["nPeriods"])
        S_FullGap_AppleII.set(AppleII["FullGap"])

        S_Xlen_AppleII.set(AppleII["LxMag"])
        S_Ylen_AppleII.set(AppleII["LyMag"])
        S_Zlen_AppleII.set(AppleII["LzMag"])

        S_HorSlit_AppleII.set(AppleII["zSlit"])
        S_AirGap_AppleII.set(AppleII["AirGap"])
        S_DeadCoat_AppleII.set(Pars["$Mcoating"])

        S_S2Shift_AppleII.set(AppleII["S2Shift"])
        S_S3Shift_AppleII.set(AppleII["S3Shift"])

        S_Br_AppleII.set(AppleII["Br"])
        S_Mu_AppleII.set(AppleII["Mu"])
        S_KsiPerp_AppleII.set(AppleII["KsiPerp"])

        S_NdivX_AppleII.set(AppleII["nMagDivX"])
        S_NdivXHalf_AppleII.set(AppleII["nHalfMagDivX"])
        S_NdivY_AppleII.set(AppleII["nMagDivY"])
        S_NdivZ_AppleII.set(AppleII["nMagDivZ"])

        AppleIIOld = AppleII

      #endif keyclc == 'AppleII':

      WFileCLC.destroy()
      _showGeo('3d')

    except:

      if len(FileCLC) > 0:
        print("*** Reading of geometry file " + FileCLC + " failed ***")
      else:
        print("*** Reading of geometry file (e.g. undumag.clc) failed ***")
      #endif len(FileCLC) > 0

    #endtry: ureadclc(

  elif key == 'WriteCLC':

+self,if=debuguwriteclc.
    uwriteclc('debug')
    Quit("Debug: Ende nach uwriteclc")
+self.
    try:
      uwriteclc('_clWfclc')
      LastCLC = FileCLC
      MustUpdate = 0
      MustWriteCLC = 0
      WFileCLC.destroy()
    except:
      if len(FileCLC) > 0:
        print("*** Writing of geometry file " + FileCLC + " failed ***")
      else:
        print("*** Writing of geometry file (e.g. undumag.clc) failed ***")
    #endtry: ureadclc

  #endif key == 'LoadCLC':

#enddef _clWfclc()

S_FileCLC = StringVar()
S_FileCLC.set(FileCLC)
S_Ucomment = StringVar()

def _uclc(key):
+seq,uguiglobind.

  WFileCLC = Toplevel()
  WFileCLC.attributes('-topmost', 1)
  WFileCLC.title('Load Geometry')

  if key == 'WriteCLC':
    WFileCLC.title('Save Geometry')
    S_Ucomment.set(Ucomment)
    ffucom = Frame(WFileCLC)
    tfucom = 'User comment'
    lfucom = Label(ffucom,text=tfucom,font=MyFont)
    lfucom.pack(side=LEFT)
    efucom = Entry(ffucom,text=S_Ucomment,justify=CENTER,font=MyFont)
    efucom.pack(side=RIGHT)
    ffucom.pack(fill='x')
  #endif key == 'WriteCLC'

  if int(AppleII_Mode) > 0: FileCLC = "undumag.clc"
  S_FileCLC.set(FileCLC)

  ffclc = Frame(WFileCLC)
  tfclc = 'Filename'
  lfclc = Label(ffclc,text=tfclc,font=MyFont)
  lfclc.pack(side=LEFT)
  efclc = Entry(ffclc,text=S_FileCLC,justify=CENTER,font=MyFont)
  efclc.pack(side=RIGHT)
  ffclc.pack(fill='x')

  fcc = Frame(WFileCLC)
  fcc.pack(fill=X)

  bCancel = Button(fcc,text='Cancel',command=_ccWfclc)
  bCancel.bind('<Return>',lambda event, mode=key: _clWfclc(mode))
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fcc,text='Ok',command= lambda mode=key:_clWfclc(mode))
  bClose.bind('<Return>',lambda event, mode=key: _clWfclc(mode))
  bClose.pack(expand=TRUE,side=LEFT,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WFileCLC.geometry(sgeo)

  WFileCLC.bind('<Enter>',lambda event, menu = key: _enterMenu(event,menu))
  WFileCLC.bind('<Leave>',lambda event, menu = key: _leaveMenu(event,menu))
  WFileCLC.bind('<KeyPress>',lambda event, menu = key: _keypressMenu(event,menu))

  Umaster.wait_window(WFileCLC)

#enddef _uclc()

def ugui_ini_mirror(mode=''):
+seq,uguiglobind.
+seq,hybridvarsind.

  if mode != 'force' and fexist("mirror.lst"):
    try:
      print(NL,"--- Initializing quasi infinite undulator, reading default values from mirror.lst ---")
      Mirror = {}
      flst = open("mirror.lst","r")
      lines =  flst.readlines()
      flst.close()
      for line in lines:
        mir = line.strip().split()
        Mirror[mir[0]] = mir[1]
      #endfor
      Mirror["IronIndex_Mirror"] = -1
      Mirror["RECIndex_Mirror"] = -1
      Mirror["IronIndex_Hybrid"] = -1
      print("--- Suceeded ---")
    except:
      Mirror = {}
      Mirror["IronIndex_Mirror"] = -1
      Mirror["RECIndex_Mirror"] = -1
      Mirror["IronIndex_Hybrid"] = -1
      print("--- Failed ---")
  #endif

  if len(Mirror)  <= 3 or mode == 'force':

    Mirror = {}

    Mirror["FullGap_Mirror"] = '5.5'
    Mirror["PerLen_Mirror"] = '17.'
    Mirror["LyMag_Mirror"] = '35.'
    Mirror["LzMagFull_Mirror"] = '50.'
    Mirror["LxPol_Mirror"] = '3.'
    Mirror["LyPol_Mirror"] = '30.'
    Mirror["LzPolFull_Mirror"] = '40.'
    Mirror["Mcoating_Mirror"] = '0.014'
    Mirror["ChamfPol_Mirror"] = '0.1'
    Mirror["ChamfMag_Mirror"] = '0.3'
    Mirror["Space_Mag_Pol_Mirror"] = '0.1'
    Mirror["Br_Mirror"] = '1.62'
    Mirror["mu_Mirror"] = '1.03'
    Mirror["KsiPerp_Mirror"] = '0.17'
    Mirror["Space_Pol_Mag_Mirror"] = '0.1'

    Mirror["RECIndex_Mirror"] = -1
    Mirror["IronIndex_Hybrid"] = -1
    Mirror["MatPol_Mirror"] = 'Vanadium_Permendur_Radia.dat'

    Mirror["nDivX_Mag_Mirror"] = '3'
    Mirror["nDivY_Mag_Mirror"] = '3'
    Mirror["nDivZ_MagHalf_Mirror"] = '3'
    Mirror["FracDivY_Mag_Mirror"] = '1.0'
    Mirror["FracDivZ_Mag_Mirror"] = '1.0'

    Mirror["nDivX_Pol_Mirror"] = '5'
    Mirror["nDivY_Pol_Mirror"] = '5'
    Mirror["nDivZ_PolHalf_Mirror"] = '7'
    Mirror["FracDivY_Pol_Mirror"] = '1.0'
    Mirror["FracDivZ_Pol_Mirror"] = '1.0'

    Mirror["LxMirror"] = '1.0'
    Mirror["LyMirror"] = '100.0'
    Mirror["LzMirror"] = '100.0'
    Mirror["Mat_Mirror"] = 'iron_muinf_sat-2.34.dat'
    Mirror["IronIndex_Mirror"] = -1
    Mirror["nMirDivX"] = '1'
    Mirror["nMirDivY"] = '51'
    Mirror["nMirDivZ"] = '51'
    Mirror["FracDivMirY"] = '1.0'
    Mirror["FracDivMirZ"] = '1.0'

  #endif len(Mirror)

  VMirror = {}

  VMirror['$LxPolHalf'] = '$LxPol_Mirror / 2.'
  VMirror['$LyPol'] = '$LyPol_Mirror'
  VMirror['$LzPolHalf'] = '$LzPolFull_Mirror / 2.'

  VMirror['$xPolHalf'] = '- $LxPolHalf / 2.'
  VMirror['$yPol'] = '- ( $LyPol_Mirror + $FullGap_Mirror ) / 2.'
  VMirror['$zPolHalf'] = '- $LzPolHalf / 2.'

  VMirror['$nDivX_PolHalf'] = 'int[ $nDivX_Pol_Mirror / 2. + 0.5 ]'

  VMirror['$LxMag'] = '$PerLen_Mirror / 2. - ( $LxPol_Mirror + 2.0 * $Space_Mag_Pol_Mirror)'
  VMirror['$LxMagHalf'] = '$LxMag / 2.'
  VMirror['$LzMagHalf'] = '$LzMagFull_Mirror / 2.'

  VMirror['$xMagHalf'] = '$xPolHalf - $LxPolHalf / 2. - $Space_Mag_Pol_Mirror - $LxMagHalf / 2.'
  VMirror['$yMag'] = '- ( $LyMag_Mirror + $FullGap_Mirror ) / 2.'
  VMirror['$zMagHalf'] = '- $LzMagHalf / 2.'

  VMirror['$nDivX_MagHalf'] = 'int[ $nDivX_Mag_Mirror / 2. + 0.5 ]'

  VMirror['$ColorMag'] = '$red'
  VMirror['$ColorPol'] = '$blue'
  VMirror['$ColorMir'] = '$cyan'

  VMirror['$LyMirrorHalf'] = '$LyMirror / 2.'
  VMirror['$LzMirrorHalf'] = '$LzMirror / 2.'

  VMirror['$eps'] = '1.23e-6'
  VMirror['$xMirror'] = '$xMagHalf - $LxMagHalf / 2. - $LxMirror / 2.'
  VMirror['$yMirrorHalf'] = '- $LyMirrorHalf / 2. - $eps'
  VMirror['$zMirrorHalf'] = '- $LzMirrorHalf / 2. - $eps'

  S_FullGap_Mirror = StringVar()
  S_LyMag_Mirror = StringVar()
  S_LzMagFull_Mirror = StringVar()
  S_PerLen_Mirror = StringVar()
  S_LxPol_Mirror = StringVar()
  S_LyPol_Mirror = StringVar()
  S_LzPolFull_Mirror = StringVar()
  S_MatPol_Mirror = StringVar()
  S_Mat_Mirror = StringVar()
  S_ChamfPol_Mirror = StringVar()
  S_ChamfMag_Mirror = StringVar()
  S_Space_Mag_Pol_Mirror = StringVar()
  S_Space_Pol_Mag_Mirror = StringVar()
  S_Mcoating_Mirror = StringVar()
  S_Br_Mirror = StringVar()
  S_mu_Mirror = StringVar()
  S_KsiPerp_Mirror = StringVar()

  S_LxMirror = StringVar()
  S_LyMirror = StringVar()
  S_LzMirror = StringVar()

  S_nMirDivX = StringVar()
  S_nMirDivY = StringVar()
  S_nMirDivZ = StringVar()
  S_FracDivMirY = StringVar()
  S_FracDivMirZ = StringVar()

  S_nDivX_Mag_Mirror = StringVar()
  S_nDivY_Mag_Mirror = StringVar()
  S_nDivZ_MagHalf_Mirror = StringVar()
  S_FracDivY_Mag_Mirror = StringVar()
  S_FracDivZ_Mag_Mirror = StringVar()

  S_nDivX_Pol_Mirror = StringVar()
  S_nDivY_Pol_Mirror = StringVar()
  S_nDivZ_PolHalf_Mirror = StringVar()
  S_FracDivY_Pol_Mirror = StringVar()
  S_FracDivZ_Pol_Mirror = StringVar()

  S_FullGap_Mirror.set(Mirror["FullGap_Mirror"])
  S_PerLen_Mirror.set(Mirror["PerLen_Mirror"])
  S_LyMag_Mirror.set(Mirror["LyMag_Mirror"])
  S_LzMagFull_Mirror.set(Mirror["LzMagFull_Mirror"])
  S_LxPol_Mirror.set(Mirror["LxPol_Mirror"])
  S_LyPol_Mirror.set(Mirror["LyPol_Mirror"])
  S_LzPolFull_Mirror.set(Mirror["LzPolFull_Mirror"])
  S_Mcoating_Mirror.set(Mirror["Mcoating_Mirror"])
  S_MatPol_Mirror.set("Vanadium_Permendur_Radia.dat")
  S_Mat_Mirror.set("iron_muinf_sat-2.34.dat")
  S_ChamfPol_Mirror.set(Mirror["ChamfPol_Mirror"])
  S_ChamfMag_Mirror.set(Mirror["ChamfMag_Mirror"])
  S_Space_Mag_Pol_Mirror.set(Mirror["Space_Mag_Pol_Mirror"])
  S_Space_Pol_Mag_Mirror.set(Mirror["Space_Pol_Mag_Mirror"])
  S_Br_Mirror.set(Mirror["Br_Mirror"])
  S_mu_Mirror.set(Mirror["mu_Mirror"])
  S_KsiPerp_Mirror.set(Mirror["KsiPerp_Mirror"])

  S_nDivX_Pol_Mirror.set(Mirror["nDivX_Pol_Mirror"])
  S_nDivY_Pol_Mirror.set(Mirror["nDivY_Pol_Mirror"])
  S_nDivZ_PolHalf_Mirror.set(Mirror["nDivZ_PolHalf_Mirror"])
  S_FracDivY_Pol_Mirror.set(Mirror["FracDivY_Pol_Mirror"])
  S_FracDivZ_Pol_Mirror.set(Mirror["FracDivZ_Pol_Mirror"])

  S_nDivX_Mag_Mirror.set(Mirror["nDivX_Mag_Mirror"])
  S_nDivY_Mag_Mirror.set(Mirror["nDivY_Mag_Mirror"])
  S_nDivZ_MagHalf_Mirror.set(Mirror["nDivZ_MagHalf_Mirror"])
  S_FracDivY_Mag_Mirror.set(Mirror["FracDivY_Mag_Mirror"])
  S_FracDivZ_Mag_Mirror.set(Mirror["FracDivZ_Mag_Mirror"])

  S_LxMirror.set(Mirror["LxMirror"])
  S_LyMirror.set(Mirror["LyMirror"])
  S_LzMirror.set(Mirror["LzMirror"])

  S_nMirDivX.set(Mirror["nMirDivX"])
  S_nMirDivY.set(Mirror["nMirDivY"])
  S_nMirDivZ.set(Mirror["nMirDivZ"])

  S_FracDivMirY.set(Mirror["FracDivMirY"])
  S_FracDivMirZ.set(Mirror["FracDivMirZ"])

  S_Mat_Mirror.set(Mirror["Mat_Mirror"])

  MirrorOld = Mirror

#enddef ugui_ini_mirror()

def ugui_ini_hybrid(mode=''):
+seq,uguiglobind.
+seq,hybridvarsind.

  if mode != 'force' and fexist("hybrid.lst"):
    try:
      Hybrid = {}
      print(NL,"--- Initializing hybrid undulator, reading default values from hybrid.lst ---")
      flst = open("hybrid.lst","r")
      lines =  flst.readlines()
      flst.close()
      for line in lines:
        hyb = line.strip().split()
        Hybrid[hyb[0]] = hyb[1]
      #endfor
      Hybrid["RECIndex_Hybrid"] = -1
      Hybrid["IronIndex_Hybrid"] = -1
      print("--- Succeeded ---",NL)
      #endfor
    except:
      print("--- Failed ---",NL)
      Hybrid = {}
      Hybrid["RECIndex_Hybrid"] = -1
      Hybrid["IronIndex_Hybrid"] = -1
  #endif

  if len(Hybrid) <= 2 or mode == 'force':

    Hybrid["FullGap_Hybrid"] = '5.5'
    Hybrid["nPeriods_Hybrid"] = '3'
    Hybrid["PerLen_Hybrid"] = '17.'
    #Hybrid["LxMag_Hybrid"] = '10.'
    Hybrid["LyMag_Hybrid"] = '35.'
    Hybrid["LzMagFull_Hybrid"] = '50.'
    Hybrid["LxPol_Hybrid"] = '3.0'
    Hybrid["LyPol_Hybrid"] = '30.'
    Hybrid["LzPolFull_Hybrid"] = '40.'
    Hybrid["Mcoating_Hybrid"] = '0.014'
    Hybrid["ChamfPol_Hybrid"] = '0.1'
    Hybrid["OffPol_Hybrid"] = '0.05'
    Hybrid["ChamfMag_Hybrid"] = '0.3'
    Hybrid["Space_Mag_Pol_Hybrid"] = '0.1'
    Hybrid["Space_Pol_Mag_Hybrid"] = '0.1'
    Hybrid["Br_Hybrid"] = '1.62'
    Hybrid["mu_Hybrid"] = '1.03'
    Hybrid["KsiPerp_Hybrid"] = '0.17'

    Hybrid["RECIndex_Hybrid"] = -1
    Hybrid["IronIndex_Hybrid"] = -1
    Hybrid["MatPol_Hybrid"] = 'Vanadium_Permendur_Radia.dat'

    Hybrid["nDivX_Mag_Hybrid"] = '3'
    Hybrid["nDivY_Mag_Hybrid"] = '3'
    Hybrid["nDivZ_MagHalf_Hybrid"] = '3'
    Hybrid["FracDivY_Mag_Hybrid"] = '1.0'
    Hybrid["FracDivZ_Mag_Hybrid"] = '1.0'

    Hybrid["nDivX_Pol_Hybrid"] = '5'
    Hybrid["nDivY_Pol_Hybrid"] = '5'
    Hybrid["nDivZ_PolHalf_Hybrid"] = '7'
    Hybrid["FracDivY_Pol_Hybrid"] = '1.0'
    Hybrid["FracDivZ_Pol_Hybrid"] = '1.0'

    Hybrid["LyEndMag1_Hybrid"] = Hybrid["LyMag_Hybrid"]
    Hybrid["LyEndMag2_Hybrid"] = "32.2"
    Hybrid["LyEndMag3_Hybrid"] = "12.5"

    Hybrid["OffEndMag1_Hybrid"] = '0.0'
    Hybrid["OffEndMag2_Hybrid"] = '1.81'
    Hybrid["OffEndMag3_Hybrid"] = '6.47'

    Hybrid["SpaceEndMag1_Hybrid"] = Hybrid["Space_Mag_Pol_Hybrid"]
    Hybrid["SpaceEndMag2_Hybrid"] = Hybrid["Space_Mag_Pol_Hybrid"]
    Hybrid["SpaceEndMag3_Hybrid"] = Hybrid["Space_Mag_Pol_Hybrid"]

    Hybrid["LyEndPol1_Hybrid"] = Hybrid["LyPol_Hybrid"]
    Hybrid["LyEndPol2_Hybrid"] = Hybrid["LyPol_Hybrid"]

    Hybrid["OffEndPol1_Hybrid"] = Hybrid["OffPol_Hybrid"] = '0.05'
    Hybrid["OffEndPol2_Hybrid"] = Hybrid["OffPol_Hybrid"] = '0.05'
    Hybrid["OffEndPol3_Hybrid"] = Hybrid["OffPol_Hybrid"] = '0.05'

    Hybrid["SpaceEndPol1_Hybrid"] = Hybrid["Space_Pol_Mag_Hybrid"]
    Hybrid["SpaceEndPol2_Hybrid"] = Hybrid["Space_Pol_Mag_Hybrid"]
    Hybrid["SpaceEndPol3_Hybrid"] = Hybrid["Space_Pol_Mag_Hybrid"]

  #endif len(Hybrid)

  VHybrid = {}

  VHybrid['$xCen_Hybrid'] = '- ( $nPeriods_Hybrid - 1 ) * $PerLen_Hybrid'

  VHybrid['$LxMag_Hybrid'] = '$PerLen_Hybrid / 2. - ( $LxPol_Hybrid + $Space_Mag_Pol_Hybrid + $Space_Pol_Mag_Hybrid)'
  #    VHybrid['$LxPol_Hybrid'] = '$PerLen_Hybrid / 2. - ( $LxMag_Hybrid + $Space_Mag_Pol_Hybrid + $Space_Pol_Mag_Hybrid)'
  VHybrid['$LxPolHalf_Hybrid'] = '$LxPol_Hybrid / 2.'
  VHybrid['$LzPolHalf_Hybrid'] = '$LzPolFull_Hybrid / 2.'

  VHybrid['$xHalfPol3_Hybrid'] = '$xCen_Hybrid - $PerLen_Hybrid + $LxPol_Hybrid / 4.'
  VHybrid['$xMag2_Hybrid'] = '$xHalfPol3_Hybrid + $LxPolHalf_Hybrid / 2. + $Space_Pol_Mag_Hybrid + $LxMag_Hybrid / 2.'
  VHybrid['$xPol2_Hybrid'] = '$xCen_Hybrid - $PerLen_Hybrid / 2.'
  VHybrid['$xMag1_Hybrid'] = '$xMag2_Hybrid + $PerLen_Hybrid / 2.'
  VHybrid['$xHalfPol1_Hybrid'] = '$xCen_Hybrid - $LxPol_Hybrid / 4.'

  VHybrid['$yMag_Hybrid'] = '- ( $LyMag_Hybrid + $FullGap_Hybrid ) / 2.'
  VHybrid['$yPol_Hybrid'] = '- ( $LyPol_Hybrid + $FullGap_Hybrid ) / 2. - $OffPol_Hybrid'

  VHybrid['$LzMagHalf_Hybrid'] = '$LzMagFull_Hybrid / 2.'
  VHybrid['$zMag_Hybrid'] = '- $LzMagHalf_Hybrid / 2.'
  VHybrid['$LzPolHalf_Hybrid'] = '$LzPolFull_Hybrid / 2.'
  VHybrid['$zPol_Hybrid'] = '- $LzPolHalf_Hybrid / 2.'

  VHybrid['$xEndPolHalf_Hybrid'] = '$xHalfPol3_Hybrid - $LxPolHalf_Hybrid'
  VHybrid['$nDivX_PolHalf_Hybrid'] = 'int[ $nDivX_Pol_Hybrid / 2. + 0.5 ]'

  VHybrid['$xEndMag1_Hybrid'] = '$xEndPolHalf_Hybrid - $LxPolHalf_Hybrid / 2. - $SpaceEndMag2_Hybrid - $LxMag_Hybrid / 2.'
  VHybrid['$yEndMag1_Hybrid'] = '- ( $LyEndMag1_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndMag1_Hybrid'

  VHybrid['$xEndPol1_Hybrid'] = '$xEndMag1_Hybrid - $LxMag_Hybrid / 2. - $SpaceEndPol1_Hybrid - $LxPol_Hybrid / 2.'
  VHybrid['$yEndPol1_Hybrid'] = '- ( $LyEndPol1_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndPol1_Hybrid'

  VHybrid['$xEndMag2_Hybrid'] = '$xEndPol1_Hybrid - $LxPol_Hybrid / 2. - $SpaceEndMag2_Hybrid - $LxMag_Hybrid / 2.'
  VHybrid['$yEndMag2_Hybrid'] = '- ( $LyEndMag2_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndMag2_Hybrid'

  VHybrid['$xEndPol2_Hybrid'] = '$xEndMag2_Hybrid - $LxMag_Hybrid / 2. - $SpaceEndPol2_Hybrid - $LxPol_Hybrid / 2.'
  VHybrid['$yEndPol2_Hybrid'] = '- ( $LyEndPol2_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndPol2_Hybrid'

  VHybrid['$ColorMag_Hybrid'] = '$red'
  VHybrid['$ColorPol_Hybrid'] = '$blue'

  VHybrid['$xEndMag3_Hybrid'] = '$xEndPol2_Hybrid - $LxPol_Hybrid / 2. - $SpaceEndMag3_Hybrid - $LxMag_Hybrid / 2.'
  VHybrid['$yEndMag3_Hybrid'] = '- ( $LyEndMag3_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndMag3_Hybrid'

  S_nPer_Hybrid = StringVar()
  S_FullGap_Hybrid = StringVar()
  #S_LxMag_Hybrid = StringVar()
  S_LyMag_Hybrid = StringVar()
  S_LzMagFull_Hybrid = StringVar()
  S_PerLen_Hybrid = StringVar()
  S_LxPol_Hybrid = StringVar()
  S_LyPol_Hybrid = StringVar()
  S_LzPolFull_Hybrid = StringVar()
  S_MatPol_Hybrid = StringVar()
  S_ChamfPol_Hybrid = StringVar()
  S_OffPol_Hybrid = StringVar()
  S_ChamfMag_Hybrid = StringVar()
  S_Space_Mag_Pol_Hybrid = StringVar()
  S_Space_Pol_Mag_Hybrid = StringVar()
  S_Mcoating_Hybrid = StringVar()
  S_Br_Hybrid = StringVar()
  S_mu_Hybrid = StringVar()
  S_KsiPerp_Hybrid = StringVar()

  S_nDivX_Mag_Hybrid = StringVar()
  S_nDivY_Mag_Hybrid = StringVar()
  S_nDivZ_MagHalf_Hybrid = StringVar()
  S_FracDivY_Mag_Hybrid = StringVar()
  S_FracDivZ_Mag_Hybrid = StringVar()

  S_nDivX_Pol_Hybrid = StringVar()
  S_nDivY_Pol_Hybrid = StringVar()
  S_nDivZ_PolHalf_Hybrid = StringVar()
  S_FracDivY_Pol_Hybrid = StringVar()
  S_FracDivZ_Pol_Hybrid = StringVar()

  S_LyEndMag1_Hybrid = StringVar()
  S_SpaceEndMag1_Hybrid = StringVar()
  S_OffEndMag1_Hybrid = StringVar()

  S_LyEndMag2_Hybrid = StringVar()
  S_SpaceEndMag2_Hybrid = StringVar()
  S_OffEndMag2_Hybrid = StringVar()

  S_LyEndMag3_Hybrid = StringVar()
  S_SpaceEndMag3_Hybrid = StringVar()
  S_OffEndMag3_Hybrid = StringVar()

  S_LyEndPol1_Hybrid = StringVar()
  S_SpaceEndPol1_Hybrid = StringVar()
  S_OffEndPol1_Hybrid = StringVar()

  S_LyEndPol2_Hybrid = StringVar()
  S_SpaceEndPol2_Hybrid = StringVar()
  S_OffEndPol2_Hybrid = StringVar()

  S_FullGap_Hybrid.set(Hybrid["FullGap_Hybrid"])
  S_nPer_Hybrid.set(Hybrid["nPeriods_Hybrid"])
  S_PerLen_Hybrid.set(Hybrid["PerLen_Hybrid"])
  #S_LxMag_Hybrid.set(Hybrid["LxMag_Hybrid"])
  S_LyMag_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_LzMagFull_Hybrid.set(Hybrid["LzMagFull_Hybrid"])
  S_LxPol_Hybrid.set(Hybrid["LxPol_Hybrid"])
  S_LyPol_Hybrid.set(Hybrid["LyPol_Hybrid"])
  S_LzPolFull_Hybrid.set(Hybrid["LzPolFull_Hybrid"])
  S_Mcoating_Hybrid.set(Hybrid["Mcoating_Hybrid"])
  S_MatPol_Hybrid.set("Vanadium_Permendur_Radia.dat")
  S_ChamfPol_Hybrid.set(Hybrid["ChamfPol_Hybrid"])
  S_OffPol_Hybrid.set(Hybrid["OffPol_Hybrid"])
  S_ChamfMag_Hybrid.set(Hybrid["ChamfMag_Hybrid"])
  S_Space_Mag_Pol_Hybrid.set(Hybrid["Space_Mag_Pol_Hybrid"])
  S_Space_Pol_Mag_Hybrid.set(Hybrid["Space_Pol_Mag_Hybrid"])
  S_Br_Hybrid.set(Hybrid["Br_Hybrid"])
  S_mu_Hybrid.set(Hybrid["mu_Hybrid"])
  S_KsiPerp_Hybrid.set(Hybrid["KsiPerp_Hybrid"])

  S_nDivX_Pol_Hybrid.set(Hybrid["nDivX_Pol_Hybrid"])
  S_nDivY_Pol_Hybrid.set(Hybrid["nDivY_Pol_Hybrid"])
  S_nDivZ_PolHalf_Hybrid.set(Hybrid["nDivZ_PolHalf_Hybrid"])
  S_FracDivY_Pol_Hybrid.set(Hybrid["FracDivY_Pol_Hybrid"])
  S_FracDivZ_Pol_Hybrid.set(Hybrid["FracDivZ_Pol_Hybrid"])

  S_nDivX_Mag_Hybrid.set(Hybrid["nDivX_Mag_Hybrid"])
  S_nDivY_Mag_Hybrid.set(Hybrid["nDivY_Mag_Hybrid"])
  S_nDivZ_MagHalf_Hybrid.set(Hybrid["nDivZ_MagHalf_Hybrid"])
  S_FracDivY_Mag_Hybrid.set(Hybrid["FracDivY_Mag_Hybrid"])
  S_FracDivZ_Mag_Hybrid.set(Hybrid["FracDivZ_Mag_Hybrid"])

  S_LyEndMag1_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_SpaceEndMag1_Hybrid.set(Hybrid["SpaceEndMag1_Hybrid"])
  S_OffEndMag1_Hybrid.set(Hybrid["OffEndMag1_Hybrid"])

  S_LyEndMag2_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_SpaceEndMag2_Hybrid.set(Hybrid["SpaceEndMag2_Hybrid"])
  S_OffEndMag2_Hybrid.set(Hybrid["OffEndMag2_Hybrid"])

  S_LyEndMag3_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_SpaceEndMag3_Hybrid.set(Hybrid["SpaceEndMag3_Hybrid"])
  S_OffEndMag3_Hybrid.set(Hybrid["OffEndMag3_Hybrid"])

  S_LyEndPol1_Hybrid.set(Hybrid["LyPol_Hybrid"])
  S_SpaceEndPol1_Hybrid.set(Hybrid["SpaceEndPol1_Hybrid"])
  S_OffEndPol1_Hybrid.set(Hybrid["OffEndPol1_Hybrid"])

  S_LyEndPol2_Hybrid.set(Hybrid["LyPol_Hybrid"])
  S_SpaceEndPol2_Hybrid.set(Hybrid["SpaceEndPol2_Hybrid"])
  S_OffEndPol2_Hybrid.set(Hybrid["OffEndPol2_Hybrid"])

#enddef ugui_ini_hybrid()

def ugui_ini_appleII(mode=''):
+seq,uguiglobind.

+self,if=debugappii.
  print(NL,"ugui_ini_appleII::mode:",mode)
  print("ugui_ini_appleII::AppleII:",len(AppleII),AppleII,NL)
+self.

  if mode != 'force' and fexist("appleii.lst"):
    AppleII = {}
    try:
      print(NL,"--- Initializing AppleII undulator, reading default values from appleii.lst ---")
      flst = open("appleii.lst","r")
      lines =  flst.readlines()
      flst.close()
      for line in lines:
        app = line.strip().split()
        AppleII[app[0]] = app[1]
      #endfor
      print("--- Succeeded ---",NL)
    except:
      print("--- Failed ---",NL)
  #endif

  if len(AppleII) < 3 or mode == 'force':

    AppleII["nPeriods"] = 3
    AppleII["LxMag"] = 14.0
    AppleII["LyMag"] = 40.0
    AppleII["LzMag"] = 40.0
    AppleII["AirGap"] = 0.1
    AppleII["Mcoating"] = 0.014
    Pars["$Mcoating"] = 0.014
    AppleII["FullGap"] = 5.0

    AppleII["Br"] = -1.38
    AppleII["Mu"] = 1.06
    AppleII["KsiPerp"] = 0.17
    AppleII["MatIndex"] = -1

    AppleII["S2Shift"] = 0.0
    AppleII["S3Shift"] = 10.0
    AppleII["xMagCen"] = 0.0
    AppleII["zSlit"] = 0.5
    AppleII["xMagCen"] = 0.0
    AppleII["nMagDivX"] = 4
    AppleII["nHalfMagDivX"] = 2
    AppleII["nMagDivY"] = 4
    AppleII["nMagDivZ"] = 3

    VAppleII = {}

    VAppleII['$E1Br'] = '$Br / 4.'
    VAppleII['$E2Br'] = '- $Br * 3. / 4.'
    VAppleII['$PerLen'] = '4. * $LxMag'
    VAppleII['$HalfGap'] = '$FullGap / 2.'
    VAppleII['$HalfPerLen'] = '$PerLen / 2.'
    VAppleII['$LxHalfMag'] = '$LxMag / 2.'
    VAppleII['$yMagCen'] = '- $HalfGap - $LyMag / 2.'
    VAppleII['$zMagCen'] = '- $LzMag / 2. - $zSlit / 2.'
    VAppleII['$hS3Shift'] = '$S3Shift / 2.'
    VAppleII['$hS2Shift'] = '$S2Shift / 2.'
    VAppleII['$x1LRMagCen'] = '$xMagCen + $LxHalfMag / 2. - $hS3Shift - $hS2Shift'
    VAppleII['$x2LRMagCen'] = '$x1LRMagCen + $LxHalfMag / 2. + $LxMag / 2.'
    VAppleII['$x3LRMagCen'] = '$x1LRMagCen + $LxMag + $LxHalfMag'
    VAppleII['$x4LRMagCen'] = '$x3LRMagCen + $LxHalfMag'
    VAppleII['$x5LRMagCen'] = '$x4LRMagCen + $LxHalfMag / 2. + $LxMag / 2.'
    VAppleII['$x6LRMagCen'] = '$x5LRMagCen + $LxMag / 2. + $LxHalfMag / 2.'
    VAppleII['$x1LLMagCen'] = ' $x1LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x2LLMagCen'] = ' $x2LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x3LLMagCen'] = ' $x3LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x4LLMagCen'] = ' $x4LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x5LLMagCen'] = ' $x5LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x6LLMagCen'] = ' $x6LRMagCen + $S3Shift + $S2Shift'

    VAppleII['$x1ULMagCen'] = ' $x1LRMagCen'
    VAppleII['$x2ULMagCen'] = ' $x2LRMagCen'
    VAppleII['$x3ULMagCen'] = ' $x3LRMagCen'
    VAppleII['$x4ULMagCen'] = ' $x4LRMagCen'
    VAppleII['$x5ULMagCen'] = ' $x5LRMagCen'
    VAppleII['$x6ULMagCen'] = ' $x6LRMagCen'

    VAppleII['$x1URMagCen'] = '$x1LLMagCen - $S2Shift * 2.'
    VAppleII['$x2URMagCen'] = '$x2LLMagCen - $S2Shift * 2.'
    VAppleII['$x3URMagCen'] = '$x3LLMagCen - $S2Shift * 2.'
    VAppleII['$x4URMagCen'] = '$x4LLMagCen - $S2Shift * 2.'
    VAppleII['$x5URMagCen'] = '$x5LLMagCen - $S2Shift * 2.'
    VAppleII['$x6URMagCen'] = '$x6LLMagCen - $S2Shift * 2.'

    VAppleII['$yUMagCen'] = '- $yMagCen'

    VAppleII['$zLLMagCen'] = '- $zMagCen'
    VAppleII['$zULMagCen'] = '- $zMagCen'

    VAppleII['$yModCen'] = '- 2. * $yMagCen'
    VAppleII['$zModCen'] = '- 2. * $zMagCen'

    VAppleII['$x1E1LLMagCen'] = '$x1LLMagCen - $PerLen'
    VAppleII['$x2E1LLMagCen'] = '$x2LLMagCen - $PerLen'
    VAppleII['$x3E1LLMagCen'] = '$x3LLMagCen - $PerLen'

    VAppleII['$x1E1ULMagCen'] = '$x1ULMagCen - $PerLen'
    VAppleII['$x2E1ULMagCen'] = '$x2ULMagCen - $PerLen'
    VAppleII['$x3E1ULMagCen'] = '$x3ULMagCen - $PerLen'

    VAppleII['$x1E1LRMagCen'] = '$x1LRMagCen - $PerLen'
    VAppleII['$x2E1LRMagCen'] = '$x2LRMagCen - $PerLen'
    VAppleII['$x3E1LRMagCen'] = '$x3LRMagCen - $PerLen'

    VAppleII['$x1E1URMagCen'] = '$x1URMagCen - $PerLen'
    VAppleII['$x2E1URMagCen'] = '$x2URMagCen - $PerLen'
    VAppleII['$x3E1URMagCen'] = '$x3URMagCen - $PerLen'

    VAppleII['$x1E2LLMagCen'] = '$x1LLMagCen - $HalfPerLen'
    VAppleII['$x2E2LLMagCen'] = '$x2LLMagCen - $HalfPerLen'
    VAppleII['$x3E2LLMagCen'] = '$x3LLMagCen - $HalfPerLen'

    VAppleII['$x1E2ULMagCen'] = '$x1ULMagCen - $HalfPerLen'
    VAppleII['$x2E2ULMagCen'] = '$x2ULMagCen - $HalfPerLen'
    VAppleII['$x3E2ULMagCen'] = '$x3ULMagCen - $HalfPerLen'

    VAppleII['$x1E2LRMagCen'] = '$x1LRMagCen - $HalfPerLen'
    VAppleII['$x2E2LRMagCen'] = '$x2LRMagCen - $HalfPerLen'
    VAppleII['$x3E2LRMagCen'] = '$x3LRMagCen - $HalfPerLen'

    VAppleII['$x1E2URMagCen'] = '$x1URMagCen - $HalfPerLen'
    VAppleII['$x2E2URMagCen'] = '$x2URMagCen - $HalfPerLen'
    VAppleII['$x3E2URMagCen'] = '$x3URMagCen - $HalfPerLen'

    VAppleII['$dxED0'] = '( $nPeriods + 1.0 ) * $PerLen'
    VAppleII['$dxED1'] = '( $nPeriods + 2.0 ) * $PerLen'
    VAppleII['$dxED2'] = '( $nPeriods + 1.5 ) * $PerLen'

    VAppleII['$x1D0LLMagCen'] = '$x1E1LLMagCen + $dxED0'
    VAppleII['$x2D0LLMagCen'] = '$x2E1LLMagCen + $dxED0'
    VAppleII['$x3D0LLMagCen'] = '$x3E1LLMagCen + $dxED0'

    VAppleII['$x1D0LRMagCen'] = '$x1E1LRMagCen + $dxED0'
    VAppleII['$x2D0LRMagCen'] = '$x2E1LRMagCen + $dxED0'
    VAppleII['$x3D0LRMagCen'] = '$x3E1LRMagCen + $dxED0'

    VAppleII['$x1D0ULMagCen'] = '$x1E1ULMagCen + $dxED0'
    VAppleII['$x2D0ULMagCen'] = '$x2E1ULMagCen + $dxED0'
    VAppleII['$x3D0ULMagCen'] = '$x3E1ULMagCen + $dxED0'

    VAppleII['$x1D0URMagCen'] = '$x1E1URMagCen + $dxED0'
    VAppleII['$x2D0URMagCen'] = '$x2E1URMagCen + $dxED0'
    VAppleII['$x3D0URMagCen'] = '$x3E1URMagCen + $dxED0'

    VAppleII['$x1D1LLMagCen'] = '$x1E1LLMagCen + $dxED1'
    VAppleII['$x2D1LLMagCen'] = '$x2E1LLMagCen + $dxED1'
    VAppleII['$x3D1LLMagCen'] = '$x3E1LLMagCen + $dxED1'

    VAppleII['$x1D1LRMagCen'] = '$x1E1LRMagCen + $dxED1'
    VAppleII['$x2D1LRMagCen'] = '$x2E1LRMagCen + $dxED1'
    VAppleII['$x3D1LRMagCen'] = '$x3E1LRMagCen + $dxED1'

    VAppleII['$x1D1ULMagCen'] = '$x1E1ULMagCen + $dxED1'
    VAppleII['$x2D1ULMagCen'] = '$x2E1ULMagCen + $dxED1'
    VAppleII['$x3D1ULMagCen'] = '$x3E1ULMagCen + $dxED1'

    VAppleII['$x1D1URMagCen'] = '$x1E1URMagCen + $dxED1'
    VAppleII['$x2D1URMagCen'] = '$x2E1URMagCen + $dxED1'
    VAppleII['$x3D1URMagCen'] = '$x3E1URMagCen + $dxED1'

    VAppleII['$x1D2LLMagCen'] = '$x1E1LLMagCen + $dxED2'
    VAppleII['$x2D2LLMagCen'] = '$x2E1LLMagCen + $dxED2'
    VAppleII['$x3D2LLMagCen'] = '$x3E1LLMagCen + $dxED2'

    VAppleII['$x1D2LRMagCen'] = '$x1E1LRMagCen + $dxED2'
    VAppleII['$x2D2LRMagCen'] = '$x2E1LRMagCen + $dxED2'
    VAppleII['$x3D2LRMagCen'] = '$x3E1LRMagCen + $dxED2'

    VAppleII['$x1D2ULMagCen'] = '$x1E1ULMagCen + $dxED2'
    VAppleII['$x2D2ULMagCen'] = '$x2E1ULMagCen + $dxED2'
    VAppleII['$x3D2ULMagCen'] = '$x3E1ULMagCen + $dxED2'

    VAppleII['$x1D2URMagCen'] = '$x1E1URMagCen + $dxED2'
    VAppleII['$x2D2URMagCen'] = '$x2E1URMagCen + $dxED2'
    VAppleII['$x3D2URMagCen'] = '$x3E1URMagCen + $dxED2'

    VAppleII['$colormag'] = '$red'
    VAppleII['$e1colormag'] = '$magenta'
    VAppleII['$e2colormag'] = '$green'

  #endif len(AppleII)

  S_nPer_AppleII = StringVar()
  S_FullGap_AppleII = StringVar()

  S_Xlen_AppleII = StringVar()
  S_Ylen_AppleII = StringVar()
  S_Zlen_AppleII = StringVar()

  S_HorSlit_AppleII = StringVar()
  S_AirGap_AppleII = StringVar()
  S_DeadCoat_AppleII = StringVar()

  S_S2Shift_AppleII = StringVar()
  S_S3Shift_AppleII = StringVar()

  S_Br_AppleII = StringVar()
  S_Mu_AppleII = StringVar()
  S_KsiPerp_AppleII = StringVar()

  S_NdivX_AppleII = StringVar()
  S_NdivXHalf_AppleII = StringVar()
  S_NdivY_AppleII = StringVar()
  S_NdivZ_AppleII = StringVar()

  S_nPer_AppleII.set(AppleII["nPeriods"])
  S_FullGap_AppleII.set(AppleII["FullGap"])

  S_Xlen_AppleII.set(AppleII["LxMag"])
  S_Ylen_AppleII.set(AppleII["LyMag"])
  S_Zlen_AppleII.set(AppleII["LzMag"])

  S_HorSlit_AppleII.set(AppleII["zSlit"])
  S_AirGap_AppleII.set(AppleII["AirGap"])
  S_DeadCoat_AppleII.set(Pars["$Mcoating"])

  S_S2Shift_AppleII.set(AppleII["S2Shift"])
  S_S3Shift_AppleII.set(AppleII["S3Shift"])

  S_Br_AppleII.set(AppleII["Br"])
  S_Mu_AppleII.set(AppleII["Mu"])
  S_KsiPerp_AppleII.set(AppleII["KsiPerp"])

  S_NdivX_AppleII.set(AppleII["nMagDivX"])
  S_NdivXHalf_AppleII.set(AppleII["nHalfMagDivX"])
  S_NdivY_AppleII.set(AppleII["nMagDivY"])
  S_NdivZ_AppleII.set(AppleII["nMagDivZ"])

  AppleIIOld = AppleII

#enddef ugui_ini_appleII()

def _cnWappleII():
+seq,uguiglobind.
  WappleII.destroy()
#enddef _cnappleII()

def _clWappleII(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print(NL,"trace:: _clWappleII")
+self.

  FileCLCO = FileCLC
  FileCLC = 'undumag.clc'
  AppleII_Mode = 1

  if int(AppleII["MatIndex"]) < 0:
    Nmat += 1
    AppleII["MatIndex"] = Nmat
    Materials.append([str(Nmat),"1","1","undugui_AppleII_mu.dat", \
    [str(AppleII["Mu"]) + " " + str(AppleII["KsiPerp"]) + "! mu_Par and ksi_Perp"]])
  #endif

  uwritenam('clWappleII')
  uwriteclc('clWappleII')

  MustWriteCLC = 0

  ureadclc('clWappleII')

  AppleOld = AppleII

  #AppleII_Mode = 1

  _showGeoPython(callkey='clWappleII')

  FileCLCO = FileCLC
  WappleII.destroy()

+self,if=trace.
  print(NL,"trace:: Leaving _clWappleII")
+self.

#enddef _clappleII()

def _appleII(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print(NL,"trace:: _appleII('",callkey,"')")
+self.

  undugui_clean('AppleII')
  ugui_ini_appleII('_appleII')

  WappleII = Toplevel()
  WappleII.title("APPLE-II Undulator")
  WappleII.attributes('-topmost', 1)

  widlab = 30

  fNper = Frame(WappleII)
  tNper = 'number of periods'
  lNper = Label(fNper,text=tNper,font=MyFont, width=widlab)
  lNper.pack(side=LEFT)
  eNper = Entry(fNper,text=S_nPer_AppleII,justify=CENTER,font=MyFont)
  eNper.pack(side=RIGHT)
  fNper.pack(fill='x')

  fFullGap = Frame(WappleII)
  tFullGap = 'full gap [mm]'
  lFullGap = Label(fFullGap,text=tFullGap,font=MyFont, width=widlab)
  lFullGap.pack(side=LEFT)
  eFullGap = Entry(fFullGap,text=S_FullGap_AppleII,justify=CENTER,font=MyFont)
  eFullGap.pack(side=RIGHT)
  fFullGap.pack(fill='x')

  fxlen = Frame(WappleII)
  txlen = 'length of magnets [mm]'
  lxlen = Label(fxlen,text=txlen,font=MyFont, width=widlab)
  lxlen.pack(side=LEFT)
  exlen = Entry(fxlen,text=S_Xlen_AppleII,justify=CENTER,font=MyFont)
  exlen.pack(side=RIGHT)
  fxlen.pack(fill='x')

  fAirGap = Frame(WappleII)
  tAirGap = 'AirGap in x between magnets [mm]'
  lAirGap = Label(fAirGap,text=tAirGap,font=MyFont, width=widlab)
  lAirGap.pack(side=LEFT)
  eAirGap = Entry(fAirGap,text=S_AirGap_AppleII,justify=CENTER,font=MyFont)
  eAirGap.pack(side=RIGHT)
  fAirGap.pack(fill='x')

  fylen = Frame(WappleII)
  tylen = 'height of magnets [mm]'
  lylen = Label(fylen,text=tylen,font=MyFont, width=widlab)
  lylen.pack(side=LEFT)
  eylen = Entry(fylen,text=S_Ylen_AppleII,justify=CENTER,font=MyFont)
  eylen.pack(side=RIGHT)
  fylen.pack(fill='x')

  fzlen = Frame(WappleII)
  tzlen = 'width of magnets [mm]'
  lzlen = Label(fzlen,text=tzlen,font=MyFont, width=widlab)
  lzlen.pack(side=LEFT)
  ezlen = Entry(fzlen,text=S_Zlen_AppleII,justify=CENTER,font=MyFont)
  ezlen.pack(side=RIGHT)
  fzlen.pack(fill='x')

  fS2Shift = Frame(WappleII)
  tS2Shift = 'S2 shift [mm]'
  lS2Shift = Label(fS2Shift,text=tS2Shift,font=MyFont, width=widlab)
  lS2Shift.pack(side=LEFT)
  eS2Shift = Entry(fS2Shift,text=S_S2Shift_AppleII,justify=CENTER,font=MyFont)
  eS2Shift.pack(side=RIGHT)
  fS2Shift.pack(fill='x')

  fS3Shift = Frame(WappleII)
  tS3Shift = 'S3 shift [mm]'
  lS3Shift = Label(fS3Shift,text=tS3Shift,font=MyFont, width=widlab)
  lS3Shift.pack(side=LEFT)
  eS3Shift = Entry(fS3Shift,text=S_S3Shift_AppleII,justify=CENTER,font=MyFont)
  eS3Shift.pack(side=RIGHT)
  fS3Shift.pack(fill='x')

  fHorSlit = Frame(WappleII)
  tHorSlit = 'Slit between rows [mm]'
  lHorSlit = Label(fHorSlit,text=tHorSlit,font=MyFont, width=widlab)
  lHorSlit.pack(side=LEFT)
  eHorSlit = Entry(fHorSlit,text=S_HorSlit_AppleII,justify=CENTER,font=MyFont)
  eHorSlit.pack(side=RIGHT)
  fHorSlit.pack(fill='x')

  fNdivX = Frame(WappleII)
  tNdivX = 'number of segments in x'
  lNdivX = Label(fNdivX,text=tNdivX,font=MyFont, width=widlab)
  lNdivX.pack(side=LEFT)
  eNdivX = Entry(fNdivX,text=S_NdivX_AppleII,justify=CENTER,font=MyFont)
  eNdivX.pack(side=RIGHT)
  fNdivX.pack(fill='x')

  fNdivXHalf = Frame(WappleII)
  tNdivXHalf = 'number of seg. in x for half mag.'
  lNdivXHalf = Label(fNdivXHalf,text=tNdivXHalf,font=MyFont, width=widlab)
  lNdivXHalf.pack(side=LEFT)
  eNdivXHalf = Entry(fNdivXHalf,text=S_NdivXHalf_AppleII,justify=CENTER,font=MyFont)
  eNdivXHalf.pack(side=RIGHT)
  fNdivXHalf.pack(fill='x')

  fNdivY = Frame(WappleII)
  tNdivY = 'number of segments in y'
  lNdivY = Label(fNdivY,text=tNdivY,font=MyFont, width=widlab)
  lNdivY.pack(side=LEFT)
  eNdivY = Entry(fNdivY,text=S_NdivY_AppleII,justify=CENTER,font=MyFont)
  eNdivY.pack(side=RIGHT)
  fNdivY.pack(fill='x')

  fNdivZ = Frame(WappleII)
  tNdivZ = 'number of segments in z'
  lNdivZ = Label(fNdivZ,text=tNdivZ,font=MyFont, width=widlab)
  lNdivZ.pack(side=LEFT)
  eNdivZ = Entry(fNdivZ,text=S_NdivZ_AppleII,justify=CENTER,font=MyFont)
  eNdivZ.pack(side=RIGHT)
  fNdivZ.pack(fill='x')

  fDeadCoat = Frame(WappleII)
  tDeadCoat = 'coating and dead layer [mm]'
  lDeadCoat = Label(fDeadCoat,text=tDeadCoat,font=MyFont, width=widlab)
  lDeadCoat.pack(side=LEFT)
  eDeadCoat = Entry(fDeadCoat,text=S_DeadCoat_AppleII,justify=CENTER,font=MyFont)
  eDeadCoat.pack(side=RIGHT)
  fDeadCoat.pack(fill='x')

  fBr = Frame(WappleII)
  tBr = 'remanence [T]'
  lBr = Label(fBr,text=tBr,font=MyFont, width=widlab)
  lBr.pack(side=LEFT)
  eBr = Entry(fBr,text=S_Br_AppleII,justify=CENTER,font=MyFont)
  eBr.pack(side=RIGHT)
  fBr.pack(fill='x')

  fMu = Frame(WappleII)
  tMu = 'mu'
  lMu = Label(fMu,text=tMu,font=MyFont, width=widlab)
  lMu.pack(side=LEFT)
  eMu = Entry(fMu,text=S_Mu_AppleII,justify=CENTER,font=MyFont)
  eMu.pack(side=RIGHT)
  fMu.pack(fill='x')

  fKsiPerp = Frame(WappleII)
  tKsiPerp = 'ksi (perpendicular)'
  lKsiPerp = Label(fKsiPerp,text=tKsiPerp,font=MyFont, width=widlab)
  lKsiPerp.pack(side=LEFT)
  eKsiPerp = Entry(fKsiPerp,text=S_KsiPerp_AppleII,justify=CENTER,font=MyFont)
  eKsiPerp.pack(side=RIGHT)
  fKsiPerp.pack(fill='x')

  fbottom = Frame(WappleII)

  bCancel = Button(fbottom,text='Cancel',width=widlab,command = _cnWappleII)
  bCancel.bind('<Return>',lambda event: _cnWappleII())
  bCancel.pack(side=LEFT)

  bClose = Button(fbottom,text='Ok',command = lambda ck='_appleII' :_clWappleII(ck))
  bClose.bind('<Return>',lambda event, ck='_appleII': _clWappleII(ck))
  bClose.pack(side=LEFT,expand=TRUE,fill=X)

  fbottom.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WappleII.geometry(sgeo)

  WappleII.bind('<Enter>',lambda event, menu = 'AppleII': _enterMenu(event,menu))
  WappleII.bind('<Leave>',lambda event, menu = 'AppleII': _leaveMenu(event,menu))
  WappleII.bind('<KeyPress>',lambda event, menu = 'AppleII': _keypressMenu(event,menu))

  Umaster.wait_window(WappleII)

+self,if=trace.
  print(NL,"trace:: Leaving _appleII")
+self.
#enddef _appleII()

ugui_ini_appleII('main')
ugui_ini_hybrid()

MpreDefs = Menu(Mgeo,tearoff=1,font=MyFont)

MShowGeo = Menu(Mgeo,tearoff=1,font=MyFont)
MShowGeo2d = Menu(Mgeo,tearoff=1,font=MyFont)

MShowGeo.add_cascade(label='2D views', menu=MShowGeo2d,font=MyFont)

MShowGeo2d.add_command(label='XY view', command= lambda modus='xy', item=-1: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='XZ view', command= lambda modus='xz', item=-1: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='ZY view', command= lambda modus='zy', item=-1: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_separator()

MShowGeo2d.add_command(label='XY periodic', command= lambda modus='xy', item=-3: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='XZ periodic', command= lambda modus='xz', item=-3: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='ZY periodic', command= lambda modus='zy', item=-3: _showGeoPythonXYZ(modus,item),font=MyFont)

MShowGeo2d.add_separator()
MShowGeo2d.add_command(label='XY specials', command= lambda modus='xy', item=-4: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='XZ specials', command= lambda modus='xz', item=-4: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='ZY specials', command= lambda modus='zy', item=-4: _showGeoPythonXYZ(modus,item),font=MyFont)

MShowGeo2d.add_separator()
MShowGeo2d.add_command(label='XY selected', command= lambda modus='xy', item=-2: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='XZ selected', command= lambda modus='xz', item=-2: _showGeoPythonXYZ(modus,item),font=MyFont)
MShowGeo2d.add_command(label='ZY selected', command= lambda modus='zy', item=-2: _showGeoPythonXYZ(modus,item),font=MyFont)

MShowGeo.add_command(label='3D view', command= lambda modus='3d', item=-1: _showGeo(modus,item),font=MyFont)
MShowGeo.add_command(label='3D periodic', command= lambda modus='3dperiodic', item=-2: _showGeo(modus,item),font=MyFont)
MShowGeo.add_command(label='3D specials', command= lambda modus='3dspecials', item=-3: _showGeo(modus,item),font=MyFont)
MShowGeo.add_command(label='3D selected', command= lambda modus='3dselected', item=-4: _showGeo(modus,item),font=MyFont)
#MShowGeo.add_command(label='3D periodic, selected', command= lambda modus='3dpersel', item=-2: _showGeo(modus,item),font=MyFont)
#MShowGeo.add_command(label='3D specials, selected', command= lambda modus='3dnopersel', item=-2: _showGeo(modus,item),font=MyFont)
MShowGeo.add_command(label='3D UNDUMAG', command= lambda modus='undu3d', item=-1: _showGeo(modus,item),font=MyFont)
MShowGeo.add_command(label='Show undumag.eps', command= lambda modus='eps', item=-1: _showGeo(modus,item),font=MyFont)

MVariables = Menu(Mgeo,tearoff=1,font=MyFont)
MenuMagPols = Menu(Mgeo,tearoff=1,font=MyFont)
MenuTRC = Menu(Mgeo,tearoff=1,font=MyFont)
MenuCoils = Menu(Mgeo,tearoff=1,font=MyFont)
MenuModules = Menu(Mgeo,tearoff=1,font=MyFont)
MaddMag = Menu(MenuMagPols,tearoff=1,font=MyFont)
MaddCoil = Menu(MenuCoils,tearoff=1,font=MyFont)

MpreDefs.add_command(label='Apple II',command=_appleII,font=MyFont)
MpreDefs.add_command(label='Hybrid',command=_hybrid,font=MyFont)
MpreDefs.add_command(label='Infinited Hybrid',command=_mirror,font=MyFont)

Mgeo.add_command(label='Load file', command= lambda modus='LoadCLC': _uclc(modus),font=MyFont)
Mgeo.add_cascade(label='Predefined settings',  menu=MpreDefs,font=MyFont)
Mgeo.add_cascade(label='Variables', menu=MVariables,font=MyFont)
Mgeo.add_cascade(label='Magnets and poles', menu=MenuMagPols,font=MyFont)
Mgeo.add_cascade(label='Operations', menu=MenuTRC,font=MyFont)
Mgeo.add_cascade(label='Coils', menu=MenuCoils,font=MyFont)
Mgeo.add_cascade(label='Modules', menu=MenuModules,font=MyFont)
Mgeo.add_cascade(label='Show', menu=MShowGeo,font=MyFont)
Mgeo.add_command(label='Save', command= lambda modus='WriteCLC': _uclc(modus),font=MyFont)

MenuMagPols.add_cascade(label='Add', menu=MaddMag,font=MyFont)
MenuMagPols.add_command(label='List items', command= lambda key='all': _listMags(key),font=MyFont)
#MenuMagPols.add_command(label='List selected items', command= lambda key='selected': _listMags(key),font=MyFont)
MenuMagPols.add_command(label='Deleted items', command= lambda key='deleted': _listMags(key),font=MyFont)

+seq,listcoils.

MenuCoils.add_command(label='Add', command= lambda key='': _addCoils(key),font=MyFont)
MenuCoils.add_command(label='List', command= lambda key='first': _listCoils(key),font=MyFont)
#MenuCoils.add_command(label='List selected items', command= lambda key='selected': _listCoils(key),font=MyFont)
#MenuCoils.add_command(label='Deleted items', command= lambda key='deleted': _listCoils(key),font=MyFont)

+seq,listmods.
MenuModules.add_command(label='Add', command= lambda geo='': _addMod(geo),font=MyFont)
MenuModules.add_command(label='List', command= lambda key='list': _listMods(key),font=MyFont)

+seq,listmags.
+seq,mlistvars.

+seq,listtrc.

+KEEP,uguiglobind,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  15.27.56  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  10.49.05  by  Michael Scheer
*CMZ :  2.03/00 14/08/2022  15.24.23  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  11.18.16  by  Michael Scheer
*CMZ :  2.02/00 26/03/2021  10.47.49  by  Michael Scheer
*-- Author :    Michael Scheer   12/10/2020
  global TransRotCop,EchoCLC,DictTransRotCop
  global Xmin,Xmax,Ymin,Ymax,Zmin,Zmax
  global Ucfg,Uclcorig, Uclc, Nmag, Npol, Nmodul, NspecMag, NspecPol, \
  Magnets, Pols, SpecMags, SpecPols,  NMagPol, MagPols,  NspecMagPol, SpecMagPols, \
  NMagPolTot, MagPolsTot, DictMagPolsTot, DictCoils, DictCoilsHeader, DictCalcs, IclcRead, \
  Nmat, Materials, Br, Rmu, Coating, PerLen, ChamfM, ChamfP, MCol, PCol, \
  AirGap, KeeperGap, MspaceX, MoffY, Parameters, Variables, Npar, Ncalc, Nvar, \
  CalcLines, Calcs, Pars, Ucomment, Modules, MagPolsTotOld, MagPolOld, \
  EditMag_CheckMode,CopyMag_CheckMode, EditMagX, EditMagY,CopyMagX, CopyMagY,WWait, WError, \
  CheckVars, CheckCalcs, CheckDictCalcs, CheckVarNum, VarNum, \
  MagPolsUpdate, MagPolsDel, NMagPolDel,SpecXYZ,DictCornFiles,S_Ucomment,\
  S_ChamfUs, S_ChamfDs, S_Coating,DictVcomments,DictPcomments, IUNDUMAGisRunning

  global Rmodus, Debug, Ical, MyFontStyle, MyFontSize,MyFont, RunUndu, \
  MustUpdate, MustWriteCLC, UnduColors, DictUnduColors

  global UMain, Mgeo, Mmat, MpreDefs, MShowGeo,MShowGeo2, MListVars
  global WaddMag, WappleII, Whybrid, WFileCLC, S_FileCLC, S_FileNAM, FileCLC, FileNAM, LinesNam, FileMu, \
  WallListMags, WlistVars, WAddVars, WlistMat, Wmirror, WsetMirror

  global AppleII_Mode, AppleII, AppleIIOld, VAppleII, \
  S_nPer_AppleII, S_FullGap_AppleII, \
  S_Xlen_AppleII, S_Ylen_AppleII, S_Zlen_AppleII, \
  S_DeadCoat_AppleII, S_AirGap_AppleII, S_Br_AppleII, S_Mu_AppleII, S_KsiPerp_AppleII, \
  S_HorSlit_AppleII, S_S2Shift_AppleII, S_S3Shift_AppleII, \
  S_NdivX_AppleII, S_NdivY_AppleII, S_NdivZ_AppleII, S_NdivXHalf_AppleII

  global V_CmagOld, V_CmothOld, V_XcenOld, V_YcenOld, V_ZcenOld, V_cornsOld, V_NcornOld, V_CornFileOld, \
  V_nXdivOld, V_nYdivOld, V_nZdivOld, \
  V_FracDivYOld,   V_FracDivZOld,  V_XlenOld, V_YlenOld, V_ZlenOld, V_KeyOld, V_MatTypeOld, V_MatOld, \
  V_BcOld, V_BxnOld, V_BynOld, V_BznOld, V_IspecOld

  global WEditMagOld, WCopyMagOld, S_CmagOld, S_CmothOld, S_XcenOld, S_YcenOld, S_ZcenOld, S_cornsOld, S_NcornOld, S_CornFileOld, \
  S_nXdivOld, S_nYdivOld, S_nZdivOld, \
  S_FracDivYOld, S_FracDivZOld, S_XlenOld, S_YlenOld, S_ZlenOld, S_KeyOld, S_MateTypeOld, S_MatOld, \
  S_BcOld, S_BxnOld, S_BynOld, S_BznOld, S_IspecOld

  global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi,DictHulls

  global V_Cmag, V_Cmoth, V_Xcen, V_Ycen, V_Zcen, V_corns, V_Ncorn, V_CornFile, \
  V_nXdiv, V_nYdiv, V_nZdiv, \
  V_FracDivY, V_FracDivZ, V_Xlen, V_Ylen, V_Zlen, V_Key, V_MatType, V_Mat, \
  V_Bc, V_Bxn, V_Byn, V_Bzn, V_Ispec

  global WEditMag,WCopyMag, S_Cmag, S_Cmoth, S_Xcen, S_Ycen, S_Zcen, S_corns, S_Ncorn, S_CornFile, \
  S_nXdiv, S_nYdiv, S_nZdiv, \
  S_FracDivY, S_FracDivZ, S_Xlen, S_Ylen, S_Zlen, S_Key, S_MateType, S_Mat, \
  S_Bc, S_Bxn, S_Byn, S_Bzn, S_Ispec, S_Color, WsearchVar, S_SearchVar

  global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi

  global WaddPol, WEditPol,WCopyPol, S_Iron_Cmag, S_Iron_Cmoth, S_Iron_Xcen, S_Iron_Ycen, S_Iron_Zcen, S_Iron_corns, S_Iron_Ncorn, S_Iron_CornFile, \
  S_Iron_nXdiv, S_Iron_nYdiv, S_Iron_nZdiv, \
  S_Iron_FracDivY,S_Iron_FracDivZ,S_Iron_Xlen, S_Iron_Ylen, S_Iron_Zlen, S_Iron_Key, S_Iron_MatType, S_Iron_Mat, \
  S_Iron_Bc, S_Iron_Bxn, S_Iron_Byn, S_Iron_Bzn, S_Iron_Ispec, S_Iron_Color

  global LastCLC, LastNAM
  global Nmoth, MyMoth, Moths, MothsXYZ, Hulls, DictMoths, DictCoils, DictCoilsHeader, DictCalcs, \
  NMothSel, NMagPolSel,MagPolsSel,DictMagPolsSel, MothsSel,DictMothsSel
  global Ngeo

  global WFileNAM, WSetSym, NamelistVars, DictNamelistVars, \
  S_IxSym, S_IySym, S_IzSym, S_KxCenter, S_xSym, S_xCenter, \
  cIxSym, cIySym, cIzSym, KxCenter, cIxSym, Xcenter, Xsym

  global GeoWaddVars, GeoWlistVars
  global Mirror, VMirror, Hybrid, VHybrid, Hybrid_Mode

  global WSetMap, \
  S_xMapMin,S_yMapMin,S_zMapMin,S_xMapMax,S_yMapMax,S_zMapMax, S_MHmap, \
  S_dxMap,S_NxMap,S_NyMap,S_NzMap,S_dxBeff,S_NxBeff, S_xMinBeff,S_xMaxBeff

  global NCoil, Coils, Filaments, S_Current_Coil, S_Name_Coil, \
  S_nWindings_Coil, S_Filling_Coil, \
  S_Xcen_Coil,S_Ycen_Coil,S_Zcen_Coil,S_VnX_Coil,S_VnY_Coil,S_VnZ_Coil, \
  S_AngRot_Coil,S_xLenOut_Coil,S_zLenIn_Coil,S_zLenOut_Coil,S_RadiusIn_Coil, \
  S_Height_Coil,S_nDivHeight_Coil,S_nDivWidth_Coil,S_nDivArc_Coil,S_Color_Coil, \
  WaddCoil,WaddCoils,Selected_Coil, Stored_Coil, Restore_Coil, CurrLoops, \
  WaddCoilRace,WaddCoilCirc

  global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi,Ntcyls,Ncylinder,DictCyls

+KEEP,uguiglobals,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  15.27.56  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  10.49.05  by  Michael Scheer
*CMZ :  2.04/09 17/08/2023  11.38.41  by  Michael Scheer
*CMZ :  2.03/00 14/08/2022  15.24.55  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  11.18.16  by  Michael Scheer
*CMZ :  2.02/00 26/03/2021  10.47.49  by  Michael Scheer
*-- Author :    Michael Scheer   12/10/2020
import m_hbook as m

global TransRotCop, EchoCLC,DictTransRotCop
global Xmin,Xmax,Ymin,Ymax,Zmin,Zmax

global Ucfg,Uclcorig, Uclc, Nmag, Npol, Nmodul, NspecMag, NspecPol, \
Magnets, Pols, SpecMags, SpecPols, NMagPol, MagPols,  NspecMagPol, SpecMagPols, \
NMagPolTot, MagPolsTot, DictMagPolsTot, DictCoils, DictCoilsHeader, DictCalcs, IclcRead, \
Nmat, Materials, Br, Rmu, Coating, PerLen, ChamfM, ChamfP, MCol, PCol, \
AirGap, KeeperGap, MspaceX, MoffY, Parameters, Variables, Npar, NCalc, Nvar, \
CalcLines,Calcs,Pars, Ucomment, Modules, MagPolsTotOld, MagPolOld, \
EditMag_CheckMode,CopyMag_CheckMode, EditMagX, EditMagY,CopyMagX, CopyMagY, WWait, WError, \
CheckVars, CheckCalcs, CheckDictCalcs, CheckVarNum, VarNum, \
MagPolsUpdate, MagPolsDel, NMagPolDel, SpecXYZ, DictCornFiles,S_Ucomment,\
S_ChamfUs, S_ChamfDs, S_Coating,DictVcomments,DictPcomments, IUNDUMAGisRunning

global NCoil, Coils, Filaments, S_Current_Coil, S_Name_Coil, \
S_nWindings_Coil,S_Filling_Coil, \
S_Xcen_Coil,S_Ycen_Coil,S_Zcen_Coil,S_VnX_Coil,S_VnY_Coil,S_VnZ_Coil, \
S_AngRot_Coil,S_xLenOut_Coil,S_zLenIn_Coil,S_zLenOut_Coil,S_RadiusIn_Coil, \
S_Height_Coil,S_nDivHeight_Coil,S_nDivWidth_Coil,S_nDivArc_Coil,S_Color_Coil, \
WaddCoil,WaddCoils, Selected_Coil, Stored_Coil, Restore_Coil, CurrLoops, \
WaddCoilRace,WaddCoilCirc

global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi,Ntcyls,Ncylinder,DictCyls

global Rmodus, Debug, Ical, MyFontStyle, MyFontSize,MyFont, RunUndu, \
MustUpdate, MustWriteCLC, UnduColors, DictUnduColors
global UMain,  Mgeo, Mmat, MpreDefs, MShowGeo,MShowGeo2, MListVars
global WaddMag, WappleII, Whybrid, WFileCLC, S_FileCLC, S_FileNAM, FileCLC, FileNAM, LinesNam, FileMu, \
WallListMags, WlistVars, WAddVars, WlistMat,Wmirror, WsetMirror

global Mirror, VMirror, Hybrid, VHybrid, Hybrid_Mode

global AppleII_Mode, AppleII, AppleIIOld, VAppleII, \
S_nPer_AppleII, S_FullGap_AppleII, \
S_Xlen_AppleII, S_Ylen_AppleII, S_Zlen_AppleII, \
S_DeadCoat_AppleII, S_AirGap_AppleII, S_Br_AppleII, S_Mu_AppleII, S_KsiPerp_AppleII, \
S_HorSlit_AppleII, S_S2Shift_AppleII, S_S3Shift_AppleII, \
S_NdivX_AppleII, S_NdivY_AppleII, S_NdivZ_AppleII, S_NdivXHalf_AppleII

global WEditMag,WCopyMag, S_Cmag, S_Cmoth, S_Xcen, S_Ycen, S_Zcen, S_corns, S_Ncorn, S_CornFile, \
S_nXdiv, S_nYdiv, S_nZdiv, S_FracDivY, S_FracDivZ, S_Xlen, S_Ylen, S_Zlen, S_Key, S_MateType, S_Mat, \
S_Bc, S_Bxn, S_Byn, S_Bzn, S_Ispec, S_Color

global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi

global WaddPol, WEditPol,WCopyPol, S_Iron_Cmag, S_Iron_Cmoth, S_Iron_Xcen, S_Iron_Ycen, S_Iron_Zcen, S_Iron_corns, S_Iron_Ncorn, S_Iron_CornFile, \
S_Iron_nXdiv, S_Iron_nYdiv, S_Iron_nZdiv,S_Iron_FracDivY, S_Iron_FracDivZ, S_Iron_Xlen, S_Iron_Ylen, S_Iron_Zlen, S_Iron_Key, S_Iron_MatType, S_Iron_Mat, \
S_Iron_Bc, S_Iron_Bxn, S_Iron_Byn, S_Iron_Bzn, S_Iron_Ispec, S_Iron_Color

global LastCLC, LastNAM
global Nmoth, MyMoth, Moths, MothsXYZ, Hulls, DictMoths, DictCoils, DictCoilsHeader, DictCalcs, \
NMothSel, NMagPolSel,MagPolsSel,DictMagPolsSel, MothsSel,DictMothsSel
global Ngeo

global WFileNAM, WSetSym, NamelistVars, DictNamelistVars, \
S_IxSym, S_IySym, S_IzSym, S_KxCenter, S_xSym, S_xCenter, \
cIxSym, cIySym, cIzSym, KxCenter, cIxSym, Xcenter, Xsym

global V_CmagOld, V_CmothOld, V_XcenOld, V_YcenOld, V_ZcenOld, V_cornsOld, V_NcornOld, V_CornFileOld, \
V_nXdivOld, V_nYdivOld, V_nZdivOld, V_FracDivYOld, V_FracDivZOld, V_XlenOld, V_YlenOld, V_ZlenOld, V_KeyOld, V_MatTypeOld, V_MatOld, \
V_BcOld, V_BxnOld, V_BynOld, V_BznOld, V_IspecOld

global WEditMagOld, WCopyMagOld, S_CmagOld, S_CmothOld, S_XcenOld, S_YcenOld, S_ZcenOld, S_cornsOld, S_NcornOld, S_CornFileOld, \
S_nXdivOld, S_nYdivOld, S_nZdivOld, S_FracDivYOld, S_FracDivZOld, S_XlenOld, S_YlenOld, S_ZlenOld, S_KeyOld, S_MateTypeOld, S_MatOld, \
S_BcOld, S_BxnOld, S_BynOld, S_BznOld, S_IspecOld

global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi, DictHulls

global V_Cmag, V_Cmoth, V_Xcen, V_Ycen, V_Zcen, V_corns, V_Ncorn, V_CornFile, \
V_nXdiv, V_nYdiv, V_nZdiv, V_FracDivY, V_FracDivZ, V_Xlen, V_Ylen, V_Zlen, V_Key, V_MatType, V_Mat, \
V_Bc, V_Bxn, V_Byn, V_Bzn, V_Ispec

global WEditMag,WCopyMag, S_Cmag, S_Cmoth, S_Xcen, S_Ycen, S_Zcen, S_corns, S_Ncorn, S_CornFile, \
S_nXdiv, S_nYdiv, S_nZdiv, S_FracDivY, S_FracDivZ, S_Xlen, S_Ylen, S_Zlen, S_Key, S_MateType, S_Mat, \
S_Bc, S_Bxn, S_Byn, S_Bzn, S_Ispec, WsearchVar, S_SearchVar

global WSetMap, \
S_xMapMin,S_yMapMin,S_zMapMin,S_xMapMax,S_yMapMax,S_zMapMax, S_MHmap, \
S_dxMap,S_NxMap,S_NyMap,S_NzMap,S_dxBeff,S_NxBeff,S_xMinBeff,S_xMaxBeff

+DECK,undugui,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  08.19.02  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  11.28.16  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  16.32.24  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  10.25.22  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  10.21.28  by  Michael Scheer
*CMZ :  2.02/01 14/04/2021  13.09.46  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  10.26.36  by  Michael Scheer
*CMZ :  2.01/08 30/07/2020  10.49.14  by  Michael Scheer
*CMZ :  1.32/11 14/04/2020  16.26.11  by  Michael Scheer
*CMZ :  1.32/05 25/10/2019  14.13.42  by  Michael Scheer
*-- Author :    Michael Scheer   09/10/2019

# +PATCH,//UNDUMAG/PYTHON
# +DECK,undugui,T=PYTHON.

global WavesMode
WavesMode = 'UNDUMAG'

global idebug
idebug = 0
def debug(arg=''):
  global idebug
  idebug += 1
  print("idebug:",idebug)
  if arg: print("\n",arg,"\n")
#enddef debug(arg)

+seq,uguiimports.
+seq,uguiglobals.
+seq,undumagplotglobal.

global Ntcyls, Ncylinder
Ntcyls = []
Ncylinder = 0
DictCyls = {}
DictHulls = {}
#=============================================================================

+self,if=trace.
debug("trace:: Before $uguiini")
+self.
+seq,uguiini.
+self,if=trace.
debug("trace:: After $uguiini, before ureadclc")
+self.
+seq,ureadclc.
+self,if=trace.
debug("trace:: After ureadclc")
+self.

def start():
  pass
#enddef

def _nTopLevel(title='TopLevel',att='-topmost',attn=1):
  tl = Toplevel()
  tl.title(title)
  tl.attributes(att,attn)
  return tl
#enddef _nTopLevel

def _MbLeave(ev):
+seq,uguiglobind.
  Mgeo.unpost()
  Mmat.unpost()
#enddef _MbLeave(ev)

def _MenuBar(ev):
+seq,uguiglobind.

  item = Umaster.call(ev.widget, "index", "active")
  #print("Index:",type(item), item)

  x,y = Umaster.winfo_pointerxy()
  ww, wh, wx, wy = getgeo()

  rx = (x-wx) / ww
  #print(item,rx)

  rxgeoi = 0.
  rxgeoe = 0.093
  rxmati = 0.09
  rxmate = 0.179

  xgeoi = wx + rxgeoi * ww
  xgeoe = wx + rxgeoe * ww
  ixgeo = int(xgeoi)

  xmati = wx + rxmati * ww
  xmate = wx + rxmate * ww
  ixmat = int(xmati)

  iytb = int(wy + 0.1 * wh)

  if item == 1:
    Mgeo.post(ixgeo,iytb)
    Mmat.unpost()
  elif item == 2:
    Mmat.post(ixmat,iytb)
    Mgeo.unpost()
  elif rx >= rxmate:
    Mgeo.unpost()
    Mmat.unpost()
  #endif index

#enddef _MenuBar(ev)

def _exit():
  #print("Entered _exit")
  Quit("\n\n --- End of undugui.py --- \n")
#enddef _exit()

def _canvas_key(ev):
  if ev.key in ['q', 'Q']:
      Quit()
#enddef canvas_key(ev)

+self,if=trace.
debug("trace:: Before uwriteclc")
+self.
+seq,uwriteclc.
+self,if=trace.
debug("trace:: After uwriteclc")
+self.

def ureadfil(callkey=''):

+seq,uguiglobind.

  #debug("debug: Filaments")

+self,if=trace.
  print(NL,"trace::ureadfil:",callkey)
+self.

  IUNDUMAGisRunning = 1
  os.system(RunUndu + " " + Rmodus)
  IUNDUMAGisRunning = 0

  undu_get_runnumber()

  if NCoil > 0:

    try:
      Fsta = open("undumag.sta","r")
      cline = Fsta.readline().strip()
      cline = Fsta.readline().strip()
      if cline != 'Calculation of coil filaments finished':
        wError("\n*** UNDUMAG run for filaments failed ***")
      #endif trim(cline) != ' Segmentation finished'
    except:
      wError("\n*** UNDUMAG run for filaments failed ***")
    #endtry

    if not fexist("undumag.fil"):
+self,if=trace.
    print(NL,"trace:: Leaving ureadfil: No file undumag.fil")
+self.
      return
    #endif
  #endif NCoil

  Ffil = open("undumag.fil","r")
  fils = Ffil.readlines()
  Ffil.close()
  fs = fils[1].split()
  icoilo = fs[-1]
  icoil = icoilo
  l = len(fils)
  i = 0
  fil = []
  while i < l:
    i += 1
    fs = fils[i].split()
    icoil = fs[-1]
    if icoil != icoilo:
      Filaments.append(fil)
      fil = []
    elif i == l - 1:
      for k in range(len(fs)): fs[k] = float(fs[k])
      fs[0] = int(fs[0])
      for k in range(1,8): fs[k] = float(fs[k])
      for k in range(8,11): fs[k] = int(fs[k])
      fil.append(fs)
      Filaments.append(fil)
      break
    #endif
    for k in range(len(fs)): fs[k] = float(fs[k])
    fs[0] = int(fs[0])
    for k in range(1,8): fs[k] = float(fs[k])
    for k in range(8,11): fs[k] = int(fs[k])
    fil.append(fs)
    icoilo = icoil
  #endwhile

  if len(Filaments) != len(Coils): Quit("*** Error in ureadfil(): Number of coils does not match ***")

  #debug("debug: Ende Filaments")
+self,if=trace.
  print(NL,"trace:: Leaving ureadfil")
+self.
#enddef

+self,if=trace.
debug("trace:: Before ureadclc")
+self.
+seq,undumagseq.
+self,if=trace.
debug("trace:: After $undumag")
+self.

#=============================================================================

if platform.system() == 'Linux': RunUndu = "bash $UNDUMAG/shell/undumag_run.sh"
elif platform.system() == 'Windows': RunUndu = '..\\bin\\undumag.exe '
else: Quit("*** Error: Unknown platform: ",platform.system())

iLoad = 0
EchoCLC = 0

#debug()
if os.path.exists("undugui.cfg"):
  Fcfg = open("undugui.cfg","r")
  Ucfg = Fcfg.readlines()
  for line in Ucfg:
    line = line.split('!')
    line = line[0].strip()
    words = line.split(':')
    w0 = words[0].strip().upper()
    w1 = 'FALSE'
    if len(words) > 1:
      w1 = words[1].strip().upper()
    if w1 == '1': w1 == 'TRUE'
    if w0 == 'RUNUNDU': RunUndu = words[1]
    if w0 == 'ECHOCLC' and w1 == 'TRUE': EchoCLC = 1
    if w0 == 'LOADLAST' and w1 == 'TRUE': iLoad += 1
    if w0 == 'SHOWLAST' and w1 == 'TRUE': iLoad += 10
  #endfor
  Fcfg.close()
#endtry

+self,if=debugureadclc.
ugui_ini()
ureadclc('debugureadclc')
Quit("Stop after test call to ureadclc")
+self.

NL = "\n"
Rmodus = ''

AppleII = {}

+self,if=trace.
debug("trace:: Before mshwelcome")
+self.
mshwelcome(program='UNDUMAG',year='2022')
+self,if=trace.
debug("trace:: After mshwelcome, before undu_get_runnumber")
+self.

undu_get_runnumber()
+self,if=trace.
debug("trace:: Before ugui_ini")
+self.
ugui_ini()
+self,if=trace.
debug("trace:: After ugui_ini, before $ugui")
+self.

+seq,ugui.
+self,if=trace.
debug("trace:: After $ugui, before ntupini")
+self.
start()

ntupini()
+self,if=trace.
debug("trace:: After ntupini(), before startup")
+self.
startup("undugui_start.py")
+self,if=trace.
debug("trace:: After startup")
+self.

WaveFilePrefix = 'undugui_'

#debug("Vor iLoad")
if iLoad:
+self,if=trace.
  debug("trace:: Before ureadclc")
+self.
  ureadclc("Load")
+self,if=trace.
  debug("trace:: After ureadclc")
+self.
  if iLoad > 1:
+self,if=trace.
    debug("trace:: Before _showGeo")
+self.
    _showGeo("3d")
+self,if=trace.
    debug("trace:: After _showGeo")
+self.
  #endif
#endif
#uwriteclc()
#Quit("Ende nach uwriteclc")

#_WaddCoils()
#_WaddCoilRace()
#_listCoils()

#Quit("\n\n --- End of undugui.py --- \n")
+KEEP,utransrotcop,T=PYTHON.
*CMZ :  2.04/11 25/08/2023  17.28.25  by  Michael Scheer
*CMZ :  2.04/06 08/07/2023  16.32.19  by  Michael Scheer
*CMZ :  2.03/00 13/08/2022  20.38.26  by  Michael Scheer
*CMZ :  2.02/02 01/03/2022  12.28.33  by  Michael Scheer
*CMZ :  2.02/01 26/01/2022  11.22.41  by  Michael Scheer
*-- Author :    Michael Scheer   29/12/2021

def utransrotcop():

+seq,uguiglobind.

  for trc in TransRotCop:
    key = trc[0]
    if key == 'Copy':
      w = trc[1].split()
      source = w[0]
      tarmag = w[1]
      tarmoth = w[2]
      try:
        kmag = DictMagPolsTot[source]
        mag = deepcopy(MagPolsTot[kmag])
        mag[0][0] = tarmag
        mag[0][1] = tarmoth
        NMagPolTot += 1
        MagPolsTot.append(mag)
      except:
        print(NL,"*** Error for key Copy: Magnet not found for:")
        print("Copy", source, tarmag, tarmoth,NL)
      #endtry

    elif key == 'Translate':
      mp = trc[1]
      tr = trc[2].split()
      try:
        kmoth = DictMoths[mp]
        for mag in Moths[kmoth]:
          kmag = DictMagPolsTot[mag]
          mag = MagPolsTot[kmag]
          m4 = mag[4]
          m4[0] += " + " + tr[0]
          m4[1] += " + " + tr[1]
          m4[2] += " + " + tr[2]
          x = str(calc_var(m4[0]))
          y = str(calc_var(m4[1]))
          z = str(calc_var(m4[2]))
          mag[4] = [x,y,z]
        #endfor
      except:
        try:
          kmag = DictMagPolsTot[mp]
          mag = MagPolsTot[kmag]
          m4 = mag[4]
          m4[0] += " + " + tr[0]
          m4[1] += " + " + tr[1]
          m4[2] += " + " + tr[2]
          x = str(calc_var(m4[0]))
          y = str(calc_var(m4[1]))
          z = str(calc_var(m4[2]))
          mag[4] = [x,y,z]
        except:
          print(NL,"*** Error for key Translate: Magnet or mother not found for:")
          print("Copy", source, tarmag, tarmoth,NL)
        #endtry
      #endtry

    elif key == 'Rotate' or key == 'Rotate_Shape':

      mp = trc[1]
      tr = trc[2].split()
      rot = trc[3].split()

      try:

        kmoth = DictMoths[mp]

        for mag in Moths[kmoth]:

          kmag = DictMagPolsTot[mag]
          mag = MagPolsTot[kmag]
          ckey = mag[3]

          if ckey != 'File' and ckey != 'Corners':
            print("\n*** Error in utransrotcop: Rotation only allowed for magnets of type Corners or file***")
            continue
          #endif

          cenmag = mag[4]

          xc = calc_var(cenmag[0])
          yc = calc_var(cenmag[1])
          zc = calc_var(cenmag[2])

          xr = calc_var(tr[0])
          yr = calc_var(tr[1])
          zr = calc_var(tr[2])

          vrx = calc_var(rot[0])
          vry = calc_var(rot[1])
          vrz = calc_var(rot[2])

          phi = calc_var(rot[3]) * np.pi/180.

          istat, crot, rm = util_rotate([xr,yr,zr],[vrx,vry,vrz],phi,[xc,yc,zc])

          xcr = crot[0]
          ycr = crot[1]
          zcr = crot[2]

          mag[4] = crot

          corns = mag[7]
          cc = []
          for corn in corns:
            c1 = corn[0] + calc_var(tr[0]) + xc
            c2 = corn[1] + calc_var(tr[1]) + yc
            c3 = corn[2] + calc_var(tr[2]) + zc
            istat, crot, rm = util_rotate([xr,yr,zr],[vrx,vry,vrz],phi,[c1,c2,c3])
            cc.append([crot[0]-xcr,crot[1]-ycr,crot[2]-zcr])
          #endfor

          mag[7] = cc

          if key == 'Rotate':
            vbrx = calc_var(mag[5][1])
            vbry = calc_var(mag[5][2])
            vbrz = calc_var(mag[5][3])
            istat, crot, rm = util_rotate([0.,0.,0.],[vrx,vry,vrz],phi,
                                          [vbrx,vbry,vbrz])
            mag[5][1] = crot[0]
            mag[5][2] = crot[1]
            mag[5][3] = crot[1]
          #endif key == 'Rotate'

        #endfor
      except:
        try:

          kmag = DictMagPolsTot[mp]
          mag = MagPolsTot[kmag]
          ckey = mag[3]

          if ckey != 'File' and ckey != 'Corners':
            print("\n*** Error in utransrotcop: Rotation only allowed for magnets of type Corners or file***")
            continue
          #endif

          cenmag = mag[4]

          xc = calc_var(cenmag[0])
          yc = calc_var(cenmag[1])
          zc = calc_var(cenmag[2])

          xr = calc_var(tr[0])
          yr = calc_var(tr[1])
          zr = calc_var(tr[2])

          vrx = calc_var(rot[0])
          vry = calc_var(rot[1])
          vrz = calc_var(rot[2])

          phi = calc_var(rot[3]) * np.pi/180.

          istat, crot, rm = util_rotate([xr,yr,zr],[vrx,vry,vrz],phi,[xc,yc,zc])

          xcr = crot[0]
          ycr = crot[1]
          zcr = crot[2]

          mag[4] = crot

          corns = mag[7]
          cc = []
          for corn in corns:
            c1 = corn[0] + calc_var(tr[0]) + xc
            c2 = corn[1] + calc_var(tr[1]) + yc
            c3 = corn[2] + calc_var(tr[2]) + zc
            istat, crot, rm = util_rotate([xr,yr,zr],[vrx,vry,vrz],phi,[c1,c2,c3])
            cc.append([crot[0]-xcr,crot[1]-ycr,crot[2]-zcr])
          #endfor

          mag[7] = cc

          if key == 'Rotate':
            vbrx = calc_var(mag[5][1])
            vbry = calc_var(mag[5][2])
            vbrz = calc_var(mag[5][3])
            istat, crot, rm = util_rotate([0.,0.,0.],[vrx,vry,vrz],phi,
                                          [vbrx,vbry,vbrz])
            mag[5][1] = str(crot[0])
            mag[5][2] = str(crot[1])
            mag[5][3] = str(crot[2])
          #endif key == 'Rotate'

        except:
          print(NL,"*** Error for key Rotation: Magnet or mother not found for:")
          print("Copy", source, tarmag, tarmoth,NL)
        #endtry
      #endtry

    elif key == 'Remanence':

      mp = trc[1]
      vmat = trc[2].split()

      try:
        kmoth = DictMoths[mp]
        for mag in Moths[kmoth]:
          kmag = DictMagPolsTot[mag]
          mag = MagPolsTot[kmag]
          mag[5] = vmat
        #endfor
      except:
        try:
          kmag = DictMagPolsTot[mp]
          mag = MagPolsTot[kmag]
          mag[5] = vmat
        except:
          print(NL,"*** Error for key Rotation: Magnet or mother not found for:")
          print("Copy", source, tarmag, tarmoth,NL)
        #endtry
      #endtry
    #endif
    update_magnets()
  #endfor

#enddef utransrotcop()
+PATCH,MODULES.
*CMZ :  2.04/05 14/03/2023  12.19.23  by  Michael Scheer
+DECK,magnet_struct,T=F77.
*CMZ :  2.04/10 23/08/2023  08.17.05  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  19.31.25  by  Michael Scheer
*CMZ :  2.04/03 03/03/2023  16.41.34  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  16.37.47  by  Michael Scheer
*CMZ :  2.04/01 23/01/2023  09.51.15  by  Michael Scheer
*CMZ :  2.04/00 13/01/2023  10.56.20  by  Michael Scheer
*CMZ :  2.02/02 16/02/2022  15.17.02  by  Michael Scheer
*CMZ :  2.02/01 06/02/2022  11.20.01  by  Michael Scheer
*-- Author :    Michael Scheer   25/04/2021
      module magnets_structure

      double precision ::
     &  xcwmin=1.0d30,xcwmax=-1.0d30,
     &  ycwmin=1.0d30,ycwmax=-1.0d30,
     &  zcwmin=1.0d30,zcwmax=-1.0d30,
     &  xmin_t=1.0d30,xmax_t=-1.0d30,
     &  ymin_t=1.0d30,ymax_t=-1.0d30,
     &  zmin_t=1.0d30,zmax_t=-1.0d30,
     &  xsymmm_t

      integer nclcbuff,nclcspec,nclcmag,nclccoil,nclcvar,nclcmod,nclcmat,
     &  kunduplot_mode

      integer :: nvar_t=0,nmag_t=0,nvox_t=0,niron_t=0,kvox=0,kfirstiron_t=0,
     &  nspecmag_t=0,kfirstiron_spec_t=0,ncoils_t=0,ncwires_t=0,nmagtot_t=0,
     &  ncornmax_t=8,nplanmax_t=16, nmodule_t=0, nmagcopy_t=0,nvoxcopy_t=0,
     &  nclccop_t=0,nmoth_t=0,nmothtot_t=0,nmagsym_t=0,ninhom_t=0,nmaginhom_t=0

      integer, dimension (:), allocatable :: ksort_t,kmaglist_t,maginhom_t

      character(512), dimension (:), allocatable :: clcbuff,clcmag,clccoil,
     &  clcvar,clcmod,clcmat,clctrarot,clccop,clcspec,clcinhom

      type T_variable
        character(128) cname
        double precision val
      end type T_variable

      type(T_variable), dimension(:), allocatable :: t_variables

      type T_Voxel

      double precision, dimension (:), allocatable :: xhull,yhull,zhull
      double precision, dimension (:,:), allocatable :: plan, vnorm

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: kface,khull

      double precision xyz(3),size(3),trans(3),rot(3,3),Br(3),
     &  gcen(3),volume,xmin,xmax,ymin,ymax,zmin,zmax

      integer nhull,ixdiv,iydiv,izdiv,nedge,nface,kfacelast,
     &  IsPole,IsBlock,mxdiv,mydiv,mzdiv

      end type T_Voxel

      type T_Voxel_Copy
        integer kmagnet,kmodule,kcopy,kvoxel,kproto,ispole
        double precision Br(3),gcen(3)
      end type T_Voxel_Copy

      type T_Magnet_Copy
        integer kproto,kmodule,kcopy,IsPole,IsSpecial
        double precision gcen(3),Br(3),BrN,xmin,xmax,ymin,ymax,zmin,zmax,
     &    size(3),volume
        character(32) ctype,cnam,cmoth
      end type T_Magnet_Copy

      type T_Magnet_Sym
        integer kproto,kmodule,kcopy,IsPole,IsSpecial
        double precision gcen(3),Br(3),BrN,xmin,xmax,ymin,ymax,zmin,zmax
        character(32) ctype,cnam,cmoth
      end type T_Magnet_Sym

      type T_Magnet

        double precision, dimension (:,:), allocatable :: plan
        double precision, dimension (:), allocatable :: xhull0,yhull0,zhull0,
     &    xhull,yhull,zhull,ydivs,zdivs

        integer, dimension (:,:,:), allocatable :: kvoxels
        integer, dimension (:,:), allocatable :: kedge
        integer, dimension (:), allocatable :: kface,khull,kcopy

        character(512), dimension (:), allocatable :: cinhom

        double precision xyz(3),size(3),trans(3),rot(3,3),Br(3),yfracdiv,
     &    xmin,ymin,zmin,xmax,ymax,zmax,volume,gcen(3),dxdiv,dydiv,dzdiv,yfrac,
     &    zfracdiv,zfrac,uschamf,dschamf,cylphi,BrN,xyzinh(4),xvolume,yvolume,
     &    zvolume

        integer :: nface,nhull,icol,imat,nxdiv,nydiv,nzdiv,matindex,mattype,
     &    kfacelast,nedge,nvoxels,IsPole,IsSpecial,IsBlock,nhull0,IsPart,
     &    ncopy=0,kmodule=0,IsInhom=0,mxdiv,mydiv,mzdiv,IsRotated

        character(32) ctype,cnam,cmoth
        character(1024) cfile

        type(T_Voxel), dimension(:), allocatable ::  t_voxels, t_xcuts
        type(T_Voxel), dimension(:,:), allocatable :: t_xycuts
        type(T_Voxel), dimension(:,:,:), allocatable :: t_xyzcuts

      end type T_Magnet

      type T_Mother

        double precision, dimension (:), allocatable :: xhull,yhull,zhull

        integer, dimension (:,:), allocatable :: kedge
        integer, dimension (:), allocatable :: kface,khull,magnets

        double precision xyz(3),xmin,ymin,zmin,xmax,ymax,zmax,gcen(3)

        integer :: nmagnets=0,nhull,kfacelast

        character(32) :: cmoth=''

      end type T_Mother

      type T_Filament
        double precision curr,x1,y1,z1,x2,y2,z2
        integer icolor
      end type T_Filament

      type T_Coil
        integer ncwireI,ncwireE,iibuff,iebuff
        character(128) ctype,cnam
        character(1024) cparams
        double precision params(100)
      endtype T_Coil

      type(T_Magnet), dimension(:), allocatable ::  t_magnets, t_magnets_copy
      type(T_Coil), dimension(:), allocatable ::  t_coils

      type T_Module
        integer ncopy
        double precision offset(3),phi,vspace(3), scalmag(3),rotmat(3,3)
      end type T_Module

      character(32), dimension(:), allocatable :: chmutts

      integer, dimension (:), allocatable :: magmodule
      integer, parameter :: ntransrotcop_p=1000, nmat_p=1000

      integer :: ntransrotcop=0, nmat_t=0, t_matrec(3,nmat_p), nowarnugv=0
      double precision transrotcop(8,ntransrotcop_p)
      character(128) ctransrotcop(ntransrotcop_p)

      type(T_Mother), dimension(:), allocatable ::  t_mothers
      type(T_Module), dimension(:), allocatable ::  t_modules
      type(T_Magnet_Copy), dimension(:), allocatable ::  t_magcopy
      type(T_Magnet_Sym), dimension(:), allocatable ::  t_magsym
      type(T_Voxel_Copy), dimension(:), allocatable ::  t_voxcopy

      double precision, dimension (:), allocatable ::
     &  xpuffer1,ypuffer1,zpuffer1,
     &  xpuffer2,ypuffer2,zpuffer2,
     &  xpuffer3,ypuffer3,zpuffer3

      end module magnets_structure
