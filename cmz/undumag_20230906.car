+TITLE.
UNDUMAG  2.04/14  06/09/2023  07.42.07
+PATCH,FOR.
*CMZ :  0.00/00 20/04/2016  13.00.13  by  Michael Scheer
+DECK,undumag_ini,T=F77.
*CMZ :  2.04/14 04/09/2023  13.53.15  by  Michael Scheer
*CMZ :  2.04/10 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/05 15/03/2023  09.34.01  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  17.02.39  by  Michael Scheer
*CMZ :  2.03/00 23/07/2022  09.18.29  by  Michael Scheer
*CMZ :  2.02/02 02/03/2022  13.23.21  by  Michael Scheer
*CMZ :  2.02/01 10/02/2022  12.55.23  by  Michael Scheer
*CMZ :  2.02/00 31/03/2021  20.30.51  by  Michael Scheer
*CMZ :  2.01/08 13/08/2020  11.27.23  by  Michael Scheer
*CMZ :  2.01/05 26/06/2020  16.04.15  by  Michael Scheer
*CMZ :  2.01/04 18/07/2019  13.56.54  by  Michael Scheer
*CMZ :  2.01/03 13/06/2019  15.03.29  by  Michael Scheer
*CMZ :  2.01/02 27/04/2018  14.56.07  by  Michael Scheer
*CMZ :  2.01/01 24/04/2018  17.15.25  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  14.30.21  by  Michael Scheer
*CMZ :  2.00/03 23/04/2018  17.47.12  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.39.07  by  Michael Scheer
*CMZ :  1.25/05 05/04/2018  19.09.03  by  Michael Scheer
*CMZ :  1.25/03 23/03/2018  16.25.38  by  Michael Scheer
*CMZ :  1.25/02 21/03/2018  13.30.12  by  Michael Scheer
*CMZ :  1.25/01 20/03/2018  15.59.20  by  Michael Scheer
*CMZ :  1.25/00 16/03/2018  12.35.49  by  Michael Scheer
*CMZ :  1.24/01 16/10/2017  19.08.03  by  Michael Scheer
*CMZ :  1.23/07 10/10/2017  13.53.24  by  Michael Scheer
*CMZ :  1.23/04 04/10/2017  11.50.12  by  Michael Scheer
*CMZ :  1.23/03 25/09/2017  18.37.06  by  Michael Scheer
*CMZ :  1.23/02 17/09/2017  11.21.15  by  Michael Scheer
*CMZ :  1.22/02 02/08/2017  16.23.00  by  Michael Scheer
*CMZ :  1.22/01 21/07/2017  14.53.35  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  08.50.03  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  11.30.39  by  Michael Scheer
*CMZ :  1.20/02 22/06/2017  15.56.28  by  Michael Scheer
*CMZ :  1.20/01 22/06/2017  12.48.09  by  Michael Scheer
*CMZ :  1.20/00 21/06/2017  13.11.48  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.31.54  by  Michael Scheer
*CMZ :  1.18/03 13/06/2017  15.30.31  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  14.09.42  by  Michael Scheer
*CMZ :  1.18/01 07/06/2017  09.19.34  by  Michael Scheer
*CMZ :  1.17/08 30/05/2017  16.04.28  by  Michael Scheer
*CMZ :  1.17/06 21/05/2017  12.55.08  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  12.22.37  by  Michael Scheer
*CMZ :  1.15/12 04/05/2017  12.23.38  by  Michael Scheer
*CMZ :  1.15/11 26/04/2017  11.23.30  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.22.06  by  Michael Scheer
*CMZ :  1.15/09 07/04/2017  14.51.07  by  Michael Scheer
*CMZ :  1.15/08 06/04/2017  14.32.29  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.29.10  by  Michael Scheer
*CMZ :  1.15/05 04/04/2017  12.46.33  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  12.15.21  by  Michael Scheer
*CMZ :  1.15/02 01/04/2017  19.50.52  by  Michael Scheer
*CMZ :  1.15/00 28/03/2017  11.26.05  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  09.16.41  by  Michael Scheer
*CMZ :  1.13/03 16/03/2017  10.00.53  by  Michael Scheer
*CMZ :  1.13/02 09/03/2017  17.14.36  by  Michael Scheer
*CMZ :  1.13/01 08/03/2017  15.40.55  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  16.37.53  by  Michael Scheer
*CMZ :  1.12/00 24/02/2017  08.47.15  by  Michael Scheer
*CMZ :  1.11/07 23/02/2017  17.24.23  by  Michael Scheer
*CMZ :  1.11/06 23/02/2017  13.18.36  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  12.27.44  by  Michael Scheer
*CMZ :  1.11/04 25/01/2017  10.13.44  by  Michael Scheer
*CMZ :  1.11/03 17/01/2017  14.50.40  by  Michael Scheer
*CMZ :  1.11/01 06/01/2017  13.46.07  by  Michael Scheer
*CMZ :  1.11/00 04/01/2017  15.56.40  by  Michael Scheer
*CMZ :  1.10/03 05/12/2016  15.36.58  by  Michael Scheer
*CMZ :  1.10/02 30/11/2016  16.12.02  by  Michael Scheer
*CMZ :  1.10/01 18/11/2016  15.02.58  by  Michael Scheer
*CMZ :  1.10/00 01/11/2016  09.47.47  by  Michael Scheer
*CMZ :  1.09/01 06/10/2016  09.08.03  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  09.12.28  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  18.54.27  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.39.27  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  14.51.14  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.43.31  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.02.17  by  Michael Scheer
*CMZ :  1.05/00 17/09/2016  10.32.16  by  Michael Scheer
*CMZ :  1.04/03 15/09/2016  17.35.03  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  16.29.44  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  10.45.28  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  13.31.19  by  Michael Scheer
*CMZ :  1.02/03 12/09/2016  11.37.12  by  Michael Scheer
*CMZ :  1.02/02 12/09/2016  10.20.23  by  Michael Scheer
*CMZ :  1.02/01 11/09/2016  12.27.52  by  Michael Scheer
*CMZ :  1.02/00 29/08/2016  14.10.42  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  17.52.14  by  Michael Scheer
*CMZ :  0.00/13 16/08/2016  12.06.57  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  09.03.47  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  16.13.39  by  Michael Scheer
*CMZ :  0.00/10 13/07/2016  15.05.25  by  Michael Scheer
*CMZ :  0.00/09 04/07/2016  17.54.03  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  13.38.55  by  Michael Scheer
*CMZ :  0.00/05 14/06/2016  13.51.40  by  Michael Scheer
*CMZ :  0.00/04 13/05/2016  14.27.24  by  Michael Scheer
*CMZ :  0.00/02 29/04/2016  09.17.43  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  15.56.38  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.48.03  by  Michael Scheer
*CMZ :  1.17/15 19/04/2016  15.54.31  by  Michael Scheer
*CMZ :  1.17/14 13/04/2016  12.32.55  by  Michael Scheer
*CMZ :  1.17/13 08/04/2016  11.47.10  by  Michael Scheer
*CMZ :  1.17/12 06/04/2016  14.29.22  by  Michael Scheer
*CMZ :  1.17/11 05/04/2016  12.46.06  by  Michael Scheer
*CMZ :  1.17/10 04/04/2016  14.46.34  by  Michael Scheer
*CMZ :  1.17/09 04/04/2016  09.41.39  by  Michael Scheer
*CMZ :  1.17/08 04/04/2016  08.58.50  by  Michael Scheer
*CMZ :  1.17/07 04/04/2016  08.42.21  by  Michael Scheer
*-- Author :    Michael Scheer   01/04/2016

      subroutine undumag_ini(kseg)

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      double precision undumag_variable_getval

+seq,phyconparam.
+seq,seqdebug.
+seq,random.

      integer lun,lunst,ivrmlo,lunrn,lundum,k,i,idatetime(8),kseg
      integer :: iwwork,iwfct=0,iwgeo=0,iwvgeo=0,iwmag=0
      double precision retval

      character(10) dtday,dttime,dtzone

      twopi=twopi1

      open(newunit=lun,file="undumag.stat")
      write(lun,*)"1"
      flush(lun)
      close(lun)

      call undumag_greeter

      ! read undumag.nam
      call undumag_ini_namelists

      iwwork=abs(iundugeo)
      if(iwwork/1000.gt.0) then
        iwfct=1
        iwwork=iwwork-1000
      endif
      if(iwwork/100.gt.0) then
        iwvgeo=1
        iwwork=iwwork-100
      endif
      if(iwwork/10.gt.0) then
        iwgeo=1
        iwwork=iwwork-10
      endif
      if(iwwork.gt.0) then
        iwmag=1
      endif

      if (kseg.ne.0) then
        kechocalc=0
      endif

      ixsymo=ixsym
      iysymo=iysym
      izsymo=izsym

      ! initialize random generator
      call undumag_ini_random
c      call undumag_ini_displacement

      ! read undumag.clc
      call undumag_read_clc

      ! calculate variables
      call undumag_calc_new(kechocalc)

      nowarnugv=1

      if (perlen.eq.9999.0d0) then
        retval=undumag_variable_getval("PerLen")
        if (retval.ne.-9999.0d29) then
          perlen=retval
        else
          write(lun6,*)"*** Error in undumag_ini: Bad return from undumag_variable_getval for PerLen ***"
          write(lun6,*)"*** Setting PerLen = 100.0 ***"
          perlen=100.0d0
        endif
      endif

      retval=undumag_variable_getval("ixsym")
      if (retval.ne.-9999.0d29) ixsym=nint(retval)
      retval=undumag_variable_getval("iysym")
      if (retval.ne.-9999.0d29) iysym=nint(retval)
      retval=undumag_variable_getval("izsym")
      if (retval.ne.-9999.0d29) izsym=nint(retval)
      nowarnugv=0

      if (ixsym.ne.ixsymo.or.iysym.ne.iysymo.or.izsym.ne.izsymo) then
        print*,"*** Warning in undumag_ini: Symmetry operations of undumag.nam overwritten with values of undumag.clc ***"
      endif

      if (ixsym.lt.0.or.iysym.lt.0.or.izsym.lt.0) then
        print*,"*** Warning in undumag_ini: Hard symmetry operations, i.e. duplication of magnets not allowed ***"
        print*,"*** Switching to soft symmetry  ***"
        ixsym=abs(ixsym)
        iysym=abs(iysym)
        izsym=abs(izsym)
      endif

      call undumag_ini_materials

      call undumag_ini_magnets(kseg)
      if (kseg.ne.0) return

      if (irnmode.eq.1.or.irnmode.eq.2) then

        kundurun=0

        open(newunit=lundum,file="undumag.run",form='formatted',recl=512)
        read(lundum,*,end=197)kundurun
197     kundurun=kundurun+1
        close(lundum)

        if (irnmode.eq.2) irnseed(12)=irnseed(12)+kundurun
        call util_random_set_seed(irnsize,irnseed)

      else if (irnmode<0) then

        open(newunit=lunrn,file='undumag.seeds',status='old')
        read(lunrn,*) k
        do i=1,irnsize
          read(lunrn,*)k,irnseed(k)
        enddo
        close(lunrn)
        call util_random_set_seed(irnsize,irnseed)
      else
        call util_random_init(irnsize,irnseed)
      endif

      open(newunit=lundum,file="undumag.run",form='formatted',recl=512)

      read(lundum,*,end=97)kundurun
97    kundurun=kundurun+1

      rewind(lundum)

      call date_and_time(dtday,dttime,dtzone,idatetime)

      write(lundum,*) kundurun,trim(usercom),' ',
     &  dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &  ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
      flush(lundum)
      close(lundum)

      open(newunit=lundum,file="undumag.runs",form='formatted',recl=512,
     &  access='append')
      write(lundum,*) kundurun,trim(usercom),' ',
     &  dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &  ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
      close(lundum)

      open(newunit=lun,file='undumag.run',status='old')
      read(lun,'(a)')cundutit
      close(lun)
      cundutit(1:1)='*'

      ! write buffer file undumag.mag
      kunduplot_mode=iunduplot_mode
      if (iwmag.ne.0.or.iunduplot.ne.0) then
        call undumag_magfile
      endif

      ! write magnets, poles, and coils to undumag.geo
      if (iwgeo.ne.0) call undumag_geo

      if (iundugeo.lt.0) then
        open(newunit=lunst,file="undumag.stat")
        write(lunst,*)"0"
        flush(lunst)
        close(lunst)
        stop "--- Programm UNDUMAG terminated due to iundugeo < 0 ---"
      endif

      ! write magnets, poles, and coils to undumag.eps
      if (iunduplot.ne.0) call undumag_bpolyplot

      if (iunduplot.lt.0) then
        open(newunit=lunst,file="undumag.stat")
        write(lunst,*)"0"
        flush(lunst)
        close(lunst)
        stop "--- Programm UNDUMAG terminated due to iunduplot < 0 ---"
      endif

      ! write interface to RADIA
      call clcmag_to_radia
      !call undumag_to_radia

      ! write CAD file undumag.wrl of magnets and poles if ivrml.ne.0

      ivrmlo=ivrml
      ivrml=abs(ivrml)
      call undumag_to_vrml
      ivrml=ivrmlo

      if (ivrml.lt.0) then
        open(newunit=lunst,file="undumag.stat")
        write(lunst,*)"0"
        flush(lunst)
        close(lunst)
        stop "--- Programm UNDUMAG terminated due to ivrml < 0 ---"
      endif

      return
      end
+DECK,clcmag_cut.
*CMZ :  2.04/13 04/09/2023  08.27.06  by  Michael Scheer
*CMZ :  2.04/08 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/06 04/08/2023  11.24.35  by  Michael Scheer
*CMZ :  2.03/00 31/07/2022  18.33.07  by  Michael Scheer
*CMZ :  2.02/01 19/01/2022  10.38.36  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2021
      subroutine clcmag_cut

      use undumagf90m
      use commandlinef90m
      use magnets_structure

      implicit none

      double precision, dimension (:,:,:), allocatable :: corn1,corn2
      integer, dimension (:), allocatable :: ncorn1,ncorn2

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface

      integer imag
+self,if=dumpvox.
      integer ivox,nvox,npoi
      type(T_Voxel) :: tvox
+self.

+self,if=trace.
      print*,"-trace-: Entered clcmag_cut"
+self.
      ! for the voxels xyz = gcen!
      ! xhull,yhull,zhull refer to gcen for voxels

      call util_zeit_kommentar(lun6,"Cutting magnets")

      allocate(corn1(3,2*ncornmax,2*nplanmax),corn2(3,2*ncornmax,2*nplanmax))
      allocate(ncorn1(2*nplanmax),ncorn2(2*nplanmax))

      allocate(khull(2*ncornmax*nplanmax),kedge(4,2*ncornmax*nplanmax-2),
     &  kface(5*ncornmax*nplanmax))

      do imag=1,nmag_t+nspecmag_t
        if (t_magnets(imag)%ctype.ne.'Cylinder') then
          call clcmag_xcut(imag)
          call clcmag_ycut(imag)
          call clcmag_zcut(imag)
        endif
      enddo !nmag_t

      deallocate(corn1,corn2)

      call clcmag_voxels
      call clcmag_copy_voxels
c      call clcmag_facets

+self,if=dumpvox.
      print*,"+self,if=dumpvox."
      do imag=1,nmag_t+nspecmag_t
        nvox=t_magnets(imag)%nvoxels
        do ivox=1,nvox
          tvox=t_magnets(imag)%t_voxels(ivox)
          npoi=tvox%nhull
          do i=1,npoi
            write(66,*)imag,ivox,i,tvox%hull(:,i)+tvox%gcen
          enddo
        enddo
      enddo
+self.

      call util_zeit_kommentar(lun6,"Done")

+self,if=trace.
      print*,"-trace-: Leaving clcmag_cut"
+self.
      return
      end
+DECK,clcmag_zcut.
*CMZ :  2.04/14 05/09/2023  14.01.56  by  Michael Scheer
*CMZ :  2.04/06 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.30.33  by  Michael Scheer
*CMZ :  2.04/02 25/02/2023  17.27.31  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  13.19.45  by  Michael Scheer
*CMZ :  2.03/00 31/07/2022  18.19.49  by  Michael Scheer
*CMZ :  2.02/02 15/02/2022  16.00.05  by  Michael Scheer
*CMZ :  2.02/01 23/01/2022  14.52.10  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2021
      subroutine clcmag_zcut(imag)

      use undumagf90m
      use commandlinef90m
      use magnets_structure

      implicit none

      character(128) ctype

      double precision, dimension (:,:,:), allocatable :: corn1,corn2
      double precision, dimension (:), allocatable :: xh,yh,zh,xhc,yhc,zhc

      double precision x,y,z,
     &  x02(2),y02(2),z02(2),zdivmin,zdivmax,
     &  gcen(3),gcenv(3),xmin,xmax,ymin,ymax,zmin,zmax,
     &  dzdiv,zdiv,fracsum,zfracdiv,zfacdiv,volmag,vol

      integer, dimension (:), allocatable :: ncorn1,ncorn2

      integer :: idebug=0,
     &  i,j,l,n,ix,iy,iz,kz,imag,ip,npoi,iplan,icorn,
     &  nxdiv,nydiv,nzdiv,kcut,izdiv,klast,nplan,ncorn

      integer ifailhull,ifail,nhull,nedge,nface,kfacelast,nvox

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface

      type(T_Magnet) :: tmag
      type(T_Voxel) :: tvox

+self,if=trace.
      print*,"-trace-: Entered clcmag_zcut"
+self.

      if (idebug.gt.0) call util_break

      tmag=t_magnets(imag)

      gcen=t_magnets(imag)%gcen

      nxdiv=t_magnets(imag)%nxdiv
      nydiv=t_magnets(imag)%nydiv
      nzdiv=t_magnets(imag)%nzdiv

      if (idebug.eq.10) then
        do ix=1,nxdiv
          do iy=1,nydiv
            print*,ix,iy,t_magnets(imag)%t_xycuts(ix,iy)%volume
          enddo
        enddo
        stop
      endif

      ctype=t_magnets(imag)%ctype

      if (idebug.lt.0) then
        print*,imag,tmag%cnam,tmag%cmoth,nxdiv,nydiv,nzdiv
      endif

      if (nzdiv.gt.1) then

        allocate(t_magnets(imag)%zdivs(nzdiv-1))

        fracsum=0.0d0
        ! zfracdiv**(nzdiv-1)=zfacdiv
        ! ln(zfracdiv)*(nzdiv-1)=ln(zfacdiv)
        zfacdiv=t_magnets(imag)%zfracdiv
        zdivmin=t_magnets(imag)%zmin
        zdivmax=t_magnets(imag)%zmax

        if (nzdiv.gt.1) then
          zfracdiv=exp(log(zfacdiv)/(nzdiv-1))
        else
          zfracdiv=1.0d0
        endif

        do izdiv=0,nzdiv-1
          fracsum=fracsum+zfracdiv**izdiv
        enddo

        dzdiv=(zdivmax-zdivmin)/fracsum*zfacdiv

        if (nzdiv.gt.1) t_magnets(imag)%zdivs(1)=zdivmin+dzdiv

        do iz=2,nzdiv-1
          dzdiv=dzdiv/zfracdiv
          t_magnets(imag)%zdivs(iz)=t_magnets(imag)%zdivs(iz-1)+dzdiv
        enddo

      endif

        allocate(corn1(3,2*ncornmax,2*nplanmax),corn2(3,2*ncornmax,2*nplanmax))
        allocate(ncorn1(2*nplanmax),ncorn2(2*nplanmax))
        allocate(
     &    xh(2*ncornmax*nplanmax),yh(2*ncornmax*nplanmax),zh(2*ncornmax*nplanmax),
     &    xhc(2*ncornmax*nplanmax),yhc(2*ncornmax*nplanmax),zhc(2*ncornmax*nplanmax))
        allocate(khull(2*ncornmax*nplanmax),kedge(4,2*ncornmax*nplanmax-2),
     &    kface(5*ncornmax*nplanmax))

      nvox=0

      do ix=1,nxdiv

        do iy=1,nydiv

          x02=0.0d0
          y02=0.0d0
          z02=0.0d0

          t_magnets(imag)%t_xycuts(ix,iy)%mzdiv=0

          tvox=t_magnets(imag)%t_xycuts(ix,iy)

          if (tvox%iydiv.eq.0) cycle

          if (idebug.lt.0) then
            print*,ix,iy,tvox%nface
          endif

          ncorn1=0
          ncorn2=0
          l=0

          if (nzdiv.gt.1) then

            do i=1,tvox%nface
              l=l+1
              n=tvox%kface(l)
              ncorn1(i)=n
              do j=1,n
                l=l+1
                ip=tvox%kface(l)
                x=tvox%xhull(ip)
                y=tvox%yhull(ip)
                z=tvox%zhull(ip)
                corn1(1,j,i)=x
                corn1(2,j,i)=y
                corn1(3,j,i)=z
              enddo
            enddo

          endif !iz

          gcenv=tvox%gcen

          kcut=0

          do iz=1,nzdiv-1

            zmin=1.0d30
            zmax=-1.0d30
            do iplan=1,nplanmax
              do icorn=1,ncorn1(iplan)
                z=corn1(3,icorn,iplan)+z02(1)
                if (z.lt.zmin) zmin=z
                if (z.gt.zmax) zmax=z
              enddo
            enddo

            zdiv=t_magnets(imag)%zdivs(iz)+gcen(3) !Labor
            zdiv=zdiv-gcenv(3) ! relative to gcenv, i.e. GCEN of voxel

            if (zdiv-zmin.le.cuttiny.or.zmax-zdiv.le.cuttiny) then
              if (idebug.gt.0) call util_break
              cycle
            endif

            kcut=1
            exit

          enddo !iz

          if (nzdiv.eq.1.or.kcut.eq.0) then

            nvox=nvox+1

            if (tvox%iydiv.eq.0) cycle

            nhull=tvox%nhull
            nedge=tvox%nedge
            nface=tvox%nface
            khull=tvox%khull
            kedge=tvox%kedge
            kface=tvox%kface
            kfacelast=tvox%kfacelast

            allocate(t_magnets(imag)%t_xyzcuts(ix,iy,1)%xhull(nhull))
            allocate(t_magnets(imag)%t_xyzcuts(ix,iy,1)%yhull(nhull))
            allocate(t_magnets(imag)%t_xyzcuts(ix,iy,1)%zhull(nhull))
            allocate(t_magnets(imag)%t_xyzcuts(ix,iy,1)%khull(nhull))
            allocate(t_magnets(imag)%t_xyzcuts(ix,iy,1)%kedge(4,nedge))
            allocate(t_magnets(imag)%t_xyzcuts(ix,iy,1)%kface(kfacelast))

            t_magnets(imag)%t_xyzcuts(ix,iy,1)%nhull=nhull
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%khull=khull
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%nedge=nedge
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%kedge=kedge
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%nface=nface
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%kface=kface
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%kfacelast=kfacelast

            t_magnets(imag)%t_xyzcuts(ix,iy,1)%size=tvox%size
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%volume=tvox%volume

            t_magnets(imag)%t_xyzcuts(ix,iy,1)%xmin=tvox%xmin
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%xmax=tvox%xmax
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%ymin=tvox%ymin
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%ymax=tvox%ymax
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%zmin=tvox%zmin
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%zmax=tvox%zmax

            t_magnets(imag)%t_xyzcuts(ix,iy,1)%xyz=tvox%gcen
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%gcen=tvox%gcen

            do i=1,nhull
              t_magnets(imag)%t_xyzcuts(ix,iy,1)%xhull(i)=tvox%xhull(i)
              t_magnets(imag)%t_xyzcuts(ix,iy,1)%yhull(i)=tvox%yhull(i)
              t_magnets(imag)%t_xyzcuts(ix,iy,1)%zhull(i)=tvox%zhull(i)
            enddo

            t_magnets(imag)%t_xyzcuts(ix,iy,1)%ixdiv=ix
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%iydiv=iy
            t_magnets(imag)%t_xyzcuts(ix,iy,1)%izdiv=1
            t_magnets(imag)%kvoxels(ix,iy,1)=nvox

          else  !nzdiv.eq.1

            l=0
            ncorn1=0
            ncorn2=0

            do i=1,tvox%nface

              l=l+1

              n=tvox%kface(l)
              ncorn1(i)=n

              do j=1,n
                l=l+1
                ip=tvox%kface(l)
                x=tvox%xhull(ip)
                y=tvox%yhull(ip)
                z=tvox%zhull(ip)
                corn1(1,j,i)=x
                corn1(2,j,i)=y
                corn1(3,j,i)=z
              enddo !npoi

              ncorn1(i)=ncorn1(i)+1
              corn1(:,n+1,i)=corn1(:,1,i) ! for undumag_cut_magnet,
              ! the plane must be closed

            enddo !nface

            x02(2)=0.0d0
            y02(2)=0.0d0
            z02(2)=0.0d0

            !if (nzdiv.gt.1) zdiv=t_magnets(imag)%zdivs(1)+gcen(3)-gcenv(3)
            do iz=1,nzdiv-1

              nvox=nvox+1

              !zdiv=t_magnets(imag)%zdivs(iz)+gcen(3)-gcenv(3)+z02(1)

              zmin=1.0d30
              zmax=-1.0d30
              do iplan=1,nplanmax
                do icorn=1,ncorn1(iplan)
                  z=corn1(3,icorn,iplan)+z02(1)
                  if (z.lt.zmin) zmin=z
                  if (z.gt.zmax) zmax=z
                enddo
              enddo

              !dzdiv=t_magnets(imag)%zdivs(iz)-t_magnets(imag)%zmin
              !zdiv=zmin+z02(1)+dzdiv
              !zdiv=t_magnets(imag)%zdivs(iz)
              zdiv=t_magnets(imag)%zdivs(iz)+gcen(3) !Labor
              zdiv=zdiv-gcenv(3) ! relative to gcenv, i.e. GCEN of voxel

              klast=0

              if (zdiv-zmin.le.cuttiny.or.zmax-zdiv.le.cuttiny) then

                if (idebug.gt.0) call util_break
                klast=iz-1
                !cycle
                ! Hier ggf. clcmag_corn_to_vox benutzen, und auch unten
                goto 123

              else !(zmin.ge.zdiv.or.zmax.le.zdiv) then

                x02(1)=x02(2) !Labor
                y02(1)=y02(2)
                z02(1)=z02(2)

                call undumag_cut_magnet(imag,x02,y02,z02,
     &            2*nplanmax,2*ncornmax,
     &            ncorn1,corn1,ncorn2,corn2
     &            ,3,zdiv,hulltiny,ifail)

                if (ifail.ne.0) then
                  write(lun6,*)"*** Error in clcmag_zcut: Bad return from undumag_cut_magnet, magnet, ifail, mag, ixdiv, iydiv, izdiv, zdiv:",
     &              trim(t_magnets(imag)%cnam),ifail,imag,ix,iy," 1 ",zdiv
                  stop
                endif

                if (ncorn2(1).eq.0) then
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)=
     &              t_magnets(imag)%t_xycuts(ix,iy)
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%ixdiv=ix
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%iydiv=iy
                   t_magnets(imag)%t_xyzcuts(ix,iy,iz)%izdiv=iz
                  t_magnets(imag)%t_xycuts(ix,iy)%mzdiv=
     &              t_magnets(imag)%t_xycuts(ix,iy)%mzdiv+1
                  cycle
c                write(lun6,*) '*** Error in clcmag_zcut: No z-Cut for magnet, ixdiv, iydiv, izdiv ',
c     &            t_magnets(imag)%cnam,ixdiv,iydiv," 1"

                else !if (ncorn2(1).eq.0) then

                  npoi=0
                  do iplan=1,nplanmax
                    do icorn=1,ncorn1(iplan)
                      npoi=npoi+1
                      xh(npoi)=corn1(1,icorn,iplan)
                      yh(npoi)=corn1(2,icorn,iplan)
                      zh(npoi)=corn1(3,icorn,iplan)
                    enddo
                  enddo

                  call util_convex_hull_3d_overwrite(npoi,
     &              xh,yh,zh,khull,kedge,kface,nhull,nedge,nface,kfacelast,
     &              hulltiny,ifailhull)

                  allocate(t_magnets(imag)%t_xyzcuts(ix,iy,iz)%xhull(nhull))
                  allocate(t_magnets(imag)%t_xyzcuts(ix,iy,iz)%yhull(nhull))
                  allocate(t_magnets(imag)%t_xyzcuts(ix,iy,iz)%zhull(nhull))
                  allocate(t_magnets(imag)%t_xyzcuts(ix,iy,iz)%khull(nhull))

                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%xyz=gcenv+[x02(1),y02(1),z02(1)]
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%gcen=gcenv+[x02(1),y02(1),z02(1)]
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%nhull=nhull
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%khull=khull
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%nface=nface
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%kface=kface
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%kfacelast=kfacelast
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%nedge=nedge
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%kedge=kedge

                  xmin=1.0d30
                  xmax=-1.0d30
                  ymin=1.0d30
                  ymax=-1.0d30
                  zmin=1.0d30
                  zmax=-1.0d30

                  do i=1,nhull
                    t_magnets(imag)%t_xyzcuts(ix,iy,iz)%xhull(i)=xh(i)
                    t_magnets(imag)%t_xyzcuts(ix,iy,iz)%yhull(i)=yh(i)
                    t_magnets(imag)%t_xyzcuts(ix,iy,iz)%zhull(i)=zh(i)
                    if (xh(i).lt.xmin) xmin=xh(i)
                    if (xh(i).gt.xmax) xmax=xh(i)
                    if (yh(i).lt.ymin) ymin=yh(i)
                    if (yh(i).gt.ymax) ymax=yh(i)
                    if (zh(i).lt.zmin) zmin=zh(i)
                    if (zh(i).gt.zmax) zmax=zh(i)
                  enddo

                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%xmin=xmin
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%xmax=xmax
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%ymin=ymin
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%ymax=ymax
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%zmin=zmin
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%zmax=zmax

                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%size=
     &              [xmax-xmin,ymax-ymin,zmax-zmin]
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%ixdiv=ix
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%iydiv=iy
                  t_magnets(imag)%t_xyzcuts(ix,iy,iz)%izdiv=iz
                  t_magnets(imag)%t_xycuts(ix,iy)%mzdiv=
     &              t_magnets(imag)%t_xycuts(ix,iy)%mzdiv+1
                  t_magnets(imag)%kvoxels(ix,iy,iz)=nvox

                  ncorn1=ncorn2
                  corn1=corn2
                  x02(1)=x02(2)
                  y02(1)=y02(2)
                  z02(1)=z02(2)

                endif !(ncorn2(1).eq.0)

              endif !(zmin.ge.zdiv.or.zmax.le.zdiv) then

123           if (iz.eq.nzdiv-1.or.klast.ne.0) then
                nvox=nvox+1
                kz=iz+1
                if (klast.ne.0) then
                  kz=klast+1
                endif
                npoi=0
                do iplan=1,nplanmax
                  do icorn=1,ncorn1(iplan)
                    npoi=npoi+1
                    xh(npoi)=corn1(1,icorn,iplan)
                    yh(npoi)=corn1(2,icorn,iplan)
                    zh(npoi)=corn1(3,icorn,iplan)
                  enddo
                enddo

                call util_convex_hull_3d_overwrite(npoi,
     &            xh,yh,zh,khull,kedge,kface,nhull,nedge,nface,kfacelast,
     &            hulltiny,ifailhull)

                allocate(t_magnets(imag)%t_xyzcuts(ix,iy,kz)%xhull(nhull))
                allocate(t_magnets(imag)%t_xyzcuts(ix,iy,kz)%yhull(nhull))
                allocate(t_magnets(imag)%t_xyzcuts(ix,iy,kz)%zhull(nhull))
                allocate(t_magnets(imag)%t_xyzcuts(ix,iy,kz)%khull(nhull))
                allocate(t_magnets(imag)%t_xyzcuts(ix,iy,kz)%kedge(4,nedge))
                allocate(t_magnets(imag)%t_xyzcuts(ix,iy,kz)%kface(kfacelast))

                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%xyz=gcenv+[x02(1),y02(1),z02(1)]
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%gcen=gcenv+[x02(1),y02(1),z02(1)]
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%nhull=nhull
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%khull=khull
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%nface=nface
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%kface=kface
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%kfacelast=kfacelast
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%nedge=nedge
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%kedge=kedge

                xmin=1.0d30
                xmax=-1.0d30
                ymin=1.0d30
                ymax=-1.0d30
                zmin=1.0d30
                zmax=-1.0d30

                do i=1,nhull
                  t_magnets(imag)%t_xyzcuts(ix,iy,kz)%xhull(i)=xh(i)
                  t_magnets(imag)%t_xyzcuts(ix,iy,kz)%yhull(i)=yh(i)
                  t_magnets(imag)%t_xyzcuts(ix,iy,kz)%zhull(i)=zh(i)
                  if (xh(i).lt.xmin) xmin=xh(i)
                  if (xh(i).gt.xmax) xmax=xh(i)
                  if (yh(i).lt.ymin) ymin=yh(i)
                  if (yh(i).gt.ymax) ymax=yh(i)
                  if (zh(i).lt.zmin) zmin=zh(i)
                  if (zh(i).gt.zmax) zmax=zh(i)
                enddo

                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%size=[xmax-xmin,ymax-ymin,zmax-zmin]

                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%xmin=xmin
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%xmax=xmax
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%ymin=ymin
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%ymax=ymax
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%zmin=zmin
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%zmax=zmax

                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%ixdiv=ix
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%iydiv=iy
                t_magnets(imag)%t_xyzcuts(ix,iy,kz)%izdiv=kz
                t_magnets(imag)%t_xycuts(ix,iy)%mzdiv=
     &            t_magnets(imag)%t_xycuts(ix,iy)%mzdiv+1
                t_magnets(imag)%kvoxels(ix,iy,kz)=nvox

                exit

              endif ! klast

            enddo !nzdiv -1

          volmag=0.0d0

          do iz=1,nzdiv

            nhull=t_magnets(imag)%t_xyzcuts(ix,iy,iz)%nhull

            if (nhull.gt.0) then
              tvox=t_magnets(imag)%t_xyzcuts(ix,iy,iz)
              call util_volume(nhull,tvox%xhull,tvox%yhull,tvox%zhull,hulltiny,
     &          vol,ifail)
              if (ifail.ne.0) then
                write(lun6,*)"*** Error in clcmag_ycut: Bad return from util_volume, magnet, magnet number, ix,iy:",
     &            trim(tmag%cnam),imag,ix,iy
                stop
              endif
              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume=vol
              volmag=volmag+vol
            else
              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume=0.0d0
            endif

          enddo !iz

          vol=(volmag-t_magnets(imag)%t_xycuts(ix,iy)%volume)/
     &      t_magnets(imag)%t_xycuts(ix,iy)%volume

          if (abs(vol).gt.1.0d-9) then
            write(lun6,*)"*** Warning in clcmag_zcut: Sum of xyz-cut volumes differs from xy-cuts by (rel.):",vol
            write(lun6,*)"*** magnet, ixdiv, iydiv: ",trim(tmag%cnam),ix,iy
          endif

        endif !nzdiv.eq.1

      enddo !iy=1,nydiv

      enddo !nxdiv

!      if (nzdiv.gt.1) then
      deallocate(ncorn1,ncorn2,corn1,corn2,xh,yh,zh,xhc,yhc,zhc,kedge,kface)
!      endif

      t_magnets(imag)%nvoxels=nvox
      nvox_t=nvox_t+nvox

      if (idebug.gt.0) call util_break

+self,if=debzcut.
      open(unit=772,file="fort.772")
      do ix=1,nxdiv
        do iy=1,nydiv
          do iz=1,nzdiv
            tvox = t_magnets(imag)%t_xyzcuts(ix,iy,iz)
            if (tvox%ixdiv*tvox%iydiv*tvox%izdiv.eq.0) cycle
            do i=1,tvox%nhull
              write(772,*)
     &          ix,iy,iz,tvox%xhull(i),
     &          tvox%yhull(i),
     &          tvox%zhull(i),
     &          tvox%xhull(i)+tvox%gcen(1),
     &          tvox%yhull(i)+tvox%gcen(2),
     &          tvox%zhull(i)+tvox%gcen(3),
     &          tvox%xhull(i)+tmag%gcen(1),
     &          tvox%yhull(i)+tmag%gcen(2),
     &          tvox%zhull(i)+tmag%gcen(3)
            enddo
          enddo
        enddo
      enddo
      flush(772)
      close(772)
+self.

      volmag=0.0d0
      do ix=1,nxdiv
        do iy=1,nydiv
          do iz=1,nzdiv
            volmag=volmag+t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume
            !print*,"++++++++++++++++++++++++++++++++++++++++++++++++"
            !print*,ix,iy,iz
            !print*,"++++++++++++++++++++++++++++++++++++++++++++++++"
            l=1
            nplan=0
            do i=1,t_magnets(imag)%t_xyzcuts(ix,iy,iz)%kfacelast
              nplan=nplan+1
              ncorn=t_magnets(imag)%t_xyzcuts(ix,iy,iz)%kface(l)
              !print*,nplan,ncorn
              if (nplan.gt.nplanmax) then
                nplanmax=nplan
                call clcbuff_reallocate
              endif
              if (ncorn.gt.ncornmax) ncornmax=ncorn
              l=l+n+1
              if (nplan.eq.t_magnets(imag)%t_xyzcuts(ix,iy,iz)%nface) exit
            enddo
          enddo
        enddo
      enddo

      vol=(volmag-t_magnets(imag)%volume)/t_magnets(imag)%volume

      if (abs(vol).gt.1.0d-9) then
        write(lun6,*)"*** Warning in clcmag_zcut: Sum of xyz-cut volumes differs from magnet volume by (rel.): ",vol
        write(lun6,*)"*** magnet :",trim(tmag%cnam),imag
      endif

+self,if=trace.
      print*,"-trace-: Leaving clcmag_zcut"
+self.
      return
      end
+DECK,clcmag_ycut.
*CMZ :  2.04/14 05/09/2023  13.59.00  by  Michael Scheer
*CMZ :  2.04/06 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.22.55  by  Michael Scheer
*CMZ :  2.04/02 25/02/2023  18.03.22  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  13.49.55  by  Michael Scheer
*CMZ :  2.03/00 31/07/2022  18.19.49  by  Michael Scheer
*CMZ :  2.02/02 15/02/2022  15.59.51  by  Michael Scheer
*CMZ :  2.02/01 23/01/2022  14.50.54  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2021
      subroutine clcmag_ycut(imag)

      use undumagf90m
      use commandlinef90m
      use magnets_structure

      implicit none

      double precision, dimension (:,:,:), allocatable :: corn1,corn2
      double precision, dimension (:), allocatable :: xh,yh,zh,xhc,yhc,zhc

      double precision x,y,z,
     &  x02(2),y02(2),z02(2),ydivmin,ydivmax,
     &  gcen(3),gcenv(3),xmin,xmax,ymin,ymax,zmin,zmax,dydiv,ydiv,
     &  yfracdiv,fracsum,yfacdiv,vol,yvolmag

      integer, dimension (:), allocatable :: ncorn1,ncorn2

      integer :: idebug=0,
     &  i,j,l,n,ix,iy,ky,imag,ip,npoi,iplan,icorn,
     &  nxdiv,nydiv,nzdiv,kcut,klast

      integer :: ifailhull,ifail,nhull,nedge,nface,kfacelast,iydiv,ical=0

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface

      character(128) ctype

      type(T_Magnet) :: tmag
      type(T_Voxel) :: tvox

+self,if=trace.
      print*,"-trace-: Entered clcmag_ycut"
+self.

      if (idebug.ne.0) then
        call util_break
      endif

      ical=ical+1

      tmag=t_magnets(imag)
      gcen=t_magnets(imag)%gcen

      nxdiv=t_magnets(imag)%nxdiv
      nydiv=t_magnets(imag)%nydiv
      nzdiv=t_magnets(imag)%nzdiv

      ctype=t_magnets(imag)%ctype

      if (nydiv.gt.1) then

        allocate(t_magnets(imag)%ydivs(nydiv-1))

        fracsum=0.0d0
        ! yfracdiv**(nydiv-1)=yfacdiv
        ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
        yfacdiv=t_magnets(imag)%yfracdiv
        ydivmin=t_magnets(imag)%ymin
        ydivmax=t_magnets(imag)%ymax
        yfacdiv=t_magnets(imag)%yfracdiv

        if (nydiv.gt.1) then
          yfracdiv=exp(log(yfacdiv)/(nydiv-1))
        else
          yfracdiv=1.0d0
        endif
        do iydiv=0,nydiv-1
          fracsum=fracsum+yfracdiv**iydiv
        enddo

        dydiv=(ydivmax-ydivmin)/fracsum*yfacdiv
        t_magnets(imag)%ydivs(1)=ydivmin+dydiv

        if (idebug.ne.0) then
          call util_break
        endif

        do iy=2,nydiv-1
          dydiv=dydiv/yfracdiv
          t_magnets(imag)%ydivs(iy)=t_magnets(imag)%ydivs(iy-1)+dydiv !relative to gcen
        enddo

        allocate(corn1(3,2*ncornmax,2*nplanmax),corn2(3,2*ncornmax,2*nplanmax))
        allocate(ncorn1(2*nplanmax),ncorn2(2*nplanmax))
        allocate(
     &    xh(2*ncornmax*nplanmax),yh(2*ncornmax*nplanmax),zh(2*ncornmax*nplanmax),
     &    xhc(2*ncornmax*nplanmax),yhc(2*ncornmax*nplanmax),zhc(2*ncornmax*nplanmax))
        allocate(khull(2*ncornmax*nplanmax),kedge(4,2*ncornmax*nplanmax-2),
     &    kface(5*ncornmax*nplanmax))
      endif

      do ix=1,nxdiv

        tvox = t_magnets(imag)%t_xcuts(ix)
        t_magnets(imag)%t_xcuts(ix)%mydiv=0
        gcenv=tvox%gcen

        kcut=0

        !if (yfracdiv.gt.1) ydiv=t_magnets(imag)%ydivs(1)+gcen(2)-gcenv(2)

        do iy=1,nydiv-1
          ydiv=t_magnets(imag)%ydivs(iy)+gcen(2) !Labor
          ydiv=ydiv-gcenv(2) ! relative to gcenv
          if (ydiv-tvox%ymin.le.cuttiny.or.tvox%ymax-ydiv.le.cuttiny) cycle
          kcut=1
          exit
        enddo

        if (nydiv.eq.1.or.kcut.eq.0) then

          nhull=tvox%nhull
          nedge=tvox%nedge
          nface=tvox%nface
          khull=tvox%khull
          kedge=tvox%kedge
          kface=tvox%kface
          kfacelast=tvox%kfacelast

          allocate(t_magnets(imag)%t_xycuts(ix,1)%khull(nhull))
          allocate(t_magnets(imag)%t_xycuts(ix,1)%xhull(nhull))
          allocate(t_magnets(imag)%t_xycuts(ix,1)%yhull(nhull))
          allocate(t_magnets(imag)%t_xycuts(ix,1)%zhull(nhull))
          allocate(t_magnets(imag)%t_xycuts(ix,1)%kedge(4,nedge))
          allocate(t_magnets(imag)%t_xycuts(ix,1)%kface(kfacelast))

          t_magnets(imag)%t_xycuts(ix,1)%nhull=nhull
          t_magnets(imag)%t_xycuts(ix,1)%khull=khull
          t_magnets(imag)%t_xycuts(ix,1)%nedge=nedge
          t_magnets(imag)%t_xycuts(ix,1)%kedge=kedge
          t_magnets(imag)%t_xycuts(ix,1)%nface=nface
          t_magnets(imag)%t_xycuts(ix,1)%kface=kface
          t_magnets(imag)%t_xycuts(ix,1)%kfacelast=kfacelast

          t_magnets(imag)%t_xycuts(ix,1)%size=tvox%size

          t_magnets(imag)%t_xycuts(ix,1)%xmin=tvox%xmin
          t_magnets(imag)%t_xycuts(ix,1)%xmax=tvox%xmax
          t_magnets(imag)%t_xycuts(ix,1)%ymin=tvox%ymin
          t_magnets(imag)%t_xycuts(ix,1)%ymax=tvox%ymax
          t_magnets(imag)%t_xycuts(ix,1)%zmin=tvox%zmin
          t_magnets(imag)%t_xycuts(ix,1)%zmax=tvox%zmax

          t_magnets(imag)%t_xycuts(ix,1)%xyz=tvox%gcen
          t_magnets(imag)%t_xycuts(ix,1)%gcen=tvox%gcen
          t_magnets(imag)%t_xycuts(ix,1)%volume=tvox%volume

          do i=1,nhull
            t_magnets(imag)%t_xycuts(ix,1)%xhull(i)=tvox%xhull(i)
            t_magnets(imag)%t_xycuts(ix,1)%yhull(i)=tvox%yhull(i)
            t_magnets(imag)%t_xycuts(ix,1)%zhull(i)=tvox%zhull(i)
          enddo

          t_magnets(imag)%t_xycuts(ix,1)%ixdiv=ix
          t_magnets(imag)%t_xycuts(ix,1)%iydiv=1
          t_magnets(imag)%t_xcuts(ix)%mydiv=1

        else  !nydiv.eq.1

          l=0
          ncorn1=0
          ncorn2=0

          do i=1,tvox%nface

            l=l+1

            n=tvox%kface(l)
            ncorn1(i)=n
+self,if=debycut.
            if (ix.eq.1) then
              open(unit=69,file='fort.69')
            else
              open(unit=69,file='fort.69',access='append')
            endif
+self.
            !corn1 is rel. to tvox%gcen
            do j=1,n
              l=l+1
              ip=tvox%kface(l)
              x=tvox%xhull(ip)
              y=tvox%yhull(ip)
              z=tvox%zhull(ip)
              corn1(1,j,i)=x
              corn1(2,j,i)=y
              corn1(3,j,i)=z
+self,if=debycut.
              write(69,*)ix,l,j,i,
     &          corn1(1,j,i)+tvox%gcen(1),
     &          corn1(2,j,i)+tvox%gcen(2),
     &          corn1(3,j,i)+tvox%gcen(3)
+self.
            enddo !npoi

            ncorn1(i)=ncorn1(i)+1
            corn1(:,n+1,i)=corn1(:,1,i) ! for undumag_cut_magnet,
            ! the plane must be closed
          enddo !nface

+self,if=debycut.
          flush(69)
          close(69)
+self.
          x02=0.0d0
          y02=0.0d0
          z02=0.0d0

          !if (nydiv.gt.1) ydiv=t_magnets(imag)%ydivs(1)+gcen(2)-gcenv(2)

          do iy=1,nydiv-1

            ydiv=t_magnets(imag)%ydivs(iy)+gcen(2) !Labor
            ydiv=ydiv-gcenv(2) ! relative to gcenv

            ymin=1.0d30
            ymax=-1.0d30
            do iplan=1,nplanmax
              do icorn=1,ncorn1(iplan)
                npoi=npoi+1
                y=corn1(2,icorn,iplan)+y02(1)
                if (y.lt.ymin) ymin=y
                if (y.gt.ymax) ymax=y
              enddo
            enddo

            klast=0

            if (ydiv-ymin.le.cuttiny.or.ymax-ydiv.le.cuttiny) then

              klast=iy-1
              goto 123

            else !if (ymin.ge.ydiv.or.ymax.le.ydiv)

              x02(1)=x02(2) ! relative to tvox%gcen
              y02(1)=y02(2)
              z02(1)=z02(2)

              call undumag_cut_magnet(imag,x02,y02,z02,
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,2,ydiv,hulltiny,ifail)

              if (idebug.ne.0) then
                call util_break
              endif

              if (ifail.ne.0) then
                write(lun6,*)"*** Error in clcmag_ycuts: Bad return from undumag_cut_magnet, magnet, ifail, mag, ixdiv, iydiv, ydiv:",
     &            trim(t_magnets(imag)%cnam),ifail,imag,ix,iy,ydiv
                stop
              endif

            endif !(ymin.ge.ydiv.or.ymax.le.ydiv)

            if (ncorn2(1).eq.0) then

              t_magnets(imag)%t_xycuts(ix,iy)=
     &          t_magnets(imag)%t_xcuts(ix)
              t_magnets(imag)%t_xycuts(ix,iy)%ixdiv=ix
              t_magnets(imag)%t_xycuts(ix,iy)%iydiv=iy
              cycle
c              write(lun6,*) '*** Error in clcmag_ycut: No y-Cut for magnet, ixdiv, iydiv: ',
c     &          t_magnets(imag)%cnam,ix,iy
c              stop

            else !if (ncorn2(1).eq.0) then

              ! Lower piece

              t_magnets(imag)%t_xcuts(ix)%mydiv=
     &          t_magnets(imag)%t_xcuts(ix)%mydiv+1

              npoi=0
              do iplan=1,nplanmax
                do icorn=1,ncorn1(iplan)
                  npoi=npoi+1
                  xh(npoi)=corn1(1,icorn,iplan)
                  yh(npoi)=corn1(2,icorn,iplan)
                  zh(npoi)=corn1(3,icorn,iplan)
                enddo
              enddo

              call util_convex_hull_3d_overwrite(npoi,
     &          xh,yh,zh,khull,kedge,kface,nhull,nedge,nface,kfacelast,
     &          hulltiny,ifailhull)

              allocate(t_magnets(imag)%t_xycuts(ix,iy)%xhull(nhull))
              allocate(t_magnets(imag)%t_xycuts(ix,iy)%yhull(nhull))
              allocate(t_magnets(imag)%t_xycuts(ix,iy)%zhull(nhull))

              t_magnets(imag)%t_xycuts(ix,iy)%xyz=gcenv+[x02(1),y02(1),z02(1)]
              ! t_magnets(imag)%t_xycuts(ix,iy)%gcen is in cutting plane, here
              t_magnets(imag)%t_xycuts(ix,iy)%gcen=gcenv+[x02(1),y02(1),z02(1)]
              t_magnets(imag)%t_xycuts(ix,iy)%nhull=nhull
              t_magnets(imag)%t_xycuts(ix,iy)%khull=khull
              t_magnets(imag)%t_xycuts(ix,iy)%nface=nface
              t_magnets(imag)%t_xycuts(ix,iy)%kface=kface
              t_magnets(imag)%t_xycuts(ix,iy)%kfacelast=kfacelast
              t_magnets(imag)%t_xycuts(ix,iy)%nedge=nedge
              t_magnets(imag)%t_xycuts(ix,iy)%kedge=kedge

              xmin=1.0d30
              xmax=-1.0d30
              ymin=1.0d30
              ymax=-1.0d30
              zmin=1.0d30
              zmax=-1.0d30

              do i=1,nhull
                t_magnets(imag)%t_xycuts(ix,iy)%xhull(i)=xh(i)
                t_magnets(imag)%t_xycuts(ix,iy)%yhull(i)=yh(i)
                t_magnets(imag)%t_xycuts(ix,iy)%zhull(i)=zh(i)
                if (xh(i).lt.xmin) xmin=xh(i)
                if (xh(i).gt.xmax) xmax=xh(i)
                if (yh(i).lt.ymin) ymin=yh(i)
                if (yh(i).gt.ymax) ymax=yh(i)
                if (zh(i).lt.zmin) zmin=zh(i)
                if (zh(i).gt.zmax) zmax=zh(i)
              enddo

              t_magnets(imag)%t_xycuts(ix,iy)%xmin=xmin
              t_magnets(imag)%t_xycuts(ix,iy)%xmax=xmax
              t_magnets(imag)%t_xycuts(ix,iy)%ymin=ymin
              t_magnets(imag)%t_xycuts(ix,iy)%ymax=ymax
              t_magnets(imag)%t_xycuts(ix,iy)%zmin=zmin
              t_magnets(imag)%t_xycuts(ix,iy)%zmax=zmax

              t_magnets(imag)%t_xycuts(ix,iy)%size=[xmax-xmin,ymax-ymin,zmax-zmin]
              t_magnets(imag)%t_xycuts(ix,iy)%ixdiv=ix
              t_magnets(imag)%t_xycuts(ix,iy)%iydiv=iy

              !corn2 is upper piece

              ncorn1=ncorn2
              corn1=corn2
              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

            endif !(ncorn2(1).eq.0)

123         continue

            if (iy.eq.nydiv-1.or.klast.ne.0) then

              ky=iy+1
              if (klast.ne.0) then
                ky=klast+1
              endif

              npoi=0

              do iplan=1,nplanmax
                do icorn=1,ncorn1(iplan)
                  npoi=npoi+1
                  xh(npoi)=corn1(1,icorn,iplan)
                  yh(npoi)=corn1(2,icorn,iplan)
                  zh(npoi)=corn1(3,icorn,iplan)
                enddo
              enddo

              call util_convex_hull_3d_overwrite(npoi,
     &          xh,yh,zh,khull,kedge,kface,nhull,nedge,nface,kfacelast,
     &          hulltiny,ifailhull)

              allocate(t_magnets(imag)%t_xycuts(ix,ky)%khull(nhull))
              allocate(t_magnets(imag)%t_xycuts(ix,ky)%xhull(nhull))
              allocate(t_magnets(imag)%t_xycuts(ix,ky)%yhull(nhull))
              allocate(t_magnets(imag)%t_xycuts(ix,ky)%zhull(nhull))
              allocate(t_magnets(imag)%t_xycuts(ix,ky)%kedge(4,nedge))
              allocate(t_magnets(imag)%t_xycuts(ix,ky)%kface(kfacelast))

              t_magnets(imag)%t_xycuts(ix,ky)%xyz=gcenv+[x02(1),y02(1),z02(1)]
              t_magnets(imag)%t_xycuts(ix,ky)%gcen=gcenv+[x02(1),y02(1),z02(1)]
              t_magnets(imag)%t_xycuts(ix,ky)%nhull=nhull
              t_magnets(imag)%t_xycuts(ix,ky)%khull=khull
              t_magnets(imag)%t_xycuts(ix,ky)%nface=nface
              t_magnets(imag)%t_xycuts(ix,ky)%kface=kface
              t_magnets(imag)%t_xycuts(ix,ky)%kfacelast=kfacelast
              t_magnets(imag)%t_xycuts(ix,ky)%nedge=nedge
              t_magnets(imag)%t_xycuts(ix,ky)%kedge=kedge

              xmin=1.0d30
              xmax=-1.0d30
              ymin=1.0d30
              ymax=-1.0d30
              zmin=1.0d30
              zmax=-1.0d30

              do i=1,nhull
                t_magnets(imag)%t_xycuts(ix,ky)%xhull(i)=xh(i)
                t_magnets(imag)%t_xycuts(ix,ky)%yhull(i)=yh(i)
                t_magnets(imag)%t_xycuts(ix,ky)%zhull(i)=zh(i)
                if (xh(i).lt.xmin) xmin=xh(i)
                if (xh(i).gt.xmax) xmax=xh(i)
                if (yh(i).lt.ymin) ymin=yh(i)
                if (yh(i).gt.ymax) ymax=yh(i)
                if (zh(i).lt.zmin) zmin=zh(i)
                if (zh(i).gt.zmax) zmax=zh(i)
              enddo

              t_magnets(imag)%t_xycuts(ix,ky)%xmin=xmin
              t_magnets(imag)%t_xycuts(ix,ky)%xmax=xmax
              t_magnets(imag)%t_xycuts(ix,ky)%ymin=ymin
              t_magnets(imag)%t_xycuts(ix,ky)%ymax=ymax
              t_magnets(imag)%t_xycuts(ix,ky)%zmin=zmin
              t_magnets(imag)%t_xycuts(ix,ky)%zmax=zmax

              t_magnets(imag)%t_xycuts(ix,ky)%size=[xmax-xmin,ymax-ymin,zmax-zmin]
              t_magnets(imag)%t_xycuts(ix,ky)%ixdiv=ix
              t_magnets(imag)%t_xycuts(ix,ky)%iydiv=ky

              t_magnets(imag)%t_xcuts(ix)%mydiv=
     &          t_magnets(imag)%t_xcuts(ix)%mydiv+1

              exit

            endif !(iy.eq.nydiv-1.or.klast.ne.0)

          enddo !iy=1,nydiv-1

        endif !nydiv.eq.1

        yvolmag=0.0d0

        do iy=1,nydiv

          nhull=t_magnets(imag)%t_xycuts(ix,iy)%nhull

          if (nhull.gt.0) then
            tvox=t_magnets(imag)%t_xycuts(ix,iy)
            call util_volume(nhull,tvox%xhull,tvox%yhull,tvox%zhull,hulltiny,
     &        vol,ifail)
            if (ifail.ne.0) then
              write(lun6,*)"*** Error in clcmag_ycut: Bad return from util_volume, magnet, magnet number, ix,iy:",
     &          trim(tmag%cnam),imag,ix,iy
              stop
            endif
            t_magnets(imag)%t_xycuts(ix,iy)%volume=vol
            yvolmag=yvolmag+vol
          else
            t_magnets(imag)%t_xycuts(ix,iy)%volume=0.0d0
          endif

        enddo

        vol=(yvolmag-t_magnets(imag)%t_xcuts(ix)%volume)/
     &    t_magnets(imag)%t_xcuts(ix)%volume

        if (abs(vol).gt.1.0d-9) then
          write(lun6,*)"*** Warning in clcmag_ycut: Sum of xy-cut volumes differs from magnet volume by (rel.):",vol
          write(lun6,*)"*** magnet, ixdiv:",trim(tmag%cnam),ix
        endif

      enddo !nxdiv

      if (nydiv.gt.1) then
        deallocate(corn1,corn2,xh,yh,zh,xhc,yhc,zhc,kedge,kface)
      endif

+self,if=debycut.
      open(unit=771,file="fort.771")
      do ix=1,nxdiv
        do iy=1,nydiv
          tvox = t_magnets(imag)%t_xycuts(ix,iy)
          if (tvox%ixdiv*tvox%iydiv.eq.0) cycle
          do i=1,tvox%nhull
            write(771,*)
     &        ix,iy,tvox%xhull(i),
     &        tvox%yhull(i),
     &        tvox%zhull(i),
     &        tvox%xhull(i)+tvox%gcen(1),
     &        tvox%yhull(i)+tvox%gcen(2),
     &        tvox%zhull(i)+tvox%gcen(3),
     &        tvox%xhull(i)+tmag%gcen(1),
     &        tvox%yhull(i)+tmag%gcen(2),
     &        tvox%zhull(i)+tmag%gcen(3)
          enddo
        enddo
      enddo
      flush(771)
      close(771)
+self.

      !call util_break

      yvolmag=0.0d0
      do ix=1,nxdiv
        do iy=1,nydiv
          yvolmag=yvolmag+t_magnets(imag)%t_xycuts(ix,iy)%volume
        enddo
      enddo
      vol=(yvolmag-t_magnets(imag)%volume)/t_magnets(imag)%volume

      if (abs(vol).gt.1.0d-9) then
        write(lun6,*)"*** Warning in clcmag_ycut: Sum of xy-cut volumes differs from magnet volume by (rel.): ",vol
        write(lun6,*)"*** magnet :",trim(tmag%cnam),imag
      endif

c      if (imag.eq.2) then
c        do ix=1,nxdiv
c          print*,t_magnets(imag)%t_xycuts(ix,1)%kface(1:t_magnets(imag)%t_xycuts(ix,1)%kfacelast)
c        enddo
c        stop
c      endif
+self,if=trace.
      print*,"-trace-: Leaving clcmag_ycut"
+self.

      return
      end
+DECK,CLCMAG_XCUT.
*CMZ :  2.04/14 05/09/2023  13.54.14  by  Michael Scheer
*CMZ :  2.04/03 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  12.14.18  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  13.19.45  by  Michael Scheer
*CMZ :  2.04/00 16/01/2023  15.35.00  by  Michael Scheer
*CMZ :  2.03/00 31/07/2022  18.19.49  by  Michael Scheer
*CMZ :  2.02/02 15/02/2022  15.33.18  by  Michael Scheer
*CMZ :  2.02/01 19/01/2022  12.18.14  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2021
      subroutine clcmag_xcut(imag)

      use undumagf90m
      use commandlinef90m
      use magnets_structure

      implicit none

      Type(t_voxel) tvox

      character(128) ctype

      double precision, dimension (:,:,:), allocatable :: corn1,corn2
      double precision, dimension (:), allocatable :: xh,yh,zh,xhc,yhc,zhc

      double precision x,y,z,
     &  x02(2),y02(2),z02(2),xdivmin,xdivmax,ydivmin,ydivmax,zdivmin,zdivmax,
     &  xdiv,dxdiv,gcen(3),xyz(3),xmin,xmax,ymin,ymax,zmin,zmax,dydiv,ydiv,
     &  zdiv,dzdiv,vol,xvolmag

      integer, dimension (:), allocatable :: ncorn1,ncorn2

      integer i,j,k,l,n,imag,ip,npoi,iplan,icorn,nxdiv,nydiv,nzdiv,ix,kx

      integer :: idebug=0,
     &  ifailhull,ifail,nhull,nedge,nface,kfacelast

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface

      type(T_Magnet) :: tmag

      if (idebug.gt.0) call util_break

+self,if=trace.
      print*,"-trace-: Entered clcmag_xcut"
+self.

      xmin=1.0d30
      xmax=-1.0d30
      ymin=1.0d30
      ymax=-1.0d30
      zmin=1.0d30
      zmax=-1.0d30

      do k=1,t_magnets(imag)%nhull
        if (t_magnets(imag)%xhull(k).lt.xmin) xmin=t_magnets(imag)%xhull(k)
        if (t_magnets(imag)%xhull(k).gt.xmax) xmax=t_magnets(imag)%xhull(k)
        if (t_magnets(imag)%yhull(k).lt.ymin) ymin=t_magnets(imag)%yhull(k)
        if (t_magnets(imag)%yhull(k).gt.ymax) ymax=t_magnets(imag)%yhull(k)
        if (t_magnets(imag)%zhull(k).lt.zmin) zmin=t_magnets(imag)%zhull(k)
        if (t_magnets(imag)%zhull(k).gt.zmax) zmax=t_magnets(imag)%zhull(k)
      enddo

      t_magnets(imag)%xmin=xmin
      t_magnets(imag)%xmax=xmax
      t_magnets(imag)%ymin=ymin
      t_magnets(imag)%ymax=ymax
      t_magnets(imag)%zmin=zmin
      t_magnets(imag)%zmax=zmax

      t_magnets(imag)%size(1)=xmax-xmin
      t_magnets(imag)%size(2)=ymax-ymin
      t_magnets(imag)%size(3)=zmax-zmin

      allocate(corn1(3,2*ncornmax,2*nplanmax),corn2(3,2*ncornmax,2*nplanmax))
      allocate(ncorn1(2*nplanmax),ncorn2(2*nplanmax))

      allocate(
     &  xh(2*ncornmax*nplanmax),yh(2*ncornmax*nplanmax),zh(2*ncornmax*nplanmax),
     &  xhc(2*ncornmax*nplanmax),yhc(2*ncornmax*nplanmax),zhc(2*ncornmax*nplanmax))

      allocate(khull(2*ncornmax*nplanmax),kedge(4,2*ncornmax*nplanmax-2),
     &  kface(5*ncornmax*nplanmax))

      t_magnets(imag)%mxdiv=0

      if (t_magnets(imag)%nxdiv.gt.0) then
        t_magnets(imag)%dxdiv=(t_magnets(imag)%xmax-t_magnets(imag)%xmin)/
     &    t_magnets(imag)%nxdiv
c        t_magnets(imag)%dxdiv=t_magnets(imag)%size(1)/t_magnets(imag)%nxdiv
      endif

      tmag=t_magnets(imag)

      gcen=tmag%gcen
+self,if=debxcut.
      do i=1,tmag%nhull
        write(99,*)i,
     &    tmag%xhull(i),
     &    tmag%yhull(i),
     &    tmag%zhull(i)
        write(98,*)i,
     &    tmag%xhull(i)+gcen(1),
     &    tmag%yhull(i)+gcen(2),
     &    tmag%zhull(i)+gcen(3)
        write(97,*)i,
     &    tmag%xhull(i)-gcen(1),
     &    tmag%yhull(i)-gcen(2),
     &    tmag%zhull(i)-gcen(3)
      enddo
+self.

      !call util_break

      xyz=tmag%xyz

      nxdiv=tmag%nxdiv
      nydiv=tmag%nydiv
      nzdiv=tmag%nzdiv

      xdivmin=tmag%xmin
      xdivmax=tmag%xmax
      dxdiv=tmag%dxdiv
      xdiv=xdivmin

      ydivmin=tmag%ymin
      ydivmax=tmag%ymax
      dydiv=tmag%dydiv

      ydiv=ydivmin

      zdivmin=tmag%zmin
      zdivmax=tmag%zmax
      dzdiv=tmag%dzdiv

      zdiv=zdivmin

      ctype=tmag%ctype

      if (nxdiv.eq.1) then

        nhull=tmag%nhull
        khull=tmag%khull
        nedge=tmag%nedge
        nface=tmag%nface
        kedge=tmag%kedge
        kface=tmag%kface
        kfacelast=tmag%kfacelast

        allocate(t_magnets(imag)%t_xcuts(1)%xhull(nhull))
        allocate(t_magnets(imag)%t_xcuts(1)%yhull(nhull))
        allocate(t_magnets(imag)%t_xcuts(1)%zhull(nhull))
        allocate(t_magnets(imag)%t_xcuts(1)%khull(nhull))
        allocate(t_magnets(imag)%t_xcuts(1)%kedge(4,nedge))
        allocate(t_magnets(imag)%t_xcuts(1)%kface(kfacelast))

        t_magnets(imag)%t_xcuts(1)%nhull=nhull
        t_magnets(imag)%t_xcuts(1)%khull=khull
        t_magnets(imag)%t_xcuts(1)%nedge=nedge
        t_magnets(imag)%t_xcuts(1)%kedge=kedge
        t_magnets(imag)%t_xcuts(1)%nface=nface
        t_magnets(imag)%t_xcuts(1)%kface=kface
        t_magnets(imag)%t_xcuts(1)%kfacelast=kfacelast

        t_magnets(imag)%t_xcuts(1)%size=tmag%size
        t_magnets(imag)%t_xcuts(1)%xmin=tmag%xmin
        t_magnets(imag)%t_xcuts(1)%xmax=tmag%xmax
        t_magnets(imag)%t_xcuts(1)%ymin=tmag%ymin
        t_magnets(imag)%t_xcuts(1)%ymax=tmag%ymax
        t_magnets(imag)%t_xcuts(1)%zmin=tmag%zmin
        t_magnets(imag)%t_xcuts(1)%zmax=tmag%zmax

        t_magnets(imag)%t_xcuts(1)%xyz=gcen
        t_magnets(imag)%t_xcuts(1)%gcen=gcen
        t_magnets(imag)%t_xcuts(1)%ixdiv=1
        t_magnets(imag)%t_xcuts(1)%volume=t_magnets(imag)%volume

        do i=1,nhull
          t_magnets(imag)%t_xcuts(1)%xhull(i)=tmag%xhull(i)
          t_magnets(imag)%t_xcuts(1)%yhull(i)=tmag%yhull(i)
          t_magnets(imag)%t_xcuts(1)%zhull(i)=tmag%zhull(i)
        enddo

      else !nxdiv.eq.1

        l=0
        ncorn1=0
        ncorn2=0

        xmin=1.0d30
        xmax=-1.0d30

        do i=1,tmag%nface

          l=l+1

          n=tmag%kface(l)
          ncorn1(i)=n

          do j=1,n
            l=l+1
            ip=tmag%kface(l)
            x=tmag%xhull(ip)
            y=tmag%yhull(ip)
            z=tmag%zhull(ip)
            corn1(1,j,i)=x
            corn1(2,j,i)=y
            corn1(3,j,i)=z
            if (x.lt.xmin) xmin=x
            if (x.gt.xmax) xmax=x
          enddo !npoi

          ncorn1(i)=ncorn1(i)+1
          corn1(:,n+1,i)=corn1(:,1,i) ! for undumag_cut_magnet,
          ! the plane must be closed

        enddo !nface

        x02(2)=0.0d0
        y02(2)=0.0d0
        z02(2)=0.0d0

        do ix=1,nxdiv-1

          xdiv=xdiv+dxdiv

          x02(1)=x02(2)
          y02(1)=y02(2)
          z02(1)=z02(2)

          call undumag_cut_magnet(imag,x02,y02,z02,
     &      2*nplanmax,2*ncornmax,
     &      ncorn1,corn1,ncorn2,corn2
     &      ,1,xdiv,hulltiny,ifail)

          if (ifail.ne.0) then
            write(lun6,*)"*** Error in clcmag_xcut: Bad return from undumag_cut_magnet, magnet, ifail, mag, ixdiv, xdiv:",
     &        trim(tmag%cnam),ifail,imag,ix,xdiv
            stop
          endif

          if (ncorn2(1).eq.0) then
            write(lun6,*) '*** Error in clcmag_xcut: No x-Cut for magnet ',tmag%cnam
            stop
          else

            xmin=1.0d30
            xmax=-1.0d30

            npoi=0
            do iplan=1,nplanmax
              do icorn=1,ncorn1(iplan)
                npoi=npoi+1
                xh(npoi)=corn1(1,icorn,iplan)
                yh(npoi)=corn1(2,icorn,iplan)
                zh(npoi)=corn1(3,icorn,iplan)
                x=xh(npoi)
                if (x.lt.xmin) xmin=x
                if (x.gt.xmax) xmax=x
              enddo
            enddo

            !print*,"nachher,xmin,xmax:)",xmin+x02(1),xmax+x02(1)
            !print*,x02
            !stop

            call util_convex_hull_3d_overwrite(npoi,
     &        xh,yh,zh,khull,kedge,kface,nhull,nedge,nface,kfacelast,
     &        hulltiny,ifailhull)

            allocate(t_magnets(imag)%t_xcuts(ix)%xhull(nhull))
            allocate(t_magnets(imag)%t_xcuts(ix)%yhull(nhull))
            allocate(t_magnets(imag)%t_xcuts(ix)%zhull(nhull))

            t_magnets(imag)%mxdiv=t_magnets(imag)%mxdiv+1

            t_magnets(imag)%t_xcuts(ix)%xyz=gcen+[x02(1),y02(1),z02(1)]
            t_magnets(imag)%t_xcuts(ix)%gcen=gcen+[x02(1),y02(1),z02(1)]
            t_magnets(imag)%t_xcuts(ix)%nhull=nhull
            t_magnets(imag)%t_xcuts(ix)%khull=khull
            t_magnets(imag)%t_xcuts(ix)%nface=nface
            t_magnets(imag)%t_xcuts(ix)%kface=kface
            t_magnets(imag)%t_xcuts(ix)%kfacelast=kfacelast
            t_magnets(imag)%t_xcuts(ix)%nedge=nedge
            t_magnets(imag)%t_xcuts(ix)%kedge=kedge
            t_magnets(imag)%t_xcuts(ix)%ixdiv=ix

            xmin=1.0d30
            xmax=-1.0d30
            ymin=1.0d30
            ymax=-1.0d30
            zmin=1.0d30
            zmax=-1.0d30

            do i=1,nhull
              t_magnets(imag)%t_xcuts(ix)%xhull(i)=xh(i)
              t_magnets(imag)%t_xcuts(ix)%yhull(i)=yh(i)
              t_magnets(imag)%t_xcuts(ix)%zhull(i)=zh(i)
              if (xh(i).lt.xmin) xmin=xh(i)
              if (xh(i).gt.xmax) xmax=xh(i)
              if (yh(i).lt.ymin) ymin=yh(i)
              if (yh(i).gt.ymax) ymax=yh(i)
              if (zh(i).lt.zmin) zmin=zh(i)
              if (zh(i).gt.zmax) zmax=zh(i)
            enddo

            t_magnets(imag)%t_xcuts(ix)%xmin=xmin
            t_magnets(imag)%t_xcuts(ix)%xmax=xmax
            t_magnets(imag)%t_xcuts(ix)%ymin=ymin
            t_magnets(imag)%t_xcuts(ix)%ymax=ymax
            t_magnets(imag)%t_xcuts(ix)%zmin=zmin
            t_magnets(imag)%t_xcuts(ix)%zmax=zmax

            t_magnets(imag)%t_xcuts(ix)%size=[xmax-xmin,ymax-ymin,zmax-zmin]

            ncorn1=ncorn2
            corn1=corn2
            x02(1)=x02(2)
            y02(1)=y02(2)
            z02(1)=z02(2)

            if (ix.eq.nxdiv-1) then
              kx=ix+1
              npoi=0
              do iplan=1,nplanmax
                do icorn=1,ncorn1(iplan)
                  npoi=npoi+1
                  xh(npoi)=corn1(1,icorn,iplan)
                  yh(npoi)=corn1(2,icorn,iplan)
                  zh(npoi)=corn1(3,icorn,iplan)
                enddo
              enddo

              call util_convex_hull_3d_overwrite(npoi,
     &          xh,yh,zh,khull,kedge,kface,nhull,nedge,nface,kfacelast,
     &          hulltiny,ifailhull)

              allocate(t_magnets(imag)%t_xcuts(kx)%xhull(nhull))
              allocate(t_magnets(imag)%t_xcuts(kx)%yhull(nhull))
              allocate(t_magnets(imag)%t_xcuts(kx)%zhull(nhull))
              allocate(t_magnets(imag)%t_xcuts(kx)%khull(nhull))
              allocate(t_magnets(imag)%t_xcuts(kx)%kedge(4,nedge))
              allocate(t_magnets(imag)%t_xcuts(kx)%kface(kfacelast))

              t_magnets(imag)%t_xcuts(kx)%xyz=gcen+[x02(1),y02(1),z02(1)]
              t_magnets(imag)%t_xcuts(kx)%gcen=gcen+[x02(1),y02(1),z02(1)]
              t_magnets(imag)%t_xcuts(kx)%nhull=nhull
              t_magnets(imag)%t_xcuts(kx)%khull=khull
              t_magnets(imag)%t_xcuts(kx)%nface=nface
              t_magnets(imag)%t_xcuts(kx)%kface=kface
              t_magnets(imag)%t_xcuts(kx)%kfacelast=kfacelast
              t_magnets(imag)%t_xcuts(kx)%nedge=nedge
              t_magnets(imag)%t_xcuts(kx)%kedge=kedge
              t_magnets(imag)%t_xcuts(kx)%ixdiv=kx

              xmin=1.0d30
              xmax=-1.0d30
              ymin=1.0d30
              ymax=-1.0d30
              zmin=1.0d30
              zmax=-1.0d30

              do i=1,nhull
                t_magnets(imag)%t_xcuts(kx)%xhull(i)=xh(i)
                t_magnets(imag)%t_xcuts(kx)%yhull(i)=yh(i)
                t_magnets(imag)%t_xcuts(kx)%zhull(i)=zh(i)
                if (xh(i).lt.xmin) xmin=xh(i)
                if (xh(i).gt.xmax) xmax=xh(i)
                if (yh(i).lt.ymin) ymin=yh(i)
                if (yh(i).gt.ymax) ymax=yh(i)
                if (zh(i).lt.zmin) zmin=zh(i)
                if (zh(i).gt.zmax) zmax=zh(i)
              enddo

              t_magnets(imag)%t_xcuts(kx)%size=[xmax-xmin,ymax-ymin,zmax-zmin]

              t_magnets(imag)%t_xcuts(kx)%xmin=xmin
              t_magnets(imag)%t_xcuts(kx)%xmax=xmax
              t_magnets(imag)%t_xcuts(kx)%ymin=ymin
              t_magnets(imag)%t_xcuts(kx)%ymax=ymax
              t_magnets(imag)%t_xcuts(kx)%zmin=zmin
              t_magnets(imag)%t_xcuts(kx)%zmax=zmax
              t_magnets(imag)%mxdiv=t_magnets(imag)%mxdiv+1

            endif !last cut

          endif !ncorn2, cut

        enddo !nxdiv -1

      endif !nxdiv.dq.1

+self,if=debxcut.
      do ix=1,nxdiv
        gcenv=t_magnets(imag)%t_xcuts(ix)%gcen
        do i=1,t_magnets(imag)%t_xcuts(ix)%nhull
          write(661,*) ix,
     &      t_magnets(imag)%t_xcuts(ix)%xhull(i),
     &      t_magnets(imag)%t_xcuts(ix)%yhull(i),
     &      t_magnets(imag)%t_xcuts(ix)%zhull(i),
     &      t_magnets(imag)%t_xcuts(ix)%xhull(i)+gcenv(1),
     &      t_magnets(imag)%t_xcuts(ix)%yhull(i)+gcenv(2),
     &      t_magnets(imag)%t_xcuts(ix)%zhull(i)+gcenv(3)
        enddo
      enddo
      !stop
+self.
      deallocate(corn1,corn2)

      xvolmag=0.0d0
      t_magnets(imag)%xvolume=0.0d0
      do ix=1,nxdiv
        nhull=t_magnets(imag)%t_xcuts(ix)%nhull
        if (nhull.gt.0) then
          tvox=t_magnets(imag)%t_xcuts(ix)
          call util_volume(nhull,tvox%xhull,tvox%yhull,tvox%zhull,hulltiny,
     &      vol,ifail)
          if (ifail.ne.0) then
            write(lun6,*)"*** Error in clcmag_xcut: Bad return from util_volume, magnet, magnet number, ixdiv: ",
     &        trim(tmag%cnam),imag,ix
            stop
          endif
          t_magnets(imag)%t_xcuts(ix)%volume=vol
        else
          t_magnets(imag)%t_xcuts(ix)%volume=0.0d0
        endif
        xvolmag=xvolmag+vol
      enddo

      vol=(xvolmag-t_magnets(imag)%volume)/t_magnets(imag)%volume

      if (abs(vol).gt.1.0d-9) then
        write(lun6,*)"*** Warning in clcmag_xcut: Sum of x-cut volumes differs from magnet volume by (rel.):",vol
        write(lun6,*)"Magnet: ",t_magnets(imag)%cnam
      endif

+self,if=trace.
      print*,"-trace-: Leaving clcmag_xcut"
+self.

      !call util_break

c      if (imag.eq.2) then
c        do ix=1,nxdiv
c          print*,t_magnets(imag)%t_xcuts(ix)%kface(1:t_magnets(imag)%t_xcuts(ix)%kfacelast)
c        enddo
c        stop
c      endif

      return
      end
+DECK,clcmag_voxels.
*CMZ :  2.04/14 04/09/2023  16.36.15  by  Michael Scheer
*CMZ :  2.04/13 04/09/2023  11.19.16  by  Michael Scheer
*CMZ :  2.04/09 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  12.58.25  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  12.43.30  by  Michael Scheer
*CMZ :  2.04/06 04/08/2023  11.32.02  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  19.30.13  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.28.35  by  Michael Scheer
*CMZ :  2.04/00 09/12/2022  11.08.58  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  10.13.35  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021
      subroutine clcmag_voxels

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

c      Type(T_Magnet) tmag
      Type(T_Voxel) tv

      double precision br(3),volmag,gcen(3),p(3,3),wnorm(3),wcen(3)
      integer imag,ix,iy,iz,nx,ny,nz,nvox,k1,k,luno,npoi,l,ipoi,iface,nf,ison,icol
      integer :: idebug=0
      integer :: iwwork,iwfct=0,iwgeo=0,iwvgeo=0,iwmag=0

c+self,if=voxcyl.
      integer iv
c+self.
      character(32) ctype

+self,if=trace.
      print*,"-trace-: Entered clcmag_voxels"
+self.

      iwwork=abs(iundugeo)
      if(iwwork/1000.gt.0) then
        iwfct=1
        iwwork=iwwork-1000
      endif
      if(iwwork/100.gt.0) then
        iwvgeo=1
        iwwork=iwwork-100
      endif
      if(iwwork/10.gt.0) then
        iwgeo=1
        iwwork=iwwork-10
      endif
      if(iwwork.gt.0) then
        iwmag=1
      endif

      call util_zeit_kommentar(lun6,"Entered clcmag_voxels")

      if (iwvgeo.ne.0) then
        open(newunit=luno,file='undumag_voxels.geo')
      endif

      nfacets=0

      do imag=1,nmag_t+nspecmag_t

        ctype=t_magnets(imag)%ctype

        volmag=0.0d0

        if (ctype.ne.'Cylinder') then
          allocate(t_magnets(imag)%t_voxels(t_magnets(imag)%nvoxels))
c+self,if=-voxcyl.
c        endif
c+self.

          nvox=0
          if (idebug.eq.1) then
            print*,"imag, ix, iy, iz, ixdiv, iydiv, izdiv, kvox, volume"
          else if (idebug.ge.2) then
            print*,"imag, nvoxels:",imag,t_magnets(imag)%nvoxels
          endif
          do iz=1,t_magnets(imag)%nzdiv
            do iy=1,t_magnets(imag)%nydiv
              do ix=1,t_magnets(imag)%nxdiv
                if (idebug.eq.1) then
                  print*,imag,ix,iy,iz,
     &              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%ixdiv,
     &              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%iydiv,
     &              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%izdiv,
     &              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%ixdiv,
     &              t_magnets(imag)%kvoxels(ix,iy,iz),
     &              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume
                endif
                if (t_magnets(imag)%t_xyzcuts(ix,iy,iz)%ixdiv.eq.0.or.
     &            t_magnets(imag)%t_xyzcuts(ix,iy,iz)%iydiv.eq.0.or.
     &              t_magnets(imag)%t_xyzcuts(ix,iy,iz)%izdiv.eq.0) then
                  if (t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume.ne.0d0) then
                    print*,imag,ix,iy,iz
                    stop "Error 1 in clcmag_voxels"
                  endif
                  cycle
                endif
                kvox=t_magnets(imag)%kvoxels(ix,iy,iz)
                if (kvox.eq.0) then
                  if (t_magnets(imag)%t_xyzcuts(ix,iy,iz)%volume.ne.0d0) then
                    print*,imag,ix,iy,iz
                    stop "Error 2 in clcmag_voxels"
                  endif
                  cycle
                endif
                nvox=nvox+1
                icol=t_magnets(imag)%icol
                t_magnets(imag)%t_voxels(nvox)=
     &            t_magnets(imag)%t_xyzcuts(ix,iy,iz)
                t_magnets(imag)%t_voxels(nvox)%ixdiv=ix
                t_magnets(imag)%t_voxels(nvox)%iydiv=iy
                t_magnets(imag)%t_voxels(nvox)%izdiv=iz
                t_magnets(imag)%t_voxels(nvox)%isBlock=
     &            t_magnets(imag)%isBlock
+self,if=-novol.
                call clcmag_voxel_volume(imag,nvox)
+self.
                l=0
                nfacets=nfacets+t_magnets(imag)%t_voxels(nvox)%nface
                if (iwvgeo.ne.0) then
                  do iface=1,t_magnets(imag)%t_voxels(nvox)%nface
                    l=l+1
                    npoi=t_magnets(imag)%t_voxels(nvox)%kface(l)
                    gcen=t_magnets(imag)%t_voxels(nvox)%gcen
                    do ipoi=1,npoi
                      l=l+1
                      k=t_magnets(imag)%t_voxels(nvox)%kface(l)
                      write(luno,*)imag,nvox,ix,iy,iz,iface,ipoi,
     &                  t_magnets(imag)%t_voxels(nvox)%xhull(k)+gcen(1),
     &                  t_magnets(imag)%t_voxels(nvox)%yhull(k)+gcen(2),
     &                  t_magnets(imag)%t_voxels(nvox)%zhull(k)+gcen(3),
     &                  gcen,
     &                  t_magnets(imag)%t_voxels(nvox)%volume,icol
                    enddo
                  enddo
                endif
                volmag=volmag+t_magnets(imag)%t_voxels(nvox)%volume
                if (t_magnets(imag)%IsInhom.ne.0) then
                  call clcmag_br_inhom(imag,nvox,br)
                  t_magnets(imag)%t_voxels(nvox)%Br=br
                else
                  t_magnets(imag)%t_voxels(nvox)%Br=t_magnets(imag)%Br
                endif
                t_magnets(imag)%t_voxels(nvox)%IsPole=t_magnets(imag)%IsPole
              enddo
            enddo
          enddo

          t_magnets(imag)%nvoxels=nvox

          deallocate(t_magnets(imag)%t_xcuts,t_magnets(imag)%t_xycuts,
     &      t_magnets(imag)%t_xyzcuts)

c+self,if=voxcyl.
        else !(ctype.ne.'Cylinder') then

          nvox=
     &      t_magnets(imag)%nxdiv *
     &      t_magnets(imag)%nydiv *
     &      t_magnets(imag)%nzdiv

          do iv=1,nvox

            call clcmag_voxel_volume(imag,iv)
            volmag=volmag+t_magnets(imag)%t_voxels(iv)%volume
            if (t_magnets(imag)%IsInhom.ne.0) then
              call clcmag_br_inhom(imag,iv,br)
              t_magnets(imag)%t_voxels(iv)%Br=br
            else
              t_magnets(imag)%t_voxels(iv)%Br=t_magnets(imag)%Br
            endif
            t_magnets(imag)%t_voxels(iv)%IsPole=t_magnets(imag)%IsPole

            l=0

            nfacets=nfacets+t_magnets(imag)%t_voxels(iv)%nface

            if (iwvgeo.ne.0) then
              do iface=1,t_magnets(imag)%t_voxels(iv)%nface
                l=l+1
                npoi=t_magnets(imag)%t_voxels(iv)%kface(l)
                gcen=t_magnets(imag)%t_voxels(iv)%gcen
                do ipoi=1,npoi
                  l=l+1
                  k=t_magnets(imag)%t_voxels(iv)%kface(l)
                  write(luno,*)imag,iv,ix,iy,iz,iface,ipoi,
     &              t_magnets(imag)%t_voxels(iv)%xhull(k)+gcen(1),
     &              t_magnets(imag)%t_voxels(iv)%yhull(k)+gcen(2),
     &              t_magnets(imag)%t_voxels(iv)%zhull(k)+gcen(3),
     &              gcen,
     &              t_magnets(imag)%t_voxels(iv)%volume
                enddo
              enddo
          endif

          enddo !nvox

        endif !(ctype.ne.'Cylinder') then

        t_magnets(imag)%nvoxels=nvox
        nvoxcopy_t=nvoxcopy_t+nvox

        !call clcmag_check_orient(imag)
c+self.

+self,if=-novol.
        if (abs((volmag-t_magnets(imag)%volume)/volmag).gt.1.0d-10.and.
     &      t_magnets(imag)%ctype.ne.'Cylinder') then
          write(lun6,*)'*** Warning in clcmag_voxels: Sum of volumes of voxels does not match the one of the magnet ',t_magnets(imag)%cnam
          write(lun6,*)"Rel. error :",(volmag-t_magnets(imag)%volume)/volmag
        endif
+self.
      enddo !imag

      if (iundugeo.ne.0) then
        flush(luno)
        close(luno)
      endif

      call util_zeit_kommentar(lun6,"Calculating facets")

      allocate(ifacets(5,nfacets))
      ifacets=0
      nfacets=0

      do imag=1,nmag_t+nspecmag_t

!        tmag=t_magnets(imag)

        ctype=t_magnets(imag)%ctype
        nx=t_magnets(imag)%nxdiv
        ny=t_magnets(imag)%nydiv
        nz=t_magnets(imag)%nzdiv

        do iv=1,t_magnets(imag)%nvoxels
          if (ctype.ne.'Cylinder') then
            tv=t_magnets(imag)%t_voxels(iv)
            gcen=tv%gcen
            ix=tv%ixdiv
            iy=tv%iydiv
            iz=tv%izdiv
            nf=tv%nface
            allocate(
     &        t_magnets(imag)%t_voxels(iv)%vcen(3,nf),
     &        t_magnets(imag)%t_voxels(iv)%vnorm(3,nf)
     &        )
            k=0
            do iface=1,nf
              k=k+1
              npoi=tv%kface(k)
              wcen=0.0d0
              k1=k
              do l=1,npoi
                k=k+1
                ipoi=tv%kface(k)
                if (l.le.3) then
                  p(1:3,l)=[tv%xhull(ipoi),tv%yhull(ipoi),tv%zhull(ipoi)]
                endif
                wcen=wcen+[tv%xhull(ipoi),tv%yhull(ipoi),tv%zhull(ipoi)]
              enddo
              call util_vcross(p(:,2)-p(:,1),p(:,3)-p(:,2),wnorm)
              wnorm=wnorm/norm2(wnorm)
              t_magnets(imag)%t_voxels(iv)%vnorm(:,iface)=wnorm
              wcen=wcen/dble(npoi)
              t_magnets(imag)%t_voxels(iv)%vcen(:,iface)=wcen
              if (
     &          ix.gt.1.and.ix.lt.nx.and.
     &          iy.gt.1.and.iy.lt.ny.and.
     &          iz.gt.1.and.iz.lt.nz
     &          ) cycle
              call clcmag_magnet_facet(t_magnets(imag),iv,iface,ison,
     &          hulltiny)
              if (ison.ne.1) cycle
              nfacets=nfacets+1
              ifacets(1:5,nfacets)=[imag,iv,iface,k1,npoi]
            enddo !face
          else
            print*,"*** CLCMAG_VOXELS: Cylinder not yet available for undumag.fct"
          endif !Cylinder
        enddo !iv
      enddo !imag

      call util_zeit_kommentar(lun6,"Facets calculated")
      if (iwfct.ne.0) then
        call clcmag_write_facets
        call clcmag_magnet_main_facets
      endif

+self,if=trace.
      print*,"-trace-: Leaving clcmag_voxels"
+self.
      return
      end
+DECK,undumag_ini_old.
*CMZ :  2.04/06 06/09/2023  07.42.08  by  Michael Scheer
*CMZ :  2.04/03 03/03/2023  14.44.40  by  Michael Scheer
*CMZ :  2.04/00 05/12/2022  15.18.35  by  Michael Scheer
*CMZ :  2.03/00 31/08/2022  08.10.44  by  Michael Scheer
*CMZ :  2.02/02 07/07/2022  17.49.27  by  Michael Scheer
*CMZ :  2.02/01 10/02/2022  09.16.42  by  Michael Scheer
*CMZ :  2.02/00 31/03/2021  20.30.51  by  Michael Scheer
*CMZ :  2.01/08 13/08/2020  11.27.23  by  Michael Scheer
*CMZ :  2.01/05 26/06/2020  16.04.15  by  Michael Scheer
*CMZ :  2.01/04 18/07/2019  13.56.54  by  Michael Scheer
*CMZ :  2.01/03 13/06/2019  15.03.29  by  Michael Scheer
*CMZ :  2.01/02 27/04/2018  14.56.07  by  Michael Scheer
*CMZ :  2.01/01 24/04/2018  17.15.25  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  14.30.21  by  Michael Scheer
*CMZ :  2.00/03 23/04/2018  17.47.12  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.39.07  by  Michael Scheer
*CMZ :  1.25/05 05/04/2018  19.09.03  by  Michael Scheer
*CMZ :  1.25/03 23/03/2018  16.25.38  by  Michael Scheer
*CMZ :  1.25/02 21/03/2018  13.30.12  by  Michael Scheer
*CMZ :  1.25/01 20/03/2018  15.59.20  by  Michael Scheer
*CMZ :  1.25/00 16/03/2018  12.35.49  by  Michael Scheer
*CMZ :  1.24/01 16/10/2017  19.08.03  by  Michael Scheer
*CMZ :  1.23/07 10/10/2017  13.53.24  by  Michael Scheer
*CMZ :  1.23/04 04/10/2017  11.50.12  by  Michael Scheer
*CMZ :  1.23/03 25/09/2017  18.37.06  by  Michael Scheer
*CMZ :  1.23/02 17/09/2017  11.21.15  by  Michael Scheer
*CMZ :  1.22/02 02/08/2017  16.23.00  by  Michael Scheer
*CMZ :  1.22/01 21/07/2017  14.53.35  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  08.50.03  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  11.30.39  by  Michael Scheer
*CMZ :  1.20/02 22/06/2017  15.56.28  by  Michael Scheer
*CMZ :  1.20/01 22/06/2017  12.48.09  by  Michael Scheer
*CMZ :  1.20/00 21/06/2017  13.11.48  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.31.54  by  Michael Scheer
*CMZ :  1.18/03 13/06/2017  15.30.31  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  14.09.42  by  Michael Scheer
*CMZ :  1.18/01 07/06/2017  09.19.34  by  Michael Scheer
*CMZ :  1.17/08 30/05/2017  16.04.28  by  Michael Scheer
*CMZ :  1.17/06 21/05/2017  12.55.08  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  12.22.37  by  Michael Scheer
*CMZ :  1.15/12 04/05/2017  12.23.38  by  Michael Scheer
*CMZ :  1.15/11 26/04/2017  11.23.30  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.22.06  by  Michael Scheer
*CMZ :  1.15/09 07/04/2017  14.51.07  by  Michael Scheer
*CMZ :  1.15/08 06/04/2017  14.32.29  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.29.10  by  Michael Scheer
*CMZ :  1.15/05 04/04/2017  12.46.33  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  12.15.21  by  Michael Scheer
*CMZ :  1.15/02 01/04/2017  19.50.52  by  Michael Scheer
*CMZ :  1.15/00 28/03/2017  11.26.05  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  09.16.41  by  Michael Scheer
*CMZ :  1.13/03 16/03/2017  10.00.53  by  Michael Scheer
*CMZ :  1.13/02 09/03/2017  17.14.36  by  Michael Scheer
*CMZ :  1.13/01 08/03/2017  15.40.55  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  16.37.53  by  Michael Scheer
*CMZ :  1.12/00 24/02/2017  08.47.15  by  Michael Scheer
*CMZ :  1.11/07 23/02/2017  17.24.23  by  Michael Scheer
*CMZ :  1.11/06 23/02/2017  13.18.36  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  12.27.44  by  Michael Scheer
*CMZ :  1.11/04 25/01/2017  10.13.44  by  Michael Scheer
*CMZ :  1.11/03 17/01/2017  14.50.40  by  Michael Scheer
*CMZ :  1.11/01 06/01/2017  13.46.07  by  Michael Scheer
*CMZ :  1.11/00 04/01/2017  15.56.40  by  Michael Scheer
*CMZ :  1.10/03 05/12/2016  15.36.58  by  Michael Scheer
*CMZ :  1.10/02 30/11/2016  16.12.02  by  Michael Scheer
*CMZ :  1.10/01 18/11/2016  15.02.58  by  Michael Scheer
*CMZ :  1.10/00 01/11/2016  09.47.47  by  Michael Scheer
*CMZ :  1.09/01 06/10/2016  09.08.03  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  09.12.28  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  18.54.27  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.39.27  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  14.51.14  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.43.31  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.02.17  by  Michael Scheer
*CMZ :  1.05/00 17/09/2016  10.32.16  by  Michael Scheer
*CMZ :  1.04/03 15/09/2016  17.35.03  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  16.29.44  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  10.45.28  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  13.31.19  by  Michael Scheer
*CMZ :  1.02/03 12/09/2016  11.37.12  by  Michael Scheer
*CMZ :  1.02/02 12/09/2016  10.20.23  by  Michael Scheer
*CMZ :  1.02/01 11/09/2016  12.27.52  by  Michael Scheer
*CMZ :  1.02/00 29/08/2016  14.10.42  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  17.52.14  by  Michael Scheer
*CMZ :  0.00/13 16/08/2016  12.06.57  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  09.03.47  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  16.13.39  by  Michael Scheer
*CMZ :  0.00/10 13/07/2016  15.05.25  by  Michael Scheer
*CMZ :  0.00/09 04/07/2016  17.54.03  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  13.38.55  by  Michael Scheer
*CMZ :  0.00/05 14/06/2016  13.51.40  by  Michael Scheer
*CMZ :  0.00/04 13/05/2016  14.27.24  by  Michael Scheer
*CMZ :  0.00/02 29/04/2016  09.17.43  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  15.56.38  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.48.03  by  Michael Scheer
*CMZ :  1.17/15 19/04/2016  15.54.31  by  Michael Scheer
*CMZ :  1.17/14 13/04/2016  12.32.55  by  Michael Scheer
*CMZ :  1.17/13 08/04/2016  11.47.10  by  Michael Scheer
*CMZ :  1.17/12 06/04/2016  14.29.22  by  Michael Scheer
*CMZ :  1.17/11 05/04/2016  12.46.06  by  Michael Scheer
*CMZ :  1.17/10 04/04/2016  14.46.34  by  Michael Scheer
*CMZ :  1.17/09 04/04/2016  09.41.39  by  Michael Scheer
*CMZ :  1.17/08 04/04/2016  08.58.50  by  Michael Scheer
*CMZ :  1.17/07 04/04/2016  08.42.21  by  Michael Scheer
*-- Author :    Michael Scheer   01/04/2016
      subroutine undumag_ini_old(kseg)

      use bpolyederf90m
      use undumagf90m
      use commandlinef90m

      implicit none

! bpemag0(1:3,icorn,iplan,imag) = x,y,z relative to magnet center

! bpebc0(1:3,... position x,y,z
! bpebc0(4:6,... M vector
! bpebc0(7... type, e.g. -6 is rect. angular magnet, 1 polyeder

! ibpeplan(imag)=nplan
! ibpecorn(iplan,imag)=ncorn
! ibpecol(imag) color index

! bpebc(1:3,... position x,y,z
! bpebc(4:6,... M vector, might be changed during relaxation
! bpebc(7,... length of M vector, might be changed during relaxation
! bpebc(8,... type
! bpebc(9,imag)=imat
! bpebc(10,imag) special magnet flag
! bpebc(11:13,imag) normalized M vector at the beginning, will survive
! bpebc(14,imag) length M vector at the beginning, will survive
! bpebc(15,imag) Mother volume
! bpebc(16,imag) kill flag
! bpebc(17,imag) select flag
! bpebc(18:20,imag) external field and field of coils

+seq,phyconparam.
+seq,seqdebug.
+seq,random.

      double precision, dimension (:,:), allocatable :: bciron,bcrec,
     &  bpre16,bc0rec,bc0iron,displace

      double precision, dimension (:,:,:), allocatable :: corn1,corn2,
     &  bcpre
      double precision, dimension (:,:,:,:), allocatable ::
     &  bmagrec,brotrec, bpetmrec,
     &  bmagiron,brotiron, bpetmiron

      double precision bn,x,y,z,hx,hy,hz,bx,by,bz,hxo,hyo,hzo,hold,h,
     &  bci(3),bcj(3),xdiv,ydiv,zdiv,bc04(4),
     &  x1,x2,y1,y2,z1,z2,x3,x4,z3,z4,
     &  xdivmin,xdivmax,ydivmin,ydivmax,zdivmin,zdivmax,dxdiv,dydiv,dzdiv,
     &  x1div(10000),x2div(10000),y1div(10000),y2div(10000),
     &  z1div(10000),z2div(10000),xcen,ycen,zcen,
     &  xidiv(10000),yidiv(10000),zidiv(10000),bc8,bc9,bc10,bpebc15,bpe17,
     &  wind19(19),race17(17),arc21(21)

      double precision x0,y0,y0max,y0min,z0,bc,xm,ym,zm,rmag(3),vmaglab(3),
     &  vnormlab(3),r1(3),bdum,dum,r1lab(3),dx0,dx,dy,dz,x00,y00,z00,pel,
     &  dzdum,hmat,bcm,hmato,bcmo,dlab(3),vcorn(3),vmag(3),
     &  x02(2),y02(2),z02(2),gcen(3),vnor(3),dxfb,dyfb,dzfb,dxcon(100)

      double precision ts(3,3),tsinv(3,3),p1(3),p2(3),p3(3)
      double precision v1x,v1y,v1z,v2x,v2y,v2z,vsx,vsy,vsz,tiny2,rtiny
      double precision xmin,xmax,ymin,ymax,zmin,zmax,rmin,rmax,scalcur,
     &  dxsh,eps10,xx,yy,zz,xsymmm,xconvmm,dist,
     &  xminfb,yminfb,zminfb,xmaxfb,ymaxfb,zmaxfb,
     &  xxmin,xxmax,yymin,yymax,zzmin,zzmax

      double precision space,vspace(3),vbsym(3),rotmod(3,3),
     &  xmod,ymod,zmod,q,qsign,a,b,r2(3),det,
     &  xlen,ylen,ylenmax,ylenmin,zlen,vx,vy,vn,ca,sa,tz(3,3),ws(3,3)
     & ,ts1(3,3),ts1inv(3,3),xl,yl,zl,vz,r

      double precision, dimension (:,:,:,:), allocatable :: bpemag0,shuffle

      double precision
     &  bcx,bcy,bcz,yfracdiv,fracsum,yfacdiv,sinphi,cosphi,curr,
     &  xcwmin,xcwmax,radin,radout,ri,ro,dh,height,angle,rmat(3,3),dr,phi,dphi

      real g(100),color(3),xc,yc,zc,x21,y21,z21,cw
      integer mag,ix,iy,iz,icol,num,nr,nang,nangmin,nh,iphi,ir,ip,ih,kfoundplanes

      integer, dimension (:), allocatable :: ibpeplaniron, ibpeplanrec,
     &  ncorn1,ncorn2

      integer, dimension (:,:), allocatable :: ibpecorniron,ibpecornrec,
     &  mothdiv

      integer ifail,iterold,iron1,iron2,mat,lmat,jmag,ic,jc,
     &  ispec,iron,irec,kiron,nidiv,n1div,n2div,modediv,kplan,mspecmag,
     &  lunf,lunst,lunvox,lunvrml,moth,itype,motho,nmoth,nmotho,ipoimoth,
     &  ncount,imoth,kmoth,lun,ndisp,idisp,mothdis,moth0,mpoi,lunlis,
     &  lunfil,nlines,luncoi,kolor,lunmag,lunrn,kseg

      integer, dimension (:), allocatable :: ibpecolrec,ibpecoliron

      integer ntupp,imat
      parameter(ntupp=12)

      double precision, dimension (:,:), allocatable :: hull
      double precision, dimension (:), allocatable :: xhull,yhull,zhull
      double precision, dimension (:,:), allocatable :: xmoth,ymoth,zmoth
      double precision, dimension (:,:), allocatable :: xmothm,ymothm,zmothm
      double precision, dimension (:,:), allocatable :: xmothi,ymothi,zmothi

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface,npmoth,matmoth,
     &  nplanmoth,ncolmoth,ncolmothi,ncolmothm,npmothm,npmothi,
     &  matmothm,matmothi
      integer, dimension (:,:), allocatable :: khullmoth,kfacemoth

      real*8 htup(ntupp),val
      integer nhull,nedge,kfacelast,kcyl

      integer ntet,ifailhull,nface,next,npoi,npoimoth,ipoi,last
      real xplmin,xplmax,yplmin,yplmax,zplmin,zplmax,theta,pphi,
     &  xp1,yp1,zp1,xp2,yp2,zp2

      integer iwarn,ifilemodus,iplot,imodu,imoduo,
     &  ilast,ifirst,nwords,i2cop,i1cop,i1mod,i2mod,i1moth,i2moth,
     &  nx,ny,nz,ncopies,
     &  nmagdo,nmagrect,nmagdivrect,nmagrectspec,nmagdivrectspec,
     &  nmagdiv,nmagspec,nmagdivspec,
     &  ndiv,idiv,nfediv,nmago,nsmag,nsmallo,
     &  ical,jplan,jcol,
     &  nplan,ncol,ncorn,nmodule,ncopy,
     &  ixdiv,iydiv,izdiv,nxdiv,nydiv,nzdiv,
     &  kmag1,kmag2,kdmag,kdmag1,kmag,
     &  imp,imag,ipol,npol,iplan,iedge,icorn,imodul,icopy,k,i,j,ip1,ip2,
     &  iflange,nflange,
     &  ipos(2,100),istat,ianf,iend,iover,ierr,
     &  nwfil,nwfilo,isleep,ifound,ieof,ise,idum,lunnam,lundum,lun76,
     &  lunmat,kmat,nmatpoi,nmatpoimax,mapmode,lunpre,ipre,npre,maxplan,
     &  imatfile,ispecmag,nmagmaxo,nfirst,nlast,lpos(2,4),nwordsmax,korn,
     &  kornmoth,iplanmoth,kpoi,nline,lunkill,kill,ix1,ix2,iy1,iy2,iz1,iz2

      integer :: ireallo=-1, ihullallo=0
      integer ncutpiece

      character(10) dtday,dttime,dtzone
      character c1
      integer idatetime(8),lunclc

      logical lexist

      character(32) c32,ch32,chmod,chcop,chmoth1,chsel
      character(1) c32a(32),chmoth1a(32)
      character(64) c64
      character(128) c128
      character(2048) cfile,cline,cline1
      equivalence(c32a,c32)

      character(32), dimension (:), allocatable :: chdisp

      equivalence (chmoth1a,chmoth1)

      data eps10/1.0d-10/

      modegui=0

+self,if=trace.
      print*,"-trace-: undumag_ini_old entered"
+self.

      open(newunit=lun,file="undumag.stat")
      write(lun,*)"1"
      flush(lun)
      close(lun)

+seq,unduver.

c+seq,phycon1.

      kfoundplanes=0
      ncornadd=0
      nplanadd=0

      nplanmax=0
      ncornmax=0

c      iwarnbound=0

1111  ireallo=ireallo+1

      ncutpiece=0

      if (ireallo.ne.0) then
        deallocate(ibpecol,bpebc,bpemag,bpemag0,shuffle,bpebc0,
     &    bperot,bpetm,bflange,ibpeplan,ibpeplano,ibpecorn,mothdiv)
        deallocate(corn1,corn2,ncorn1,ncorn2)
        deallocate(hull,khull,kface,kedge,xhull,yhull,zhull)
        deallocate(xmoth,ymoth,zmoth,npmoth,matmoth,ncolmoth)
        deallocate(xmothm,ymothm,zmothm,npmothm,matmothm,ncolmothm)
        deallocate(xmothi,ymothi,zmothi,npmothi,matmothi,ncolmothi)
        deallocate(chmoths,chmothso,chmags,chmagsm,chmothsm,chmagsi,chmothsi)
        deallocate(magcyl)
+self,if=chmagpols.
        deallocate(chmagpols)
+self.,if=chmagpols.
        deallocate(idamp8)
      endif

      nmag=0
      nmoth=0
      nmago=-1
      nmagmax=0
      kcyl=0

      nmagrect=0
      nmagdivrect=0
      nmagdiv=0

      iwarnsum=0
      maxpoints=0
      kallodip=0

+self,if=-nowarnings.
      if (ireallo.eq.0) open(newunit=lunwarn,file="undumag.war")
+self.,if=-nowarnings.

      nmatpoimax=0

      iterrectot=0
      iterirontot=0

      xmin=1.0d30
      xmax=-1.0d30
      ymin=1.0d30
      ymax=-1.0d30
      zmin=1.0d30
      zmax=-1.0d30

cdebug

      iseqdebug=0
      kwave=0

      if (ireallo.ne.0) close(lunnam)
      inquire(file=trim(Fnam),exist=lexist)
      if (lexist.eqv..false.) then
        write(lun6,*)""
        write(lun6,*)"*** Error in undumag_ini_old: File " // trim(Fnam) // " not found ***"
        write(lun6,*)"*** Program UNDUMAG aborted ***"
        stop
      endif

      open(newunit=lunnam,file=trim(Fnam),form='formatted',status='old')
      read(lunnam,undumagn)
      read(lunnam,randomn)
      close(lunnam)

      kcalcvars=1 !to avoid problems with undumag.in if coating is used

      if (hulltiny.le.0d0) hulltiny=1.0e-6

      ndivfby=max(ndivfboxy,1)

      if (matrix.eq.0) then
        write(lun6,*)"**************************************************************************************"
        write(lun6,*)"*         Matrix mode is compulsary for current version of UNDUMAG, switching it on  *"
        write(lun6,*)"**************************************************************************************"
        matrix=1
      endif

      if (kbextern.eq.0) then
        bxex=0.0d0
        byex=0.0d0
        bzex=0.0d0
      endif

      rcvthron=abs(rcvthron)
      if (rcvthron.eq.0.0d0) rcvthron=1.0d30

      ixsymo=ixsym
      iysymo=iysym
      izsymo=izsym

+self,if=trace.
      print*,"-trace-: Mark 1"
+self.
      if (irnmode.eq.1.or.irnmode.eq.2) then
        kundurun=0
        open(newunit=lundum,file="undumag.run",form='formatted',recl=512)
        read(lundum,*,end=197)kundurun
197     kundurun=kundurun+1
        close(lundum)
        if (irnmode.eq.2) irnseed(12)=irnseed(12)+kundurun
        call util_random_set_seed(irnsize,irnseed)
      else if (irnmode<0) then
        open(newunit=lunrn,file='undumag.seeds',status='old')
        read(lunrn,*) k
        do i=1,irnsize
          read(lunrn,*)k,irnseed(k)
        enddo
        close(lunrn)
        call util_random_set_seed(irnsize,irnseed)
      else
        call util_random_init(irnsize,irnseed)
      endif

+self,if=trace.
      print*,"-trace-: Mark 2"
+self.
      ndisp=0
      if (kdisplace.ne.0) then
        if (ixsym.gt.0.or.iysym.gt.0.or.izsym.gt.0) then
          write(lun6,*)
          write(lun6,*)"*** Warning in undumag_ini_old: kdisplace is set, but set-up is mirrored due to ixsym, iysym, or izsym ***"
          write(lun6,*)
        endif
        open(newunit=lun,file="undumag.dis",status="old")
        do while (.true.)
          call util_skip_comment_end(lun,ieof)
          read(lun,'(a)')cline
          ndisp=ndisp+1
        enddo
        rewind(lun)
        allocate(chdisp(ndisp))
        allocate(displace(18,ndisp))
        do i=1,ndisp
! displace(1:3,i) displacement of magnet
! displace(4:6,i) yrot, zrot, dphi of rotation around x-axis
! displace(7:9,i) change of magnetization
! displace(10:18,i)
          !mode: 0, apply changes as they are
          !mode: 1, apply changes with randomization
          call util_skip_comment(lun)
          read(lun,*)chdisp(i),displace(1:18,i)
          call util_random(9,g)
          do k=1,9
            if (displace(k+9,i).ne.0.0d0) displace(k,i)=displace(k,i)*g(k)
          enddo
        enddo
        close(lun)
      endif
+self,if=trace.
      print*,"-trace-: Mark 3"
+self.

      if (nchiiron.le.0) nchiiron=1
      nchimax=0
      if (chicut.eq.-9999.0d0) chicut=max(abs(hconv),1.0d-10)
      corrtiny=corrtiny/1000.0d0 ! mm->meter

      randoxa=abs(randox)
      randoya=abs(randoy)
      randoza=abs(randoz)
      randox10=randoxa/10.0d0
      randoy10=randoya/10.0d0
      randoz10=randoza/10.0d0

      ifsimpson=isimpson
      open(unit=99,file='.util_spline_or_simpson_integral.dat')
      write(99,*)isimpson
      if (isimpson.gt.0) then
        write(lun6,*)
        write(lun6,*)"*** Simpson integrations applied ***"
        write(lun6,*)
      endif
      close(99)

      hconva=abs(hconv)
      if (hconv.le.-1000.0d0) hconva=0.0d0

      if (dampiron.eq.0.0d0.or.dampiron.gt.1.0d0) then
        dampiron=1.0d0
      endif

      if (maxiteriron.eq.-9999.and.dampiron.lt.1.0d0) then
        maxiteriron=(log(0.001)/log(1.0d0-dampiron)+1)
      endif

      dampi=dampiron

      if (maxiteriron.eq.-9999) maxiteriron=1

      if (ireallo.ne.0) close(lunconv)
      if(kdumpconv.ne.0) open(newunit=lunconv,file="undumag.cnv")
+self,if=trace.
      print*,"-trace-: Mark 4"
+self.

      if (ireallo.eq.0.and.kcalcvars.ne.0) then
        call undumag_calc(kechocalc,kcalcvars)
      endif
+self,if=trace.
      print*,"-trace-: Mark 5"
+self.

      if (ireallo.eq.0) then
        c128="izsym"
        call undumag_parameter(c128,val,istat)
        if (istat.ne.0) then
          c128="iZsym"
          call undumag_parameter(c128,val,istat)
          if (istat.eq.0) izsym=nint(val)
        else
          izsym=nint(val)
        endif
        c128="iysym"
        call undumag_parameter(c128,val,istat)
        if (istat.ne.0) then
          c128="iYsym"
          call undumag_parameter(c128,val,istat)
          if (istat.eq.0) iysym=nint(val)
        else
          iysym=nint(val)
        endif
        c128="ixsym"
        call undumag_parameter(c128,val,istat)
        if (istat.ne.0) then
          c128="iXsym"
          call undumag_parameter(c128,val,istat)
          if (istat.eq.0) ixsym=nint(val)
        else
          ixsym=nint(val)
        endif
        if (perlen.eq.9999.0d0) then
          c128="perlen"
          call undumag_parameter(c128,perlen,istat)
          if (istat.ne.0) then
            c128="Perlen"
            call undumag_parameter(c128,perlen,istat)
            if (istat.ne.0) then
              c128="PerLen"
              call undumag_parameter(c128,perlen,istat)
            endif
          endif
          if (istat.ne.0) then
            write(lun6,*)
            write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_parameter for PerLen ***"
            write(lun6,*)"Make sure, that " // trim(Fclc) // " contains parameter or variable PerLen!"
            write(lun6,*)
            stop
          else
            write(lun6,*)
            write(lun6,*)"Period length read from " // trim(Fclc) // ":",sngl(perlen)
            write(lun6,*)
            if (perlen.le.0.0d0) then
              perlen=100.0d0
              write(lun6,*)
              write(lun6,*)"*** Warning in undumag_ini_old:Zero or negative period-length found ***"
              write(lun6,*)"*** Set to 100 ***"
              write(lun6,*)
            endif
          endif
        endif
      endif
+self,if=trace.
      print*,"-trace-: Mark 6"
+self.

      if (dedgefb.eq.0.0d0) dedgefb=0.02d0

      if (iforce.ne.0.and.dedgefb.le.corrtiny) then
        write(lun6,*)""
        write(lun6,*)"*** Warning in undumag_ini_old: Dedgefb is not greater than corrtiny "
        write(lun6,*)""
      endif

      ubflenx=ubflenx+2.0d0*dedgefb
      ubfleny=ubfleny+2.0d0*dedgefb
      ubflenz=ubflenz+2.0d0*dedgefb

      if (iforce.lt.0) then
+self,if=trace.
        print*,"-trace-: Calling undumag_force_parameters"
+self.
        call undumag_force_parameters
+self,if=trace.
        print*,"-trace-: Passed undumag_force_parameters"
+self.
      endif

      if (iforce.ne.9999) then

        if (utorqcenx.eq.9999.0d0) utorqcenx=ubfcenx
        if (utorqceny.eq.9999.0d0) utorqceny=ubfceny
        if (utorqcenz.eq.9999.0d0) utorqcenz=ubfcenz

        bfcenxmm=ubfcenx
        bfcenymm=ubfceny
        bfcenzmm=ubfcenz
        bflenxmm=ubflenx
        bflenymm=ubfleny
        bflenzmm=ubflenz
        torqcenxmm=utorqcenx
        torqcenymm=utorqceny
        torqcenzmm=utorqcenz
        bfcenx=ubfcenx/1000.0d0
        bfceny=ubfceny/1000.0d0
        bfcenz=ubfcenz/1000.0d0
        bflenx=ubflenx/1000.0d0
        bfleny=ubfleny/1000.0d0
        bflenz=ubflenz/1000.0d0
        torqcenx=utorqcenx/1000.0d0
        torqceny=utorqceny/1000.0d0
        torqcenz=utorqcenz/1000.0d0
        jplforce=iplforce
        if (iforce.eq.0) then
          mbforcex=0
          mbforcey=0
          mbforcez=0
        endif
        nbforcx=mbforcex
        nbforcy=mbforcey
        nbforcz=mbforcez
        iforcol=mfcolor
        forcol=iforcol
        forxpl(1)=bfcenxmm-bflenxmm/2.
        forxpl(2)=bfcenxmm+bflenxmm/2.
        forypl(1)=bfcenymm-bflenymm/2.
        forypl(2)=bfcenymm+bflenymm/2.
        forzpl(1)=bfcenzmm-bflenzmm/2.
        forzpl(2)=bfcenzmm+bflenzmm/2.

      endif !(iforce.ne.9999) then

      xsymmm=xsym
      if (xsymmm.eq.9999.0d0) xsymmm=xcenter
      if (xsym.ne.9999.0d0) xsym=xsym/1000.0d0

      window=uwindow
      kdebug=kudebug

      if (window.le.0.0d0) window=1.0d30

      tiny=1.1d-6
      tiny=corrtiny
      tiny2=tiny*tiny

+self,if=trace.
      print*,"-trace-: Mark 6"
+self.
      scalcur=1.0d0

      TWOPI=2.0D0*PI1

      filebpe='undumag.in'

      iallowin=1
      iplot=iunduplot
      nthreads=nuthreads
      theta=unduplot_theta !plotting angle
      pphi=unduplot_phi   !plotting angle

      lunbpe=98
+self,if=trace.
      print*,"-trace-: Mark 7"
+self.
      close(lunbpe)

+self,if=trace.
      print*,"-trace-: Calling undumag_drop_zero_magnets"
+self.
      call undumag_drop_zero_magnets(kfoundplanes,kechocalc,hulltiny)
+self,if=trace.
      print*,"-trace-: Passed undumag_drop_zero_magnets"
+self.

      open(unit=lunbpe,file=filebpe,form='formatted',status='old')

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,'(a)')usercom
      unducomment=usercom

      if (ireallo.eq.0) then

        kundurun=0
        jcomment=kcomment
        jrunnum=krunnum
        jdate=kdate

        call date_and_time(dtday,dttime,dtzone,idatetime)

        open(newunit=lundum,file="undumag.run",form='formatted',recl=512)
        read(lundum,*,end=97)kundurun
97      kundurun=kundurun+1
        rewind(lundum)
        write(lundum,*) kundurun,trim(usercom),' ',
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
        close(lundum)
        open(newunit=lundum,file="undumag.runs",form='formatted',recl=512,
     &    access='append')
        write(lundum,*) kundurun,trim(usercom),' ',
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
        close(lundum)

        open(newunit=lunst,file="undumag.sta")
        write(lunst,*)kundurun,konv,iwarnsum
        write(lunst,*)"undumag_ini_old"
        close(lunst)

        write(lun6,*) "Run:",
     &    kundurun,"      ",
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)

        write(lun6,*) "User comment: ",trim(usercom)

      endif !(ireallo.eq.0) then

c loop over magnets, modules, and arrays {

11    call util_skip_comment_end(lunbpe,ieof)

      if (nmago.eq.-9.and.ieof.ne.0) then
        goto 992 ! end of magnet section
      endif

      read(lunbpe,'(a)')cline
      if (kechocalc.ne.0) write(lun6,*)trim(cline)

      read(cline,*)x0,y0,z0

      if (x0.eq.-9999..and.y0.eq.-9999..and.z0.eq.-9999.) then
        goto 992 ! end of magnet section
      endif

      nmag=nmag+1
      nmoth=nmoth+1

c get dimensions

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      read(lunbpe,*)bc,xm,ym,zm,imat

      if (imat.eq.0) bc=0.0d0

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,'(a)')cline
      if (kechocalc.ne.0) then
        write(lun6,*)trim(cline)
      endif

      c64='Cyl'
      call util_string_substring(cline,trim(c64),ianf,iend,istat)
      if (istat.eq.0) then
        !Cylinder
        read(cline(4:len_trim(cline)),*)ncol
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
        if (angle.gt.360.0d0) angle=360.0d0
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(1,1:3)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(2,1:3)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(3,1:3)
        nplan=-11
        if (bc.ne.0.0d0) nmagcyl=nmagcyl+1

      else ! Cyl

        c64='Block'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)

        if (istat.ne.0) then
          c64='File'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='Corners'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
              read(cline,*)nplan,ncol
            else
              !Corners
c            nplan=-10
              cline(ianf:iend)=' -10   '
              read(cline,*)nplan,ncol
            endif
          else
            !File with corners
            nplan=-9
            cline(ianf:iend)=' -9 '
          endif
        else
          !Block
          nplan=-6
          read(cline(iend+1:len_trim(cline)),*)ncol
          cline(ianf:iend)=' -6  '
        endif
      endif ! Cyl

      if (nplan.gt.0.and.nplan.gt.nplanmax) then
        kfoundplanes=1
        nplanmax=nplan
      endif

      if ((nplan.eq.-11.or.nplan.eq.-1.or.nplan.eq.-6.or.nplan.eq.-7).and.
     &    nplanmax.lt.6) then
        if (nplanmax.lt.6) nplanmax=6
        if (ncornmax.lt.5) ncornmax=5
cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      else if (nplan.eq.-9.or.nplan.eq.-10) then

        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        call util_skip_comment_end(lunbpe,ieof)

        if (nplan.eq.-9) then

          if (kechocalc.ne.0) then
            write(lun6,*)trim(cline)
          endif
          read(lunbpe,*)cline

          open(newunit=lundum,file=trim(cline))

          npoi=0
          last=1

          do while (last.gt.0)
            call util_read_line(lundum,cline,last)
            if (last.gt.0) then
              npoi=npoi+1
            endif
          enddo

          if (maxpoints.eq.0) then
            maxpoints=100
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          rewind(lundum)

          do ipoi=1,npoi
            call util_skip_comment_end(lundum,ieof)
            read(lundum,*)hull(1:3,ipoi)
          enddo

          close(lundum)

        else if (nplan.eq.-10) then

          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)npoi

          if (maxpoints.eq.0) then
            maxpoints=100
            ihullallo=1
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          do ipoi=1,npoi
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)hull(1:3,ipoi)
          enddo

        endif !nplan.eq.-9/-10

        if (npoi.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Less data than four points on file ***",
     &      trim(cline)
          stop
        endif

        xhull(1:npoi)=hull(1,1:npoi)
        yhull(1:npoi)=hull(2,1:npoi)
        zhull(1:npoi)=hull(3,1:npoi)

        call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &    nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
+self,if=trace.
        print*,"-trace-: Passed util_convex_hull_3d"
+self.

        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &      trim(cline)
          stop
        endif

c        khull(1:kfacelast)=kface(1:kfacelast)

        nmagdiv=nmagdiv+nxdiv*nydiv*nzdiv

        next=1
        do iplan=1,nface
          ncorn=kface(next)
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          next=next+ncorn+1
        enddo
        if (nface.gt.nplanmax) nplanmax=nface

      else if (ireallo.eq.0.and.abs(nplan).gt.nplanmax) then
        nplanmax=abs(nplan)+3
        ncornmax=5
      endif !nplan .eq. -9/-10

      if (nplan.ne.-11.and.nplan.ne.-9.and.nplan.ne.-10) then
        nxdiv=1
        nydiv=1
        nzdiv=1
      endif

      if (nplan.gt.0) then

        ! normal polyhedron

c        backspace(lunbpe)
c        read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif


        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdiv=nmagdiv+nxdiv*nydiv*nzdiv

        npoi=0
        do iplan=1,nplan

          call util_skip_comment_end(lunbpe,ieof)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)ncorn

          if (ncorn.lt.3) then
            write(lun6,*)
            write(lun6,*)'*** ERROR IN undumag_ini_old: Too few points'
            write(lun6,*)'Magnet, plane: ',nmag,iplan
            write(lun6,*)
            stop
          endif

          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1

          do icorn=1,ncorn
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)x0,y0,z0
            npoi=npoi+1
          enddo

        enddo !nplan

        if (maxpoints.eq.0) then
          maxpoints=100
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          ihullallo=1
        else if (npoi.gt.maxpoints) then
          if (ihullallo.ne.0) then
            deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
          endif
          maxpoints=npoi
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
        endif

      else if (nplan.eq.-9.or.nplan.eq.-10) then

        continue

      else if (nplan.eq.-6) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        read(lunbpe,*,iostat=ieof)xlen,ylen,zlen,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdivrect=nmagdivrect+nxdiv*nydiv*nzdiv
        nmagrect=nmagrect+1

      else if (nplan.eq.-11) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        nangmin=1+abs(angle)/(90.0d0+tiny)

        if (nang.lt.nangmin) nang=nangmin
        if (nr.lt.1) nr=1
        if (nh.lt.1) nh=1

        nmagdiv=nmagdiv+nr*nang*nh

      else !(nplan.eq.-6)

        write(lun6,*) '*** Error in undumag_ini_old: Bad number of planes'
        write(lun6,*) '*** Magnet:', nmag
        write(lun6,*)'*** Program aborted ***'
        stop

      endif !nplan.gt.0

      goto 11

992   continue ! end of magnet section

      if (nmago.eq.-9.or.nmago.eq.-9999.or.nmago.eq.-8888) then
        close(lunbpe)
        lunbpe=98
      endif !nmago

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*)nmodule

      if (nmodule.le.0) then
        write(lun6,*)'*** Error in undumag_ini_old: Number of modules is zero'
        stop
      endif

      ncopies=0
      nmotho=nmoth
      nmoth=0
      do imodul=1,nmodule

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)xmod,ymod,zmod

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(1,1),rotmod(1,2),rotmod(1,3)

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(2,1),rotmod(2,2),rotmod(2,3)

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(3,1),rotmod(3,2),rotmod(3,3)

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)ncopy

        call util_skip_comment_end(lunbpe,ieof)

        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)space,vspace(1),vspace(2),vspace(3)
        call util_vnorm(3,vspace,vspace)

        call util_skip_comment_end(lunbpe,ieof)

        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)vbsym(1),vbsym(2),vbsym(3)

        ncopies=ncopies+ncopy*(nmagdiv+nmagdivrect)
        nmoth=nmoth+nmotho*ncopy

      enddo !imodul=1,nmodule

      nmagmax=nmagmax+ncopies

c Special magnets

      nspecmag=0
      nmagrectspec=0
      nmagdivrectspec=0
      nmagdivspec=0

      x0=-1.0d30
      y0=-1.0d30
      z0=-1.0d30

1     call util_skip_comment(lunbpe)

      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      read(lunbpe,*)x0,y0,z0
      if (x0.eq.-9999..and.y0.eq.-9999..and.z0.eq.-9999.) goto 993

      nspecmag=nspecmag+1

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif
      read(lunbpe,*)bc,xm,ym,zm,imat
      if (imat.eq.0) bc=0.0d0

      call util_skip_comment_end(lunbpe,ieof)
      if (kechocalc.ne.0) then
        write(lun6,*)trim(cline)
      endif
      read(lunbpe,'(a)')cline

      c64='Cyl'
      call util_string_substring(cline,trim(c64),ianf,iend,istat)
      if (istat.eq.0) then
        !Cylinder
        read(cline(4:len_trim(cline)),*)ncol
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
        if (angle.gt.360.0d0) angle=360.0d0
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(1,1:3)
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(2,1:3)
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rmat(3,1:3)
        ncornmax=5
        nplanmax=6
        nplan=-11

      else ! Cyl

        c64='Block'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)
        if (istat.ne.0) then
          c64='File'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='Corners'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
c            c64='Corners'
c            call util_string_substring(cline,trim(c64),ianf,iend,istat)
              read(cline,*)nplan,ncol
            else
c            nplan=-10
              cline(ianf:iend)=' -10   '
              read(cline,*)nplan,ncol
            endif
          else
            nplan=-9
            cline(ianf:iend)=' -9 '
          endif
        else
          nplan=-6
          cline(ianf:iend)=' -6  '
        endif

      endif ! Cyl

      if (nplan.gt.0) then

c        backspace(lunbpe)
c        read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdivspec=nmagdivspec+nxdiv*nydiv*nzdiv

        if (nplan.gt.0.and.nplan.gt.nplanmax) nplanmax=nplan

        if ((nplan.eq.-1.or.nplan.eq.-6.or.nplan.eq.-7).and.nplanmax.lt.6) then
          if (ireallo.eq.0.and.nplanmax.lt.6) nplanmax=6
          if (ireallo.eq.0.and.ncornmax.lt.5) ncornmax=5
        endif

        npoi=0
        do iplan=1,nplan

          call util_skip_comment_end(lunbpe,ieof)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)ncorn

          if (ncorn.lt.3) then
            write(lun6,*)
            write(lun6,*)'*** ERROR IN undumag_ini_old: Too few points'
            write(lun6,*)'Magnet, plane: ',nmag,iplan
            write(lun6,*)
            stop
          endif

          do icorn=1,ncorn
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)xx,yy,zz
            npoi=npoi+1
          enddo

          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1

          ncorn=ncorn+1

        enddo !nplan

        if (maxpoints.eq.0) then
          maxpoints=100
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          ihullallo=1
        else if (npoi.gt.maxpoints) then
          if (ihullallo.ne.0) then
            deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
          endif
          maxpoints=npoi
          allocate(hull(3,maxpoints))
          allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
          allocate(khull(maxpoints))
          allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
        endif

      else if (nplan.eq.-9.or.nplan.eq.-10) then
cxxxxxxxxxxx

c        backspace(lunbpe)
c        read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (kechocalc.ne.0) then
          write(lun6,*)trim(cline)
        endif

        read(cline,*,iostat=ieof)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        call util_skip_comment_end(lunbpe,ieof)

        if (nplan.eq.-9) then
          read(lunbpe,*)cline
          if (kechocalc.ne.0) then
            write(lun6,*)trim(cline)
          endif
          open(newunit=lundum,file=trim(cline))

          npoi=0
          last=1

          do while (last.gt.0)
            call util_read_line(lundum,cline,last)
            if (last.gt.0) then
              npoi=npoi+1
            endif
          enddo

          if (maxpoints.eq.0) then
            maxpoints=100
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          rewind(lundum)

          do ipoi=1,npoi
            call util_skip_comment_end(lundum,ieof)
            read(lundum,*)hull(1:3,ipoi)
          enddo

          close(lundum)

        else if (nplan.eq.-10) then

          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          read(lunbpe,*)npoi

          if (maxpoints.eq.0) then
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else if (npoi.gt.maxpoints) then
            if (ihullallo.ne.0) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
            endif
            maxpoints=npoi
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
          endif

          do ipoi=1,npoi
            call util_skip_comment_end(lunbpe,ieof)
            if (kechocalc.ne.0) then
              read(lunbpe,'(a)')cline
              write(lun6,*)trim(cline)
              backspace(lunbpe)
            endif
            read(lunbpe,*)hull(1:3,ipoi)
          enddo

        endif

        if (npoi.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Less data than four points on file ***",
     &      trim(cline)
          stop
        endif

        xhull(1:npoi)=hull(1,1:npoi)
        yhull(1:npoi)=hull(2,1:npoi)
        zhull(1:npoi)=hull(3,1:npoi)
        call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &    nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &      trim(cline)
          stop
        endif

c        khull(1:kfacelast)=kface(1:kfacelast)

        nmagdivspec=nmagdivspec+nxdiv*nydiv*nzdiv
        next=1

        do iplan=1,nface
          ncorn=kface(next)
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          next=next+ncorn+1
        enddo

        if (nface.gt.nplanmax) nplanmax=nface

      else if (nplan.eq.-6) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        call util_skip_comment_end(lunbpe,ieof)
        if (kechocalc.ne.0) then
          read(lunbpe,'(a)')cline
          write(lun6,*)trim(cline)
          backspace(lunbpe)
        endif

        read(lunbpe,*,iostat=ieof)xlen,ylen,zlen,nxdiv,nydiv,nzdiv,yfacdiv
        if (ieof.ne.0) then
          yfacdiv=1.0d0
        endif

        if (nxdiv.lt.1) nxdiv=1
        if (nydiv.lt.1) nydiv=1
        if (nzdiv.lt.1) nzdiv=1

        nmagdivrectspec=nmagdivrectspec+nxdiv*nydiv*nzdiv
        nmagrectspec=nmagrectspec+1

      else if (nplan.eq.-11) then

        ncorn=4
        if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
        ncorn=ncorn+1

        if (nang.lt.nangmin) nang=nangmin
        if (nr.lt.1) nr=1
        if (nh.lt.1) nh=1

        nmagdivspec=nmagdivspec+nr*nang*nh

      else !(nplan.eq.-6)

        write(lun6,*) '*** Error in undumag_ini_old: Bad value of number of planes'
        write(lun6,*) '*** Magnet:', nmag
        write(lun6,*)'*** Program aborted ***'
        stop

      endif !nplan.gt.0

      goto 1

993   continue

      mspecmag=nmagdivspec+nmagdivrectspec
      if (ireallo.eq.0.and.nmagrectspec.gt.0.and.nplanmax.lt.6) nplanmax=6

      call util_skip_comment(lunbpe)
      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif

      call util_skip_comment(lunbpe)

      if (kechocalc.ne.0) then
        read(lunbpe,'(a)')cline
        write(lun6,*)trim(cline)
        backspace(lunbpe)
      endif

+self,if=trace.
      print*,"-trace-: Going to material files"
+self.

      read(lunbpe,*)nmatfiles

      bcmo=-1.0d30
      hmato=-1.0d30
      do imatfile=1,nmatfiles
        call util_skip_comment(lunbpe)
        read(lunbpe,*) imat,lmat,mapmode,cfile
        nmatpoi=0
        open(newunit=lunmat,file=trim(cfile),status='old')
114     call util_skip_comment_end(lunmat,ieof)
        if (ieof.ne.0) goto 994
        read(lunmat,*)hmat,bcm
c        if (bcm.ne.bcmo.or.hmato.ne.hmat) then
        if (bcm.ne.bcmo) then
          nmatpoi=nmatpoi+1
c          hmato=hmat
c          bcmo=bcm
        endif
        hmato=hmat
        bcmo=bcm
        if (nmatpoi.gt.nmatpoimax) nmatpoimax=nmatpoi
        goto 114
994     close(lunmat)
      enddo

c loop over magnets, modules, and arrays }

      !nmag is number primary magnets, without special ones and modules

      nmagmaxo=nmagmax
      nsmag=max(nmag,nmagmax)+mspecmag
      nsmallo=nsmag

      if (ixsym.lt.0) then
        nsmag=2*nsmag
        nmoth=2*nmoth
      endif
      if (iysym.lt.0) then
        nsmag=2*nsmag
        nmoth=2*nmoth
      endif
      if (izsym.lt.0) then
        nsmag=2*nsmag
        nmoth=2*nmoth
      endif

      allocate(
     &  chmoths(32,nsmag+nmoth),
     &  chmothso(32,nsmag+nmoth),
     &  chmags(32,nsmag),
     &  chmagsm(32,nsmag),chmothsm(32,nsmag),
     &  chmagsi(32,nsmag),chmothsi(32,nsmag)
+self,if=chmagpols.
     &  ,chmagpols(32,nsmag)
+self.,if=chmagpols.
     &  )

      allocate(bpebc0(7,nsmag))
      allocate(bpebc(20,nsmag))
      bpebc=0.0d0
      allocate(bpemag(3,ncornmax,nplanmax,nsmag))
      allocate(bpemag0(3,ncornmax,nplanmax,nsmag))
      allocate(shuffle(6,ncornmax,nplanmax,nsmag))
      allocate(bperot(3,ncornmax,nplanmax,nsmag))
      allocate(bpetm(3,8,nplanmax,nsmag))
      bpetm=0.0d0
      allocate(bflange(7,(ncornmax)*(nplanmax)))

      allocate(ibpeplan(nsmag))
      allocate(ibpeplano(nsmag))
      allocate(ibpecol(nsmag))
      allocate(ibpecorn(nplanmax,nsmag),mothdiv(4,nsmag))

      allocate(corn1(3,2*ncornmax,2*nplanmax),
     &  corn2(3,2*ncornmax,2*nplanmax))
      allocate(ncorn1(2*nplanmax),ncorn2(2*nplanmax))

      allocate(idamp8(nsmag))

      mothdiv=1

      rewind(lunbpe)

      write(lun6,*)
      write(lun6,*)'Setup read first time from undumag.in to get dimensions'
      write(lun6,*)'Starting rereading and performing segmentations and geometry setup'
      write(lun6,*)
cdebug
      if (maxpoints.lt.8) maxpoints=8

      if (ixsymo.ne.0) then
        nspecmag=2*nspecmag
      endif
       if (iysymo.ne.0) then
        nspecmag=2*nspecmag
      endif
       if (izsymo.ne.0) then
        nspecmag=2*nspecmag
      endif

      nsmallo=max(nsmallo,nmoth+nspecmag)

      allocate(xmoth(maxpoints,nsmallo),
     &  ymoth(maxpoints,nsmallo),
     &  zmoth(maxpoints,nsmallo),
     &  npmoth(nsmallo),
     &  matmoth(nsmallo),
     &  ncolmoth(nsmallo)
     &  )
      allocate(xmothm(maxpoints,nsmallo),
     &  ymothm(maxpoints,nsmallo),
     &  zmothm(maxpoints,nsmallo),
     &  npmothm(nsmallo),
     &  matmothm(nsmallo),
     &  ncolmothm(nsmallo)
     &  )
      allocate(xmothi(maxpoints,nsmallo),
     &  ymothi(maxpoints,nsmallo),
     &  zmothi(maxpoints,nsmallo),
     &  npmothi(nsmallo),
     &  matmothi(nsmallo),
     &  ncolmothi(nsmallo)
     &  )

      allocate(magcyl(nmagcyl,2))

      nmoth=0
      if (ixsymo.ne.0) then
        nspecmag=nspecmag/2
      endif
       if (iysymo.ne.0) then
         nspecmag=nspecmag/2
      endif
       if (izsymo.ne.0) then
         nspecmag=nspecmag/2
      endif

c read and store data

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,'(a)')usercom

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*)x0,y0,z0

      nmagmax=0
      kmag1=1
      kmag2=nmag
      kcyl=0

      if (nmago.eq.-1) then
        backspace(lunbpe)
      endif

      if (ireallo.ne.0) close(lun76)
      open(newunit=lun76,file="undumag.pla")

      nmoth=0
      nmagdo=nmag
cdebug
      do imag=1,nmagdo


        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)') cline
        call util_string_split_sep(cline,100,nwords,ipos,'!',istat)
        cline=cline(ipos(1,1):ipos(2,1))
        call util_string_split_sep(cline,100,nwords,ipos,' ',istat)

        if (nwords.eq.5) then
          read(cline,*)x00,y00,z00,chmag,chmoth
        else
          read(cline,*)x00,y00,z00
          write(chmag,*) imag
          call util_string_trim(chmag,nfirst,nlast)
          chmag="mag_" // chmag(nfirst:nlast)
          chmoth="Mag_" // chmag(nfirst:nlast)
        endif

        ifound=0
        do kmag=1,nmagmax
          ifound=1
          do ic=1,32
            if (chmags(ic,kmag).ne.chmag(ic:ic)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.1) exit
        enddo

        if (ifound.ne.0) then
          write(lun6,*)"*** Error in undumag_ini_old: Duplicate magnet name: ",chmag
          stop
        endif

        nmagmax=nmagmax+1
        nmoth=nmoth+1

        c32=chmoth
        write(chmoths(1:32,nmagmax),'(a)')c32a(1:32)
        c32=chmag
        write(chmags(1:32,nmagmax),'(a)')c32a(1:32)

        bpebc(15,nmagmax)=nmagmax
        bpebc15=bpebc(15,nmagmax)
        mothdiv(1,nmagmax)=bpebc15

        bpebc0(1,nmagmax)=x00
        bpebc0(2,nmagmax)=y00
        bpebc0(3,nmagmax)=z00

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)bc,xm,ym,zm,imat !magnetization vector M

        if (imat.eq.0) bc=0.0d0

        bpebc(9,nmagmax)=imat
        bpebc(10,nmagmax)=0

        bdum=sqrt(xm*xm+ym*ym+zm*zm)

        if (bdum.eq.0.0d0.and.abs(bc).gt.0.01) then
          write(lun6,*)
          write(lun6,*)'*** Error in undumag_ini_old: Bad magnetization vector'
          write(lun6,*)'Magnet ',imag
          write(lun6,*)
          stop
        endif

c        call util_skip_comment_end(lunbpe,ieof)
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)')cline

        c64='Cyl'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)
        if (istat.eq.0) then
          !Cylinder
          read(cline(4:len_trim(cline)),*)ncol
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
          if (angle.gt.360.0d0) angle=360.0d0
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(1,1:3)
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(2,1:3)
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(3,1:3)
          nplan=-11

        else ! Cyl

          c64='Block'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='File'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
              c64='Corners'
              call util_string_substring(cline,trim(c64),ianf,iend,istat)
              if (istat.ne.0) then
c              c64='Corners'
c              call util_string_substring(cline,trim(c64),ianf,iend,istat)
                read(cline,*)nplan,ncol
              else
                nplan=-10
                cline(ianf:iend)=' -10   '
                read(cline,*)nplan,ncol
              endif
            else
              nplan=-9
              cline(ianf:iend)=' -9 '
            endif
          else
            cline(ianf:iend)=' -6  '
            read(cline,*)nplan,ncol
          endif

        endif !Cyl

        if (nplan.gt.0.or.nplan.eq.-9) then
c          backspace(lunbpe)
c          read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv

          read(cline,*,iostat=ieof)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif

          if (nxdiv.lt.1) nxdiv=1
          if (nydiv.lt.1) nydiv=1
          if (nzdiv.lt.1) nzdiv=1

        endif

        bdum=bc/bdum

        bpebc0(4,nmagmax)=xm*bdum
        bpebc0(5,nmagmax)=ym*bdum
        bpebc0(6,nmagmax)=zm*bdum

        ibpecol(nmagmax)=ncol
        ibpeplano(nmagmax)=nplan
        ibpeplan(nmagmax)=nplan

        if (nplan.gt.0.or.nplan.eq.-9.or.nplan.eq.-10) then

c          backspace(lunbpe)
c          read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
c          read(cline,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif


          if (nxdiv.lt.1) nxdiv=1
          if (nydiv.lt.1) nydiv=1
          if (nzdiv.lt.1) nzdiv=1

          nmag=nmag+nxdiv*nydiv*nzdiv-1
          kmag2=kmag2+nxdiv*nydiv*nzdiv-1

          bpebc0(7,nmagmax)=1

          xdivmin=1.0d30
          xdivmax=-1.0d30
          ydivmin=1.0d30
          ydivmax=-1.0d30
          zdivmin=1.0d30
          zdivmax=-1.0d30

          ncorn1=0
          ncorn2=0

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          if (nplan.eq.-9.or.nplan.eq.-10) then
cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

c            backspace(lunbpe)
c            read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
c            read(cline,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
            read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
            if (ieof.ne.0) then
              yfacdiv=1.0d0
            endif


            if (nxdiv.lt.1) nxdiv=1
            if (nydiv.lt.1) nydiv=1
            if (nzdiv.lt.1) nzdiv=1

            call util_skip_comment_end(lunbpe,ieof)

            if (nplan.eq.-9) then

              read(lunbpe,*)cline
              open(newunit=lundum,file=trim(cline))

              last=1
              npoi=0
              gcen=0.0d0

              do while (last.gt.0)
                call util_read_line(lundum,cline,last)
                if (last.gt.0) then
                  npoi=npoi+1
                endif
              enddo

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              rewind(lundum)

c              nmoth=nmagmax
              do ipoi=1,npoi
                call util_skip_comment_end(lundum,ieof)
                read(lundum,*)hull(1:3,ipoi)
                gcen=gcen+bpebc0(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

              close(lundum)

            else if (nplan.eq.-10) then

              read(lunbpe,*)npoi

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              gcen=0.0d0
c              nmoth=nmagmax
              do ipoi=1,npoi
                call util_skip_comment_end(lunbpe,ieof)
                read(lunbpe,*)hull(1:3,ipoi)
                gcen=gcen+bpebc0(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

            endif !nplan.eq.-9/-10

            gcen=gcen/npoi

            xhull(1:npoi)=hull(1,1:npoi)
            yhull(1:npoi)=hull(2,1:npoi)
            zhull(1:npoi)=hull(3,1:npoi)

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            do ipoi=1,nhull
              korn=khull(nhull)
              gcen=gcen+bpebc0(1:3,nmagmax)+hull(1:3,ipoi)
            enddo
            gcen=gcen/nhull
c            khull(1:kfacelast)=kface(1:kfacelast)

            ibpeplano(nmagmax)=nface
            ibpeplan(nmagmax)=nface

            npmoth(nmoth)=npoi
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,npoi
              xmoth(ipoi,nmoth)=bpebc0(1,nmagmax)+hull(1,ipoi)
              ymoth(ipoi,nmoth)=bpebc0(2,nmagmax)+hull(2,ipoi)
              zmoth(ipoi,nmoth)=bpebc0(3,nmagmax)+hull(3,ipoi)
              hull(1:3,ipoi)=bpebc0(1:3,nmagmax)+hull(1:3,ipoi)-gcen
            enddo

            bpebc0(1:3,nmagmax)=gcen

            x00=bpebc0(1,nmagmax)
            y00=bpebc0(2,nmagmax)
            z00=bpebc0(3,nmagmax)

            next=1
+self,if=debug.
            open(unit=97)
+self.,if=debug.
            do iplan=1,nface

              ncorn=kface(next)

              ncorn=ncorn+1
              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  x0=hull(1,kface(next+icorn))
                  y0=hull(2,kface(next+icorn))
                  z0=hull(3,kface(next+icorn))

                  if (x0.lt.xdivmin) xdivmin=x0
                  if (x0.gt.xdivmax) xdivmax=x0
                  if (y0.lt.ydivmin) ydivmin=y0
                  if (y0.gt.ydivmax) ydivmax=y0
                  if (z0.lt.zdivmin) zdivmin=z0
                  if (z0.gt.zdivmax) zdivmax=z0

                  bpemag0(1,icorn,iplan,nmagmax)=x0
                  bpemag0(2,icorn,iplan,nmagmax)=y0
                  bpemag0(3,icorn,iplan,nmagmax)=z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                  corn1(1,icorn,iplan)=x0
                  corn1(2,icorn,iplan)=y0
                  corn1(3,icorn,iplan)=z0
+self,if=debug.
                  !w97
                  write(97,*)"-99999. ",ireallo," -99999. ",nmagmax,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.

                else ! icorn.lt.ncorn

                  bpemag0(1,icorn,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,icorn,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,icorn,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

              enddo !icorn

              ncorn1(iplan)=ncorn

              next=next+ncorn ! here, ncorn is already increamented by 1

            enddo !nface
+self,if=debug.
            close(97)
+self.,if=debug.

            nplan=nface

cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

          else ! nplan.eq.-9

            ! magnet definition by planes

            npoi=0

            do iplan=1,nplan

              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncorn

              ncorn=ncorn+1
              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  call util_skip_comment_end(lunbpe,ieof)
                  read(lunbpe,*)x0,y0,z0

                  bpemag0(1,icorn,iplan,nmagmax)=x0
                  bpemag0(2,icorn,iplan,nmagmax)=y0
                  bpemag0(3,icorn,iplan,nmagmax)=z0

                  npoi=npoi+1

                  if (maxpoints.eq.0) then
                    maxpoints=100
                    allocate(hull(3,maxpoints))
                    allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                    allocate(khull(maxpoints))
                    allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                    ihullallo=1
                  else if (npoi.gt.maxpoints) then
                    if (ihullallo.ne.0) then
                      deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                    endif
                    maxpoints=npoi
                    allocate(hull(3,maxpoints))
                    allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                    allocate(khull(maxpoints))
                    allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                  endif

                  xhull(npoi)=x00+x0
                  yhull(npoi)=y00+y0
                  zhull(npoi)=z00+z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                else ! icorn.lt.ncorn

                  bpemag0(1,icorn,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,icorn,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,icorn,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

              enddo !icorn

              ncorn1(iplan)=ncorn

            enddo !nplan

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            npmoth(nmoth)=nhull
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,nhull
              kpoi=khull(ipoi)
              x0=xhull(kpoi)
              y0=yhull(kpoi)
              z0=zhull(kpoi)
              xmoth(ipoi,nmoth)=x0
              ymoth(ipoi,nmoth)=y0
              zmoth(ipoi,nmoth)=z0
              gcen(1)=gcen(1)+x0
              gcen(2)=gcen(2)+y0
              gcen(3)=gcen(3)+z0
            enddo

            gcen=gcen/nhull

            do iplan=1,nplan
              ncorn=ncorn1(iplan)
              do icorn=1,ncorn
                bpemag0(1:3,icorn,iplan,nmagmax)=bpebc0(1:3,nmagmax)+
     &            bpemag0(1:3,icorn,iplan,nmagmax)-gcen
                corn1(1:3,icorn,iplan)=bpemag0(1:3,icorn,iplan,nmagmax)
c                write(lun6,*)nmagmax,iplan,icorn,corn1(1:3,icorn,iplan)
              enddo !icorn
            enddo !nplan

            ! sort points such that normal vectors of planes points outside
            call undumag_sortcorn(2*ncornmax,2*nplanmax,
     &        nplan,ncorn1,corn1,corn2,tiny2,ifail)

            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_sortcorn for magnet ",nmagmax
              stop
            else
              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                do icorn=1,ncorn
                  bpemag0(1:3,icorn,iplan,nmagmax)=corn2(1:3,icorn,iplan)
                enddo !icorn
              enddo !nplan
            endif

            x00=gcen(1)
            y00=gcen(2)
            z00=gcen(3)

            bpebc0(1:3,nmagmax)=gcen

            do iplan=1,nplan

              ncorn=ncorn1(iplan)

              do icorn=1,ncorn-1

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                x0=bpemag0(1,icorn,iplan,nmagmax)
                y0=bpemag0(2,icorn,iplan,nmagmax)
                z0=bpemag0(3,icorn,iplan,nmagmax)

                if (x0.lt.xdivmin) xdivmin=x0
                if (x0.gt.xdivmax) xdivmax=x0
                if (y0.lt.ydivmin) ydivmin=y0
                if (y0.gt.ydivmax) ydivmax=y0
                if (z0.lt.zdivmin) zdivmin=z0
                if (z0.gt.zdivmax) zdivmax=z0

                corn1(1,icorn,iplan)=x0 !Relative
                corn1(2,icorn,iplan)=y0
                corn1(3,icorn,iplan)=z0

                write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 1"

              enddo !icorn
            enddo !nplan

          endif ! nplan.eq.-9

          x02(2)=x00
          y02(2)=y00
          z02(2)=z00

          bc04=bpebc0(4:7,nmagmax)
          bc9=bpebc(9,nmagmax)
          bc10=bpebc(10,nmagmax)

          dxdiv=(xdivmax-xdivmin)/nxdiv
          xdiv=bpebc0(1,nmagmax)+xdivmin !Labor

          bpebc15=bpebc(15,nmagmax)
          mothdiv(1,nmagmax)=bpebc15

          do ic=1,32
            chmag(ic:ic)=chmags(ic,nmagmax)
            chmoth(ic:ic)=chmoths(ic,nmagmax)
          enddo

          ncutpiece=ncutpiece+1
cdebug ixdiv 1
          do ixdiv=1,nxdiv-1

            xdiv=xdiv+dxdiv

            x02(1)=x02(2) !Labor
            y02(1)=y02(2)
            z02(1)=z02(2)

            call undumag_cut_magnet(nmagmax,x02,y02,z02, !debug 1
     &        2*nplanmax,2*ncornmax,
     &        ncorn1,corn1,ncorn2,corn2
     &        ,1,xdiv,hulltiny,ifail)
            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, ixdiv, xdiv:",
     &          ifail,nmagmax,ixdiv,xdiv
              stop
            endif

c?            nmagmax=nmagmax-1

            if (ncorn2(1).gt.0) then

+self,if=debug.
              write(lun6,*)
              write(lun6,*)"ireallo, x-cut for magnet:",ireallo,nmagmax
+self.
              ! Magnet has been cut

              ! First piece

c?              nmagmax=nmagmax+1

              ncutpiece=ncutpiece+1

              bpebc(15,nmagmax)=bpebc15
              mothdiv(1,nmagmax)=bpebc15

              mothdiv(2,nmagmax)=ixdiv

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(9,nmagmax)=bc9
              bpebc(10,nmagmax)=bc10

              bpebc0(1,nmagmax)=x02(1)
              bpebc0(2,nmagmax)=y02(1)
              bpebc0(3,nmagmax)=z02(1)

              bpebc0(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn1(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              if (nplan.gt.nplanmax) then
                nplanmax=nplan
                goto 1111
              endif

              ibpecol(nmagmax)=ncol
              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan

+self,if=debug.
              open(unit=97,access='append')
+self.,if=debug.
              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                ibpecorn(iplan,nmagmax)=ncorn+1
                if (ncorn+1.gt.ncornmax) then
                  ncornmax=ncorn+1
                  goto 1111
                endif
                do icorn=1,ncorn
                  bpemag0(1:3,icorn,iplan,nmagmax)=
     &              corn1(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                  write(97,*)"11 ",ireallo,xdiv,nmagmax,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.
                enddo
                ncorn=ncorn+1
                bpemag0(1:3,ncorn,iplan,nmagmax)=
     &            corn1(1:3,1,iplan) !debug 1
              enddo
+self,if=debug.
              close(97)
+self.,if=debug.

              !{ check orientation of planes

              kdmag=nmagmax

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(kdmag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag0(1,icorn,iplan,kdmag)
                  y0=y0+bpemag0(2,icorn,iplan,kdmag)
                  z0=z0+bpemag0(3,icorn,iplan,kdmag)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i
+self,if=debug.
              write(lun6,*)"First piece:",kdmag
+self.
              do iplan=1,nplan

                p1(1)=bpemag0(1,1,iplan,kdmag)
                p1(2)=bpemag0(2,1,iplan,kdmag)
                p1(3)=bpemag0(3,1,iplan,kdmag)

                p2(1)=bpemag0(1,2,iplan,kdmag)
                p2(2)=bpemag0(2,2,iplan,kdmag)
                p2(3)=bpemag0(3,2,iplan,kdmag)

                p3(1)=bpemag0(1,3,iplan,kdmag)
                p3(2)=bpemag0(2,3,iplan,kdmag)
                p3(3)=bpemag0(3,3,iplan,kdmag)

                call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)

                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 1 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              kdmag,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag0(1,1,iplan,kdmag)-x0
                vsy=bpemag0(2,1,iplan,kdmag)-y0
                vsz=bpemag0(3,1,iplan,kdmag)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag0(1:3,icorn,iplan,kdmag)
                  enddo

                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

              ! Second piece

              nmagmax=nmagmax+1
+self,if=debug.
              write(lun6,*)"Second piece:",nmagmax
+self.

              bpebc(15,nmagmax)=bpebc15
              mothdiv(1,nmagmax)=bpebc15

              mothdiv(2,nmagmax)=ixdiv+1

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(9,nmagmax)=bc9
              bpebc(10,nmagmax)=bc10

              bpebc0(1,nmagmax)=x02(2)
              bpebc0(2,nmagmax)=y02(2)
              bpebc0(3,nmagmax)=z02(2)

              bpebc0(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn2(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              if (nplan.gt.nplanmax) then
                nplanmax=nplan
                goto 1111
              endif

              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan
              ibpecol(nmagmax)=ncol

+self,if=debug.
              open(unit=97,access='append')
+self.,if=debug.
              do iplan=1,nplan
                ncorn=ncorn2(iplan)
                if (ncorn+1.gt.ncornmax) then
                  ncornmax=ncorn+1
                  goto 1111
                endif
                ibpecorn(iplan,nmagmax)=ncorn+1
                do icorn=1,ncorn
                  bpemag0(1:3,icorn,iplan,nmagmax)=
     &              corn2(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                  write(97,*)"22 ",ireallo,xdiv,nmagmax,iplan,icorn,
     &              sngl(corn2(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.
                enddo
                ncorn=ncorn+1
                bpemag0(1:3,ncorn,iplan,nmagmax)=
     &            corn2(1:3,1,iplan) !debug 1
              enddo
+self,if=debug.
              close(97)
+self.,if=debug.

              ncorn1=0
              corn1=0.0d0
              ncorn1=ncorn2
              corn1=corn2

              !{ check orientation of planes

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(nmagmax)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,nmagmax)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag0(1,icorn,iplan,nmagmax)
                  y0=y0+bpemag0(2,icorn,iplan,nmagmax)
                  z0=z0+bpemag0(3,icorn,iplan,nmagmax)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i

              do iplan=1,nplan

                p1(1)=bpemag0(1,1,iplan,nmagmax)
                p1(2)=bpemag0(2,1,iplan,nmagmax)
                p1(3)=bpemag0(3,1,iplan,nmagmax)

                p2(1)=bpemag0(1,2,iplan,nmagmax)
                p2(2)=bpemag0(2,2,iplan,nmagmax)
                p2(3)=bpemag0(3,2,iplan,nmagmax)

                p3(1)=bpemag0(1,3,iplan,nmagmax)
                p3(2)=bpemag0(2,3,iplan,nmagmax)
                p3(3)=bpemag0(3,3,iplan,nmagmax)

                call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 2 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              nmagmax,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag0(1,1,iplan,nmagmax)-x0
                vsy=bpemag0(2,1,iplan,nmagmax)-y0
                vsz=bpemag0(3,1,iplan,nmagmax)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag0(1:3,icorn,iplan,nmagmax)
                  enddo

                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

            endif !cut

          enddo !nxdiv

          dydiv=(ydivmax-ydivmin)/fracsum*yfacdiv
c          dydiv=(ydivmax-ydivmin)/nydiv

          do kdmag1=nmagmax-nxdiv+1,nmagmax

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            ydivmin=1.0d30
            ydivmax=-1.0d30
+self,if=debug.
            open(unit=97,access='append')
+self.,if=debug.
            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag0(1:3,icorn,iplan,kdmag1)
+self,if=debug.
                  !w97
                write(97,*)"-9999. ",ireallo," -9999. ",kdmag1,iplan,icorn,
     &            sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag1))
+self.
                if (corn1(2,icorn,iplan).lt.ydivmin)
     &            ydivmin=corn1(2,icorn,iplan)
                if (corn1(2,icorn,iplan).gt.ydivmax)
     &            ydivmax=corn1(2,icorn,iplan)
              enddo
            enddo
+self,if=debug.
            close(97)
+self.,if=debug.

            dydiv=(ydivmax-ydivmin)/fracsum*yfacdiv
            ydiv=bpebc0(2,kdmag1)+ydivmin
c            ydiv=bpebc0(2,kdmag1)+ydivmax

            x02(2)=bpebc0(1,kdmag1)
            y02(2)=bpebc0(2,kdmag1)
            z02(2)=bpebc0(3,kdmag1)
cdebug iydiv 1
            do iydiv=1,nydiv-1

              if (iydiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              ydiv=ydiv+dydiv
c              ydiv=ydiv-dydiv

              !Labor
              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

c              if (ireallo.eq.4.and.kdmag.eq.4) then
+self,if=debug.
              write(lun6,*)"ireallo, iydiv, ydiv:",ireallo,iydiv,ydiv
              open(unit=97,access='append')
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)
                do icorn=1,ncorn
                  !w97
                  write(97,*)"0 ",ireallo,ydiv,kdmag,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag))
                enddo
              enddo
c              endif
              close(97)
+self.

              call undumag_cut_magnet(kdmag,x02,y02,z02, !debug 2
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,2,ydiv,hulltiny,ifail)

              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, iydiv, ydiv:",
     &            ifail,kdmag,iydiv,ydiv
                stop
              endif

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut

+self,if=debug.
                write(lun6,*)"y-cut for magnet:",kdmag
+self.
                ncutpiece=ncutpiece+1

                ! First piece, replaces mother

                bpebc(15,kdmag)=bpebc15
                mothdiv(1,kdmag)=bpebc15
                mothdiv(3,kdmag)=iydiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(9,kdmag)=bc9
                bpebc(10,kdmag)=bc10

                bpebc0(1,kdmag)=x02(1)
                bpebc0(2,kdmag)=y02(1)
                bpebc0(3,kdmag)=z02(1)

                bpebc0(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

+self,if=debug.
                open(unit=97,access='append')
+self.,if=debug.
                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                    write(97,*)"1 ",ireallo,ydiv,kdmag,iplan,icorn,
     &                sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag))
+self.
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 2
                enddo
+self,if=debug.
                close(97)
+self.,if=debug.

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(kdmag)
                  do icorn=1,ibpecorn(iplan,kdmag)-1
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,kdmag)
                    y0=y0+bpemag0(2,icorn,iplan,kdmag)
                    z0=z0+bpemag0(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag0(1,1,iplan,kdmag)
                  p1(2)=bpemag0(2,1,iplan,kdmag)
                  p1(3)=bpemag0(3,1,iplan,kdmag)

                  p2(1)=bpemag0(1,2,iplan,kdmag)
                  p2(2)=bpemag0(2,2,iplan,kdmag)
                  p2(3)=bpemag0(3,2,iplan,kdmag)

                  p3(1)=bpemag0(1,3,iplan,kdmag)
                  p3(2)=bpemag0(2,3,iplan,kdmag)
                  p3(3)=bpemag0(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)

                  if (ifail.ne.0) then
                    write(lun6,*)
                    write(lun6,*)"*** Error 3 in undumag_ini_old: Failure in undumag_bpen"
                    write(lun6,*)"mag, plane:",kdmag,iplan
                    write(lun6,*)
                    do icorn=1,ibpecorn(iplan,kdmag)
                      write(lun6,*)icorn,bpemag0(1:3,icorn,iplan,kdmag)
                    enddo
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,kdmag)-x0
                  vsy=bpemag0(2,1,iplan,kdmag)-y0
                  vsz=bpemag0(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                   bpemag0(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
                write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15
                mothdiv(3,nmagmax)=iydiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc0(1,nmagmax)=x02(2)
                bpebc0(2,nmagmax)=y02(2)
                bpebc0(3,nmagmax)=z02(2)

                bpebc0(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

+self,if=debug.
                open(unit=97,access='append')
+self.,if=debug.
                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
+self,if=debug.
                  !w97
                    write(97,*)"2 ",ireallo,ydiv,kdmag,iplan,icorn,
     &                sngl(corn2(1:3,icorn,iplan)+bpebc0(1:3,nmagmax))
+self.
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 2
                enddo
+self,if=debug.
                close(97)
+self.,if=debug.

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(nmagmax)
                  do icorn=1,ibpecorn(iplan,nmagmax)-1
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag0(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag0(3,icorn,iplan,nmagmax)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag0(1,1,iplan,nmagmax)
                  p1(2)=bpemag0(2,1,iplan,nmagmax)
                  p1(3)=bpemag0(3,1,iplan,nmagmax)

                  p2(1)=bpemag0(1,2,iplan,nmagmax)
                  p2(2)=bpemag0(2,2,iplan,nmagmax)
                  p2(3)=bpemag0(3,2,iplan,nmagmax)

                  p3(1)=bpemag0(1,3,iplan,nmagmax)
                  p3(2)=bpemag0(2,3,iplan,nmagmax)
                  p3(3)=bpemag0(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 4 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,nmagmax)-x0
                  vsy=bpemag0(2,1,iplan,nmagmax)-y0
                  vsz=bpemag0(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag0(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ydivmin=1.0d30
                ydivmax=-1.0d30
                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(2,icorn,iplan).lt.ydivmin)
     &                ydivmin=corn1(2,icorn,iplan)
                    if (corn1(2,icorn,iplan).gt.ydivmax)
     &                ydivmax=corn1(2,icorn,iplan)
                  enddo
                enddo

              endif !cut

              dydiv=dydiv/yfracdiv

            enddo !nydiv

          enddo !kdmag1

          dzdiv=(zdivmax-zdivmin)/nzdiv

          do kdmag1=nmagmax-nxdiv*nydiv+1,nmagmax

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            zdivmin=1.0d30
            zdivmax=-1.0d30
            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag0(1:3,icorn,iplan,kdmag1)
c                write(lun6,*)kdmag1,icorn,iplan,corn1(1:3,icorn,iplan)
                if (corn1(3,icorn,iplan).lt.zdivmin)
     &            zdivmin=corn1(3,icorn,iplan)
                if (corn1(3,icorn,iplan).gt.zdivmax)
     &            zdivmax=corn1(3,icorn,iplan)
              enddo
            enddo

            zdiv=bpebc0(3,kdmag1)+zdivmin

            x02(2)=bpebc0(1,kdmag1)
            y02(2)=bpebc0(2,kdmag1)
            z02(2)=bpebc0(3,kdmag1)

cdebug izdiv 1
            do izdiv=1,nzdiv-1

              if (izdiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              zdiv=zdiv+dzdiv

              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

              call undumag_cut_magnet(kdmag,x02,y02,z02, !debug 3
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,3,zdiv,hulltiny,ifail)

              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, ixdiv, iydiv, izdiv, zdiv:",
     &            ifail,kdmag,ixdiv,iydiv,izdiv
                stop
              endif
c              write(lun6,*)"Nachher:",z02

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut

                ncutpiece=ncutpiece+1
+self,if=debug.
                write(lun6,*)"z-cut for magnet:",kdmag
+self.

                ! First piece, replaces mother

                bpebc(15,kdmag)=bpebc15
                mothdiv(1,kdmag)=bpebc15
                mothdiv(4,kdmag)=izdiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(9,kdmag)=bc9
                bpebc(10,kdmag)=bc10

                bpebc0(1,kdmag)=x02(1)
                bpebc0(2,kdmag)=y02(1)
                bpebc0(3,kdmag)=z02(1)

                bpebc0(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 3
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(kdmag)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,kdmag)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,kdmag)
                    y0=y0+bpemag0(2,icorn,iplan,kdmag)
                    z0=z0+bpemag0(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag0(1,1,iplan,kdmag)
                  p1(2)=bpemag0(2,1,iplan,kdmag)
                  p1(3)=bpemag0(3,1,iplan,kdmag)

                  p2(1)=bpemag0(1,2,iplan,kdmag)
                  p2(2)=bpemag0(2,2,iplan,kdmag)
                  p2(3)=bpemag0(3,2,iplan,kdmag)

                  p3(1)=bpemag0(1,3,iplan,kdmag)
                  p3(2)=bpemag0(2,3,iplan,kdmag)
                  p3(3)=bpemag0(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 5 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                kdmag,iplan
                    write(lun6,*)"icorn,x,y,z:"
                    do icorn=1,ibpecorn(iplan,kdmag)
                      write(lun6,*)icorn,bpemag0(1:3,icorn,iplan,kdmag)
                    enddo
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,kdmag)-x0
                  vsy=bpemag0(2,1,iplan,kdmag)-y0
                  vsz=bpemag0(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag0(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
                write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15
                mothdiv(4,nmagmax)=izdiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc0(1,nmagmax)=x02(2)
                bpebc0(2,nmagmax)=y02(2)
                bpebc0(3,nmagmax)=z02(2)

                bpebc0(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                if (nplan.gt.nplanmax) then
                  nplanmax=nplan
                  goto 1111
                endif

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  if (ncorn+1.gt.ncornmax) then
                    ncornmax=ncorn+1
                    goto 1111
                  endif
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag0(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 3
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(nmagmax)
                  do icorn=1,ibpecorn(iplan,nmagmax)-1
                    i=i+1
                    x0=x0+bpemag0(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag0(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag0(3,icorn,iplan,nmagmax)
c                    write(37,*)"3 ",nmagmax,iplan,icorn,
c     &                sngl(bpemag0(1,icorn,iplan,nmagmax)+bpebc0(1,nmagmax)),
c     &                sngl(bpemag0(2,icorn,iplan,nmagmax)+bpebc0(2,nmagmax)),
c     &                sngl(bpemag0(3,icorn,iplan,nmagmax)+bpebc0(3,nmagmax))
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag0(1,1,iplan,nmagmax)
                  p1(2)=bpemag0(2,1,iplan,nmagmax)
                  p1(3)=bpemag0(3,1,iplan,nmagmax)

                  p2(1)=bpemag0(1,2,iplan,nmagmax)
                  p2(2)=bpemag0(2,2,iplan,nmagmax)
                  p2(3)=bpemag0(3,2,iplan,nmagmax)

                  p3(1)=bpemag0(1,3,iplan,nmagmax)
                  p3(2)=bpemag0(2,3,iplan,nmagmax)
                  p3(3)=bpemag0(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 6 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag0(1,1,iplan,nmagmax)-x0
                  vsy=bpemag0(2,1,iplan,nmagmax)-y0
                  vsz=bpemag0(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag0(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag0(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                zdivmin=1.0d30
                zdivmax=-1.0d30
                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(3,icorn,iplan).lt.zdivmin)
     &                zdivmin=corn1(3,icorn,iplan)
                    if (corn1(3,icorn,iplan).gt.zdivmax)
     &                zdivmax=corn1(3,icorn,iplan)
                  enddo
                enddo

              endif !cut

            enddo !nzdiv

          enddo !kdmag1

        else if (nplan.eq.-11) then

          ncorn=4
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          ncorn=ncorn+1

          if (nang.lt.nangmin) nang=nangmin
          if (nr.lt.1) nr=1
          if (nh.lt.1) nh=1

! cyl magnet, i.e. nplan=-11{

          kcyl=kcyl+1
          magcyl(kcyl,1)=nmagmax

          if (radin.lt.tiny) radin=tiny

          x00=bpebc0(1,nmagmax)
          y00=bpebc0(2,nmagmax)
          z00=bpebc0(3,nmagmax)

          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)

          ip=0
          dphi=angle/nang*grarad1
          dr=(radout-radin)/nr
          dh=height/nh
          r=radin
          do ir=1,2
            h=-height/2.0d0
            do ih=1,2
              phi=-angle/2.0d0*grarad1
              do iphi=1,2
                ip=ip+1
                x1=r*sin(phi)
                y1=h
                z1=r*cos(phi)
                xmoth(ip,nmoth)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1+x00
                ymoth(ip,nmoth)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1+y00
                zmoth(ip,nmoth)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1+z00
                phi=angle/2.0d0*grarad1
              enddo
              h=height/2.0d0
            enddo
            r=radout
          enddo

          jplan=ibpeplano(nmagmax)

          if (ihullallo.eq.0) then
            maxpoints=8
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else
            if (maxpoints.lt.8) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
              maxpoints=8
              allocate(hull(3,maxpoints))
              allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
              allocate(khull(maxpoints))
              allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            endif
          endif

          r=radin+dr/2.0d0
          do ir=1,nr
            h=-height/2.0d0+dh/2.0d0
            do ih=1,nh
              phi=-angle/2.0d0*grarad1+dphi/2.0d0
              do iphi=1,nang

                x0=r*sin(phi)
                y0=h
                z0=r*cos(phi)

                ri=r-dr/2.0d0
                ro=r+dr/2.0d0

                y1=y0-dh/2.0d0
                y2=y0+dh/2.0d0

                x1=ri*sin(phi-dphi/2.0d0)
                z1=ri*cos(phi-dphi/2.0d0)
                x2=ro*sin(phi-dphi/2.0d0)
                z2=ro*cos(phi-dphi/2.0d0)
                x3=ro*sin(phi+dphi/2.0d0)
                z3=ro*cos(phi+dphi/2.0d0)
                x4=ri*sin(phi+dphi/2.0d0)
                z4=ri*cos(phi+dphi/2.0d0)

                xhull(1)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                yhull(1)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                zhull(1)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                xhull(2)=rmat(1,1)*x2+rmat(1,2)*y1+rmat(1,3)*z2
                yhull(2)=rmat(2,1)*x2+rmat(2,2)*y1+rmat(2,3)*z2
                zhull(2)=rmat(3,1)*x2+rmat(3,2)*y1+rmat(3,3)*z2

                xhull(3)=rmat(1,1)*x3+rmat(1,2)*y1+rmat(1,3)*z3
                yhull(3)=rmat(2,1)*x3+rmat(2,2)*y1+rmat(2,3)*z3
                zhull(3)=rmat(3,1)*x3+rmat(3,2)*y1+rmat(3,3)*z3

                xhull(4)=rmat(1,1)*x4+rmat(1,2)*y1+rmat(1,3)*z4
                yhull(4)=rmat(2,1)*x4+rmat(2,2)*y1+rmat(2,3)*z4
                zhull(4)=rmat(3,1)*x4+rmat(3,2)*y1+rmat(3,3)*z4

                xhull(5)=rmat(1,1)*x1+rmat(1,2)*y2+rmat(1,3)*z1
                yhull(5)=rmat(2,1)*x1+rmat(2,2)*y2+rmat(2,3)*z1
                zhull(5)=rmat(3,1)*x1+rmat(3,2)*y2+rmat(3,3)*z1

                xhull(6)=rmat(1,1)*x2+rmat(1,2)*y2+rmat(1,3)*z2
                yhull(6)=rmat(2,1)*x2+rmat(2,2)*y2+rmat(2,3)*z2
                zhull(6)=rmat(3,1)*x2+rmat(3,2)*y2+rmat(3,3)*z2

                xhull(7)=rmat(1,1)*x3+rmat(1,2)*y2+rmat(1,3)*z3
                yhull(7)=rmat(2,1)*x3+rmat(2,2)*y2+rmat(2,3)*z3
                zhull(7)=rmat(3,1)*x3+rmat(3,2)*y2+rmat(3,3)*z3

                xhull(8)=rmat(1,1)*x4+rmat(1,2)*y2+rmat(1,3)*z4
                yhull(8)=rmat(2,1)*x4+rmat(2,2)*y2+rmat(2,3)*z4
                zhull(8)=rmat(3,1)*x4+rmat(3,2)*y2+rmat(3,3)*z4

                npoi=8
                call util_convex_hull_3d(npoi,xhull,yhull,zhull,
     &            khull,kedge,kface,
     &            nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
                if (ifailhull.ne.0.or.nhull.lt.4) then
                  write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &              trim(cline)
                  stop
                endif

                ibpeplano(nmagmax)=nface
                ibpeplan(nmagmax)=nface

                next=1

                gcen=0.0d0
                k=0
                do iplan=1,nface

                  ncorn=kface(next)

                  ncorn=ncorn+1
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn

                    if (icorn.lt.ncorn) then
                      ip=kface(next+icorn)
                      bpemag0(1,icorn,iplan,nmagmax)=xhull(ip)+x00
                      bpemag0(2,icorn,iplan,nmagmax)=yhull(ip)+y00
                      bpemag0(3,icorn,iplan,nmagmax)=zhull(ip)+z00

                      k=k+1
                      gcen(1)=gcen(1)+xhull(ip)+x00
                      gcen(2)=gcen(2)+yhull(ip)+y00
                      gcen(3)=gcen(3)+zhull(ip)+z00

c                      write(99,*)nmagmax,iplan,icorn,bpemag0(1:3,icorn,iplan,nmagmax)
                    else ! icorn.lt.ncorn

                      bpemag0(1,icorn,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                      bpemag0(2,icorn,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                      bpemag0(3,icorn,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)

                    endif ! icorn.lt.ncorn

                  enddo !icorn

                  next=next+ncorn ! here, ncorn is already increamented by 1

                enddo !nface

                gcen=gcen/k

               do iplan=1,nface
                 ncorn=ibpecorn(iplan,nmagmax)
                  do icorn=1,ncorn
                    bpemag0(1:3,icorn,iplan,nmagmax)=
     &                bpemag0(1:3,icorn,iplan,nmagmax)-gcen(1:3)
                  enddo !icorn
                enddo !nface

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15

                mothdiv(2,nmagmax)=ir
                mothdiv(3,nmagmax)=iy
                mothdiv(4,nmagmax)=iphi

                c32=chmag
                write(chmags(1:32,nmagmax),'(a)')c32a(1:32)
                c32=chmoth
                write(chmoths(1:32,nmagmax),'(a)')c32a(1:32)

                bpebc(9,nmagmax)=imat
                bpebc(10,nmagmax)=0

                ibpeplano(nmagmax)=jplan

                bpebc0(1:3,nmagmax)=gcen(1:3)

                x1=xm*bdum
                y1=ym*bdum
                z1=zm*bdum

                bpebc0(4,nmagmax)=
     &            rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                bpebc0(5,nmagmax)=
     &            rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                bpebc0(6,nmagmax)=
     &            rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                bpebc0(7,nmagmax)=1
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                phi=phi+dphi

                nmagmax=nmagmax+1
              enddo
              h=h+dh
            enddo !ih
            r=r+dr
          enddo !ir

          nmagmax=nmagmax-1
          magcyl(kcyl,2)=nmagmax
          ncutpiece=ncutpiece+nr*nang*nh

! cyl magnet, i.e. nplan=-11}

        else ! :nplan>0

! rectangular magnet, i.e. nplan=-6{

          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*,iostat=ieof) xlen,ylen,zlen, nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif

cdebug
          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)
          xmoth(1,nmoth)=x00-xlen/2.0d0
          ymoth(1,nmoth)=y00-ylen/2.0d0
          zmoth(1,nmoth)=z00-zlen/2.0d0

          xmoth(2,nmoth)=x00+xlen/2.0d0
          ymoth(2,nmoth)=y00-ylen/2.0d0
          zmoth(2,nmoth)=z00-zlen/2.0d0

          xmoth(3,nmoth)=x00+xlen/2.0d0
          ymoth(3,nmoth)=y00+ylen/2.0d0
          zmoth(3,nmoth)=z00-zlen/2.0d0

          xmoth(4,nmoth)=x00-xlen/2.0d0
          ymoth(4,nmoth)=y00+ylen/2.0d0
          zmoth(4,nmoth)=z00-zlen/2.0d0

          xmoth(5,nmoth)=x00-xlen/2.0d0
          ymoth(5,nmoth)=y00-ylen/2.0d0
          zmoth(5,nmoth)=z00+zlen/2.0d0

          xmoth(6,nmoth)=x00+xlen/2.0d0
          ymoth(6,nmoth)=y00-ylen/2.0d0
          zmoth(6,nmoth)=z00+zlen/2.0d0

          xmoth(7,nmoth)=x00+xlen/2.0d0
          ymoth(7,nmoth)=y00+ylen/2.0d0
          zmoth(7,nmoth)=z00+zlen/2.0d0

          xmoth(8,nmoth)=x00-xlen/2.0d0
          ymoth(8,nmoth)=y00+ylen/2.0d0
          zmoth(8,nmoth)=z00+zlen/2.0d0

          nmag=nmag+nxdiv*nydiv*nzdiv-1
          kmag2=kmag2+nxdiv*nydiv*nzdiv-1

          dx=xlen/nxdiv

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          dz=zlen/nzdiv

          x00=bpebc0(1,nmagmax)-xlen/2.0d0-dx/2.0d0
          y00=bpebc0(2,nmagmax)+ylen/2.0d0
          z00=bpebc0(3,nmagmax)-zlen/2.0d0-dz/2.0d0

          jplan=ibpeplano(nmagmax)

          nmagmax=nmagmax-1

          ncutpiece=ncutpiece+1
cdebug ixdiv 2
          do ixdiv=1,nxdiv
            x0=x00+dx*ixdiv
            y0=y00
            dy=ylen/fracsum
cdebug iydiv 2
            do iydiv=1,nydiv

              y0=y0-dy/2.0d0

cdebug izdiv 2
              do izdiv=1,nzdiv

                z0=z00+dz*izdiv

                nmagmax=nmagmax+1
                ncutpiece=ncutpiece+1

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15

                mothdiv(2,nmagmax)=ixdiv
                mothdiv(3,nmagmax)=iydiv
                mothdiv(4,nmagmax)=izdiv

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=imat
                bpebc(10,nmagmax)=0

                ibpeplano(nmagmax)=jplan

                bpebc0(1,nmagmax)=x0
                bpebc0(2,nmagmax)=y0
                bpebc0(3,nmagmax)=z0

                bpebc0(4,nmagmax)=xm*bdum
                bpebc0(5,nmagmax)=ym*bdum
                bpebc0(6,nmagmax)=zm*bdum

                bpebc0(7,nmagmax)=-6
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                iplan=1
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=2
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=3
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=4
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=5
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=-dz/2.0d0

                iplan=6
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=3
                bpemag0(1,icorn,iplan,nmagmax)=-dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=2
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=+dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0
                icorn=1
                bpemag0(1,icorn,iplan,nmagmax)=+dx/2.0d0
                bpemag0(2,icorn,iplan,nmagmax)=-dy/2.0d0
                bpemag0(3,icorn,iplan,nmagmax)=+dz/2.0d0

                do iplan=1,6
                  bpemag0(1,5,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,5,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,5,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)
                enddo !iplan

                do iplan=1,6
                  bpemag0(1,5,iplan,nmagmax)=bpemag0(1,1,iplan,nmagmax)
                  bpemag0(2,5,iplan,nmagmax)=bpemag0(2,1,iplan,nmagmax)
                  bpemag0(3,5,iplan,nmagmax)=bpemag0(3,1,iplan,nmagmax)
                enddo !iplan

              enddo !nzdiv

              y0=y0-dy/2.0d0
              dy=dy*yfracdiv

            enddo !nydiv
          enddo !nxdiv
! rectangular magnet, i.e. nplan=-6}

        endif !nplan>0

        if (ncutpiece.lt.nmagmax) then
          nmagmax=ncutpiece
          nmag=ncutpiece
        endif

      enddo !nmagdo

      kmag2=nmagmax

      call util_skip_comment_end(lunbpe,ieof)
      if (ieof.eq.0) then
        read(lunbpe,*)x0,y0,z0
      endif

      if (nmago.eq.-99) then
        close(lunbpe)
        lunbpe=98
      endif !nmago

      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*)nmodule

      if (nmodule.le.0) then
        write(lun6,*)'*** Error in undumag_ini_old: Number of modules is zero'
        stop
      endif

c      nmagmax=nmagmaxo-nmag*ncopy
      nmagmax=nmagmaxo-ncopies
      nmoth=0

      chmothso=chmoths
      do imodul=1,nmodule

        write(chmod,*)imodul
        call util_string_trim(chmod,i1mod,i2mod)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)xmod,ymod,zmod

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(1,1),rotmod(1,2),rotmod(1,3)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(2,1),rotmod(2,2),rotmod(2,3)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)rotmod(3,1),rotmod(3,2),rotmod(3,3)

        call util_determinante(3,rotmod,det,ifail)

        if (ifail.ne.0.or.abs(abs(det)-1.0d0).gt.tiny) then
          write(lun6,*)
     &      '*** Error in undumag_ini_old: Bad rotation matrix'
          write(lun6,*)'magnet, plane: ',imag,iplan
          stop
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)ncopy

        call util_skip_comment_end(lunbpe,ieof)

        read(lunbpe,*)space,vspace(1),vspace(2),vspace(3)

        call util_vnorm(3,vspace,vspace)

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)vbsym(1),vbsym(2),vbsym(3)

        do icopy=1,ncopy

          write(chcop,*)icopy
          call util_string_trim(chcop,i1cop,i2cop)

          do moth=1,nmotho

            nmoth=nmoth+1
            chmoths(1:32,nmoth)=chmothso(1:32,moth)
c            write(lun6,*)imodul,icopy,moth,chmoths(1:32,4)

            npmoth(nmoth)=npmoth(moth)
            matmoth(nmoth)=matmoth(moth)
            ncolmoth(nmoth)=ncolmoth(moth)
            xmoth(1:npmoth(nmoth),nmoth)=xmoth(1:npmoth(moth),moth)
     &        +(icopy-1)*space*vspace(1)
            ymoth(1:npmoth(nmoth),nmoth)=ymoth(1:npmoth(moth),moth)
     &        +(icopy-1)*space*vspace(2)
            zmoth(1:npmoth(nmoth),nmoth)=zmoth(1:npmoth(moth),moth)
     &        +(icopy-1)*space*vspace(3)

          enddo
        enddo !ncopy

        do icopy=1,ncopy

          write(chcop,*)icopy
          call util_string_trim(chcop,i1cop,i2cop)

          do imag=kmag1,kmag2

            nmagmax=nmagmax+1

            ibpecol(nmagmax)=ibpecol(imag)
            ibpeplan(nmagmax)=ibpeplan(imag)
            ibpeplano(nmagmax)=ibpeplano(imag)

            x0=xmod+bpebc0(1,imag)
     &        +(icopy-1)*space*vspace(1)
            y0=ymod+bpebc0(2,imag)
     &        +(icopy-1)*space*vspace(2)
            z0=zmod+bpebc0(3,imag)
     &        +(icopy-1)*space*vspace(3)

            bpebc(1,nmagmax)=x0
            bpebc(2,nmagmax)=y0
            bpebc(3,nmagmax)=z0

            bpebc(4,nmagmax)=bpebc0(4,imag)*vbsym(1)
            bpebc(5,nmagmax)=bpebc0(5,imag)*vbsym(2)
            bpebc(6,nmagmax)=bpebc0(6,imag)*vbsym(3)

            bc=sqrt(bpebc(4,imag)**2+bpebc(5,imag)**2+bpebc(6,imag)**2)
            bpebc(7,nmagmax)=bc

            bpebc(8,nmagmax)=bpebc0(7,imag)
            bpebc15=bpebc(15,imag)

            mothdiv(1:4,nmagmax)=mothdiv(1:4,imag)

            motho=nint(bpebc15)
            moth=nint(bpebc15)
            if (icopy.gt.1) moth=nmotho+(imodul-1)*ncopy+icopy-1
c            moth=nmotho+(imodul-1)*ncopy+icopy-1
c            write(lun6,*)imag,nmagmax,motho,moth

c            if (icopy.gt.1) then
            do ic=1,32
              chmoth(ic:ic)=chmothso(ic,motho)
            enddo
c              write(lun6,*)chmoth
c              write(lun6,*)chmod
c              write(lun6,*)chcop
            call util_string_trim(chmoth,i1moth,i2moth)
            if (i2moth-i1moth+1+i2cop-i1cop+1+i2mod-i1mod+1+2.gt.32) then
              write(lun6,*)
              write(lun6,*)"*** Error in undumag_ini_old: Too long a magnet name: ",
     &          chmoth
              write(lun6,*)"UNDUMAG ABORTED"
              stop
            endif

            if (bpebc(15,nmagmax).eq.0) then
              bpebc(15,nmagmax)=nmagmax
            endif

            if (icopy.gt.1) then
              chmoth=chmoth(i1moth:i2moth)//"_"//chmod(i1mod:i2mod)//
     &          "_"//chcop(i1cop:i2cop)
              do ic=1,32
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo
            else
              chmoths(1:32,nmagmax)=chmothso(1:32,moth)
            endif

            chmags(1:32,nmagmax)=chmags(1:32,imag)

            bpebc(9,nmagmax)=bpebc(9,imag)
            bpebc(10,nmagmax)=0

            vmag=bpebc(1:3,nmagmax)

            bpebc(1,nmagmax)=
     &        rotmod(1,1)*vmag(1)+
     &        rotmod(1,2)*vmag(2)+
     &        rotmod(1,3)*vmag(3)

            bpebc(2,nmagmax)=
     &        rotmod(2,1)*vmag(1)+
     &        rotmod(2,2)*vmag(2)+
     &        rotmod(2,3)*vmag(3)

            bpebc(3,nmagmax)=
     &        rotmod(3,1)*vmag(1)+
     &        rotmod(3,2)*vmag(2)+
     &        rotmod(3,3)*vmag(3)

            do iplan=1,ibpeplan(nmagmax)

              ibpecorn(iplan,nmagmax)=ibpecorn(iplan,imag)

              do icorn=1,ibpecorn(iplan,nmagmax)

                bpemag(1,icorn,iplan,nmagmax)=x0+
     &            bpemag0(1,icorn,iplan,imag)
                bpemag(2,icorn,iplan,nmagmax)=y0+
     &            bpemag0(2,icorn,iplan,imag)
                bpemag(3,icorn,iplan,nmagmax)=z0+
     &            bpemag0(3,icorn,iplan,imag)

c rotation of magnet

                vcorn(1:3)=bpemag(1:3,icorn,iplan,nmagmax)

                bpemag(1,icorn,iplan,nmagmax)=
     &            rotmod(1,1)*vcorn(1)+
     &            rotmod(1,2)*vcorn(2)+
     &            rotmod(1,3)*vcorn(3)

                bpemag(2,icorn,iplan,nmagmax)=
     &            rotmod(2,1)*vcorn(1)+
     &            rotmod(2,2)*vcorn(2)+
     &            rotmod(2,3)*vcorn(3)

                bpemag(3,icorn,iplan,nmagmax)=
     &            rotmod(3,1)*vcorn(1)+
     &            rotmod(3,2)*vcorn(2)+
     &            rotmod(3,3)*vcorn(3)

                vcorn(1:3)=bpemag(1:3,icorn,iplan,nmagmax)

                if (bc.ne.0.0d0.and.vcorn(1).lt.xmin) xmin=vcorn(1)
                if (bc.ne.0.0d0.and.vcorn(1).gt.xmax) xmax=vcorn(1)
                if (bc.ne.0.0d0.and.vcorn(2).lt.ymin) ymin=vcorn(2)
                if (bc.ne.0.0d0.and.vcorn(2).gt.ymax) ymax=vcorn(2)
                if (bc.ne.0.0d0.and.vcorn(3).lt.zmin) zmin=vcorn(3)
                if (bc.ne.0.0d0.and.vcorn(3).gt.zmax) zmax=vcorn(3)

              enddo !icorn

              if (det.lt.0.0d0) then

                do icorn=1,ibpecorn(iplan,nmagmax)
                  ip1=ibpecorn(iplan,nmagmax)-icorn+1
                  shuffle(1,ip1,iplan,nmagmax)=bpemag(1,icorn,iplan,nmagmax)
                  shuffle(2,ip1,iplan,nmagmax)=bpemag(2,icorn,iplan,nmagmax)
                  shuffle(3,ip1,iplan,nmagmax)=bpemag(3,icorn,iplan,nmagmax)
                enddo !icorn

                do icorn=1,ibpecorn(iplan,nmagmax)
                  bpemag(1,icorn,iplan,nmagmax)=
     &              shuffle(1,icorn,iplan,nmagmax)
                  bpemag(2,icorn,iplan,nmagmax)=
     &              shuffle(2,icorn,iplan,nmagmax)
                  bpemag(3,icorn,iplan,nmagmax)=
     &              shuffle(3,icorn,iplan,nmagmax)
                enddo !icorn

              endif !det

            enddo !iplan

          enddo !imag

        enddo !icopy

      enddo !imodul=1,nmodul

      nmag=nmagmax !without special magnets

      allocate(bcmat(3,nmatpoimax,nmatfiles))
      bcmat=0.0d0

      allocate(feh1(nmatpoimax))
      allocate(fem1(nmatpoimax))

      if (isplinefm.ne.0) then
        allocate(fespl1(nmatpoimax))
        allocate(ufespl1(nmatpoimax))
        allocate(fewspl1(nmatpoimax))
        allocate(fewspl2(nmatpoimax))
        allocate(fewspl3(nmatpoimax))
        allocate(fewspl4(nmatpoimax))
      endif

      kmag1=nmagmax+1
      kmag2=nmagmax+nspecmag

* Special magnets
cdebug
      do ispecmag=1,nspecmag

        nmoth=nmoth+1

        nmagmax=nmagmax+1
        bpebc(15,nmagmax)=nmagmax
        bpebc15=bpebc(15,nmagmax)
        mothdiv(1,nmagmax)=bpebc15

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)') cline
        call util_string_split_sep(cline,100,nwords,ipos,'!',istat)
        cline=cline(ipos(1,1):ipos(2,1))
        call util_string_split_sep(cline,100,nwords,ipos,' ',istat)

        if (nwords.eq.5) then
          read(cline,*)x00,y00,z00,chmag,chmoth
        else
          read(cline,*)x00,y00,z00
          write(chmag,*) ispecmag
          call util_string_trim(chmag,nfirst,nlast)
          chmag="smag_" // chmag(nfirst:nlast)
          chmoth="sMag_" // chmag(nfirst:nlast)
        endif

        ifound=0
        do kmag=1,nmagmax
          ifound=1
          do ic=1,32
            if (chmags(ic,kmag).ne.chmag(ic:ic)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.1) exit
        enddo

        if (ifound.ne.0) then
          write(lun6,*)"*** Error in undumag_ini_old: Duplicate magnet name: ",chmag
          stop
        endif

        do ic=1,32
           chmags(ic,nmagmax)=chmag(ic:ic)
           chmoths(ic,nmagmax)=chmoth(ic:ic)
        enddo

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*)bc,xm,ym,zm,imat !magnetization vector M

        if (imat.eq.0) bc=0.0d0

        bpebc(9,nmagmax)=imat
        bpebc(10,nmagmax)=ispecmag

        bdum=sqrt(xm*xm+ym*ym+zm*zm)

        if (bdum.eq.0.0d0.and.abs(bc).gt.0.01) then
          write(lun6,*)
          write(lun6,*)'*** Error in undumag_ini_old: Bad magnetization vector'
          write(lun6,*)'Magnet ',imag
          write(lun6,*)
          stop
        endif

        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,'(a)')cline

        c64='Cyl'
        call util_string_substring(cline,trim(c64),ianf,iend,istat)

        if (istat.eq.0) then
          !Cylinder
          read(cline(4:len_trim(cline)),*)ncol
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)radin,radout,height,angle,nr,nang,nh
          if (angle.gt.360.0d0) angle=360.0d0
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(1,1:3)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(2,1:3)
          if (kechocalc.ne.0) then
            read(lunbpe,'(a)')cline
            write(lun6,*)trim(cline)
            backspace(lunbpe)
          endif
          call util_skip_comment_end(lunbpe,ieof)
          read(lunbpe,*)rmat(3,1:3)
          nplan=-11
          if (bc.ne.0.0d0) nmagcyl=nmagcyl+1

        else ! Cyl

          c64='Block'
          call util_string_substring(cline,trim(c64),ianf,iend,istat)
          if (istat.ne.0) then
            c64='File'
            call util_string_substring(cline,trim(c64),ianf,iend,istat)
            if (istat.ne.0) then
              c64='Corners'
              call util_string_substring(cline,trim(c64),ianf,iend,istat)
              if (istat.ne.0) then
c              c64='Corners'
c              call util_string_substring(cline,trim(c64),ianf,iend,istat)
                read(cline,*)nplan,ncol
              else
                nplan=-10
                cline(ianf:iend)=' -10   '
                read(cline,*)nplan,ncol
              endif
            else
              nplan=-9
              cline(ianf:iend)=' -9 '
            endif
          else
            nplan=-6
            cline(ianf:iend)=' -6  '
          endif

c        call util_skip_comment_end(lunbpe,ieof)
c        read(lunbpe,*)nplan,ncol
          read(cline,*)nplan,ncol

        endif !Cyl

        bdum=bc/bdum

        bpebc0(1,nmagmax)=x00
        bpebc0(2,nmagmax)=y00
        bpebc0(3,nmagmax)=z00

        bpebc0(4,nmagmax)=xm*bdum
        bpebc0(5,nmagmax)=ym*bdum
        bpebc0(6,nmagmax)=zm*bdum

        bpebc0(7,nmagmax)=nplan

        ibpecol(nmagmax)=ncol
        ibpeplano(nmagmax)=nplan
        ibpeplan(nmagmax)=nplan

        if (nplan.gt.0.or.nplan.eq.-9.or.nplan.eq.-10) then

          bpebc(1,nmagmax)=x00
          bpebc(2,nmagmax)=y00
          bpebc(3,nmagmax)=z00

          bpebc(4,nmagmax)=xm*bdum
          bpebc(5,nmagmax)=ym*bdum
          bpebc(6,nmagmax)=zm*bdum

          bpebc(7,nmagmax)=bc
          bpebc(8,nmagmax)=1

c          backspace(lunbpe)
c          read(lunbpe,*)nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          read(cline,*,iostat=ieof) nplan,ncol,nxdiv,nydiv,nzdiv,yfacdiv
          if (ieof.ne.0) then
            yfacdiv=1.0d0
          endif

          if (nxdiv.lt.1) nxdiv=1
          if (nydiv.lt.1) nydiv=1
          if (nzdiv.lt.1) nzdiv=1

          nspecmag=nspecmag+nxdiv*nydiv*nzdiv-1
          kmag2=kmag2+nxdiv*nydiv*nzdiv-1

          xdivmin=1.0d30
          xdivmax=-1.0d30
          ydivmin=1.0d30
          ydivmax=-1.0d30
          zdivmin=1.0d30
          zdivmax=-1.0d30

          ncorn1=0
          ncorn2=0

          gcen=0.0d0
          npoi=0

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          if (nplan.gt.0) then
            ! magnet definition by planes

            npoi=0

            do iplan=1,nplan

              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncorn

              ncorn=ncorn+1

              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  call util_skip_comment_end(lunbpe,ieof)
                  read(lunbpe,*)x0,y0,z0

                  bpemag(1,icorn,iplan,nmagmax)=x0
                  bpemag(2,icorn,iplan,nmagmax)=y0
                  bpemag(3,icorn,iplan,nmagmax)=z0

                  npoi=npoi+1

                  xhull(npoi)=x00+x0
                  yhull(npoi)=y00+y0
                  zhull(npoi)=z00+z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                else ! icorn.lt.ncorn

                  bpemag(1,icorn,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,icorn,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,icorn,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

                vcorn(1:3)=bpemag(1:3,icorn,iplan,nmagmax)

              enddo !icorn

              ncorn1(iplan)=ncorn

            enddo !iplan

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            npmoth(nmoth)=nhull
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,nhull
              kpoi=khull(ipoi)
              x0=xhull(kpoi)
              y0=yhull(kpoi)
              z0=zhull(kpoi)
              xmoth(ipoi,nmoth)=x0
              ymoth(ipoi,nmoth)=y0
              zmoth(ipoi,nmoth)=z0
              gcen(1)=gcen(1)+x0
              gcen(2)=gcen(2)+y0
              gcen(3)=gcen(3)+z0
            enddo

            gcen=gcen/nhull

            ibpeplan(nmagmax)=nplan

            do iplan=1,nplan
              ncorn=ncorn1(iplan)
              do icorn=1,ncorn
                bpemag(1:3,icorn,iplan,nmagmax)=bpebc(1:3,nmagmax)+
     &            bpemag(1:3,icorn,iplan,nmagmax)-gcen
                corn1(1:3,icorn,iplan)=bpemag(1:3,icorn,iplan,nmagmax)
              enddo !icorn
            enddo !nplan

            ! sort points such that normal vectors of planes points outside
            call undumag_sortcorn(2*ncornmax,2*nplanmax,
     &        nplan,ncorn1,corn1,corn2,tiny,ifail)

            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_sortcorn for magnet ",nmagmax
              stop
            else
              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                do icorn=1,ncorn
                  bpemag(1:3,icorn,iplan,nmagmax)=corn2(1:3,icorn,iplan)
                enddo !icorn
              enddo !nplan
            endif

          else if (nplan.eq.-9.or.nplan.eq.-10) then
cxxxxxxxxxx

            call util_skip_comment_end(lunbpe,ieof)

            if (nplan.eq.-9) then

              read(lunbpe,*)cline
              open(newunit=lundum,file=trim(cline))

              npoi=0
              last=1
              gcen=0.0d0

              do while (last.gt.0)
                call util_read_line(lundum,cline,last)
                if (last.gt.0) then
                  npoi=npoi+1
                endif
              enddo

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              rewind(lundum)

              do ipoi=1,npoi
                call util_skip_comment_end(lundum,ieof)
                read(lundum,*)hull(1:3,ipoi)
                gcen=gcen+bpebc(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

              close(lundum)

            else if (nplan.eq.-10) then

              read(lunbpe,*)npoi

              if (maxpoints.eq.0) then
                maxpoints=100
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
                ihullallo=1
              else if (npoi.gt.maxpoints) then
                if (ihullallo.ne.0) then
                  deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
                endif
                maxpoints=npoi
                allocate(hull(3,maxpoints))
                allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
                allocate(khull(maxpoints))
                allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
              endif

              do ipoi=1,npoi
                call util_skip_comment_end(lunbpe,ieof)
                read(lunbpe,*)hull(1:3,ipoi)
                gcen=gcen+bpebc(1:3,nmagmax)+hull(1:3,ipoi)
              enddo

            endif

            xhull(1:npoi)=hull(1,1:npoi)
            yhull(1:npoi)=hull(2,1:npoi)
            zhull(1:npoi)=hull(3,1:npoi)

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &          trim(cline)
              stop
            endif

            gcen=0.0d0
            do ipoi=1,nhull
              korn=khull(nhull)
              gcen=gcen+bpebc(1:3,nmagmax)+hull(1:3,ipoi)
            enddo
            gcen=gcen/nhull

c            khull(1:kfacelast)=kface(1:kfacelast)

            bpebc0(7,nmagmax)=nface
            ibpeplano(nmagmax)=nface
            ibpeplan(nmagmax)=nface

            npmoth(nmoth)=npoi
            matmoth(nmoth)=imat
            ncolmoth(nmoth)=ibpecol(nmagmax)
            do ipoi=1,npoi
              xmoth(ipoi,nmoth)=bpebc(1,nmagmax)+hull(1,ipoi)
              ymoth(ipoi,nmoth)=bpebc(2,nmagmax)+hull(2,ipoi)
              zmoth(ipoi,nmoth)=bpebc(3,nmagmax)+hull(3,ipoi)
              hull(1:3,ipoi)=bpebc(1:3,nmagmax)+hull(1:3,ipoi)-gcen
            enddo

c            bpebc(1:3,nmagmax)=gcen

            x00=bpebc(1,nmagmax)
            y00=bpebc(2,nmagmax)
            z00=bpebc(3,nmagmax)

            next=1
            do iplan=1,nface

              ncorn=kface(next)

              ncorn=ncorn+1
              ibpecorn(iplan,nmagmax)=ncorn

              do icorn=1,ncorn

                if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

                if (icorn.lt.ncorn) then

                  x0=hull(1,kface(next+icorn))
                  y0=hull(2,kface(next+icorn))
                  z0=hull(3,kface(next+icorn))

                  if (x0.lt.xdivmin) xdivmin=x0
                  if (x0.gt.xdivmax) xdivmax=x0
                  if (y0.lt.ydivmin) ydivmin=y0
                  if (y0.gt.ydivmax) ydivmax=y0
                  if (z0.lt.zdivmin) zdivmin=z0
                  if (z0.gt.zdivmax) zdivmax=z0

                  bpemag(1,icorn,iplan,nmagmax)=x0
                  bpemag(2,icorn,iplan,nmagmax)=y0
                  bpemag(3,icorn,iplan,nmagmax)=z0

                  write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 0"

                  corn1(1,icorn,iplan)=x0
                  corn1(2,icorn,iplan)=y0
                  corn1(3,icorn,iplan)=z0

                else ! icorn.lt.ncorn

                  bpemag(1,icorn,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,icorn,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,icorn,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)

                endif ! icorn.lt.ncorn

              enddo !icorn

              ncorn1(iplan)=ncorn

              next=next+ncorn ! here, ncorn is already increamented by 1

            enddo !nface

            nplan=nface

cxxxxxxxxxxxxxx

          endif !nplan

          x00=gcen(1)
          y00=gcen(2)
          z00=gcen(3)

          bpebc(1:3,nmagmax)=gcen

          do iplan=1,nplan

            ncorn=ncorn1(iplan)

            do icorn=1,ncorn-1

              if (icorn.eq.1) write(lun76,'(a,i5)')"*",ncorn-1

              x0=bpemag(1,icorn,iplan,nmagmax)
              y0=bpemag(2,icorn,iplan,nmagmax)
              z0=bpemag(3,icorn,iplan,nmagmax)

              if (x0.lt.xdivmin) xdivmin=x0
              if (x0.gt.xdivmax) xdivmax=x0
              if (y0.lt.ydivmin) ydivmin=y0
              if (y0.gt.ydivmax) ydivmax=y0
              if (z0.lt.zdivmin) zdivmin=z0
              if (z0.gt.zdivmax) zdivmax=z0

              corn1(1,icorn,iplan)=x0
              corn1(2,icorn,iplan)=y0
              corn1(3,icorn,iplan)=z0

              write(lun76,*) x0,y0,z0,nmagmax,iplan,icorn," 1"
c                write(lun6,*)iplan,icorn,sngl(corn1(1:3,icorn,iplan))
            enddo !icorn

          enddo !nplan

          x02(2)=x00
          y02(2)=y00
          z02(2)=z00

          bc04=bpebc(4:7,nmagmax)
          bc8=bpebc(8,nmagmax)
          bc9=bpebc(9,nmagmax)
          bc10=bpebc(10,nmagmax)

          bpebc15=bpebc(15,nmagmax)
          mothdiv(1,nmagmax)=bpebc15

          do ic=1,32
            chmag(ic:ic)=chmags(ic,nmagmax)
            chmoth(ic:ic)=chmoths(ic,nmagmax)
          enddo

          dxdiv=(xdivmax-xdivmin)/nxdiv
          xdiv=bpebc(1,nmagmax)+xdivmin

          ncutpiece=ncutpiece+1
cdebug ixdiv 3
          do ixdiv=1,nxdiv-1

            xdiv=xdiv+dxdiv

            x02(1)=x02(2)
            y02(1)=y02(2)
            z02(1)=z02(2)

            call undumag_cut_magnet(nmagmax,x02,y02,z02, !debug 4
     &        2*nplanmax,2*ncornmax,
     &        ncorn1,corn1,ncorn2,corn2
     &        ,1,xdiv,hulltiny,ifail)
            if (ifail.ne.0) then
              write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, ixdiv, xdiv:",
     &          ifail, nmagmax,ixdiv,xdiv
              stop
            endif

c?            nmagmax=nmagmax-1

c            ncutpiece=ncutpiece+1
            if (ncorn2(1).gt.0) then
              ! Magnet has been cut

              ! First piece
              ncutpiece=ncutpiece+1

c?              nmagmax=nmagmax+1

              bpebc(8,nmagmax)=bc8
              bpebc(15,nmagmax)=bpebc15

              mothdiv(1,nmagmax)=bpebc15
              mothdiv(2,nmagmax)=ixdiv

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(9,nmagmax)=bc9
              bpebc(10,nmagmax)=bc10

              bpebc(1,nmagmax)=x02(1)
              bpebc(2,nmagmax)=y02(1)
              bpebc(3,nmagmax)=z02(1)

              bpebc(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn1(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              ibpecol(nmagmax)=ncol
              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan

              do iplan=1,nplan
                ncorn=ncorn1(iplan)
                ibpecorn(iplan,nmagmax)=ncorn+1
                do icorn=1,ncorn
                  bpemag(1:3,icorn,iplan,nmagmax)=
     &              corn1(1:3,icorn,iplan)
                enddo
                ncorn=ncorn+1
                bpemag(1:3,ncorn,iplan,nmagmax)=
     &            corn1(1:3,1,iplan) !debug 4
              enddo

              !{ check orientation of planes

              kdmag=nmagmax

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(kdmag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag(1,icorn,iplan,kdmag)
                  y0=y0+bpemag(2,icorn,iplan,kdmag)
                  z0=z0+bpemag(3,icorn,iplan,kdmag)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i

              do iplan=1,ibpeplan(kdmag)

                p1(1)=bpemag(1,1,iplan,kdmag)
                p1(2)=bpemag(2,1,iplan,kdmag)
                p1(3)=bpemag(3,1,iplan,kdmag)

                p2(1)=bpemag(1,2,iplan,kdmag)
                p2(2)=bpemag(2,2,iplan,kdmag)
                p2(3)=bpemag(3,2,iplan,kdmag)

                p3(1)=bpemag(1,3,iplan,kdmag)
                p3(2)=bpemag(2,3,iplan,kdmag)
                p3(3)=bpemag(3,3,iplan,kdmag)

                call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 7 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              kdmag,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag(1,1,iplan,kdmag)-x0
                vsy=bpemag(2,1,iplan,kdmag)-y0
                vsz=bpemag(3,1,iplan,kdmag)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag(1:3,icorn,iplan,kdmag)
                  enddo

                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

              ! Second piece

              nmagmax=nmagmax+1
+self,if=debug.
              write(lun6,*)"Second piece:",nmagmax
+self.

              bpebc(8,nmagmax)=bc8
              bpebc(9,nmagmax)=bc9
              bpebc(15,nmagmax)=bpebc15

              mothdiv(1,nmagmax)=bpebc15
              mothdiv(2,nmagmax)=ixdiv+1

              do ic=1,32
                chmags(ic,nmagmax)=chmag(ic:ic)
                chmoths(ic,nmagmax)=chmoth(ic:ic)
              enddo

              bpebc(10,nmagmax)=bc10

              bpebc(1,nmagmax)=x02(2)
              bpebc(2,nmagmax)=y02(2)
              bpebc(3,nmagmax)=z02(2)

              bpebc(4:7,nmagmax)=bc04

              nplan=0
              do i=1,2*nplanmax
                if (ncorn2(i).gt.0) then
                  nplan=nplan+1
                endif
              enddo

              ibpeplan(nmagmax)=nplan
              ibpeplano(nmagmax)=nplan
              ibpecol(nmagmax)=ncol

              do iplan=1,nplan
                ncorn=ncorn2(iplan)
                ibpecorn(iplan,nmagmax)=ncorn+1
                do icorn=1,ncorn
                  bpemag(1:3,icorn,iplan,nmagmax)=
     &              corn2(1:3,icorn,iplan)
                enddo
                ncorn=ncorn+1
                bpemag(1:3,ncorn,iplan,nmagmax)=
     &            corn2(1:3,1,iplan) !debug 4
              enddo

              ncorn1=0
              corn1=0.0d0
              ncorn1=ncorn2
              corn1=corn2

              !{ check orientation of planes

              x0=0.0d0
              y0=0.0d0
              z0=0.0d0

              i=0
              nplan=ibpeplan(nmagmax)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,nmagmax)-1
                do icorn=1,ncorn
                  i=i+1
                  x0=x0+bpemag(1,icorn,iplan,nmagmax)
                  y0=y0+bpemag(2,icorn,iplan,nmagmax)
                  z0=z0+bpemag(3,icorn,iplan,nmagmax)
                enddo ! icorn
              enddo !iplan

              x0=x0/i
              y0=y0/i
              z0=z0/i

              do iplan=1,ibpeplan(nmagmax)

                p1(1)=bpemag(1,1,iplan,nmagmax)
                p1(2)=bpemag(2,1,iplan,nmagmax)
                p1(3)=bpemag(3,1,iplan,nmagmax)

                p2(1)=bpemag(1,2,iplan,nmagmax)
                p2(2)=bpemag(2,2,iplan,nmagmax)
                p2(3)=bpemag(3,2,iplan,nmagmax)

                p3(1)=bpemag(1,3,iplan,nmagmax)
                p3(2)=bpemag(2,3,iplan,nmagmax)
                p3(3)=bpemag(3,3,iplan,nmagmax)

                call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                if (ifail.ne.0) then
                  write(lun6,*)"*** Error 8 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &              nmagmax,iplan
                  stop
                endif

                ! does normal vector point outside?

                vsx=bpemag(1,1,iplan,nmagmax)-x0
                vsy=bpemag(2,1,iplan,nmagmax)-y0
                vsz=bpemag(3,1,iplan,nmagmax)-z0

                if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn
                    corn1(1:3,icorn,iplan)=
     &                bpemag(1:3,icorn,iplan,nmagmax)
                  enddo

                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                corn1(1:3,ncorn+1-icorn,iplan)
                  enddo

                endif

              enddo !nplan
              !} check orientation of planes

            endif !cut

          enddo !nxdiv

c          dydiv=(ydivmax-ydivmin)/nydiv

          do kdmag1=nmagmax-nxdiv+1,nmagmax

            x02(2)=bpebc(1,kdmag1)
            y02(2)=bpebc(2,kdmag1)
            z02(2)=bpebc(3,kdmag1)

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            ydivmin=1.0d30
            ydivmax=-1.0d30

            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag(1:3,icorn,iplan,kdmag1)
                if (corn1(2,icorn,iplan).lt.ydivmin)
     &            ydivmin=corn1(2,icorn,iplan)
                if (corn1(2,icorn,iplan).gt.ydivmax)
     &            ydivmax=corn1(2,icorn,iplan)
              enddo
            enddo

            dydiv=(ydivmax-ydivmin)/fracsum*yfacdiv
            ydiv=bpebc(2,kdmag1)+ydivmin

cdebug iydiv 3
            do iydiv=1,nydiv-1

              if (iydiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              ydiv=ydiv+dydiv
c              ydiv=ydiv-dydiv

              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

              call undumag_cut_magnet(kdmag,x02,y02,z02,  !debug 5
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,2,ydiv,hulltiny,ifail)
              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, iydiv, ydiv:",
     &            ifail, kdmag,iydiv,ydiv
                stop
              endif

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut
                ncutpiece=ncutpiece+1

                ! First piece, replaces mother

                bpebc(8,nmagmax)=bc8
                bpebc(9,kdmag)=bc9
                bpebc(15,kdmag)=bpebc15

                mothdiv(1,kdmag)=bpebc15
                mothdiv(3,kdmag)=iydiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(10,kdmag)=bc10

                bpebc(1,kdmag)=x02(1)
                bpebc(2,kdmag)=y02(1)
                bpebc(3,kdmag)=z02(1)

                bpebc(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 5
                enddo

+self,if=debug.
              write(lun6,*)"ireallo, iydiv, ydiv:",ireallo,iydiv,ydiv
              open(unit=97,access='append')
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,kdmag)
                do icorn=1,ncorn
                  !w97
                  write(97,*)" 222 ",ireallo,ydiv,kdmag,iplan,icorn,
     &              sngl(corn1(1:3,icorn,iplan)+bpebc0(1:3,kdmag))
                enddo
              enddo
c              endif
              close(97)
+self.
                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(kdmag)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,kdmag)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,kdmag)
                    y0=y0+bpemag(2,icorn,iplan,kdmag)
                    z0=z0+bpemag(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag(1,1,iplan,kdmag)
                  p1(2)=bpemag(2,1,iplan,kdmag)
                  p1(3)=bpemag(3,1,iplan,kdmag)

                  p2(1)=bpemag(1,2,iplan,kdmag)
                  p2(2)=bpemag(2,2,iplan,kdmag)
                  p2(3)=bpemag(3,2,iplan,kdmag)

                  p3(1)=bpemag(1,3,iplan,kdmag)
                  p3(2)=bpemag(2,3,iplan,kdmag)
                  p3(3)=bpemag(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 9 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                kdmag,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,kdmag)-x0
                  vsy=bpemag(2,1,iplan,kdmag)-y0
                  vsz=bpemag(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                   bpemag(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
              write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(8,nmagmax)=bc8
                bpebc(15,nmagmax)=bpebc15

                mothdiv(1,nmagmax)=bpebc15
                mothdiv(3,nmagmax)=iydiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc(1,nmagmax)=x02(2)
                bpebc(2,nmagmax)=y02(2)
                bpebc(3,nmagmax)=z02(2)

                bpebc(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 5
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(nmagmax)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,nmagmax)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag(3,icorn,iplan,nmagmax)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag(1,1,iplan,nmagmax)
                  p1(2)=bpemag(2,1,iplan,nmagmax)
                  p1(3)=bpemag(3,1,iplan,nmagmax)

                  p2(1)=bpemag(1,2,iplan,nmagmax)
                  p2(2)=bpemag(2,2,iplan,nmagmax)
                  p2(3)=bpemag(3,2,iplan,nmagmax)

                  p3(1)=bpemag(1,3,iplan,nmagmax)
                  p3(2)=bpemag(2,3,iplan,nmagmax)
                  p3(3)=bpemag(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 10 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,nmagmax)-x0
                  vsy=bpemag(2,1,iplan,nmagmax)-y0
                  vsz=bpemag(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(2,icorn,iplan).lt.ydivmin)
     &                ydivmin=corn1(2,icorn,iplan)
                    if (corn1(2,icorn,iplan).gt.ydivmax)
     &                ydivmax=corn1(2,icorn,iplan)
                  enddo
                enddo

              endif !cut

              dydiv=dydiv/yfracdiv

            enddo !nydiv

          enddo !kdmag

          dzdiv=(zdivmax-zdivmin)/nzdiv

          do kdmag1=nmagmax-nxdiv*nydiv+1,nmagmax

            x02(2)=bpebc(1,kdmag1)
            y02(2)=bpebc(2,kdmag1)
            z02(2)=bpebc(3,kdmag1)

            ncorn1=0
            corn1=0.0d0
            ncorn2=0
            corn2=0.0d0

            nplan=ibpeplan(kdmag1)

            zdivmin=1.0d30
            zdivmax=-1.0d30

            do iplan=1,nplan
              ncorn=ibpecorn(iplan,kdmag1)
              ncorn1(iplan)=ncorn
              do icorn=1,ncorn
                corn1(1:3,icorn,iplan)=bpemag(1:3,icorn,iplan,kdmag1)
                if (corn1(3,icorn,iplan).lt.zdivmin)
     &            zdivmin=corn1(3,icorn,iplan)
                if (corn1(3,icorn,iplan).gt.zdivmax)
     &            zdivmax=corn1(3,icorn,iplan)
              enddo
            enddo

            zdiv=bpebc(3,kdmag1)+zdivmin

cdebug izdiv 3
            do izdiv=1,nzdiv-1

              if (izdiv.eq.1) then
                kdmag=kdmag1
              else
                kdmag=nmagmax
              endif

              zdiv=zdiv+dzdiv

              x02(1)=x02(2)
              y02(1)=y02(2)
              z02(1)=z02(2)

c              write(lun6,*)"Vorher:",kdmag1,kdmag,nmagmax,x02,y02,z02
              call undumag_cut_magnet(kdmag,x02,y02,z02, !debug 6
     &          2*nplanmax,2*ncornmax,
     &          ncorn1,corn1,ncorn2,corn2
     &          ,3,zdiv,hulltiny,ifail)
              if (ifail.ne.0) then
                write(lun6,*)"*** Error in undumag_ini_old: Bad return from undumag_cut_magnet, ifail, mag, izdiv, zdiv:",
     &            ifail,kdmag,izdiv,zdiv
              endif
c              write(lun6,*)"Nachher:",z02

              !kdmag is mother

c              ncutpiece=ncutpiece+1
              if (ncorn2(1).gt.0) then
                ! Magnet has been cut
                ncutpiece=ncutpiece+1

                ! First piece, replaces mother

                bpebc(8,nmagmax)=bc8
                bpebc(15,kdmag)=bpebc15
                mothdiv(1,kdmag)=bpebc15
                mothdiv(4,kdmag)=izdiv

                do ic=1,32
                  chmags(ic,kdmag)=chmag(ic:ic)
                  chmoths(ic,kdmag)=chmoth(ic:ic)
                enddo

                bpebc(9,kdmag)=bc9
                bpebc(10,kdmag)=bc10

                bpebc(1,kdmag)=x02(1)
                bpebc(2,kdmag)=y02(1)
                bpebc(3,kdmag)=z02(1)

                bpebc(4:7,kdmag)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpecol(kdmag)=ncol
                ibpeplan(kdmag)=nplan
                ibpeplano(kdmag)=nplan

                do iplan=1,nplan
                  ncorn=ncorn1(iplan)
                  ibpecorn(iplan,kdmag)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,kdmag)=
     &                corn1(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,kdmag)=
     &              corn1(1:3,1,iplan) !debug 6
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                nplan=ibpeplan(kdmag)
                do iplan=1,nplan
                  ncorn=ibpecorn(iplan,kdmag)-1
                  do icorn=1,ncorn
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,kdmag)
                    y0=y0+bpemag(2,icorn,iplan,kdmag)
                    z0=z0+bpemag(3,icorn,iplan,kdmag)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(kdmag)

                  p1(1)=bpemag(1,1,iplan,kdmag)
                  p1(2)=bpemag(2,1,iplan,kdmag)
                  p1(3)=bpemag(3,1,iplan,kdmag)

                  p2(1)=bpemag(1,2,iplan,kdmag)
                  p2(2)=bpemag(2,2,iplan,kdmag)
                  p2(3)=bpemag(3,2,iplan,kdmag)

                  p3(1)=bpemag(1,3,iplan,kdmag)
                  p3(2)=bpemag(2,3,iplan,kdmag)
                  p3(3)=bpemag(3,3,iplan,kdmag)

                  call undumag_bpen(kdmag,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 11 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                kdmag,iplan
                    write(lun6,*)"icorn,x,y,z:"
                    do icorn=1,ibpecorn(iplan,kdmag)
                      write(lun6,*)icorn,bpemag(1:3,icorn,iplan,kdmag)
                    enddo
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,kdmag)-x0
                  vsy=bpemag(2,1,iplan,kdmag)-y0
                  vsz=bpemag(3,1,iplan,kdmag)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn1(iplan)
                    ibpecorn(iplan,kdmag)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag(1:3,icorn,iplan,kdmag)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,kdmag)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ! Second piece

                nmagmax=nmagmax+1
+self,if=debug.
                write(lun6,*)"Second piece:",nmagmax
+self.

                bpebc(8,nmagmax)=bc8
                bpebc(15,nmagmax)=bpebc15

                mothdiv(1,nmagmax)=bpebc15
                mothdiv(4,nmagmax)=izdiv+1

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=bc9
                bpebc(10,nmagmax)=bc10

                bpebc(1,nmagmax)=x02(2)
                bpebc(2,nmagmax)=y02(2)
                bpebc(3,nmagmax)=z02(2)

                bpebc(4:7,nmagmax)=bc04

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn2(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                ibpeplan(nmagmax)=nplan
                ibpeplano(nmagmax)=nplan
                ibpecol(nmagmax)=ncol

                do iplan=1,nplan
                  ncorn=ncorn2(iplan)
                  ibpecorn(iplan,nmagmax)=ncorn+1
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                corn2(1:3,icorn,iplan)
                  enddo
                  ncorn=ncorn+1
                  bpemag(1:3,ncorn,iplan,nmagmax)=
     &              corn2(1:3,1,iplan) !debug 6
                enddo

                !{ check orientation of planes

                x0=0.0d0
                y0=0.0d0
                z0=0.0d0

                i=0
                do iplan=1,ibpeplan(nmagmax)
                  do icorn=1,ibpecorn(iplan,nmagmax)-1
                    i=i+1
                    x0=x0+bpemag(1,icorn,iplan,nmagmax)
                    y0=y0+bpemag(2,icorn,iplan,nmagmax)
                    z0=z0+bpemag(3,icorn,iplan,nmagmax)
                  enddo ! icorn
                enddo !iplan

                x0=x0/i
                y0=y0/i
                z0=z0/i

                do iplan=1,ibpeplan(nmagmax)

                  p1(1)=bpemag(1,1,iplan,nmagmax)
                  p1(2)=bpemag(2,1,iplan,nmagmax)
                  p1(3)=bpemag(3,1,iplan,nmagmax)

                  p2(1)=bpemag(1,2,iplan,nmagmax)
                  p2(2)=bpemag(2,2,iplan,nmagmax)
                  p2(3)=bpemag(3,2,iplan,nmagmax)

                  p3(1)=bpemag(1,3,iplan,nmagmax)
                  p3(2)=bpemag(2,3,iplan,nmagmax)
                  p3(3)=bpemag(3,3,iplan,nmagmax)

                  call undumag_bpen(nmagmax,iplan,p1,p2,p3,vnormlab,ifail)
                  if (ifail.ne.0) then
                    write(lun6,*)"*** Error 12 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &                nmagmax,iplan
                    stop
                  endif

                  ! does normal vector point outside?

                  vsx=bpemag(1,1,iplan,nmagmax)-x0
                  vsy=bpemag(2,1,iplan,nmagmax)-y0
                  vsz=bpemag(3,1,iplan,nmagmax)-z0

                  if (vsx*vnormlab(1)+vsy*vnormlab(2)+vsz*vnormlab(3).lt.0.0d0) then

                    ncorn=ncorn2(iplan)
                    ibpecorn(iplan,nmagmax)=ncorn

                    do icorn=1,ncorn
                      corn1(1:3,icorn,iplan)=
     &                  bpemag(1:3,icorn,iplan,nmagmax)
                    enddo

                    do icorn=1,ncorn
                      bpemag(1:3,icorn,iplan,nmagmax)=
     &                  corn1(1:3,ncorn+1-icorn,iplan)
                    enddo

                  endif

                enddo !nplan
                !} check orientation of planes

                ncorn1=0
                corn1=0.0d0
                ncorn1=ncorn2
                corn1=corn2

                nplan=0
                do i=1,2*nplanmax
                  if (ncorn1(i).gt.0) then
                    nplan=nplan+1
                  endif
                enddo

                zdivmin=1.0d30
                zdivmax=-1.0d30
                do iplan=1,nplan
                  do icorn=1,ncorn
                    if (corn1(3,icorn,iplan).lt.zdivmin)
     &                zdivmin=corn1(3,icorn,iplan)
                    if (corn1(3,icorn,iplan).gt.zdivmax)
     &                zdivmax=corn1(3,icorn,iplan)
                  enddo
                enddo

              endif !cut

            enddo !nzdiv

          enddo !kdmag

        else if (nplan.eq.-11) then

          ncorn=4
          if (ncorn+1.gt.ncornmax) ncornmax=ncorn+1
          ncorn=ncorn+1

          nangmin=1+abs(angle)/(90.0d0+tiny)

          if (nang.lt.nangmin) nang=nangmin
          if (nr.lt.1) nr=1
          if (nh.lt.1) nh=1

          nmagdiv=nmagdiv+nr*nang*nh

! cyl magnet, i.e. nplan=-11{

          kcyl=kcyl+1
          magcyl(kcyl,1)=nmagmax

          if (radin.lt.tiny) radin=tiny

          x00=bpebc0(1,nmagmax)
          y00=bpebc0(2,nmagmax)
          z00=bpebc0(3,nmagmax)

          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)

          ip=0
          dphi=angle/nang*grarad1
          dr=(radout-radin)/nr
          dh=height/nh
          r=radin
          do ir=1,2
            h=-height/2.0d0
            do ih=1,2
              phi=-angle/2.0d0*grarad1
              do iphi=1,2
                ip=ip+1
                x1=r*sin(phi)
                y1=h
                z1=r*cos(phi)
                xmoth(ip,nmoth)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1+x00
                ymoth(ip,nmoth)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1+y00
                zmoth(ip,nmoth)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1+z00
                phi=angle/2.0d0*grarad1
              enddo
              h=height/2.0d0
            enddo
            r=radout
          enddo
cBau
          r=radin
          jplan=ibpeplano(nmagmax)

          if (ihullallo.eq.0) then
            maxpoints=8
            allocate(hull(3,maxpoints))
            allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
            allocate(khull(maxpoints))
            allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            ihullallo=1
          else
            if (maxpoints.lt.8) then
              deallocate(hull,xhull,yhull,zhull,khull,kedge,kface)
              maxpoints=8
              allocate(hull(3,maxpoints))
              allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
              allocate(khull(maxpoints))
              allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))
            endif
          endif

          do ir=1,nr
            h=-height/2.0d0+dh/2.0d0
            do ih=1,nh
              phi=-angle/2.0d0*grarad1+dphi/2.0d0
              do iphi=1,nang

                x0=r*sin(phi)
                y0=h
                z0=r*cos(phi)

                ri=radin
                ro=radout
                y1=y0-dh/2.0d0
                y2=y0+dh/2.0d0

                x1=ri*sin(phi-dphi/2.0d0)
                z1=ri*cos(phi-dphi/2.0d0)
                x2=ro*sin(phi-dphi/2.0d0)
                z2=ro*cos(phi-dphi/2.0d0)
                x3=ro*sin(phi+dphi/2.0d0)
                z3=ro*cos(phi+dphi/2.0d0)
                x4=ri*sin(phi+dphi/2.0d0)
                z4=ri*cos(phi+dphi/2.0d0)

                xhull(1)=rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                yhull(1)=rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                zhull(1)=rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                xhull(2)=rmat(1,1)*x2+rmat(1,2)*y1+rmat(1,3)*z2
                yhull(2)=rmat(2,1)*x2+rmat(2,2)*y1+rmat(2,3)*z2
                zhull(2)=rmat(3,1)*x2+rmat(3,2)*y1+rmat(3,3)*z2

                xhull(3)=rmat(1,1)*x3+rmat(1,2)*y1+rmat(1,3)*z3
                yhull(3)=rmat(2,1)*x3+rmat(2,2)*y1+rmat(2,3)*z3
                zhull(3)=rmat(3,1)*x3+rmat(3,2)*y1+rmat(3,3)*z3

                xhull(4)=rmat(1,1)*x4+rmat(1,2)*y1+rmat(1,3)*z4
                yhull(4)=rmat(2,1)*x4+rmat(2,2)*y1+rmat(2,3)*z4
                zhull(4)=rmat(3,1)*x4+rmat(3,2)*y1+rmat(3,3)*z4

                xhull(5)=rmat(1,1)*x1+rmat(1,2)*y2+rmat(1,3)*z1
                yhull(5)=rmat(2,1)*x1+rmat(2,2)*y2+rmat(2,3)*z1
                zhull(5)=rmat(3,1)*x1+rmat(3,2)*y2+rmat(3,3)*z1

                xhull(6)=rmat(1,1)*x2+rmat(1,2)*y2+rmat(1,3)*z2
                yhull(6)=rmat(2,1)*x2+rmat(2,2)*y2+rmat(2,3)*z2
                zhull(6)=rmat(3,1)*x2+rmat(3,2)*y2+rmat(3,3)*z2

                xhull(7)=rmat(1,1)*x3+rmat(1,2)*y2+rmat(1,3)*z3
                yhull(7)=rmat(2,1)*x3+rmat(2,2)*y2+rmat(2,3)*z3
                zhull(7)=rmat(3,1)*x3+rmat(3,2)*y2+rmat(3,3)*z3

                xhull(8)=rmat(1,1)*x4+rmat(1,2)*y2+rmat(1,3)*z4
                yhull(8)=rmat(2,1)*x4+rmat(2,2)*y2+rmat(2,3)*z4
                zhull(8)=rmat(3,1)*x4+rmat(3,2)*y2+rmat(3,3)*z4

                npoi=8
                call util_convex_hull_3d(npoi,xhull,yhull,zhull,
     &            khull,kedge,kface,
     &            nhull,nedge,nface,kfacelast,hulltiny,ifailhull)
                if (ifailhull.ne.0.or.nhull.lt.4) then
                  write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for ",
     &              trim(cline)
                  stop
                endif

                ibpeplano(nmagmax)=nface
                ibpeplan(nmagmax)=nface

                next=1

                gcen=0.0d0
                k=0
                do iplan=1,nface

                  ncorn=kface(next)

                  ncorn=ncorn+1
                  ibpecorn(iplan,nmagmax)=ncorn

                  do icorn=1,ncorn

                    if (icorn.lt.ncorn) then
                      ip=kface(next+icorn)
                      bpemag(1,icorn,iplan,nmagmax)=xhull(ip)+x00
                      bpemag(2,icorn,iplan,nmagmax)=yhull(ip)+y00
                      bpemag(3,icorn,iplan,nmagmax)=zhull(ip)+z00

                      k=k+1
                      gcen(1)=gcen(1)+xhull(ip)+x00
                      gcen(2)=gcen(2)+yhull(ip)+y00
                      gcen(3)=gcen(3)+zhull(ip)+z00

c                      write(99,*)nmagmax,iplan,icorn,bpemag0(1:3,icorn,iplan,nmagmax)
                    else ! icorn.lt.ncorn

                      bpemag(1,icorn,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                      bpemag(2,icorn,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                      bpemag(3,icorn,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)

                    endif ! icorn.lt.ncorn

                  enddo !icorn

                  next=next+ncorn ! here, ncorn is already increamented by 1

                enddo !nface

                gcen=gcen/k

               do iplan=1,nface
                 ncorn=ibpecorn(iplan,nmagmax)
                  do icorn=1,ncorn
                    bpemag(1:3,icorn,iplan,nmagmax)=
     &                bpemag(1:3,icorn,iplan,nmagmax)-gcen(1:3)
                  enddo !icorn
                enddo !nface

                bpebc(15,nmagmax)=bpebc15
                mothdiv(1,nmagmax)=bpebc15

                mothdiv(2,nmagmax)=ir
                mothdiv(3,nmagmax)=iy
                mothdiv(4,nmagmax)=iphi

                c32=chmag
                write(chmags(1:32,nmagmax),'(a)')c32a(1:32)
                c32=chmoth
                write(chmoths(1:32,nmagmax),'(a)')c32a(1:32)

                bpebc(9,nmagmax)=imat
                bpebc(10,nmagmax)=0

                ibpeplano(nmagmax)=jplan

                bpebc(1:3,nmagmax)=gcen(1:3)

                x1=xm*bdum
                y1=ym*bdum
                z1=zm*bdum

                bpebc(4,nmagmax)=
     &            rmat(1,1)*x1+rmat(1,2)*y1+rmat(1,3)*z1
                bpebc(5,nmagmax)=
     &            rmat(2,1)*x1+rmat(2,2)*y1+rmat(2,3)*z1
                bpebc(6,nmagmax)=
     &            rmat(3,1)*x1+rmat(3,2)*y1+rmat(3,3)*z1

                bpebc(7,nmagmax)=bc
                bpebc(8,nmagmax)=1
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                phi=phi+dphi

                nspecmag=nspecmag+1
                nmagmax=nmagmax+1
              enddo
              h=h+dh
            enddo !ih
            r=r+dr
          enddo !ir

          nspecmag=nspecmag-1
          nmagmax=nmagmax-1
          magcyl(kcyl,2)=nmagmax
          ncutpiece=ncutpiece+nr*nang*nh

! cyl magnet, i.e. nplan=-11}
        else ! nplan>0

! rectangular special magnet, i.e. nplan=-6{

          call util_skip_comment_end(lunbpe,ieof)

          read(lunbpe,*)xlen,ylen,zlen, nxdiv,nydiv,nzdiv

c          imag=nmagmax+nxdiv*nydiv*nzdiv-1

          dx=xlen/nxdiv

          fracsum=0.0d0
          ! yfracdiv**(nydiv-1)=yfacdiv
          ! ln(yfracdiv)*(nydiv-1)=ln(yfacdiv)
          if (nydiv.gt.1) then
            yfracdiv=exp(log(yfacdiv)/(nydiv-1))
          else
            yfracdiv=1.0d0
          endif
          do iydiv=0,nydiv-1
            fracsum=fracsum+yfracdiv**iydiv
          enddo

          dz=zlen/nzdiv

          x0=bpebc0(1,nmagmax)-xlen/2.0d0
          y0=bpebc0(2,nmagmax)-ylen/2.0d0
          z0=bpebc0(3,nmagmax)-zlen/2.0d0

          if (bc.ne.0.0d0.and.xmin.gt.x0) xmin=x0
          if (bc.ne.0.0d0.and.ymin.gt.y0) ymin=y0
          if (bc.ne.0.0d0.and.zmin.gt.z0) zmin=z0

          x0=x0+xlen
          y0=y0+ylen
          z0=z0+zlen

          if (bc.ne.0.0d0.and.xmax.lt.x0) xmax=x0
          if (bc.ne.0.0d0.and.ymax.lt.y0) ymax=y0
          if (bc.ne.0.0d0.and.zmax.lt.z0) zmax=z0

          x00=bpebc0(1,nmagmax)-xlen/2.0d0-dx/2.0d0
          y00=bpebc0(2,nmagmax)+ylen/2.0d0
          z00=bpebc0(3,nmagmax)-zlen/2.0d0-dz/2.0d0
cdebug
          npmoth(nmoth)=8
          matmoth(nmoth)=imat
          ncolmoth(nmoth)=ibpecol(nmagmax)

          x0=x0-xlen/2.0
          y0=y0-ylen/2.0
          z0=z0-zlen/2.0
          xmoth(1,nmoth)=x0-xlen/2.0d0
          ymoth(1,nmoth)=y0-ylen/2.0d0
          zmoth(1,nmoth)=z0-zlen/2.0d0

          xmoth(2,nmoth)=x0+xlen/2.0d0
          ymoth(2,nmoth)=y0-ylen/2.0d0
          zmoth(2,nmoth)=z0-zlen/2.0d0

          xmoth(3,nmoth)=x0+xlen/2.0d0
          ymoth(3,nmoth)=y0+ylen/2.0d0
          zmoth(3,nmoth)=z0-zlen/2.0d0

          xmoth(4,nmoth)=x0-xlen/2.0d0
          ymoth(4,nmoth)=y0+ylen/2.0d0
          zmoth(4,nmoth)=z0-zlen/2.0d0

          xmoth(5,nmoth)=x0-xlen/2.0d0
          ymoth(5,nmoth)=y0-ylen/2.0d0
          zmoth(5,nmoth)=z0+zlen/2.0d0

          xmoth(6,nmoth)=x0+xlen/2.0d0
          ymoth(6,nmoth)=y0-ylen/2.0d0
          zmoth(6,nmoth)=z0+zlen/2.0d0

          xmoth(7,nmoth)=x0+xlen/2.0d0
          ymoth(7,nmoth)=y0+ylen/2.0d0
          zmoth(7,nmoth)=z0+zlen/2.0d0

          xmoth(8,nmoth)=x0-xlen/2.0d0
          ymoth(8,nmoth)=y0+ylen/2.0d0
          zmoth(8,nmoth)=z0+zlen/2.0d0

          jplan=ibpeplano(nmagmax)

          imag=nmagmax
          bpebc(15,nmagmax)=nmagmax

          mothdiv(1,nmagmax)=nmagmax

          do ic=1,32
            chmag(ic:ic)=chmags(ic,nmagmax)
            chmoth(ic:ic)=chmoths(ic,nmagmax)
          enddo

          nmagmax=nmagmax-1

          ncutpiece=ncutpiece+1
cdebug ixdiv 4
          do ixdiv=1,nxdiv
            x0=x00+dx*ixdiv
            y0=y00
            dy=ylen/fracsum
cdebug iydiv 4
            do iydiv=1,nydiv
              y0=y0-dy/2.0d0
cdebug izdiv 4
              do izdiv=1,nzdiv

                z0=z00+dz*izdiv

                nmagmax=nmagmax+1

                bpebc(1,nmagmax)=x0
                bpebc(2,nmagmax)=y0
                bpebc(3,nmagmax)=z0

                bpebc(4,nmagmax)=bpebc0(4,imag)
                bpebc(5,nmagmax)=bpebc0(5,imag)
                bpebc(6,nmagmax)=bpebc0(6,imag)

                bc=sqrt(bpebc(4,imag)**2+bpebc(5,imag)**2+bpebc(6,imag)**2)
                bpebc(7,nmagmax)=bc
c                write(lun6,*) nmagmax,bc

                bpebc(8,nmagmax)=bpebc0(7,imag)
                bpebc(15,nmagmax)=bpebc15

                mothdiv(1,nmagmax)=bpebc15
                mothdiv(2,nmagmax)=ixdiv
                mothdiv(3,nmagmax)=iydiv
                mothdiv(4,nmagmax)=izdiv

                do ic=1,32
                  chmags(ic,nmagmax)=chmag(ic:ic)
                  chmoths(ic,nmagmax)=chmoth(ic:ic)
                enddo

                bpebc(9,nmagmax)=imat

                ibpeplano(nmagmax)=jplan

                bpebc0(1,nmagmax)=x0
                bpebc0(2,nmagmax)=y0
                bpebc0(3,nmagmax)=z0

                bpebc0(4,nmagmax)=xm*bdum
                bpebc0(5,nmagmax)=ym*bdum
                bpebc0(6,nmagmax)=zm*bdum

                bpebc0(7,nmagmax)=-6
                ibpeplan(nmagmax)=6
                ibpecol(nmagmax)=ncol

                iplan=1
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=2
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=3
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=4
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=5
                ibpecorn(iplan,nmagmax)=5
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0-dz/2.0d0

                iplan=6
                ibpecorn(iplan,nmagmax)=5
                icorn=4
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=3
                bpemag(1,icorn,iplan,nmagmax)=x0-dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=2
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0+dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0
                icorn=1
                bpemag(1,icorn,iplan,nmagmax)=x0+dx/2.0d0
                bpemag(2,icorn,iplan,nmagmax)=y0-dy/2.0d0
                bpemag(3,icorn,iplan,nmagmax)=z0+dz/2.0d0

                do iplan=1,6
                  bpemag(1,5,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,5,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,5,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)
                enddo !iplan

                do iplan=1,6
                  bpemag(1,5,iplan,nmagmax)=bpemag(1,1,iplan,nmagmax)
                  bpemag(2,5,iplan,nmagmax)=bpemag(2,1,iplan,nmagmax)
                  bpemag(3,5,iplan,nmagmax)=bpemag(3,1,iplan,nmagmax)
                enddo !iplan

              enddo !nzdiv
              y0=y0-dy/2.0d0
              dy=dy*yfracdiv
            enddo !nydiv
          enddo !nxdiv
! rectangular magnet, i.e. nplan=-6}

        endif !nplan>0

      enddo !nspecmag

      do imag=kmag1,nmagmax
        if (bpebc(8,imag).eq.1.and.bpebc(7,imag).ne.0.0d0) then
          do iplan=1,ibpeplan(imag)
            do icorn=1,ibpecorn(iplan,imag)
              x0=bpemag(1,icorn,iplan,imag)+bpebc(1,imag)
              y0=bpemag(2,icorn,iplan,imag)+bpebc(2,imag)
              z0=bpemag(3,icorn,iplan,imag)+bpebc(3,imag)
              bpemag(1,icorn,iplan,imag)=x0
              bpemag(2,icorn,iplan,imag)=y0
              bpemag(3,icorn,iplan,imag)=z0
              if (x0.lt.xmin) xmin=x0
              if (x0.gt.xmax) xmax=x0
              if (y0.lt.ymin) ymin=y0
              if (y0.gt.ymax) ymax=y0
              if (z0.lt.zmin) zmin=z0
              if (z0.gt.zmax) zmax=z0
            enddo
          enddo
        endif
      enddo

      call util_skip_comment(lunbpe)
      read(lunbpe,*)x0,y0,z0

      nmag=nmagmax !includes now special magnets

      open(newunit=lunmag,file='undumag.run',status='old')
      read(lunmag,'(a)')cundutit
      close(lunmag)
      cundutit(1:1)='*'

cdebug material
      write(lun6,*)
      write(lun6,*) "Material files (material number, material type, mode, filename):"
      write(lun6,*)
      call util_skip_comment_end(lunbpe,ieof)
      read(lunbpe,*) imatfile
      do kmat=1,nmatfiles
        call util_skip_comment_end(lunbpe,ieof)
        read(lunbpe,*) imat ,lmat, mapmode, cfile
        nmatpoi=0
        bcmo=-1.0d30
        hmato=-1.0d30
        open(newunit=lunmat,file=trim(cfile),status='old')
        write(lun6,*)imat,lmat,mapmode,"      ",trim(cfile)
        nline=0

115     call util_skip_comment_end(lunmat,ieof)
        if (ieof.ne.0) goto 995
        perksi=0.0d0
        ! lmat = 1: Anisotropic magnet material with an easy axis
        !           mapmode=1: Linear material
        !           mapmode=2: Non-linear material

        if (lmat.eq.1) then

          if (mapmode.eq.1) then

            nline=nline+1

            if (nline.gt.1) then
              write(lun6,*)"*** Error in undumag_ini_old ***"
              write(lun6,*)"*** Material file for mapmode 1 must contain only one data line ***"
              write(lun6,*)"File: ,",trim(cfile)
              stop
            endif

            read(lunmat,*)bcmat(2:3,1,kmat) ! read mu=1.+parksi and perksi
            bcmat(2,1,kmat)=bcmat(2,1,kmat)-1.0d0

          else if (mapmode.eq.2) then
            read(lunmat,*)hmat,bcm,perksi
c              if (bcm.ne.bcmo.or.hmato.ne.hmat) then
c                nmatpoi=nmatpoi+1
c                bcmat(1,nmatpoi,kmat)=hmat
c                bcmat(2,nmatpoi,kmat)=bcm
c                bcmat(3,nmatpoi,kmat)=perksi
c              endif
            if (bcm.ne.bcmo) then
c                nmatpoi=nmatpoi+1
            endif
            bcmat(1,nmatpoi,kmat)=hmat
            bcmat(2,nmatpoi,kmat)=bcm
            bcmat(3,nmatpoi,kmat)=perksi
            bcmo=bcm
            hmato=hmat
          else
            write(lun6,*)"*** Bad material mode found in input file ***"
            stop
          endif
          goto 115
        else if (lmat.eq.2) then
            ! lmat = 2: Isotropic material
            if (mapmode.eq.0
     &          .or.mapmode.eq.2
     &          .or.mapmode.eq.3
     &          .or.mapmode.eq.4
     &          .or.mapmode.eq.5
     &          .or.mapmode.eq.6
     &          .or.mapmode.eq.7
     &          .or.mapmode.eq.8
     &          ) then
              read(lunmat,*)hmat,bcm
            else
              write(lun6,*)"*** Bad material mode found in input file ***"
              stop
            endif
c            if (bcm.ne.bcmo.or.hmato.ne.hmat) then
            if (bcm.ne.bcmo) then
              nmatpoi=nmatpoi+1
            endif
            bcmat(1,nmatpoi,kmat)=hmat
            bcmat(2,nmatpoi,kmat)=bcm
            bcmat(3,nmatpoi,kmat)=perksi
            if (
     &          mapmode.eq.2
     &          .or.mapmode.eq.3
     &          .or.mapmode.eq.4
     &          .or.mapmode.eq.5
     &          .or.mapmode.eq.6
     &          .or.mapmode.eq.7
     &          .or.mapmode.eq.8
     &          ) then
              if (mapmode.eq.3.and.hmat.eq.0.0d0) hmat=1.0d-30
              if (mapmode.eq.3.and.bcm.eq.0.0d0) bcm=1.0d-30
              feh1(nmatpoi)=hmat
              fem1(nmatpoi)=bcm
              bcmo=bcm
              hmato=hmat
            endif
c            endif
            goto 115
          else
            write(lun6,*)"*** Bad material type found in input file ***"
            write(lun6,*)"*** Must be 1 for anisotropic or 2 for isotropic material ***"
            stop
          endif !lmat

995     continue

        matmaps(1,kmat)=imat
        matmaps(2,kmat)=lmat
        matmaps(3,kmat)=mapmode
        matmaps(4,kmat)=nmatpoi

        close(lunmat)

        if (mapmode.gt.1.and.nmatpoi.lt.2) then
          write(lun6,*)"*** Error in undumag_ini_old ***"
          write(lun6,*)"*** Material file for mapmode > 1 must contain more then one data line ***"
          write(lun6,*)"File: ,",trim(cfile)
          stop
        endif
        if (lmat.eq.2.and.isplinefm.ne.0) call util_spline_coef(feh1,fem1,nmatpoi,
     &    0.0d0,0.0d0,fespl1,fewspl1,fewspl2,fewspl3,fewspl4)

      enddo !nmatfiles

      call util_skip_comment_end(lunbpe,ieof)
      if (ieof.ne.0) goto 9977

      read(lunbpe,'(a)')cline

      xcwmin=1.0e30
      xcwmax=-1.0e30

      if (cline.eq.'Coils') then

        nlines=0
777     read(lunbpe,'(a)')cline

        if (cline.ne.'EndCoils') then
          nlines=nlines+1
          goto 777
        endif

        if (nlines.gt.0) then

          do i=1,nlines+1
            backspace(lunbpe)
          enddo

          ncwires=0
          nrace=0
          nwind=0
          ncrace=0
          narc=0
          ncarc=0
          nrbar=0
          nthwir=0

          do i=1,nlines+1

            call util_skip_comment_end(lunbpe,ieof)
            read(lunbpe,'(a)')cline

            if (cline.eq.'EndCoils') then
              exit
            else if (cline.eq.'Filaments') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncfila
              if (ncfila.gt.0) then
                luncoi=lunbpe
              else
                ncfila=0
                open(newunit=luncoi,file=cline)
                call util_skip_comment_end(lunbpe,ieof)
                do while(ieof.eq.0)
                  read(luncoi,*)curr,x1,y1,z1,x2,y2,z2
                  ncfila=ncfila+1
                  call util_skip_comment_end(lunbpe,ieof)
                enddo
                rewind(luncoi)
              endif
              do k=1,ncfila
                call util_skip_comment_end(luncoi,ieof)
                read(luncoi,*)curr,x1,y1,z1,x2,y2,z2
                if (((x2-x1)**2+(y2-y1)**2+(z2-z1)**2)*curr.ne.0.0d0) then
                  ncwires=ncwires+1
                  if (x1.lt.xcwmin) xcwmin=x1
                  if (x2.lt.xcwmin) xcwmin=x2
                  if (x1.gt.xcwmax) xcwmax=x1
                  if (x2.gt.xcwmax) xcwmax=x2
                endif
                if (luncoi.ne.lunbpe) close(luncoi)
              enddo !ncfila
            else if (cline.eq.'RectWindings') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)wind19
              nwind=nwind+1
            else if (cline.eq.'Rectangular') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr,x,y,z,vx,vy,vz,phi,xlen
              nrace=nrace+1
            else if (cline.eq.'RectangCirc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              if (curr.ne.0.0d0) ncrace=ncrace+1
            else if (cline.eq.'RectArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
              if (curr.ne.0.0d0) narc=narc+1
            else if (cline.eq.'CircArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
              if (curr.ne.0.0d0) ncarc=ncarc+1
            else if (cline.eq.'RectBar') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              if (curr.ne.0.0d0) nrbar=nrbar+1
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
            else if (cline.eq.'ThickWire') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)curr
              if (curr.ne.0.0d0) nthwir=nthwir+1
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)dum
            endif !key
          enddo !nlines

          if (ncwires.gt.0) then
            allocate(wire(nwitems,ncwires))
            wire=0.0d0
          endif

          if (nrace.gt.0) then
            allocate(race(17,nrace))
            race=0.0d0
          endif

          if (nwind.gt.0) then
            allocate(wind(19,nwind))
            wind=0.0d0
          endif

          if (ncrace.gt.0) then
            allocate(crace(17,ncrace))
            crace=0.0d0
          endif

          if (narc.gt.0) then
            allocate(arc(21,narc))
            arc=0.0d0
          endif

          if (ncarc.gt.0) then
            allocate(carc(20,ncarc))
            carc=0.0d0
          endif

          if (nrbar.gt.0) then
            allocate(rectbar(19,nrbar))
            rectbar=0.0d0
          endif

          if (nthwir.gt.0) then
            allocate(thickwire(18,nthwir))
            thickwire=0.0d0
          endif

          do i=1,nlines+1
            backspace(lunbpe)
          enddo

          ncwires=0
          nrace=0
          nwind=0
          ncrace=0
          narc=0
          ncarc=0
          nrbar=0
          nthwir=0
          ncoil=0

          do i=1,nlines+1

            call util_skip_comment_end(lunbpe,ieof)
            read(lunbpe,'(a)')cline

            if (cline.eq.'EndCoils') then
              exit
            else if (cline.eq.'Filaments') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)ncfila
              do k=1,ncfila
                call util_skip_comment_end(lunbpe,ieof)
                read(lunbpe,*)curr,x1,y1,z1,x2,y2,z2,kolor
                if (((x2-x1)**2+(y2-y1)**2+(z2-z1)**2)*curr.ne.0.0d0) then
                  ncwires=ncwires+1
                  wire(1,ncwires)=1
                  wire(2,ncwires)=curr
                  wire(3,ncwires)=x1
                  wire(4,ncwires)=y1
                  wire(5,ncwires)=z1
                  wire(6,ncwires)=x2
                  wire(7,ncwires)=y2
                  wire(8,ncwires)=z2
                  wire(9,ncwires)=kolor
                endif
              enddo
            else if (cline.eq.'RectWindings') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) wind19
              if (wind19(1).ne.0.0d0) then
                nwind=nwind+1
                wind(1,nwind)=wind19(1)
                wind(2:17,nwind)=wind19(4:19)
                wind(18:19,nwind)=wind19(2:3)
              endif
            else if (cline.eq.'Rectangular') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) race17
              if (race17(1).ne.0.0d0) then
                nrace=nrace+1
                race(1:17,nrace)=race17
              endif
            else if (cline.eq.'RectangCirc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) race17
              if (race17(1).ne.0.0d0) then
                ncrace=ncrace+1
                crace(:,ncrace)=race17
              endif
            else if (cline.eq.'RectArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(1:12)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(13:21)
              if (arc21(1).ne.0.0d0) then
                narc=narc+1
                arc(1:21,narc)=arc21
              endif
            else if (cline.eq.'CircArc') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(1:11)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*) arc21(12:20)
              if (arc21(1).ne.0.0d0) then
                ncarc=ncarc+1
                carc(1:20,ncarc)=arc21(1:20)
              endif
            else if (cline.eq.'RectBar') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(1:10)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(11:19)
              if (arc21(1).ne.0.0d0) then
                nrbar=nrbar+1
                rectbar(1:19,nrbar)=arc21(1:19)
              endif
            else if (cline.eq.'ThickWire') then
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(1:9)
              call util_skip_comment_end(lunbpe,ieof)
              read(lunbpe,*)arc21(10:18)
              if (arc21(1).ne.0.0d0) then
                nthwir=nthwir+1
                thickwire(1:18,nthwir)=arc21(1:18)
              endif
            endif
          enddo !nlines
        endif !nlines

        call undumag_bcoils(0.0d0,0.0d0,0.0d0,bx,by,bz,istat)

        if (ncoil.gt.0) then
          open(newunit=lunfil,file='undumag.fil',status='old')
          do while (.true.)
            call util_skip_comment_end(lunfil,ieof)
            if (ieof.ne.0) exit
            read(lunfil,*) itype,curr,x1,y1,z1,x2,y2,z2,icol,num
            if (x1.lt.xcwmin) xcwmin=x1
            if (x1.gt.xcwmax) xcwmax=x1
            if (x2.lt.xcwmin) xcwmin=x2
            if (x2.gt.xcwmax) xcwmax=x2
          enddo
          close(lunfil)
        endif

      endif !Coils

9977  write(lun6,*)

991   close(lunbpe)

      if (ixsymo.lt.0.or.iysymo.lt.0.or.izsymo.lt.0) then
        call undumag_duplicate_mags
        nmagmax=nmag
        if (ixsymo.lt.0) then
          ixsym=0
          nmoth=2*nmoth
        endif
        if (iysymo.lt.0) then
          iysym=0
          nmoth=2*nmoth
        endif
        if (izsymo.lt.0) then
          izsym=0
          nmoth=2*nmoth
        endif
      else
        bpebc(17,1:nmag)=-9999.0d0
      endif

      do imag=1,nmag
        write(chmoth,'(32a)')chmoths(1:32,imag)
        motho=nint(bpebc(15,imag))
        do kmag=imag+1,nmag
          write(chmoth1,'(32a)')chmoths(1:32,kmag)
          if (chmoth.eq.chmoth1) then
            bpebc(15,kmag)=motho
            mothdiv(1,kmag)=mothdiv(1,imag)
          endif
        enddo
      enddo
c      do imag=1,nmag
c        write(lun6,*)"0 Info:",imag,bpebc(15,imag),chmags(1:32,imag),chmoths(1:32,imag)
c      enddo
      write(lun6,*)"----------------------------------------------------"

      do imag=1,nmag
c center of magnet in lab

        rmag(1)=bpebc(1,imag)
        rmag(2)=bpebc(2,imag)
        rmag(3)=bpebc(3,imag)

c magnetization vector in lab

        vmaglab(1)=bpebc(4,imag)
        vmaglab(2)=bpebc(5,imag)
        vmaglab(3)=bpebc(6,imag)

        bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)

c        write(lun6,*)"imag,rmag:",imag,rmag

        nplan=ibpeplan(imag)
        do iplan=1,nplan

c three points defining plane (lab.-system)

          p1(1)=bpemag(1,1,iplan,imag)
          p1(2)=bpemag(2,1,iplan,imag)
          p1(3)=bpemag(3,1,iplan,imag)

          p2(1)=bpemag(1,2,iplan,imag)
          p2(2)=bpemag(2,2,iplan,imag)
          p2(3)=bpemag(3,2,iplan,imag)

          p3(1)=bpemag(1,3,iplan,imag)
          p3(2)=bpemag(2,3,iplan,imag)
          p3(3)=bpemag(3,3,iplan,imag)

c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p1
c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p2
c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p3

          call undumag_bpen(imag,iplan,p1,p2,p3,vnormlab,ifail)
          if (ifail.ne.0) then
            write(lun6,*)"*** Error 13 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &        imag,iplan
            stop
          endif

c check if normal vector is perpendicular to magnetization vector
c if mag. vector is parallel, skip plane

          if (bc.ne.0.0d0) then
            dum=abs(
     &        (vnormlab(1)*vmaglab(1)+vnormlab(2)*vmaglab(2)+
     &        vnormlab(3)*vmaglab(3))
     &        /bc
     &        )
          else
            dum=0.0d0
          endif

c Removed, since magnetization can change during relaxation
c          if (dum.lt.1.0d-20.and.bpebc(8,imag).ne.-6) then
c            ibpecorn(iplan,imag)=-ibpecorn(iplan,imag)
c          endif

c            bpetm(1,8,iplan,imag)=vnormlab(1)
c            bpetm(2,8,iplan,imag)=vnormlab(2)
c            bpetm(3,8,iplan,imag)=vnormlab(3)
c
c          else

            bpetm(1,7,iplan,imag)=
     &        vmaglab(1)*vnormlab(1)+
     &        vmaglab(2)*vnormlab(2)+
     &        vmaglab(3)*vnormlab(3)
            bpetm(1,8,iplan,imag)=vnormlab(1)
            bpetm(2,8,iplan,imag)=vnormlab(2)
            bpetm(3,8,iplan,imag)=vnormlab(3)

c get matrices ts and tsinv. Ts transforms vnormlab to (0,0,1)

            call undumag_bpet(vnormlab,ts,tsinv)

            if (bpebc(8,imag).eq.-6) then

c for rectangular magnets, we rotate the plans such, that the edges coinside
c with the axis of the coord.-system.

c All planes are rotated to the system of the
c first plane

              if (iplan.eq.1) then
                ts1=ts
                ts1inv=tsinv
              else
                ts=ts1
                tsinv=ts1inv
              endif !(iplan.eq.1)

              do icorn=1,5

                r1lab(1)=bpemag(1,icorn,iplan,imag)
                r1lab(2)=bpemag(2,icorn,iplan,imag)
                r1lab(3)=bpemag(3,icorn,iplan,imag)

                r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
                r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
                r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

                bperot(1,icorn,iplan,imag)=r1(1)
                bperot(2,icorn,iplan,imag)=r1(2)
                bperot(3,icorn,iplan,imag)=r1(3)

              enddo !icorn=1,ncorn

              vx=bperot(1,2,iplan,imag)-bperot(1,1,iplan,imag)
              vy=bperot(2,2,iplan,imag)-bperot(2,1,iplan,imag)
              vn=sqrt(vx*vx+vy*vy)

              sa=vy/vn
              ca=vx/vn

              tz=ts

              ts(1,1)=ca
              ts(1,2)=sa
              ts(1,3)=0.0d0

              ts(2,1)=-sa
              ts(2,2)=ca
              ts(2,3)=0.0d0

              ts(3,1)=0.0d0
              ts(3,2)=0.0d0
              ts(3,3)=1.0d0

c              write(lun6,*)iplan,ca,sa

c              if (iplan.eq.1) then
c                do i=1,3
c                  write(lun6,*)"vorher:",tz(i,1:3)
c                enddo
c              endif
              call util_matrix_multiplication(3,3,3,ts,tz,ts,ws)

              do i=1,3
                do j=1,3
                  tsinv(i,j)=ts(j,i)
                enddo
              enddo

            endif ! if (bpebc(8,imag).eq.-6)

            do i=1,3
              do j=1,3
                bpetm(i,j,iplan,imag)=ts(i,j)
                bpetm(i,j+3,iplan,imag)=tsinv(i,j)
              enddo
c              if (iplan.eq.1) then
c                write(lun6,*)"nachher:",ts(i,1:3)
c              endif
            enddo

c          endif !check if normal vector is perpendicular to magnetization vector

c            write(lun6,*)imag,iplan,bpetm(1,7,iplan,imag)
c            write(lun6,*)imag,iplan,bpetm(1:3,8,iplan,imag)

        enddo !iplan

      enddo !imag

c      write(lun6,*)"Ende"
c      stop
!debug
+self,if=debug.
      do imag=1,nmag
        do iplan=1,ibpeplan(imag)
          do icorn=1,ibpecorn(iplan,imag)
            write(99,*)imag,iplan,icorn,
     &        bpemag(1:3,icorn,iplan,imag)
          enddo
        enddo
      enddo
      write(lun6,*) "fort.99!"
+self.,if=debug.
      do imag=1,nmag

c check, if all flanges appear twice, i.e. volume is closed

        iwarn=0
        nflange=0
        nplan=ibpeplan(imag)
        if (kudebug.eq.9) then
          if(imag.eq.1) then
            open(unit=99,file="debug_edges.dat")
          else
            open(unit=99,file="debug_edges.dat",access="append")
          endif
        endif

        do iplan=1,nplan
          ncorn=ibpecorn(iplan,imag)-1
          if (kudebug.eq.9) then
            write(lun6,*)"imag,nplan,ncorn",imag,nplan,ncorn
          endif
          do icorn=1,ncorn
            nflange=nflange+1
            ip1=icorn
            ip2=ip1+1
            bflange(1,nflange)=bpemag(1,ip1,iplan,imag)
            bflange(2,nflange)=bpemag(2,ip1,iplan,imag)
            bflange(3,nflange)=bpemag(3,ip1,iplan,imag)
            bflange(4,nflange)=bpemag(1,ip2,iplan,imag)
            bflange(5,nflange)=bpemag(2,ip2,iplan,imag)
            bflange(6,nflange)=bpemag(3,ip2,iplan,imag)
            if (kudebug.eq.9) then
              write(lun6,*)"iedge, i1, i2:",nflange,ip1,ip2
              write(lun6,*)"x1,y1,z1:",bflange(1:3,nflange)
              write(lun6,*)"x2,y2,z2:",bflange(4:6,nflange)
              write(99,*)imag,iplan,nflange,ip1,ip2,bflange(1:6,nflange)
            endif
          enddo ! icorn
        enddo !iplan
        if (kudebug.eq.9) then
          close(99)
        endif

        do iflange=1,nflange
          bflange(7,iflange)=1.0d0
        enddo

        rtiny=sqrt((xmax-xmin)**2+(ymax-ymin)**2+(zmax-zmin)**2)*1.0d-12

        do iflange=1,nflange

          do i=iflange+1,nflange

            if (
     &          abs(bflange(1,i)-bflange(1,iflange)).lt.rtiny .and.
     &          abs(bflange(2,i)-bflange(2,iflange)).lt.rtiny .and.
     &          abs(bflange(3,i)-bflange(3,iflange)).lt.rtiny .and.
     &          abs(bflange(4,i)-bflange(4,iflange)).lt.rtiny .and.
     &          abs(bflange(5,i)-bflange(5,iflange)).lt.rtiny .and.
     &          abs(bflange(6,i)-bflange(6,iflange)).lt.rtiny
     &          .or.
     &          abs(bflange(4,i)-bflange(1,iflange)).lt.rtiny .and.
     &          abs(bflange(5,i)-bflange(2,iflange)).lt.rtiny .and.
     &          abs(bflange(6,i)-bflange(3,iflange)).lt.rtiny .and.
     &          abs(bflange(1,i)-bflange(4,iflange)).lt.rtiny .and.
     &          abs(bflange(2,i)-bflange(5,iflange)).lt.rtiny .and.
     &          abs(bflange(3,i)-bflange(6,iflange)).lt.rtiny
     &          ) then

              bflange(7,iflange)=bflange(7,iflange)+1.0d0
              bflange(7,i)=bflange(7,i)+1.0d0

            endif !hit

          enddo !i

          if (bflange(7,iflange).ne.2.0d0.and.iwarn.eq.0
     &        .and.bpebc(7,imag).ne.0.0d0.and.bpebc(9,imag).ne.0) then
c            iwarn=1
            write(lun6,*)
     &        '*** Error in undumag_ini_old: Magnet ',chmoths(1:32,imag),' is not a closed volume'
            write(lun6,*)'magnet, edge, hits: ',imag,iflange,bflange(7,iflange)
            write(lun6,*)
            stop
          endif

        enddo !iflange

c center of gravity is a point inside the magnet since shape is convex

        x0=0.0d0
        y0=0.0d0
        z0=0.0d0

        i=0
        do iplan=1,ibpeplan(imag)
          do icorn=1,ibpecorn(iplan,imag)-1
            i=i+1
            x0=x0+bpemag(1,icorn,iplan,imag)
            y0=y0+bpemag(2,icorn,iplan,imag)
            z0=z0+bpemag(3,icorn,iplan,imag)
c            write(lun6,*)iplan,icorn,sngl(bpemag(1:3,icorn,iplan,imag))
          enddo ! icorn
        enddo !iplan

        x0=x0/i
        y0=y0/i
        z0=z0/i

c        write(lun6,*)"imag,x0,y0,z0",imag,x0,y0,z0

        do iplan=1,ibpeplan(imag)

          vnormlab(1)=bpetm(1,8,iplan,imag)
          vnormlab(2)=bpetm(2,8,iplan,imag)
          vnormlab(3)=bpetm(3,8,iplan,imag)

c does normal vector point outside?

          vsx=bpemag(1,1,iplan,imag)-x0
          vsy=bpemag(2,1,iplan,imag)-y0
          vsz=bpemag(3,1,iplan,imag)-z0

c          write(lun6,*)iplan
c          write(lun6,*)vnormlab
c          write(lun6,*)vsx,vsy,vsz

          if ( vsx*vnormlab(1) + vsy*vnormlab(2) + vsz*vnormlab(3)
     &        .lt. 0.0d0 ) then
            write(lun6,*)
            write(lun6,*)
     &        '*** Error in undumag_ini_old: Normal vector is not pointing outside'
            write(lun6,*)'magnet, plane: ',imag,iplan
            write(lun6,*)
c            stop
          endif

          do icorn=3,ibpecorn(iplan,imag)-1

            ip1=icorn-2
            ip2=icorn-1

            v1x=bpemag(1,ip2,iplan,imag)-bpemag(1,ip1,iplan,imag)
            v1y=bpemag(2,ip2,iplan,imag)-bpemag(2,ip1,iplan,imag)
            v1z=bpemag(3,ip2,iplan,imag)-bpemag(3,ip1,iplan,imag)

            v2x=bpemag(1,icorn,iplan,imag)-bpemag(1,ip2,iplan,imag)
            v2y=bpemag(2,icorn,iplan,imag)-bpemag(2,ip2,iplan,imag)
            v2z=bpemag(3,icorn,iplan,imag)-bpemag(3,ip2,iplan,imag)

            vsx=v1y*v2z-v1z*v2y
            vsy=v1z*v2x-v1x*v2z
            vsz=v1x*v2y-v1y*v2x

            if ( abs(v2x*vnormlab(1)+ v2y*vnormlab(2)+ v2z*vnormlab(3))
     &          .gt.tiny ) then
              write(lun6,*)
              write(lun6,*)'*** Error in undumag_ini_old: Points not in a plane'
              write(lun6,*)'magnet, plane, point: ',imag,iplan,icorn
              write(lun6,*)
              stop
            endif

            if ( vsx*vnormlab(1) + vsy*vnormlab(2) + vsz*vnormlab(3)
     &          .lt. 0.0d0 ) then
              write(lun6,*)
              write(lun6,*)'*** Error in undumag_ini_old: Direction of rotation not unique'
              write(lun6,*)'magnet, plane, point ',imag,iplan,icorn
              write(lun6,*)
              stop
            endif

          enddo !icorn=1,ncorn

        enddo ! iplan=1,nplan

      enddo ! imag=1,nmag

c transform everything to the nz=(0,0,1) system

      do imag=1,nmag

        qsign=0.0d0

        do iplan=1,ibpeplan(imag)

c          if (ibpecorn(iplan,imag).gt.0) then

            do i=1,3
              do j=1,3
                ts(i,j)=bpetm(i,j,iplan,imag)
              enddo
            enddo

            vnormlab(1)=bpetm(1,8,iplan,imag)
            vnormlab(2)=bpetm(2,8,iplan,imag)
            vnormlab(3)=bpetm(3,8,iplan,imag)

            do icorn=1,ibpecorn(iplan,imag)

              r1lab(1)=bpemag(1,icorn,iplan,imag)
              r1lab(2)=bpemag(2,icorn,iplan,imag)
              r1lab(3)=bpemag(3,icorn,iplan,imag)

              r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
              r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
              r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

              bperot(1,icorn,iplan,imag)=r1(1)
              bperot(2,icorn,iplan,imag)=r1(2)
              bperot(3,icorn,iplan,imag)=r1(3)

            enddo !icorn=1,ncorn

            do icorn=1,ibpecorn(iplan,imag)-1

              ip2=icorn+1

              r1(1)=bperot(1,icorn,iplan,imag)
              r1(2)=bperot(2,icorn,iplan,imag)
              r1(3)=bperot(3,icorn,iplan,imag)

              r2(1)=bperot(1,ip2,iplan,imag)
              r2(2)=bperot(2,ip2,iplan,imag)
              r2(3)=bperot(3,ip2,iplan,imag)

c              write(lun6,*)imag,iplan,icorn,r1(1)-r2(1)
c              if (abs(r1(1)-r2(1)).gt.tiny) then
              if (r1(1)-r2(1).ne.0.0d0) then

                a=(r2(2)-r1(2))/(r2(1)-r1(1))
                b=r1(2)-a*r1(1)

              else

                a=0.0d0
                b=r1(2)

              endif !(abs(r1(1)-r2(1)).gt.tiny)

              q=-((a*r1(1)+ a*r2(1) + 2*b)*(r1(1) - r2(1)))/2.d0

              qsign=qsign+q*(
     &           vnormlab(1)*bpebc(4,imag)
     &          +vnormlab(2)*bpebc(5,imag)
     &          +vnormlab(3)*bpebc(6,imag))

            enddo ! icorn

c          endif !(ibpecorn(iplan,imag).gt.0) then

        enddo ! iplan=1,nplan

        if (abs(qsign/bpebc(7,imag)).gt.1.d-9.and.bpebc(8,imag).ne.-6) then
c not checked for rectangular magnets since ibpecorn not negative for
c planes with normal vector parallel to surface. Then they are not skipped
c for while calculation qsign
          write(lun6,*)
          write(lun6,*)
     &      '*** Error in undumag_ini_old: Sum of magnetic charge not zero ***'
          write(lun6,*)'magnet: ',imag
          write(lun6,*)
          stop
        endif

      enddo ! imag=1,nmag

c Check if all magnets are zero

      nmag=0
      do imag=1,nmagmax
        if (bpebc(7,imag).ne.0.0d0) then
          nmag=nmagmax
          goto 109
        endif
      enddo

109   continue

      nmagmax=nmag

      if (nmatfiles.le.0.and.nmag.gt.0) then
        write(lun6,*)"*** Error in undumag_ini_old: No data files for materials found ***"
        stop
      endif

      allocate(bcrec(20,nmagmax))
      allocate(ibpeplanrec(nmagmax))
      allocate(ibpecolrec(nmagmax))
      allocate(ibpecornrec(nplanmax,nmagmax))
      allocate(bmagrec(3,ncornmax,nplanmax,nmagmax))
      allocate(brotrec(3,ncornmax,nplanmax,nmagmax))
      allocate(bpetmrec(3,8,nplanmax,nmagmax))

      allocate(bciron(20,nmagmax),bc0rec(7,nmagmax),bc0iron(7,nmagmax))
      allocate(ibpeplaniron(nmagmax))
      allocate(ibpecoliron(nmagmax))
      allocate(ibpecorniron(nplanmax,nmagmax))
      allocate(bmagiron(3,ncornmax,nplanmax,nmagmax))
      allocate(brotiron(3,ncornmax,nplanmax,nmagmax))
      allocate(bpetmiron(3,8,nplanmax,nmagmax))

      nrec=0
      niron=0

      if (irecrepl.eq.0) goto 666

      do imag=1,nmag

        if (bpebc(8,imag).ne.-6.and.ibpeplan(imag).eq.6) then

          ix1=0
          ix2=0
          iy1=0
          iy2=0
          iz1=0
          iz2=0

          do iplan=1,nplan

            ncorn=ibpecorn(iplan,imag)
            if (ncorn.ne.5) exit

c            write(lun6,*)imag,iplan,bpemag(3,1:5,iplan,imag)
            vnormlab(1)=bpetm(1,8,iplan,imag)
            vnormlab(2)=bpetm(2,8,iplan,imag)
            vnormlab(3)=bpetm(3,8,iplan,imag)

c            write(lun6,*)imag,vnormlab

            if (vnormlab(1).lt.-0.999999d0) then
              ix2=ix2+1
              xxmin=bpemag(1,1,iplan,imag)
            else if (vnormlab(1).gt.0.999999d0) then
              ix1=ix1+1
              xxmax=bpemag(1,1,iplan,imag)
            else if (vnormlab(2).lt.-0.999999d0) then
              iy2=iy2+1
              yymin=bpemag(2,1,iplan,imag)
            else if (vnormlab(2).gt.0.999999d0) then
              iy1=iy1+1
              yymax=bpemag(2,1,iplan,imag)
            else if (vnormlab(3).lt.-0.999999d0) then
              iz2=iz2+1
              zzmin=bpemag(3,1,iplan,imag)
            else if (vnormlab(3).gt.0.999999d0) then
              iz1=iz1+1
              zzmax=bpemag(3,1,iplan,imag)
            endif
          enddo

          if (
     &      ix1.ne.1.or.ix2.ne.1.or.
     &      iy1.ne.1.or.iy2.ne.1.or.
     &      iz1.ne.1.or.iz2.ne.1) cycle

          xcen=(xxmax+xxmin)/2.0d0
          ycen=(yymax+yymin)/2.0d0
          zcen=(zzmax+zzmin)/2.0d0

          bpebc(1,imag)=xcen
          bpebc(2,imag)=ycen
          bpebc(3,imag)=zcen

          bpebc(8,imag)=-6

          dx=xxmax-xxmin
          dy=yymax-yymin
          dz=zzmax-zzmin

          iplan=1
          ibpecorn(iplan,imag)=5
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=2
          ibpecorn(iplan,imag)=5
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=3
          ibpecorn(iplan,imag)=5
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=4
          ibpecorn(iplan,imag)=5
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=5
          ibpecorn(iplan,imag)=5
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen-dz/2.0d0

          iplan=6
          ibpecorn(iplan,imag)=5
          icorn=4
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=3
          bpemag(1,icorn,iplan,imag)=xcen-dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=2
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen+dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0
          icorn=1
          bpemag(1,icorn,iplan,imag)=xcen+dx/2.0d0
          bpemag(2,icorn,iplan,imag)=ycen-dy/2.0d0
          bpemag(3,icorn,iplan,imag)=zcen+dz/2.0d0

          do iplan=1,6
            bpemag(1,5,iplan,imag)=bpemag(1,1,iplan,imag)
            bpemag(2,5,iplan,imag)=bpemag(2,1,iplan,imag)
            bpemag(3,5,iplan,imag)=bpemag(3,1,iplan,imag)
          enddo !iplan

c center of magnet in lab

          rmag(1)=bpebc(1,imag)
          rmag(2)=bpebc(2,imag)
          rmag(3)=bpebc(3,imag)

c magnetization vector in lab

          vmaglab(1)=bpebc(4,imag)
          vmaglab(2)=bpebc(5,imag)
          vmaglab(3)=bpebc(6,imag)

          bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)

c        write(lun6,*)"imag,rmag:",imag,rmag

          do iplan=1,ibpeplan(imag)

c three points defining plane (lab.-system)

c          write(lun6,*)"imag,iplan,p1:",imag,iplan,p1

            p1(1)=bpemag(1,1,iplan,imag)
            p1(2)=bpemag(2,1,iplan,imag)
            p1(3)=bpemag(3,1,iplan,imag)

            p2(1)=bpemag(1,2,iplan,imag)
            p2(2)=bpemag(2,2,iplan,imag)
            p2(3)=bpemag(3,2,iplan,imag)

            p3(1)=bpemag(1,3,iplan,imag)
            p3(2)=bpemag(2,3,iplan,imag)
            p3(3)=bpemag(3,3,iplan,imag)

            call undumag_bpen(imag,iplan,p1,p2,p3,vnormlab,ifail)

            if (ifail.ne.0) then
              write(lun6,*)"*** Error 13 in undumag_ini_old: Failure in undumag_bpen, mag, plane:",
     &          imag,iplan
              stop
            endif

c check if normal vector is perpendicular to magnetization vector
c if mag. vector is parallel, skip plane

            if (bc.ne.0.0d0) then
              dum=abs(
     &          (vnormlab(1)*vmaglab(1)+vnormlab(2)*vmaglab(2)+
     &          vnormlab(3)*vmaglab(3))
     &          /bc
     &          )
            else
              dum=0.0d0
            endif

            bpetm(1,7,iplan,imag)=
     &        vmaglab(1)*vnormlab(1)+
     &        vmaglab(2)*vnormlab(2)+
     &        vmaglab(3)*vnormlab(3)

            bpetm(1,8,iplan,imag)=vnormlab(1)
            bpetm(2,8,iplan,imag)=vnormlab(2)
            bpetm(3,8,iplan,imag)=vnormlab(3)

c get matrices ts and tsinv

            call undumag_bpet(vnormlab,ts,tsinv)

c for rectangular magnets, we rotate plan such, that the flanges coinside with
c the axis of the coord.-system.

c All planes are rotated to the system of the
c first plane

            if (iplan.eq.1) then
              ts1=ts
              ts1inv=tsinv
            else
              ts=ts1
              tsinv=ts1inv
            endif !(iplan.eq.1)

            do icorn=1,5

              r1lab(1)=bpemag(1,icorn,iplan,imag)
              r1lab(2)=bpemag(2,icorn,iplan,imag)
              r1lab(3)=bpemag(3,icorn,iplan,imag)

              r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
              r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
              r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

              bperot(1,icorn,iplan,imag)=r1(1)
              bperot(2,icorn,iplan,imag)=r1(2)
              bperot(3,icorn,iplan,imag)=r1(3)

            enddo !icorn=1,ncorn

            vx=bperot(1,2,iplan,imag)-bperot(1,1,iplan,imag)
            vy=bperot(2,2,iplan,imag)-bperot(2,1,iplan,imag)
            vn=sqrt(vx*vx+vy*vy)

            sa=vy/vn
            ca=vx/vn

            tz=ts

            ts(1,1)=ca
            ts(1,2)=sa
            ts(1,3)=0.0d0

            ts(2,1)=-sa
            ts(2,2)=ca
            ts(2,3)=0.0d0

            ts(3,1)=0.0d0
            ts(3,2)=0.0d0
            ts(3,3)=1.0d0

            call util_matrix_multiplication(3,3,3,ts,tz,ts,ws)

            do i=1,3
              do j=1,3
                tsinv(i,j)=ts(j,i)
              enddo
            enddo

            do i=1,3
              do j=1,3
                bpetm(i,j,iplan,imag)=ts(i,j)
                bpetm(i,j+3,iplan,imag)=tsinv(i,j)
              enddo
            enddo

          enddo !iplan

        endif !(bpebc(8,imag).ne.-6.and.ibpeplan(imag).eq.6) then

      enddo !imag

chier
666   continue

      if (killbadmag.eq.-9999) then
        bpebc(16,1:nmag)=1.0d0
      else
        bpebc(16,1:nmag)=0.0d0
      endif

      if (killbadmag.gt.0.or.killbadmag.eq.-9999) then
        write(lun6,*)
        write(lun6,*)"Killing all voxel, but"
        open(newunit=lunkill,file="undumag.kll")
        do while (.true.)
          call util_read_line(lunkill,cline,last)
          if (last.le.0) exit
          read(cline,*)kmag,kill
          if (kmag.gt.nmag) then
            write(lun6,*)"*** Error in undumag_proc: Non existing magnet ",kmag," on undumag.kll ***"
            stop
          endif
          if (killbadmag.ne.-9999) then
            bpebc(16,kmag)=kill
            write(lun6,*)"Killing magnet ",kmag," due to flag killbadmag"
          else
            write(lun6,*)kmag
            bpebc(16,kmag)=0.0d0
          endif
        enddo
        close(lunkill)
        write(lun6,*)
      endif

      do imag=1,nmag

        mat=nint(bpebc(9,imag))

c        if (mat.lt.0) then
c          mat=nint(bcpre(2,1,-mat))
c        endif

        if (mat.eq.0) goto 9 !skip

        if (mat.gt.nmatfiles) then
          write(lun6,*)"*** Warning in undumag_proc: Material index out of range ***"
          write(lun6,*)"Skipping magnet",imag
          iwarnsum=1
          goto 9
        endif

        lmat=matmaps(2,mat)
        bn=sqrt(bpebc(4,imag)**2+bpebc(5,imag)**2+bpebc(6,imag)**2)

        if ((killbadmag.gt.0.or.killbadmag.eq.-9999).and.bpebc(16,imag).ne.0.0d0) then
          lmat=0
        endif

        if (lmat.eq.1) then
          if (bn.ne.0.0d0.and.bpebc(9,imag).ne.0.0d0) then
            if (bpebc(17,imag).ne.0.0d0.and.bpebc(17,imag).ne.-9999.0d0) cycle
            nrec=nrec+1
            bcrec(1:20,nrec)=bpebc(1:20,imag)
            bc0rec(1:3,nrec)=bpebc0(1:3,imag)
            chmagsm(1:32,nrec)=chmags(1:32,imag)
            chmothsm(1:32,nrec)=chmoths(1:32,imag)
            bmagrec(1:3,1:ncornmax,1:nplanmax,nrec)=
     &        bpemag(1:3,1:ncornmax,1:nplanmax,imag)
            brotrec(1:3,1:ncornmax,1:nplanmax,nrec)=
     &        bperot(1:3,1:ncornmax,1:nplanmax,imag)
            bpetmrec(1:3,1:8,1:nplanmax,nrec)=
     &        bpetm(1:3,1:8,1:nplanmax,imag)
            ibpeplanrec(nrec)=ibpeplan(imag)
            ibpecolrec(nrec)=ibpecol(imag)
            ibpecornrec(1:nplanmax,nrec)=ibpecorn(1:nplanmax,imag)
          endif !bn
        else if (lmat.eq.2) then
          if (bpebc(17,imag).ne.0.0d0.and.bpebc(17,imag).ne.-9999.0d0) cycle
          niron=niron+1
          bciron(1:20,niron)=bpebc(1:20,imag)
          bc0iron(1:7,niron)=bpebc0(1:7,imag)
          chmagsi(1:32,niron)=chmags(1:32,imag)
          chmothsi(1:32,niron)=chmoths(1:32,imag)
          bmagiron(1:3,1:ncornmax,1:nplanmax,niron)=
     &      bpemag(1:3,1:ncornmax,1:nplanmax,imag)
          brotiron(1:3,1:ncornmax,1:nplanmax,niron)=
     &      bperot(1:3,1:ncornmax,1:nplanmax,imag)
          bpetmiron(1:3,1:8,1:nplanmax,niron)=
     &      bpetm(1:3,1:8,1:nplanmax,imag)
          ibpeplaniron(niron)=ibpeplan(imag)
          ibpecoliron(niron)=ibpecol(imag)
          ibpecorniron(1:nplanmax,niron)=
     &      ibpecorn(1:nplanmax,imag)
        else if (lmat.ne.0) then
          write(lun6,*)
     &      "*** Error in undumag_ini_old: Unknown material index",lmat
          stop
        endif
 9    continue

      enddo !nmag

      if (nmag.gt.nspecmag) deallocate(bpemag0)
      deallocate(shuffle)

      deallocate(idamp8,bpebc,bpemag,bperot,bpetm,ibpeplan,ibpecorn,ibpecol)

      nmag=nrec+niron
      nsmag=nmag

      allocate(bpebc(20,nsmag),idamp8(nsmag))
      bpebc=0.0d0
      allocate(bpemag(3,ncornmax,nplanmax,nsmag))
      allocate(bperot(3,ncornmax,nplanmax,nsmag))
      allocate(bpetm(3,8,nplanmax,nsmag))
      allocate(ibpeplan(nsmag))
      allocate(ibpecol(nsmag))
      allocate(ibpecorn(nplanmax,nsmag))

      bpebc(1:20,1:nrec)=bcrec(1:20,1:nrec)
      bpebc0(1:3,1:nrec)=bc0rec(1:3,1:nrec)
      chmags(1:32,1:nrec)=chmagsm(1:32,1:nrec)
      chmoths(1:32,1:nrec)=chmothsm(1:32,1:nrec)
      bpemag(1:3,1:ncornmax,1:nplanmax,1:nrec)=
     &  bmagrec(1:3,1:ncornmax,1:nplanmax,1:nrec)
      bperot(1:3,1:ncornmax,1:nplanmax,1:nrec)=
     &  brotrec(1:3,1:ncornmax,1:nplanmax,1:nrec)
      bpetm(1:3,1:8,1:nplanmax,1:nrec)=
     &  bpetmrec(1:3,1:8,1:nplanmax,1:nrec)
      ibpeplan(1:nrec)=ibpeplanrec(1:nrec)
      ibpecol(1:nrec)=ibpecolrec(1:nrec)
      ibpecorn(1:nplanmax,1:nrec)=ibpecornrec(1:nplanmax,1:nrec)

      if (niron.gt.0) then

        iron1=nrec+1
        iron2=nrec+niron

        bpebc(1:20,iron1:iron2)=bciron(1:20,1:niron)

        bpebc0(1:3,iron1:iron2)=bc0iron(1:3,1:niron)
        chmags(1:32,iron1:iron2)=chmagsi(1:32,1:niron)
        chmoths(1:32,iron1:iron2)=chmothsi(1:32,1:niron)
        bpemag(1:3,1:ncornmax,1:nplanmax,iron1:iron2)=
     &    bmagiron(1:3,1:ncornmax,1:nplanmax,1:niron)
        bperot(1:3,1:ncornmax,1:nplanmax,iron1:iron2)=
     &    brotiron(1:3,1:ncornmax,1:nplanmax,1:niron)
        bpetm(1:3,1:8,1:nplanmax,iron1:iron2)=
     &    bpetmiron(1:3,1:8,1:nplanmax,1:niron)
        ibpeplan(iron1:iron2)=ibpeplaniron(1:niron)
        ibpecorn(1:nplanmax,iron1:iron2)=ibpecorniron(1:nplanmax,1:niron)

        bpebc(1:10,iron2+1:nmag)=0.0d0
        bpemag(1:3,1:ncornmax,1:nplanmax,iron2+1:nmag)=0.0d0
        bperot(1:3,1:ncornmax,1:nplanmax,iron2+1:nmag)=0.0d0
        bpetm(1:3,1:8,1:nplanmax,iron2+1:nmag)=0.0d0
        ibpeplan(iron2+1:nmag)=0
        ibpecorn(1:nplanmax,iron2+1:nmag)=0
        ibpecol(iron1:iron2)=ibpecoliron(1:niron)
        ibpecol(iron2+1:nmag)=0

      endif !iron

      kmag=0
      npol=0
      do imoth=1,nmoth
        if (matmoth(imoth).eq.1) then
          kmag=kmag+1
          xmothm(1:maxpoints,kmag)=xmoth(1:maxpoints,imoth)
          ymothm(1:maxpoints,kmag)=ymoth(1:maxpoints,imoth)
          zmothm(1:maxpoints,kmag)=zmoth(1:maxpoints,imoth)
          npmothm(kmag)=npmoth(imoth)
          matmothm(kmag)=matmoth(imoth)
          ncolmothm(kmag)=ncolmoth(imoth)
        else if (matmoth(imoth).eq.2) then
          npol=npol+1
          xmothi(1:maxpoints,npol)=xmoth(1:maxpoints,imoth)
          ymothi(1:maxpoints,npol)=ymoth(1:maxpoints,imoth)
          zmothi(1:maxpoints,npol)=zmoth(1:maxpoints,imoth)
          npmothi(npol)=npmoth(imoth)
          matmothi(npol)=matmoth(imoth)
          ncolmothi(npol)=ncolmoth(imoth)
        endif
      enddo

      xmoth(1:maxpoints,1:kmag)=xmothm(1:maxpoints,1:kmag)
      ymoth(1:maxpoints,1:kmag)=ymothm(1:maxpoints,1:kmag)
      zmoth(1:maxpoints,1:kmag)=zmothm(1:maxpoints,1:kmag)
      npmoth(1:kmag)=npmothm(1:kmag)
      matmoth(1:kmag)=matmothm(1:kmag)
      ncolmoth(1:kmag)=ncolmothm(1:kmag)

      xmoth(1:maxpoints,kmag+1:kmag+npol)=xmothi(1:maxpoints,1:npol)
      ymoth(1:maxpoints,kmag+1:kmag+npol)=ymothi(1:maxpoints,1:npol)
      zmoth(1:maxpoints,kmag+1:kmag+npol)=zmothi(1:maxpoints,1:npol)
      npmoth(kmag+1:kmag+npol)=npmothi(1:npol)
      matmoth(kmag+1:kmag+npol)=matmothi(1:npol)
      ncolmoth(kmag+1:kmag+npol)=ncolmothi(1:npol)

      dx0=dx

      xmaxinf = xmax

      xmin=1.0d30
      xmax=-1.0d30
      do imag=1,nmag
        if (bpebc(9,imag).ne.0) then
          do iplan=1,ibpeplan(imag)
            do icorn=1,ibpecorn(iplan,imag)
              vcorn(1)=bpemag(1,icorn,iplan,imag)
              if (vcorn(1).lt.xmin) xmin=vcorn(1)
              if (vcorn(1).gt.xmax) xmax=vcorn(1)
            enddo !icorn
          enddo !iplan
        endif

        if (kpreset.eq.0) then
          bpebc(11:14,imag)=bpebc(4:7,imag)
          bpebc(11:13,imag)=bpebc(11:13,imag)/bpebc(14,imag)
        endif

      enddo !imag

      xmin = min(xmin,xcwmin)
      xmax = max(xmax,xcwmax)

      if (kxcenter.ne.0) then

        if (ixsym.eq.0) then
          dx=xcenter-(xmax+xmin)/2.0d0
        else
          dx=xcenter-xsymmm
        endif

        xmin=xmin+dx
        xmax=xmax+dx

        dxfb=dx
        if (iforce.ne.9999) then
          ubfcenx=ubfcenx+dx
          bfcenxmm=ubfcenx
          utorqcenx=utorqcenx+dx
          if (utorqcenx.eq.9999.0d0) utorqcenx=ubfcenx
          bfcenx=ubfcenx/1000.0d0
          torqcenxmm=utorqcenx
          torqcenx=utorqcenx/1000.0d0
        endif

        forxpl=forxpl+dx

        xcentershift=dx

        write(lun6,*)
        write(lun6,*) "xcenter, shift:",xcenter,dx
        write(lun6,*)

        do moth=1,nmoth
          xmoth(1:npmoth(moth),moth)=xmoth(1:npmoth(moth),moth)+dx
        enddo

        do imag=1,nmag
          bpebc(1,imag)=bpebc(1,imag)+dx
          do iplan=1,ibpeplan(imag)

            do i=1,3
              do j=1,3
                ts(i,j)=bpetm(i,j,iplan,imag)
              enddo
            enddo

            do icorn=1,ibpecorn(iplan,imag)

              bpemag(1,icorn,iplan,imag)=bpemag(1,icorn,iplan,imag)+dx

              r1lab(1)=bpemag(1,icorn,iplan,imag)
              r1lab(2)=bpemag(2,icorn,iplan,imag)
              r1lab(3)=bpemag(3,icorn,iplan,imag)

              r1(1)=ts(1,1)*r1lab(1)+ts(1,2)*r1lab(2)+ts(1,3)*r1lab(3)
              r1(2)=ts(2,1)*r1lab(1)+ts(2,2)*r1lab(2)+ts(2,3)*r1lab(3)
              r1(3)=ts(3,1)*r1lab(1)+ts(3,2)*r1lab(2)+ts(3,3)*r1lab(3)

              bperot(1,icorn,iplan,imag)=r1(1)
              bperot(2,icorn,iplan,imag)=r1(2)
              bperot(3,icorn,iplan,imag)=r1(3)

            enddo !icorn
          enddo !iplan
        enddo !imag

      endif !kxcenter.ne.0

      g=0.0

      if (nmag.eq.0.or.(nxconv.eq.0.and.dxconv.eq.0.0d0)) then
        nxconv=1
        xconv(1)=0.0d0
        goto 1234
      endif

      nxconv=abs(nxconv)

      if (xconvmin.eq.9999.0d0) then
        xconvmin=xmin+mod(xmin,perlen)-1.0d0*perlen
        if (xconvmin.gt.xcwmin) xconvmin=xcwmin
      endif !(xconvmin.eq.9999.0d0) then

      if (xconvmax.eq.9999.0d0) then
        if (kxcenter.ne.0) then
          xconvmax=xcenter
        else
          xconvmax=xmax-mod(xmax,perlen)+2.0d0*perlen
        endif
        if (xconvmax.lt.xcwmax) xconvmax=xcwmax
      endif !(xconvmax.eq.9999.0d0) then

      if (xconvmax.le.xconvmin) xconvmin=xconvmax-perlen/2.0d0

      if (nxconv.eq.9999) then
        nxconv=(xconvmax-xconvmin)/perlen*2+1
      endif

      if (dxconv.eq.9999.0d0) dxconv=perlen/2.0d0

      if (abs(dxconv).gt.0.0d0) then
        nxconv=(xconvmax-xconvmin)/dxconv+1
        if (nxconv.gt.100) then
          write(lun6,*)"*** Warning in undmag_ini: dxconv changed to limit nxconv to 100 ***"
          nxconv=100
        endif
        dxconv=(xconvmax-xconvmin)/max(1,nxconv-1)
      else
        if (nxconv.gt.100) then
          write(lun6,*)"*** Warning in undmag_ini: nxconv limited to 100 ***"
          nxconv=100
        endif
        dxconv=(xconvmax-xconvmin)/max(1,nxconv-1)
      endif

      if (dxconv.lt.0.0d0) then
        dxcon(1)=0.0d0
        dx=1.0d0
        do i=2,nxconv
          dxcon(i)=dxcon(i-1) + dx
          dx=dx*abs(dxconv)
        enddo
        xlen=dxcon(nxconv)
        do i=2,nxconv
          xconv(i)=xconv(i-1) + (dxcon(i)-dxcon(i-1))*(xconvmax-xconvmin)/xlen
        enddo
      else
        do i=1,nxconv
          xconv(i)=xconvmin+dxconv*(i-1)
        enddo
      endif !(dxconv.lt.0.0d0) then

      do i=1,nxconv
        ! to avoid boundary effects:
        call util_random(2,g)
        g=g-0.5
        if (abs(g(1)).lt.randox10) then
          if (g(1).gt.0.0d0) then
            g(1)=g(1)+randox10
          else
            g(1)=g(1)-randox10
          endif
        endif
        xconv(i)=(xconv(i)+g(1)*randoxa)/1000.0d0
      enddo

      yconv=yconv/1000.0d0

      if (abs(g(2)).lt.randoz10) then
        if (g(2).gt.0.0d0) then
          g(2)=g(2)+randoz10
        else
          g(2)=g(2)-randoz10
        endif
      endif

      if (zconv.eq.0.0d0) then
        if (randoza.gt.0.0d0) then
          zconv=(zconv+g(2)*randoza)/1000.0d0
        else
          zconv=(zconv+randoza)/1000.0d0
        endif
      else
        zconv=zconv/1000.0d0
      endif

1234  continue

      nspecmag=0
      do imag=1,nmag
        if (bpebc(10,imag).ne.0) then
          nspecmag=nspecmag+1
        endif
      enddo

      if (nspecmag.gt.0) then
        allocate(kspecmag(nspecmag))
        nspecmag=0
        do imag=1,nmag
          if (bpebc(10,imag).ne.0) then
            nspecmag=nspecmag+1
            kspecmag(nspecmag)=imag
          endif
        enddo
      endif

c      xmin=xmin-dx0
c      xmax=xmax+dx0

      deallocate(ibpecornrec)
      deallocate(ibpeplanrec)
      deallocate(bpetmrec)
      deallocate(brotrec)
      deallocate(bmagrec)
      deallocate(bcrec)
      deallocate(ibpecolrec)

      deallocate(ibpecorniron)
      deallocate(ibpeplaniron)
      deallocate(bpetmiron)
      deallocate(brotiron)
      deallocate(bmagiron)
      deallocate(bciron,bc0rec,bc0iron)
      deallocate(ibpecoliron)

      if (ixsym.gt.0) then
        if (xmin.lt.xsymmm-tiny2.and.xmax.gt.xsymmm+tiny2) then
          write(lun6,*)"*** Error in input: Option ixsym is set, but not all x-values are on the same side of xsymm!"
          write(lun6,*)"*** Program undumag aborted ***"
          stop
        endif
        dx=xsymmm-xmin
        xmax=xsymmm+dx
        xsym=xsymmm/1000.0d0
      endif

      if (iysym.gt.0) then
        if (ymin.lt.-tiny2.and.ymax.gt.tiny2) then
          write(lun6,*)"*** Error in input: Option iysym is set, but not all y-values have the same sign!"
          if (iysymo.gt.0) then
            write(lun6,*)"*** Program undumag aborted ***"
            stop
          endif
        endif
        ymax=max(abs(ymax),abs(ymin))
        ymin=-ymax
      endif

      if (izsym.ne.0) then
        if (zmin.lt.-tiny2.and.zmax.gt.tiny2) then
          if (izsymo.gt.0) then
            write(lun6,*)"*** Error in input: Option izsym is set, but not all z-values have the same sign!"
            write(lun6,*)"*** Program undumag aborted ***"
            stop
          else if (izsymo.lt.0) then
            write(lun6,*)"*** Warning in input: Option izsym is set, but not all z-values have the same sign!"
          endif
        endif
        zmax=max(abs(zmax),abs(zmin))
        zmin=-zmax
      endif

      do imag=1,nmag

c        write(lun6,*)"1 Info:",imag,bpebc(15,imag),chmags(1:32,imag),chmoths(1:32,imag)
        write(chmoth,'(32a)')chmoths(1:32,imag)

        if (kdisplace.ne.0) then
          do idisp=1,ndisp
            if (chmoth.eq.chdisp(idisp)) then

              cosphi=cos(displace(6,idisp))
              sinphi=sin(displace(6,idisp))

              bpebc(1:3,imag)=bpebc(1:3,imag)+displace(1:3,idisp)

              y00=bpebc(2,imag)-displace(4,idisp)
              z00=bpebc(3,imag)-displace(5,idisp)
              bpebc(2,imag)= -sinphi*z00 + cosphi*y00
     &              +displace(4,idisp)
              bpebc(3,imag)=  cosphi*z00 + sinphi*y00
     &          +displace(5,idisp)

              bpebc(4:6,imag)=bpebc(4:6,imag)+displace(7:9,idisp)

              bcy=bpebc(5,imag)
              bcz=bpebc(6,imag)
              bpebc(5,imag)= -sinphi*bcz + cosphi*bcy
              bpebc(6,imag)=  cosphi*bcz + sinphi*bcy

              nplan=ibpeplan(imag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,imag)
                do icorn=1,ncorn

                  x00=bpemag(1,icorn,iplan,imag)+displace(1,idisp)
                  bpemag(1,icorn,iplan,imag)= x00

                  y00=bpemag(2,icorn,iplan,imag)+displace(2,idisp)
     &              -displace(4,idisp)
                  z00=bpemag(3,icorn,iplan,imag)+displace(3,idisp)
     &              -displace(5,idisp)
                  bpemag(2,icorn,iplan,imag)= -sinphi*z00 + cosphi*y00
     &              +displace(4,idisp)
                  bpemag(3,icorn,iplan,imag)=  cosphi*z00 + sinphi*y00
     &              +displace(5,idisp)
                enddo
              enddo
            endif
          enddo
        endif

c        write(lun6,*)imag,moth,chmoth,chmoths(1:32,imag)
      enddo

      if (kdisplace.ne.0) then
        write(lun6,*)
        write(lun6,*)
        write(lun6,*)"Displacement and change of magnetization activated:"
        write(lun6,*)
        do idisp=1,ndisp
          write(lun6,*)idisp,trim(chdisp(idisp)),sngl(displace(1:9,idisp))
        enddo
        write(lun6,*)
        write(lun6,*)
        write(lun6,*)
      endif

      open(newunit=lunmag,file='undumag.mag',form='formatted',status='unknown')

      write(lunmag,'(a)')trim(cundutit)

      do imag=1,nmag

        do iplan=1,ibpeplan(imag)
          do icorn=1,ibpecorn(iplan,imag)

            htup(1)=bpebc(15,imag)
            htup(2)=imag
            htup(3)=ibpecol(imag)
            htup(4)=iplan
            htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
            htup(6)=bpemag(1,icorn,iplan,imag)
            htup(7)=bpemag(2,icorn,iplan,imag)
            htup(8)=bpemag(3,icorn,iplan,imag)
            htup(9)=bpebc(4,imag)
            htup(10)=bpebc(5,imag)
            htup(11)=bpebc(6,imag)
            htup(12)=bpebc(9,imag)

            vmaglab(1)=bpebc(4,imag)
            vmaglab(2)=bpebc(5,imag)
            vmaglab(3)=bpebc(6,imag)

            bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
            bpebc(7,imag)=bc

            if (bc.ne.0.0d0) then
              do i=5,10
                if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
              enddo
              write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
              chmoth1a=chmoths(1:32,imag)
              c32a=chmags(1:32,imag)
              cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
              write(lunmag,'(a)') trim(cline)
            endif !BC

          enddo !ncorn
        enddo !nplan
      enddo !nmag

      if (kplsym.eq.0) then
        if (ixsymo.ne.0) then
          dx=xmax-xmin
          xmax=xmax-dx/2.
        endif
        if (iysymo.ne.0) then
          dy=ymax-ymin
          ymax=ymax-dy/2.
        endif
        if (izsymo.ne.0) then
          dz=zmax-zmin
          zmax=zmax-dz/2.
        endif
        goto 19
      endif

      if (ixsym.eq.0) then
        if (iysym.ne.0.and.izsym.eq.0) then
          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.ne.0) then

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym and izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        endif !(izsym.ne.) then

      else !:ixsym.eq.0

        if (iysym.eq.0.and.izsym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=xsymmm+(xsymmm-bpemag(1,icorn,iplan,imag))
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (iysym.ne.0.and.izsym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.eq.0) then

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y1z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x2y1z1
                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=xsymmm+(xsymmm-bpemag(1,icorn,iplan,imag))
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x2y1z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=xsymmm+(xsymmm-bpemag(1,icorn,iplan,imag))
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        else if (izsym.ne.0.and.iysym.ne.0) then

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y1z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y2z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+2*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym and izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x1y2z2
                htup(1)=bpebc(15,imag)
                htup(2)=imag+3*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                !x2y1z1
                htup(1)=bpebc(15,imag)
                htup(2)=imag+4*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+5*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !iysym and izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+6*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=-bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

          do imag=1,nmag !izsym
            do iplan=1,ibpeplan(imag)
              do icorn=1,ibpecorn(iplan,imag)

                htup(1)=bpebc(15,imag)
                htup(2)=imag+7*nmag
                htup(3)=ibpecol(imag)
                htup(4)=iplan
                htup(5)=icorn*sign(1,ibpecorn(iplan,imag))
                htup(6)=2.0d0*xsymmm-bpemag(1,icorn,iplan,imag)
                htup(7)=bpemag(2,icorn,iplan,imag)
                htup(8)=-bpemag(3,icorn,iplan,imag)
                htup(9)=-bpebc(4,imag)
                htup(10)=bpebc(5,imag)
                htup(11)=-bpebc(6,imag)
                htup(12)=bpebc(9,imag)

                vmaglab(1)=bpebc(4,imag)
                vmaglab(2)=bpebc(5,imag)
                vmaglab(3)=bpebc(6,imag)

                bc=sqrt(vmaglab(1)**2+vmaglab(2)**2+vmaglab(3)**2)
                bpebc(7,imag)=bc

                if (bc.ne.0.0d0) then
                  do i=5,10
                    if (abs(htup(i)).lt.1.0d-15) htup(i)=1.0d-15
                  enddo
                  write(cline,'(5f9.0,6e15.5e3,f7.0)')htup
                  chmoth1a=chmoths(1:32,imag)
                  c32a=chmags(1:32,imag)
                  cline=trim(cline) // " " // trim(c32) // " " // trim(chmoth1)
                  write(lunmag,'(a)') trim(cline)
                endif !BC

              enddo !ncorn
            enddo !nplan
          enddo !nmag

        endif !(izsym.ne.) then

      endif !(ixsym.eq.0) then

19    close(lunmag)
      close(lun76)

      deallocate(corn1,corn2,ncorn1,ncorn2)

+self,if=chmagpols.
      if (nmag.gt.0) then
        nmagpols=1
        chmagpols(1:32,nmagpols)=chmoths(1:32,1)
      endif

      do imag=2,nmag
        do imp=1,nmagpols
          ifound=1
          do ic=1,32
            if (chmoths(ic,imag).ne.chmagpols(ic,imp)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.0) then
            nmagpols=nmagpols+1
            chmagpols(1:32,nmagpols)=chmoths(1:32,imag)
            exit
          endif
        enddo
      enddo

      do imag=1,nmag
        do imp=1,nmagpols
          ifound=1
          do ic=1,32
            if (chmoths(ic,imag).ne.chmagpols(ic,imp)) then
              ifound=0
              exit
            endif
          enddo
          if (ifound.eq.1) then
            bpebc(15,imag)=imp
            exit
          endif
        enddo
      enddo
+self.,if=chmagpols.

      kforcemag=0

      if (iforce.eq.9999.or.iforcedip.ne.0) then

        if (chforcemag.eq.'') then
          write(lun6,*)"*** iforce=9999, but chforcemag is an empty string ***"
          write(lun6,*)
          stop
        endif

        write(lun6,*)""
        write(lun6,*)"      chforcemag: ",trim(chforcemag)
        do imag=1,nmag
          do ic=1,32
            chmoth(ic:ic)=chmoths(ic,imag)
          enddo
          if (chmoth.eq.chforcemag) then
            kforcemag=imag
            exit
          endif
        enddo

c        call undumag_magpol_index(chforcemag,kforcemag)
        if (kforcemag.eq.0) then
          write(lun6,*)"*** Magnet ",trim(chforcemag),"  for force calculations not found ***"
          write(lun6,*)"*** Check undumag_magnets.lis ***"
          stop
        endif

        if (chforcemag.eq.'') then
          chforcemag='None'
        endif

      endif !iforce, iforcedip

      if (iforce.eq.9999) then

        moth=nint(bpebc(15,kforcemag))

        xminfb=1.0d30
        xmaxfb=-1.0d30
        yminfb=1.0d30
        ymaxfb=-1.0d30
        zminfb=1.0d30
        zmaxfb=-1.0d30

        do imag=1,nmag
          gcen=bpebc(1:3,imag)
          bpebc15=bpebc(15,imag)
          if (nint(bpebc15).ne.moth) cycle
          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              x=bpemag(1,icorn,iplan,imag)
              y=bpemag(2,icorn,iplan,imag)
              z=bpemag(3,icorn,iplan,imag)
              if (x.lt.xminfb) xminfb=x
              if (x.gt.xmaxfb) xmaxfb=x
              if (y.lt.yminfb) yminfb=y
              if (y.gt.ymaxfb) ymaxfb=y
              if (z.lt.zminfb) zminfb=z
              if (z.gt.zmaxfb) zmaxfb=z
            enddo !icorn
          enddo !iplan
        enddo

        ubfcenx=(xmaxfb+xminfb)/2.0d0
        ubflenx=(xmaxfb-xminfb)
        if (ixsym.ne.0.and.(xmin.le.xsym.or.xmax.ge.xsym)) then
          ubfcenz=xsym
          ubflenz=2.0d0*ubflenz
        endif

        ubfceny=(ymaxfb+yminfb)/2.0d0
        ubfleny=(ymaxfb-yminfb)

        ubfcenz=(zmaxfb+zminfb)/2.0d0
        ubflenz=(zmaxfb-zminfb)
        if (izsym.ne.0) then
          ubfcenz=0.0d0
          ubflenz=2.0d0*ubflenz
        endif

        ubflenx=ubflenx+dedgefb
        ubfleny=ubfleny+dedgefb
        ubflenz=ubflenz+dedgefb

        if (utorqcenx.eq.9999.0d0) utorqcenx=ubfcenx
        if (utorqceny.eq.9999.0d0) utorqceny=ubfceny
        if (utorqcenz.eq.9999.0d0) utorqcenz=ubfcenz

        bfcenxmm=ubfcenx
        bfcenymm=ubfceny
        bfcenzmm=ubfcenz
        bflenxmm=ubflenx
        bflenymm=ubfleny
        bflenzmm=ubflenz
        torqcenxmm=utorqcenx
        torqcenymm=utorqceny
        torqcenzmm=utorqcenz
        bfcenx=ubfcenx/1000.0d0
        bfceny=ubfceny/1000.0d0
        bfcenz=ubfcenz/1000.0d0
        bflenx=ubflenx/1000.0d0
        bfleny=ubfleny/1000.0d0
        bflenz=ubflenz/1000.0d0
        torqcenx=utorqcenx/1000.0d0
        torqceny=utorqceny/1000.0d0
        torqcenz=utorqcenz/1000.0d0
        jplforce=iplforce
        if (iforce.eq.0) then
          mbforcex=0
          mbforcey=0
          mbforcez=0
        endif
        nbforcx=mbforcex
        nbforcy=mbforcey
        nbforcz=mbforcez
        iforcol=mfcolor
        forcol=iforcol
        forxpl(1)=bfcenxmm-bflenxmm/2.
        forxpl(2)=bfcenxmm+bflenxmm/2.
        forypl(1)=bfcenymm-bflenymm/2.
        forypl(2)=bfcenymm+bflenymm/2.
        forzpl(1)=bfcenzmm-bflenzmm/2.
        forzpl(2)=bfcenzmm+bflenzmm/2.

      endif !(iforce.eq.9999) then

      if (mbforcex*mbforcey*mbforcez.gt.0) then
        outbox(1,1)=ubfcenx-ubflenx/2.
        outbox(2,1)=ubfcenx+ubflenx/2.
        outbox(1,2)=ubfceny-ubfleny/2.
        outbox(2,2)=ubfceny+ubfleny/2.
        outbox(1,3)=ubfcenz-ubflenz/2.
        outbox(2,3)=ubfcenz+ubflenz/2.
      else
        outbox(1,1)=+1.0d30
        outbox(2,1)=-1.0d30
        outbox(1,2)=+1.0d30
        outbox(2,2)=-1.0d30
        outbox(1,3)=+1.0d30
        outbox(2,3)=-1.0d30
      endif

      do i=1,ncwires
        wire(3,i)=wire(3,i)+xcentershift
        wire(6,i)=wire(6,i)+xcentershift
      enddo

      if (nmag.eq.0) then
        xmin=1.0d30
        xmax=-1.0d30
        ymin=1.0d30
        ymax=-1.0d30
        zmin=1.0d30
        zmax=-1.0d30
      endif

      do i=1,ncwires
        if (wire(3,i).lt.xmin) xmin=wire(3,i)
        if (wire(3,i).gt.xmax) xmax=wire(3,i)
        if (wire(6,i).lt.xmin) xmin=wire(6,i)
        if (wire(6,i).gt.xmax) xmax=wire(6,i)
        if (wire(4,i).lt.ymin) ymin=wire(4,i)
        if (wire(4,i).gt.ymax) ymax=wire(4,i)
        if (wire(7,i).lt.ymin) ymin=wire(7,i)
        if (wire(7,i).gt.ymax) ymax=wire(7,i)
        if (wire(5,i).lt.zmin) zmin=wire(5,i)
        if (wire(5,i).gt.zmax) zmax=wire(5,i)
        if (wire(8,i).lt.zmin) zmin=wire(8,i)
        if (wire(8,i).gt.zmax) zmax=wire(8,i)
      enddo

      if (xmapmin.eq.9999.0d0) then
        xmapmin=xmin+mod(xmin,perlen)-9.0d0*perlen
        if (xmapmin.gt.xcwmin) xmapmin=xcwmin
      else if (xmapmin.eq.9000.0d0) then
        xmapmin=xcenter-perlen/2.0d0
        if (xmapmin.gt.xcwmin) xmapmin=xcwmin
      else if (xmapmin.eq.-9000.0d0) then
        xmapmin=xcenter-perlen/4.0d0
        if (xmapmin.gt.xcwmin) xmapmin=xcwmin
      endif

      if (xmapmax.eq.9999.0d0) then
        xmapmax=xmax-mod(xmax,perlen)+10.0d0*perlen
        if (xmapmax.lt.xcwmax) xmapmax=xcwmax
      else if (xmapmax.eq.9000.0d0) then
        xmapmax=xcenter+perlen/2.0d0
        if (xmapmax.lt.xcwmax) xmapmax=xcwmax
      else if (xmapmax.eq.-9000.0d0) then
        xmapmax=xcenter+perlen/4.0d0
        if (xmapmax.lt.xcwmax) xmapmax=xcwmax
      endif

      if (iplot.ne.0.and.nmag+ncwires.ne.0) then
        xplmin=xminpl
        xplmax=xmaxpl
        yplmin=yminpl
        yplmax=ymaxpl
        zplmin=zminpl
        zplmax=zmaxpl
        if (xminpl.eq.9999.0d0) xplmin=xmin-(xmax-xmin)*0.1
        if (xmaxpl.eq.9999.0d0) xplmax=xmax+(xmax-xmin)*0.1
        if (yminpl.eq.9999.0d0) yplmin=ymin-(ymax-ymin)*0.1
        if (ymaxpl.eq.9999.0d0) yplmax=ymax+(ymax-ymin)*0.1
        if (zminpl.eq.9999.0d0) zplmin=zmin-(zmax-zmin)*0.1
        if (zmaxpl.eq.9999.0d0) zplmax=zmax+(zmax-zmin)*0.1
        call undumag_bpolyplot_old(iplot,xplmin,xplmax,yplmin,yplmax,zplmin,zplmax,
     &    theta,pphi,nwitems,ncwires,wire)
      endif !iplot

      if (dxmap.eq.0.0d0.and.nxmap.eq.0.0d0) then
        nxmap=1
      endif

      if (dxmap.eq.9999.0d0) then
        if (nxbeff.gt.1) then
          dxmap=perlen/(nxbeff-1)
        else
          dxmap=perlen
        endif
      endif
      if (dxmap.ne.0.0d0) nxmap=nint((xmapmax-xmapmin)/dxmap)+1
      if (nxmap.le.0) then
        write(lun6,*)"*** Warning in undumag_ini_old: nxmap.le.0 ***"
      endif

      if (nymap.le.0) nymap=1
      if (nzmap.le.0) nzmap=1

cdebug
      if (nmag.le.0.and.ncwires.eq.0) goto 9999

      if (kpreset.ne.0) then

        maxplan=0

        open(newunit=lunpre,file='undumag.pre',status='old')
        npre=0
12      continue
        read(lunpre,*,end=92)nplan
        if (nplan.gt.maxplan) maxplan=nplan
        do iplan=1,nplan
          read(lunpre,*,end=92)xx
        enddo
        npre=npre+1
        goto 12
92      rewind(lunpre)

        allocate(bcpre(6,maxplan,npre),bpre16(16,npre))

        do ipre=1,npre
          read(lunpre,*)nplan,bpre16(1:15,ipre)
          bpre16(16,ipre)=nplan
          do iplan=1,nplan
            read(lunpre,*)bcpre(1:6,iplan,ipre)
c            write(33,*),ipre,iplan,bcpre(1:6,iplan,ipre)
          enddo
        enddo

        close(lunpre)

        do imag=1,nmag

          xx=bpebc(1,imag)
          yy=bpebc(2,imag)
          zz=bpebc(3,imag)

          ifound=0

          do ipre=1,npre

            nplan=nint(bpre16(16,ipre))

            do iplan=1,nplan

              dlab(1)=xx-bcpre(1,iplan,ipre)
              dlab(2)=yy-bcpre(2,iplan,ipre)
              dlab(3)=zz-bcpre(3,iplan,ipre)

              vnormlab(1)=bcpre(4,iplan,ipre)
              vnormlab(2)=bcpre(5,iplan,ipre)
              vnormlab(3)=bcpre(6,iplan,ipre)

              if( dlab(1)*vnormlab(1)+dlab(2)*vnormlab(2)+
     &            dlab(3)*vnormlab(3).gt.0.0d0) then
                goto 99
              endif

            enddo !iplan

            ifound=ipre

            lmat=matmaps(2,nint(bpebc(9,imag)))

            bpebc(1:15,imag)=bpre16(1:15,ipre)
            bpebc(16,imag)=0.0d0

            if (lmat.eq.2) then
              bpebc(14,imag)=bpre16(7,ipre)
              bpebc(11:13,imag)=bpre16(4:6,ipre)/bpre16(7,ipre)
            else if (lmat.eq.1.and.maxiterrec.gt.0) then
              bn=bpre16(14,ipre)
              bpebc(4:6,imag)=bpre16(11:13,ipre)*bn
              bpebc(7,imag)=bn
            endif

            goto 999
99          continue

          enddo !npre
999       continue

          if (ifound.eq.0) then
            write(lun6,*)"*** Warning in undumag_ini_old: No preset values found for magnet:",imag,xx,yy,zz
            bpebc(4:7,imag)=0.0d0
          endif

        enddo !imag

        deallocate(bcpre,bpre16)

      endif !kpreset

      if (iundugeo.ne.0) then

        write(lun6,*)
        write(lun6,*)'Writing geometry to undumag.geo'
        write(lun6,*)

        open(newunit=lunvox,file="undumag.geo")

        write(lunvox,'(a)')
     &    "* mag type xcen ycen zcen mother ixdiv iydiv izdiv mate color bcx bcy bcz bc plane corn x y z"

        if (nmag.gt.0) then
          moth=1
          do ic=1,32
            chmag(ic:ic)=chmags(ic,moth)
          enddo
        endif

        do imag=1,nmag

          gcen=bpebc(1:3,imag)
          nplan=ibpeplan(imag)
          moth=bpebc(15,imag)

          if(moth.ne.motho) then

            do ic=1,32
              chmag(ic:ic)=chmags(ic,imag)
            enddo

            write(cline,*)"* ",trim(chmag),moth
            write(lunvox,'(a)')cline(2:len_trim(cline))

            motho=moth

          endif

          imat=bpebc(9,imag)
          ispec=bpebc(10,imag)
          bx=bpebc(11,imag)
          by=bpebc(12,imag)
          bz=bpebc(13,imag)
          bc=bpebc(14,imag)
          ncol=ibpecol(imag)
          itype=bpebc(8,imag)
          mothdiv(1,imag)=moth
          motho=0

          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              x=bpemag(1,icorn,iplan,imag)
              y=bpemag(2,icorn,iplan,imag)
              z=bpemag(3,icorn,iplan,imag)
              write(lunvox,*)imag,itype,
     &          sngl(gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &          ,mothdiv(1:4,imag),imat,ncol
     &          ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &          ,iplan,icorn
     &          ,sngl(x),sngl(y),sngl(z)
     &          ,chmags(:,imag),chmoths(:,imag)
              if (kplsym.ne.0) then
                if (ixsym.ne.0.and.iysym.ne.0.and.izsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)4*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)5*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)6*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)7*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(-y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (ixsym.ne.0.and.iysym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (ixsym.ne.0.and.izsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(-bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (iysym.ne.0.and.izsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)2*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(bz),sngl(-bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                  write(lunvox,*)3*nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (ixsym.ne.0) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(-x),sngl(y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (iysym.ne.0.) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(-y),sngl(z)
     &              ,chmags(:,imag),chmoths(:,imag)
                else if (izsym.ne.0.) then
                  write(lunvox,*)nmag+imag,itype,
     &              sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &              ,mothdiv(1:4,imag),imat,ncol
     &              ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &              ,iplan,icorn
     &              ,sngl(x),sngl(y),sngl(-z)
     &              ,chmags(:,imag),chmoths(:,imag)
                endif !syms
              endif !(kplsym.ne.0) then
            enddo
          enddo
        enddo !nmag

        do i=1,ncwires
          mag=i
          itype=wire(1,i)
          moth=wire(10,i)
          icol=wire(9,i)
          x1=wire(3,i)
          y1=wire(4,i)
          z1=wire(5,i)
          ix=1
          iy=1
          iz=1
          mat=-1
          icol=wire(9,i)
          x2=wire(6,i)
          y2=wire(7,i)
          z2=wire(8,i)
          xc=(x2+x1)/2.0
          yc=(y2+y1)/2.0
          zc=(z2+z1)/2.0
          x21=(x2-x1)
          y21=(y2-y1)
          z21=(z2-z1)
          cw=wire(2,i)
          iplan=0
          icorn=0
          write(lunvox,*)mag,itype,xc,yc,zc,moth,ix,iy,iz,mat,icol,dx,dy,dz,cw,
     &      iplan,icorn,x1,y1,z1," wire", " wire"
        enddo !ncwires

        write(lun6,*)
        write(lun6,*)'Done'
        write(lun6,*)

        close(lunvox)

        if (iundugeo.lt.0) then
          open(newunit=lun,file="undumag.stat")
          write(lun,*)"0"
          flush(lun)
          close(lun)
          open(newunit=lun,file="undumag.sta")
          write(lun,*)'UNDUMAG finished due to iundugeo<0'
          flush(lun)
          close(lun)
          stop
        endif

      endif !(iundugeo.ne.0) then

      if (kseg.eq.1) then
+self,if=trace.
      print*,"-trace-: Leaving undumag_ini_old "
+self.
        return
      endif

      maxpoints=ncornmax*nplanmax

      if (ihullallo.ne.0) then
        deallocate(hull,khull,kface,kedge,xhull,yhull,zhull)
      endif

      allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints))
      allocate(khull(maxpoints))
      allocate(kedge(4,2*maxpoints-2),kface((maxpoints+1)*maxpoints))

cdebug
      if (ivrml.ne.0) then

        write(lun6,*)
        write(lun6,*)'Writing geometry to CAD file undumag.wrl'
        write(lun6,*)

        allocate(khullmoth(maxpoints,nmoth),
     &    kfacemoth(maxpoints,nmoth),nplanmoth(nmoth))

        open(newunit=lunvrml,file="undumag.wrl")

        write(lunvrml,'(a)')"#VRML V2.0 utf8"
        write(lunvrml,*)
        write(cline,*)"# UNDUMAG: ",kundurun,trim(usercom),' ',
     &    dttime(1:2),':',dttime(3:4),':',dttime(5:6),' '
     &    ,dtday(7:8),'.',dtday(5:6),'.',dtday(3:4)
        write(lunvrml,*)cline(2:len_trim(cline))
        write(lunvrml,*)" "

        if (ivrml.eq.1.or.ivrml.eq.2) then

          do moth=1,nmoth

            do ic=1,32
              chmag(ic:ic)=chmags(ic,moth)
            enddo

            write(lunvrml,*)" "
            write(lunvrml,*)"# --- ",chmag
            write(lunvrml,*)" "

            korn=npmoth(moth)
            xhull(1:korn)=xmoth(1:korn,moth)
            yhull(1:korn)=ymoth(1:korn,moth)
            zhull(1:korn)=zmoth(1:korn,moth)

            call util_weed_points(korn,xhull,yhull,zhull,tiny)

            call util_convex_hull_3d(korn,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
              write(lun6,*)"*** writing of VRML-File"
              stop
            endif

            khullmoth(1:nhull,moth)=khull(1:nhull)
            kfacemoth(1:kfacelast,moth)=kface(1:kfacelast)
            nplanmoth(moth)=nface

! Magnet is represented by faces

            write(lunvrml,*)"Shape{"
            write(lunvrml,*)" "
            write(lunvrml,*)"  appearance Appearance{"
            write(lunvrml,*)"    material Material{"
            color(1)=1
            color(2)=1
            color(3)=1
            if (ncolmoth(moth).eq.1) then !black
              color(1)=0
              color(2)=0
              color(3)=0
            else if (ncolmoth(moth).eq.2) then !red
              color(1)=1
              color(2)=0
              color(3)=0
            else if (ncolmoth(moth).eq.3) then !bright green
              color(1)=0
              color(2)=1
              color(3)=0
            else if (matmoth(moth).eq.4) then !blue
              color(1)=0
              color(2)=0
              color(3)=1
            else if (ncolmoth(moth).eq.5) then !gelb
              color(1)=1.
              color(2)=1.
              color(3)=0
            else if (ncolmoth(moth).eq.6) then !magenta
              color(1)=1
              color(2)=0
              color(3)=1
            else if (ncolmoth(moth).eq.7) then !light blau
              color(1)=0
              color(2)=1
              color(3)=1
            else if (ncolmoth(moth).eq.8) then ! green
              color(1)=0.35
              color(2)=0.83
              color(3)=0.33
            else if (ncolmoth(moth).eq.9) then !dark blue
              color(1)=0.35
              color(2)=0.33
              color(3)=0.85
            endif

            write(lunvrml,*)"      diffuseColor", color
            write(lunvrml,*)"    } # End of Material"
            write(lunvrml,*)"  } # End of Appearance"
            write(lunvrml,*)" "
            write(lunvrml,*)"  geometry IndexedFaceSet {"
            write(lunvrml,*)
            write(lunvrml,*)"      coord Coordinate{"

            write(lunvrml,*)"         point ["

            do korn=1,nhull
              x=xhull(korn)
              y=yhull(korn)
              z=zhull(korn)
              write(lunvrml,*)"          ",sngl(x),sngl(y),sngl(z),","
            enddo !nhull
            write(lunvrml,*)"         ] # End of point"

            write(lunvrml,*)"      } # End of Coordinate"
            write(lunvrml,*)
            write(lunvrml,*)"       coordIndex ["

cdebug
            korn=1
            do iplan=1,nface
              ncorn=kface(korn)
              do icorn=1,ncorn
                korn=korn+1
                ipoi=kface(korn)-1
                if (icorn.eq.1) i=ipoi
                write(lunvrml,*)"              ",ipoi,","
              enddo
              write(lunvrml,*)"                 ",i,"-1,"
              korn=korn+1
            enddo !nplan

            write(lunvrml,*)"       ] # End of coordIndex"
            write(lunvrml,*)"  } # End of Geometry"
            write(lunvrml,*)"} # End of Shape"
            write(lunvrml,*)" "

            if (kplsym.ne.0) then
              if (ixsym.ne.0.and.iysym.ne.0.and.izsym.ne.0) then
              else if (ixsym.ne.0.and.iysym.ne.0) then
              else if (ixsym.ne.0.and.izsym.ne.0) then
              else if (iysym.ne.0.and.izsym.ne.0) then
              else if (ixsym.ne.0) then
              else if (iysym.ne.0.) then
              else if (izsym.ne.0.) then
              endif !syms
            endif !(kplsym.ne.0) then

          enddo !nmoth

        endif !ivrml.eq.1

! Magnets is represented by lines to visualize the segmentation

        if (ivrml.eq.2) then

          do moth=1,nmoth

            do imag=1,nmag

              npoi=0
              nplan=ibpeplan(imag)
              do iplan=1,nplan
                ncorn=ibpecorn(iplan,imag)
                do icorn=1,ncorn
                  npoi=npoi+1
                  xhull(npoi)=bpemag(1,icorn,iplan,imag)
                  yhull(npoi)=bpemag(2,icorn,iplan,imag)
                  zhull(npoi)=bpemag(3,icorn,iplan,imag)
                enddo
              enddo

              call util_weed_points(npoi,xhull,yhull,zhull,tiny)

              call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &          nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

              if (ifailhull.ne.0.or.nhull.lt.4) then
                write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
                write(lun6,*)"*** writing of VRML-File"
                stop
              endif

              do ic=1,32
                chmag(ic:ic)=chmags(ic,imag)
              enddo

              write(lunvrml,*)" "
              write(lunvrml,*)"# ",chmag
              write(lunvrml,*)" "

              write(lunvrml,*)"Shape{"
              write(lunvrml,*)" "
              write(lunvrml,*)"  geometry IndexedLineSet {"
              write(lunvrml,*)
              write(lunvrml,*)"      coord Coordinate{"

              write(lunvrml,*)"         point ["

              do korn=1,npoi
                x=xhull(korn)
                y=yhull(korn)
                z=zhull(korn)
                write(lunvrml,*)"          ",sngl(x),sngl(y),sngl(z),","
              enddo !nhull

              write(lunvrml,*)"         ] # End of point"

              write(lunvrml,*)"      } # End of Coordinate"
              write(lunvrml,*)

              write(lunvrml,*)
              write(lunvrml,*)"       coordIndex ["

              korn=1
              do iplan=1,nface
                ncorn=kface(korn)
                gcen=0.0d0
                do icorn=1,ncorn
                  korn=korn+1
                  ipoi=kface(korn)
                  x=xhull(ipoi)
                  y=yhull(ipoi)
                  z=zhull(ipoi)
                  gcen(1)=gcen(1)+x
                  gcen(2)=gcen(2)+y
                  gcen(3)=gcen(3)+z
                enddo
                gcen=gcen/ncorn
                korn=korn+1
                kornmoth=1
                ifound=0
                do kplan=1,nplanmoth(moth)
                  npoimoth=kfacemoth(kornmoth,moth)
                  ipoimoth=kfacemoth(kornmoth+1,moth)
                  p1(1)=xmoth(ipoimoth,moth)
                  p1(2)=ymoth(ipoimoth,moth)
                  p1(3)=zmoth(ipoimoth,moth)
                  ipoimoth=kfacemoth(kornmoth+2,moth)
                  p2(1)=xmoth(ipoimoth,moth)
                  p2(2)=ymoth(ipoimoth,moth)
                  p2(3)=zmoth(ipoimoth,moth)
                  ipoimoth=kfacemoth(kornmoth+3,moth)
                  p3(1)=xmoth(ipoimoth,moth)
                  p3(2)=ymoth(ipoimoth,moth)
                  p3(3)=zmoth(ipoimoth,moth)
                  kornmoth=kornmoth+npoimoth+1
                  call util_plane(p1,p2,p3,gcen,vnor,dist,iover,istat)
                  if (abs(dist).lt.tiny) then
                    ifound=kplan
                    exit
                  endif
                enddo !kplan
                if (ifound.ne.0) then
                  korn=korn-ncorn-1
                  do icorn=1,ncorn
                    korn=korn+1
                    ipoi=kface(korn)-1
                    if (icorn.eq.1) i=ipoi
                    write(lunvrml,*)"              ",ipoi,","
                  enddo
                  korn=korn+1
                  write(lunvrml,*)"                 ",i,"-1,"
                endif
              enddo !nplan

              write(lunvrml,*)"       ] # End of coordIndex"

              write(lunvrml,*)"  } # End of Geometry"
              write(lunvrml,*)"} # End of Shape"
              write(lunvrml,*)" "

            enddo !nmag

          enddo !nmoth

        endif !vrml.eq.2

        if (ivrml.eq.-1) then

          do imag=1,nmag

            npoi=0
            nplan=ibpeplan(imag)
            ncol=ibpecol(imag)

            color(1)=1
            color(2)=1
            color(3)=1

            if (ncol.eq.1) then !black
              color(1)=0
              color(2)=0
              color(3)=0
            else if (ncol.eq.2) then !red
              color(1)=1
              color(2)=0
              color(3)=0
            else if (ncol.eq.3) then !bright green
              color(1)=0
              color(2)=1
              color(3)=0
            else if (ncol.eq.4) then !blue
              color(1)=0
              color(2)=0
              color(3)=1
            else if (ncol.eq.5) then !gelb
              color(1)=1.
              color(2)=1.
              color(3)=0
            else if (ncol.eq.6) then !magenta
              color(1)=1
              color(2)=0
              color(3)=1
            else if (ncol.eq.7) then !light blau
              color(1)=0
              color(2)=1
              color(3)=1
            else if (ncol.eq.8) then ! green
              color(1)=0.35
              color(2)=0.83
              color(3)=0.33
            else if (ncol.eq.9) then !dark blue
              color(1)=0.35
              color(2)=0.33
              color(3)=0.85
            endif

            do iplan=1,nplan
              ncorn=ibpecorn(iplan,imag)
              do icorn=1,ncorn
                npoi=npoi+1
                xhull(npoi)=bpemag(1,icorn,iplan,imag)
                yhull(npoi)=bpemag(2,icorn,iplan,imag)
                zhull(npoi)=bpemag(3,icorn,iplan,imag)
              enddo
            enddo

            call util_weed_points(npoi,xhull,yhull,zhull,tiny)

            call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &        nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

            if (ifailhull.ne.0.or.nhull.lt.4) then
              write(lun6,*)"*** Error in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
              write(lun6,*)"*** writing of VRML-File"
              stop
            endif

            do ic=1,32
              chmag(ic:ic)=chmags(ic,imag)
            enddo

            write(lunvrml,*)" "
            write(lunvrml,*)"# ",chmag
            write(lunvrml,*)" "

            write(lunvrml,*)"Shape{"
            write(lunvrml,*)" "
            write(lunvrml,*)"  geometry IndexedLineSet {"
            write(lunvrml,*)
            write(lunvrml,*)"      coord Coordinate{"

            write(lunvrml,*)"         point ["

            do korn=1,npoi
              x=xhull(korn)
              y=yhull(korn)
              z=zhull(korn)
              write(lunvrml,*)"          ",sngl(x),sngl(y),sngl(z),","
            enddo !nhull

            write(lunvrml,*)"         ] # End of point"

            write(lunvrml,*)"      } # End of Coordinate"
            write(lunvrml,*)

            write(lunvrml,*)"       color Color {"
            write(lunvrml,*)"         color [", color," ] # End of color"
            write(lunvrml,*)"       } # End of color Color"
            write(lunvrml,*)
            write(lunvrml,*)"       coordIndex ["

            korn=1
            nedge=0
            do iplan=1,nface
              ncorn=kface(korn)
              do icorn=1,ncorn
                nedge=nedge+1
                korn=korn+1
                ipoi=kface(korn)-1
                if (icorn.eq.1) i=ipoi
                write(lunvrml,*)"              ",ipoi,","
              enddo
              korn=korn+1
              write(lunvrml,*)"                 ",i,"-1,"
            enddo !nplan

            write(lunvrml,*)"       ] # End of coordIndex"
            write(lunvrml,*)

            write(lunvrml,*)"       colorIndex ["
            do iedge=1,nedge
              write(lunvrml,*)"       0, 0,"
            enddo
            write(lunvrml,*)"       ] # End of colorIndex"
            write(lunvrml,*)
            write(lunvrml,*)"  } # End of Geometry"
            write(lunvrml,*)"} # End of Shape"
            write(lunvrml,*)" "

          enddo !nmag

        endif !vrml.eq.-1

        write(lunvrml,*)
        write(lunvrml,*)"# Coils"
        write(lunvrml,*)

        do i=1,ncwires
          xp1=wire(3,i)
          yp1=wire(4,i)
          zp1=wire(5,i)
          xp2=wire(6,i)
          yp2=wire(7,i)
          zp2=wire(8,i)
          if (((xp2-xp1)**2+(yp2-yp1)**2+(zp2-zp1)**2)*abs(wire(2,i)).lt.1.0d-12)
     &      cycle
          write(lunvrml,*)"Shape{"
          write(lunvrml,*)" "
          write(lunvrml,*)"  geometry IndexedLineSet {"
          write(lunvrml,*)
          write(lunvrml,*)"      coord Coordinate{"
          write(lunvrml,*)"         point ["
          write(lunvrml,*)"          ",xp1,yp1,zp1,","
          write(lunvrml,*)"          ",xp2,yp2,zp2,","
          write(lunvrml,*)"         ] # End of point"
          write(lunvrml,*)"      } # End of Coordinate"
          write(lunvrml,*)
          write(lunvrml,*)
          write(lunvrml,*)"       coordIndex ["
          write(lunvrml,*)"                 0,"
          write(lunvrml,*)"                 1, -1,"
          write(lunvrml,*)"       ] # End of coordIndex"

          write(lunvrml,*)"  } # End of Geometry"
          write(lunvrml,*)"} # End of Shape"
          write(lunvrml,*)" "

        enddo !ncwires

        write(lunvrml,*)
        write(lunvrml,*)"# End of Coils"
        write(lunvrml,*)

        close(lunvrml)

        write(lun6,*)
        write(lun6,*)'Done'
        write(lun6,*)

        deallocate(khullmoth,kfacemoth,nplanmoth)
      endif !ivrml.ne.0

      bpebc(17,1:nmag)=0.0d0
      if (intmaglis.ne.0) then
        ifound=0
        write(lun6,*)
        write(lun6,*)" --- Due to flag intmaglis, only magnets on file undumag_magmap.lis do contribute to field map ---"
        write(lun6,*)
        open(newunit=lunlis,file="undumag_magmap.lis")
        do while (.true.)
          call util_skip_comment_end(lunlis,ieof)
          if (ieof.ne.0) exit
          read(lunlis,*)chsel,bpe17
          do imag=1,nmag
            write(chmoth,'(32a)')chmoths(1:32,imag)
            if (chmoth.eq.chsel) then
              if (bpe17.gt.0.0d0) then
                bpebc(17,imag)=1.0d0
              else if (bpe17.lt.0.0d0) then
                bpebc(17,imag)=2.0d0
              endif
              ifound=1
            endif
          enddo
        enddo
        close(lunlis)
      endif !intmaglis

      open(newunit=lun,file='undumag_magnets.lis')
      do imag=1,nmag
c        write(lun6,*)imag,chmags(1:32,imag),nint(bpebc(15,imag)),
c     &    chmoths(1:32,imag)
        write(lun,*)imag,chmags(1:32,imag),chmoths(1:32,imag),
     &    sngl(bpebc(1,imag)),sngl(bpebc(2,imag)),sngl(bpebc(3,imag))
      enddo

      close(lun)

      open(newunit=lun,file='undumag_mother_magnets.lis')

      npoi=0
      ncount=0
      if (nmag.gt.0) motho=nint(bpebc(15,1))
      maxpoints=0

      do imag=1,nmag

        moth=nint(bpebc(15,imag))
c        write(lun6,*)"2 Info:",imag,moth,chmags(1:32,imag),chmoths(1:32,imag),npoi,maxpoints

        if (moth.eq.motho) then

          nplan=ibpeplan(imag)

          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
            enddo
          enddo

          if (npoi.gt.maxpoints) maxpoints=npoi

        else if (moth.ne.motho.or.imag.eq.nmag) then

          motho=moth
          if (npoi.gt.maxpoints) maxpoints=npoi
          npoi=0
          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
            enddo
          enddo

        endif !moth.eq.motho

      enddo !nmag

      deallocate(xhull,yhull,zhull,khull,kedge,kface)
      allocate(xhull(maxpoints),yhull(maxpoints),zhull(maxpoints),
     &  khull(maxpoints),kedge(4,2*maxpoints-2),
     &  kface((maxpoints+1)*maxpoints),stat=ierr)
      if (ierr.ne.0) then
        write(lun6,*)"*** Error while allocating xhull, yhull, zhull... Try less magnets...***"
        write(lun6,*)"*** Skipping writing undumag_mother_magnets.lis ***"
        goto 877
      endif

      npoi=0
      imag=1
      if (nmag.gt.0) motho=nint(bpebc(15,imag))

      do imag=1,nmag

        moth=nint(bpebc(15,imag))
        write(chmoth,'(32a)')chmoths(1:32,imag)
c        write(lun6,*)"3 Info:",imag,moth,chmags(1:32,imag),chmoths(1:32,imag)
c        write(lun6,*)imag,moth,chmoth

        if (moth.eq.motho) then
          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
              xhull(npoi)=bpemag(1,icorn,iplan,imag)
              yhull(npoi)=bpemag(2,icorn,iplan,imag)
              zhull(npoi)=bpemag(3,icorn,iplan,imag)
            enddo
          enddo

        else if (moth.ne.motho.or.imag.eq.nmag) then

          xmin=1.0d30
          xmax=-1.0d30
          ymin=1.0d30
          ymax=-1.0d30
          zmin=1.0d30
          zmax=-1.0d30
          do ipoi=1,npoi
            if (xhull(ipoi).lt.xmin) xmin=xhull(ipoi)
            if (xhull(ipoi).gt.xmax) xmax=xhull(ipoi)
            if (yhull(ipoi).lt.ymin) ymin=yhull(ipoi)
            if (yhull(ipoi).gt.ymax) ymax=yhull(ipoi)
            if (zhull(ipoi).lt.zmin) zmin=xhull(ipoi)
            if (zhull(ipoi).gt.zmax) zmax=xhull(ipoi)
          enddo

          dx=xmax-xmin
          dy=ymax-ymin
          dz=zmax-zmin

          if (dy.gt.dx) dx=dy
          if (dz.gt.dx) dx=dz

          call util_weed_points(npoi,xhull,yhull,zhull,tiny)
!hull
          call util_convex_hull_3d(npoi,xhull,yhull,zhull,khull,kedge,kface,
     &      nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

          if (ifailhull.ne.0.or.nhull.lt.4) then
            write(lun6,*)"*** Error ",ifailhull," in undumag_ini_old: Subroutine util_convex_hull_3d failed for "
            write(lun6,*)"*** writing of undumag_mother_magnets.lis"
            write(lun6,*)"*** Date written to util_convex_hull_3d.dat ***"
            open(newunit=lunf,file='util_convex_hull_3d.dat')
            do i=1,npoi
              write(lunf,*)xhull(i),yhull(i),zhull(i),i
            enddo
            close(lunf)
            nhull=npoi
            do icorn=1,nhull
              khull(icorn)=icorn
            enddo
c            stop
          endif

          gcen=0.0d0
          do icorn=1,nhull
            ipoi=khull(icorn)
            x=xhull(ipoi)
            y=yhull(ipoi)
            z=zhull(ipoi)
            gcen(1)=gcen(1)+x
            gcen(2)=gcen(2)+y
            gcen(3)=gcen(3)+z
c            write(lun6,*)chmoth1,motho,moth,imag,x,y,z
          enddo

          gcen=gcen/nhull
c          write(lun6,*)nhull,gcen

          ncount=ncount+1
c          write(lun6,*)"4 Info:",ncount,chmoth1,gcen
          write(lun,*) ncount,chmoth1,gcen

          motho=moth
          gcen=0.0d0
          npoi=0

          nplan=ibpeplan(imag)
          do iplan=1,nplan
            ncorn=ibpecorn(iplan,imag)
            do icorn=1,ncorn
              npoi=npoi+1
              xhull(npoi)=bpemag(1,icorn,iplan,imag)
              yhull(npoi)=bpemag(2,icorn,iplan,imag)
              zhull(npoi)=bpemag(3,icorn,iplan,imag)
            enddo
          enddo

        endif !moth.eq.motho

        chmoth1=chmoth

      enddo !nmag

877   flush(lun)
      close(lun)

      deallocate(xhull,yhull,zhull,khull,kedge,kface)

      call undumag_to_radia_old(kundurun,xsymmm,bpemag,ncornmax,nplanmax,nmag)

9999  deallocate(bpebc0,mothdiv,ncolmoth,
     &  xmoth,ymoth,zmoth,
     &  xmothm,ymothm,zmothm,
     &  xmothi,ymothi,zmothi,chmagsi,chmagsm,chmothsi,chmothsm,
     &  )

      if (nrec.eq.0) maxiterrec=1
      if (nrec.eq.0.and.ncwires.eq.0) then
        maxiteriron=1
        maxiter=1
      endif

      if (ncwires.ne.0.and.iforce.lt.0) then
        write(lun6,*)"*** Error in undumag_ini_old: Iforce<0 not yet implemented for coils and wires ***"
        write(lun6,*)"*** PROGRAM UNDUMAG ABORTED ***"
        stop
      endif

+self,if=randos.
      allocate(xyzsmear(3,nmag))
      do i=1,nmag
        call util_random(3,g)
        xyzsmear(1,i)=randos*g(1)
        xyzsmear(2,i)=randos*g(2)
        xyzsmear(3,i)=randos*g(3)
        bpebc(1:3,i)=bpebc(1:3,i)+xyzsmear(1:3,i)
      enddo
+self.

      zminprof=zplmin
      zmaxprof=zplmax

      if (iunduplot.lt.0) then
        open(newunit=lunst,file="undumag.stat")
        write(lunst,*)"0"
        flush(lunst)
        close(lunst)
        stop "--- Programm UNDUMAG terminated due to iunduplot < 0 ---"
      endif

+self,if=trace.
      print*,"-trace-: Leaving undumag_ini_old "
+self.
      end
+DECK,undumag_ini_magnets.
*CMZ :  2.04/13 04/09/2023  10.23.44  by  Michael Scheer
*CMZ :  2.04/02 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/00 25/02/2023  14.36.37  by  Michael Scheer
*CMZ :  2.02/02 02/03/2022  13.26.45  by  Michael Scheer
*CMZ :  2.02/01 11/02/2022  09.49.54  by  Michael Scheer
*-- Author :    Michael Scheer   01/04/2016
      subroutine undumag_ini_magnets(kseg)

      use bpolyederf90m
      use undumagf90m
      use commandlinef90m
      use magnets_structure

      implicit none

      integer:: kseg,itrace=0
+self,if=debcm.
      integer i,l,imag,n,ipoi,iplan
+self.

c      print*," "
c      print*," "
c      print*,"Baustellen:"
c      print*,"bpebc(18:20),corrtiny, dedgefb, simpson-file, chicut und andere Variablen aus undumag_ini_old.Randommechnismus, spez. mit Blick auf 1. Integral"
      print*," "

      ! Evaluate buffer of coils
      call clccoil_to_coils

      if (kseg.eq.2) return

      call undumag_read_modules

      ! Evaluate buffer of magnets and poles
      if (itrace.ne.0) print*,"calling clcbuff_to_magnets"
      call clcbuff_to_magnets

+self,if=debcm.
      do imag=1,nmag_t+nspecmag_t
        l=0
        do iplan=1,t_magnets(imag)%nface
          l=l+1
          n=t_magnets(imag)%kface(l)
          do i=1,n
            l=l+1
            ipoi=t_magnets(imag)%kface(l)
            write(902,*)imag,iplan,i,l,ipoi,
     &        t_magnets(imag)%xhull0(ipoi),
     &        t_magnets(imag)%yhull0(ipoi),
     &        t_magnets(imag)%zhull0(ipoi)
          enddo
        enddo
      enddo
+self.
      ! Apply translations, rotations, and copying of magnets and poles
      if (ntransrotcop.ne.0) call clctransrotcop

      ! Drop zero magnets , after the call, xhull, yhull, zhull refer to gcen
      if (itrace.ne.0) print*,"calling clcmag_drop_zero_magnets"
      call clcmag_drop_zero_magnets

      ! Coating of magnets
      if (itrace.ne.0) print*,"calling clcmag_shrink_magnets"
      call clcmag_shrink_magnets

      ! Calculate center and normals of faces
      if (itrace.ne.0) print*,"calling clcmag_faces"
      call util_zeit_kommentar(lun6,"Calculating faces of magnets")
      call clcmag_faces
      call util_zeit_kommentar(lun6,"Done")

      ! Mothers
      call clcmag_mothers

      ! inhomogenities of magnets
      call clcmag_inhom

      ! Evaluate modules
      call clcmag_copy_magnets

      ! Apply longitudinal symmetry and center set-up
      call clcmag_sym

      ! segmentation of magnets
      if (itrace.ne.0) print*,"calling clcmag_cut"
      call clcmag_cut

      if (kseg.ne.0) then
        if (itrace.ne.0) print*,"leaving undumag_ini_magnets"
        call util_zeit_kommentar(lun6,"Leaving undumag_ini_magnets")
        return
      endif

      ! convert to internal arrays for undumag_proc and undumag_end
      call util_zeit_kommentar(lun6,"Preparing magnet structure for relaxation")
      if (itrace.ne.0) print*,"calling clcmag_to_bpe"
      call clcmag_to_bpe
      if (itrace.ne.0) print*,"calling clcmag_ini_bpetm"
      call undumag_ini_bpetm
      call util_zeit_kommentar(lun6,"Done")


      ! write set-up to lists
      if (itrace.ne.0) print*,"calling clcmag_magnets_list"
      call clcmag_magnets_list

      call clcmag_ini_force
      if (itrace.ne.0) print*,"leaving undumag_ini_magnets"

      return
      end
+DECK,clcmag_copy_voxels.
*CMZ :  2.04/13 04/09/2023  10.41.24  by  Michael Scheer
*CMZ :  2.04/07 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/06 04/08/2023  11.26.53  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/00 24/12/2022  13.07.12  by  Michael Scheer
*CMZ :  2.02/01 19/01/2022  10.54.41  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021
      subroutine clcmag_copy_voxels

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      integer i_tvoxel_is_block
      integer imag,ivox,icopy,imodul,kmag

      type (T_Voxel) tv
      type (T_Voxel_Copy) tvc

+self,if=trace.
      print*,"-trace-: Entered clcmag_copy_voxels"
+self.

      call util_zeit_kommentar(lun6,"Entered clcmag_copy_voxels")

      nvoxcopy_t=0
      do imag=1,nmagtot_t
        nvoxcopy_t=nvoxcopy_t+t_magnets(t_magcopy(imag)%kproto)%nvoxels
      enddo !imag

      allocate(t_voxcopy(nvoxcopy_t))

      nrec=0
      niron=0
      nvoxcopy_t=0

      do imag=1,nmagtot_t
        kmag=t_magcopy(imag)%kproto
        imodul=t_magcopy(imag)%kmodule
        icopy=t_magcopy(imag)%kcopy
        do ivox=1,t_magnets(kmag)%nvoxels
          nvoxcopy_t=nvoxcopy_t+1
          t_voxcopy(nvoxcopy_t)%kmodule=imodul
          t_voxcopy(nvoxcopy_t)%kmagnet=imag
          t_voxcopy(nvoxcopy_t)%kproto=kmag
          t_voxcopy(nvoxcopy_t)%kvoxel=ivox
          t_voxcopy(nvoxcopy_t)%kcopy=icopy
          t_voxcopy(nvoxcopy_t)%gcen=t_magnets(kmag)%t_voxels(ivox)%gcen
     &      +t_magcopy(imag)%gcen-t_magnets(kmag)%gcen
          t_voxcopy(nvoxcopy_t)%br=t_magnets(kmag)%t_voxels(ivox)%br
          t_voxcopy(nvoxcopy_t)%Ispole=t_magnets(kmag)%Ispole
          if (t_magnets(kmag)%Ispole.eq.0) then
            nrec=nrec+1
          else
            niron=niron+1
          endif
        enddo !ivox
      enddo !imag

      do ivox=1,nvoxcopy_t
        tvc=t_voxcopy(ivox)
        imag=tvc%kproto
c        tmag=t_magnets(imag)
        tv=t_magnets(imag)%t_voxels(tvc%kvoxel)
        t_magnets(imag)%t_voxels(tvc%kvoxel)%IsBlock=t_magnets(imag)%IsBlock
        if (t_magnets(imag)%ctype.ne.'Cylinder'
     &      .and.tv%nhull.eq.8.and.tv%nedge.eq.12.and.tv%nface.eq.6
     &      .and.t_magnets(imag)%IsBlock.eq.0) then
          if (irecrepl.eq.0) then
            t_magnets(imag)%t_voxels(tvc%kvoxel)%IsBlock=-i_tvoxel_is_block(tv)
          else
            t_magnets(imag)%t_voxels(tvc%kvoxel)%IsBlock=i_tvoxel_is_block(tv)
          endif
        endif
      enddo !ivox

      call util_zeit_kommentar(lun6,"Leaving clcmag_copy_voxels")
+self,if=trace.
      print*,"-trace-: Leaving clcmag_copy_voxels"
+self.
      return
      end
+DECK,undumag_greeter.
*CMZ :  2.02/01 06/09/2023  07.42.08  by  Michael Scheer
*-- Author :    Michael Scheer   19/10/2021
      subroutine undumag_greeter
      use undumagf90m
      use commandlinef90m
      implicit none
+seq,unduver.
      return
      end
+DECK,clcbuff_to_magnets.
*CMZ :  2.04/14 06/09/2023  06.47.58  by  Michael Scheer
*CMZ :  2.04/11 26/08/2023  10.27.59  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  08.02.18  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  16.11.22  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  12.23.20  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  16.43.57  by  Michael Scheer
*CMZ :  2.04/01 22/01/2023  13.04.45  by  Michael Scheer
*CMZ :  2.04/00 17/01/2023  09.24.20  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  12.31.51  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  15.17.16  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2021
      subroutine clcbuff_to_magnets

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

+seq,grarad.

      character(2048) cline,cbuff(5),cfile,cline1
      character(128) cword,ckey

      double precision, dimension (:), allocatable :: xp,yp,zp,xpc,ypc,zpc

      double precision undumag_variable_getval,size(3),dphi

      double precision x,dx,dy,dz,Br(5),xc,yc,zc,gcen(3),chamf,
     &  r,h,phi,radin,radout,height,angle,xyz(3),vol

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: khull,kface

      integer i,k,l,m,kb,ib,ip,npoi,ir,ih,iphi,limit,
     &  nxdiv,nydiv,nzdiv,nhull,nface,nedge,kfacelast,kblockch

+self,if=debcm.
      integer n,ipoi,iplan
+self.
      integer ipos(2,1000),jpos(2,1000),nwords,istat,ibrn,ifound

      integer ifailhull,lun,ieof,kfail
      logical lexist

      !xhull,yhull,zhull are absolute at the end of this routine

      !call util_break
      nmag=nmag_t+nspecmag_t+nclccop_t

      allocate(t_magnets(nmag),t_magnets_copy(nmag))
      allocate(brnmat(2,nmag_t+nspecmag_t))

      nbrnmat=0

      nmag=0
      niron=0
      ncornmax=12
      nplanmax=8

      allocate(
     &  xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &  xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &  xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax),
     &  xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &  xpc(ncornmax),ypc(ncornmax),zpc(ncornmax),
     &  kface((ncornmax+1)*ncornmax),kedge(4,2*ncornmax-2),khull(ncornmax))

      ib=0
      kb=0

      limit=nclcmag+nclcspec

      do while (ib.lt.limit)

        if (kb.eq.0.and.ib.ge.nclcmag) then
          ib=0
          kb=1
          limit=nclcspec
        endif

        ib=ib+1

        if (kb.eq.0) then
          cline = clcmag(ib)
        else
          cline = clcspec(ib)
        endif

        call util_string_split(cline,1000,nwords,ipos,istat)

        if (cline(ipos(1,1):ipos(2,1)).eq.'Magnet'.or.
     &      cline(ipos(1,1):ipos(2,1)).eq.'Pole') then
          nmag=nmag+1
          t_magnets(nmag)%kmag=nmag
          t_magnets(nmag)%kmodule=magmodule(nmag)
          t_magnets(nmag)%IsSpecial=0
          cycle
        else if (cline(ipos(1,1):ipos(2,1)).eq.'Special_Magnet'.or.
     &      cline(ipos(1,1):ipos(2,1)).eq.'Special_Pole') then
          nspecmag=nspecmag+1
          nmag=nmag+1
          t_magnets(nmag)%kmag=nmag
          t_magnets(nmag)%kmodule=0
          t_magnets(nmag)%IsSpecial=1
          cycle
        endif

        ckey=cline(ipos(1,1):ipos(2,1))

        if (kb.eq.0) then
          cbuff=clcmag(ib:ib+4)
        else
          cbuff=clcspec(ib:ib+4)
        endif

        ib=ib+4

        t_magnets(nmag)%cnam=cline(ipos(1,2):ipos(2,2))
        t_magnets(nmag)%cmoth=cline(ipos(1,3):ipos(2,3))

        do m=1,nmag-1
          if (t_magnets(m)%cnam.eq.t_magnets(nmag)%cnam) then
            print*,""
            print*,"*** Error in clcbuff_to_magnets: Duplicate magnet ",
     &        t_magnets(m)%cnam
            print*,""
            stop "*** Program UNDUMAG aborted ***"
          endif
        enddo

        t_magnets(nmag)%cfile=''

        cword=cline(ipos(1,4):ipos(2,4))

        if (cword(1:1).eq.'$') then
          t_magnets(nmag)%icol=nint(undumag_variable_getval(cword))
        else
          read(cword,*)t_magnets(nmag)%icol
        endif

        cline=cbuff(2)
        call util_string_split(cline,1000,nwords,ipos,istat)

        do i=1,3
          cword=cline(ipos(1,i):ipos(2,i))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%xyz(i)=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%xyz(i)
          endif
        enddo

        xc=t_magnets(nmag)%xyz(1)
        yc=t_magnets(nmag)%xyz(2)
        zc=t_magnets(nmag)%xyz(3)

        cline=cbuff(3)
        call util_string_split(cline,1000,nwords,ipos,istat)

        if (kb.eq.0) then
          cline1=clcmag(ib-5)
        else
          cline1=clcspec(ib-5)
        endif

        if (cline1.eq.'Pole'.or.cline1.eq. 'Special_Pole') then
          niron=niron+1
          cword = cline(ipos(1,1):ipos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%imat=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%imat
          endif
          t_magnets(nmag)%IsPole=1
        else
          do i=1,5
            cword=cline(ipos(1,i):ipos(2,i))
            if (cword(1:1).eq.'$') then
              cword=cline(ipos(1,i):ipos(2,i))
              Br(i)=undumag_variable_getval(cword)
            else
              read(cword,*)br(i)
            endif
          enddo
          t_magnets(nmag)%IsPole=0
          if (norm2(br(2:4)).ne.0.0d0) br(2:4)=br(2:4)/norm2(br(2:4))
          if (br(5).eq.0.0d0) br=0.0d0

          t_magnets(nmag)%brn=br(1)
+self,if=trace
          print*,"--trace: CLCBUFF_TO_MAGNETS:",nmag,t_magnets(nmag)%brn
+self.
          t_magnets(nmag)%br=br(2:4)*br(1)
          t_magnets(nmag)%imat=nint(br(5))

          ifound=0
          do ibrn=1,nbrnmat
            if (br(1).eq.brnmat(2,ibrn).and.br(5).eq.brnmat(1,ibrn)) then
              ifound=1
              exit
            endif
          enddo
          if (ifound.eq.0) then
            nbrnmat=nbrnmat+1
            brnmat(1,nbrnmat)=br(5) !material index
            brnmat(2,nbrnmat)=br(1) !Br
          endif
        endif  !Pole

        t_magnets(nmag)%ctype=ckey(1:32)
        t_magnets(nmag)%IsBlock=0
        t_magnets(nmag)%IsRotated=0

        if (ckey.eq.'Block') then

          if (irecrepl.ne.0) then
            t_magnets(nmag)%IsBlock=1
          else
            t_magnets(nmag)%IsBlock=-1
          endif

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          do i=1,3
            cword=cline(jpos(1,i):jpos(2,i))
            if (cword(1:1).eq.'$') then
              t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
            else
              read(cword,*)t_magnets(nmag)%size(i)
            endif
            if (t_magnets(nmag)%IsPole.eq.0.and.coating.ne.0.0d0) then
              t_magnets(nmag)%size(i)=t_magnets(nmag)%size(i)-2.0d0*coating
            endif
            if (t_magnets(nmag)%size(i).le.0.0d0) then
              t_magnets(nmag)%brn=0.0d0
              t_magnets(nmag)%br=0.0d0
            endif
          enddo

          cline=cbuff(5)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%yfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%yfracdiv
          endif

          cword=cline(jpos(1,5):jpos(2,5))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%zfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%zfracdiv
          endif

          xc=t_magnets(nmag)%xyz(1)
          yc=t_magnets(nmag)%xyz(2)
          zc=t_magnets(nmag)%xyz(3)

          npoi=8

          xp(1)=xc-t_magnets(nmag)%size(1)/2.0d0
          xp(2)=xc+t_magnets(nmag)%size(1)/2.0d0
          xp(3)=xp(2)
          xp(4)=xp(1)
          xp(5:8)=xp(1:4)

          yp(1:4)=yc-t_magnets(nmag)%size(2)/2.0d0
          yp(5:8)=yc+t_magnets(nmag)%size(2)/2.0d0

          zp(1:2)=zc-t_magnets(nmag)%size(3)/2.0d0
          zp(3:4)=zc+t_magnets(nmag)%size(3)/2.0d0
          zp(5:8)=zp(1:4)

          else if (
     &        ckey.eq.'BlockChamf'.or.
     &        ckey.eq.'BlockUsChamf'.or.
     &        ckey.eq.'BlockDsChamf'
     &        ) then

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          do i=1,3
            cword=cline(jpos(1,i):jpos(2,i))
            if (cword(1:1).eq.'$') then
              t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
            else
              read(cword,*)t_magnets(nmag)%size(i)
            endif
            if (t_magnets(nmag)%size(i).le.0.0d0) then
              t_magnets(nmag)%brn=0.0d0
              t_magnets(nmag)%br=0.0d0
            endif
          enddo

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            chamf=undumag_variable_getval(cword)
          else
            read(cword,*) chamf
          endif

          kblockch=0
          t_magnets(nmag)%UsChamf=chamf
          t_magnets(nmag)%DsChamf=chamf

          if (ckey.eq.'BlockUsChamf') then
            kblockch=-1
            t_magnets(nmag)%DsChamf=0.0d0
          else if (ckey.eq.'BlockDsChamf') then
            kblockch=1
            t_magnets(nmag)%UsChamf=0.0d0
          endif

          npoi=12

          dx=t_magnets(nmag)%size(1)
          dy=t_magnets(nmag)%size(2)
          dz=t_magnets(nmag)%size(3)

          if (dx.le.0.0d0.or.dy.le.0.0d0.or.dz.le.0.0d0) then
            t_magnets(nmag)%brn=0.0d0
            t_magnets(nmag)%br=0.0d0
          endif

          if (t_magnets(nmag)%IsPole.ne.0.) then
            call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &        coating*0.0d0,npoi,xp,yp,zp)
          else
            call util_shrink_blockchamf(dx,dy,dz,chamf,kblockch,
     &        coating,npoi,xp,yp,zp)
          endif

          xp=xp+xc
          yp=yp+yc
          zp=zp+zc

          cline=cbuff(5)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%yfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%yfracdiv
          endif

          cword=cline(jpos(1,5):jpos(2,5))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%zfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%zfracdiv
          endif

        else if (ckey.eq.'Cylinder') then

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          do i=1,3
            cword=cline(jpos(1,i):jpos(2,i))
            if (cword(1:1).eq.'$') then
              t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
            else
              read(cword,*)t_magnets(nmag)%size(i)
            endif
            if (t_magnets(nmag)%size(i).le.0.0d0) then
              t_magnets(nmag)%brn=0.0d0
              t_magnets(nmag)%br=0.0d0
            endif
          enddo

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%size(i)=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%cylphi
          endif

          cline=cbuff(5)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)nydiv
            phi=t_magnets(nmag)%cylphi
            nydiv=max(nydiv,int(phi/45.0))+2
            t_magnets(nmag)%nydiv=nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          radin=t_magnets(nmag)%size(1)
          radout=t_magnets(nmag)%size(2)
          height=t_magnets(nmag)%size(3)
          angle=t_magnets(nmag)%cylphi

          xyz=t_magnets(nmag)%xyz

          if (radin.lt.tiny) radin=tiny

          npoi=4*(nydiv+1)

          if(npoi.gt.ncornmax) then
            ncornmax=npoi
            deallocate(xp,yp,zp,xpc,ypc,zpc,kface,kedge,khull,
     &        xpuffer1,ypuffer1,zpuffer1,
     &        xpuffer2,ypuffer2,zpuffer2,
     &        xpuffer3,ypuffer3,zpuffer3
     &        )
            allocate(
     &        xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &        xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &        xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax),
     &        xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &        xpc(ncornmax),ypc(ncornmax),zpc(ncornmax),
     &        kface((npoi+1)*npoi),kedge(4,2*npoi-2),khull(ncornmax))
          endif

          ip=0
          r=radin
          npoi=0
          dphi=angle/dble(nydiv)*grarad1
          do ir=1,2
            h=-height/2.0d0
            do ih=1,2
              phi=-angle/2.0d0*grarad1
              do iphi=1,nydiv+1
                ip=ip+1
                xp(ip)=r*sin(phi)+xc
                yp(ip)=h+yc
                zp(ip)=r*cos(phi)+zc
                phi=phi+dphi
              enddo
              h=height/2.0d0
            enddo
            r=radout
          enddo

          npoi=ip

          call clcmag_cut_cyl(nmag)

        else if (ckey.eq.'Corners'.or.ckey.eq.'File') then

          cline=cbuff(4)
          call util_string_split(cline,1000,nwords,jpos,istat)

          cword=cline(jpos(1,1):jpos(2,1))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nxdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nxdiv
          endif

          cword=cline(jpos(1,2):jpos(2,2))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nydiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nydiv
          endif

          cword=cline(jpos(1,3):jpos(2,3))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%nzdiv=nint(undumag_variable_getval(cword))
          else
            read(cword,*)t_magnets(nmag)%nzdiv
          endif

          cword=cline(jpos(1,4):jpos(2,4))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%yfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%yfracdiv
          endif

          cword=cline(jpos(1,5):jpos(2,5))
          if (cword(1:1).eq.'$') then
            t_magnets(nmag)%zfracdiv=undumag_variable_getval(cword)
          else
            read(cword,*)t_magnets(nmag)%zfracdiv
          endif

          if (ckey.eq.'Corners') then

            read(cbuff(5),*) npoi

            if(npoi.gt.ncornmax) then
              ncornmax=npoi
              deallocate(xp,yp,zp,xpc,ypc,zpc,kface,kedge,khull,
     &          xpuffer1,ypuffer1,zpuffer1,
     &          xpuffer2,ypuffer2,zpuffer2,
     &          xpuffer3,ypuffer3,zpuffer3
     &          )
              allocate(
     &          xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &          xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &          xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax),
     &          xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &          xpc(ncornmax),ypc(ncornmax),zpc(ncornmax),
     &          kface((npoi+1)*npoi),kedge(4,2*npoi-2),khull(ncornmax))
            endif

            do i=1,npoi

              ib=ib+1
              if (kb.eq.0) then
                cline=clcmag(ib)
              else
                cline=clcspec(ib)
              endif

              call util_string_split(cline,1000,nwords,ipos,istat)

              do k=1,3
                cword=cline(ipos(1,k):ipos(2,k))
                if (cword(1:1).eq.'$') then
                  x=undumag_variable_getval(cword)
                else
                  read(cword,*)x
                endif
                if (k.eq.1) then
                  xp(i)=x+xc
                else if (k.eq.2) then
                  yp(i)=x+yc
                else if (k.eq.3) then
                  zp(i)=x+zc
                endif
              enddo !k

            enddo !npoi

          else !ckey

            cfile=cbuff(5)
            cline=trim(cfile)
            l=len_trim(cfile)
            if (cfile(1:1).eq."'") then
              cline=cfile(2:l-1)
            endif
            cfile=cline
            t_magnets(nmag)%cfile=trim(cfile)

            inquire(file=trim(cfile),exist=lexist)
            if (lexist.eqv..false.) then
              write(lun6,*)"*** Error in clcbuff_to_magnets: File"
              write(lun6,*)trim(cfile)
              write(lun6,*)"not found ***"
              stop
            endif

            open(newunit=lun,file=trim(cfile),status='old')
            npoi=0
            do while(.true.)
              call util_skip_comment_empty_end(lun,ieof)
              if (ieof.ne.0) exit
              read(lun,'(a)')cline
              npoi=npoi+1
            enddo
            rewind(lun)

            if(npoi.gt.ncornmax) then
              ncornmax=npoi
              deallocate(xp,yp,zp,kface,kedge,khull,
     &          xpuffer1,ypuffer1,zpuffer1,
     &          xpuffer2,ypuffer2,zpuffer2,
     &          xpuffer3,ypuffer3,zpuffer3)
              allocate(xp(ncornmax),yp(ncornmax),zp(ncornmax),
     &          kface((npoi+1)*npoi),kedge(4,2*npoi-2),khull(npoi),
     &          xpuffer1(ncornmax),ypuffer1(ncornmax),zpuffer1(ncornmax),
     &          xpuffer2(ncornmax),ypuffer2(ncornmax),zpuffer2(ncornmax),
     &          xpuffer3(ncornmax),ypuffer3(ncornmax),zpuffer3(ncornmax)
     &          )
            endif

            do i=1,npoi
              call util_skip_comment_empty_end(lun,ieof)
              read(lun,'(a)')cline
              call util_string_split(cline,1000,nwords,ipos,istat)
              do k=1,3
                cword=cline(ipos(1,k):ipos(2,k))
                if (cword(1:1).eq.'$') then
                  x=undumag_variable_getval(cword)
                else
                  read(cword,*)x
                endif
                if (k.eq.1) then
                  xp(i)=x+xc
                else if (k.eq.2) then
                  yp(i)=x+yc
                else if (k.eq.3) then
                  zp(i)=x+zc
                endif
              enddo !k
            enddo !npoi

          endif !Corners and File

        else

          write(lun6,*)"*** Error in clcbuff_to_magnets: Unknown magnet type:"
          write(lun6,*)trim(ckey)
          stop

        endif

+self,if=debcm.
        do i=1,npoi
          write(887,*)xp(i),yp(i),zp(i),i
        enddo
        flush(887)
        close(887)
+self.

        if (t_magnets(nmag)%IsPole.eq.0.and.t_magnets(nmag)%brn.eq.0.0d0) then
          !print*,"Test:",nmag,t_magnets(nmag)%brn
          nmag=nmag-1
          cycle
        endif

        call util_convex_hull_3d_overwrite(npoi,xp,yp,zp,khull,kedge,kface,
     &    nhull,nedge,nface,kfacelast,hulltiny,ifailhull)

+self,if=debcm.
        l=0
        do iplan=1,nface
          l=l+1
          n=kface(l)
          do i=1,n
            l=l+1
            ipoi=kface(l)
            write(900,*)iplan,i,l,ipoi,xp(ipoi),yp(ipoi),zp(ipoi)
          enddo
        enddo
+self.
        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in clcbuff_to_magnets: Subroutine util_convex_hull_3d failed for ",
     &      trim(t_magnets(nmag)%cnam)
          stop
        endif

        if (ifailhull.ne.0.or.nhull.lt.4) then
          write(lun6,*)"*** Error in clcbuff_to_magnets: Subroutine util_convex_hull_3d failed for ",
     &      trim(t_magnets(nmag)%cnam)
          stop
        endif

        npoi=nhull

        allocate(t_magnets(nmag)%xhull0(npoi))
        allocate(t_magnets(nmag)%yhull0(npoi))
        allocate(t_magnets(nmag)%zhull0(npoi))
        allocate(t_magnets(nmag)%xhull(npoi))
        allocate(t_magnets(nmag)%yhull(npoi))
        allocate(t_magnets(nmag)%zhull(npoi))
        allocate(t_magnets(nmag)%khull(npoi))
        allocate(t_magnets(nmag)%kface(kfacelast))
        allocate(t_magnets(nmag)%kedge(4,nedge))

        t_magnets(nmag)%nhull=npoi
        t_magnets(nmag)%khull(1:npoi)=khull(1:npoi)

        gcen=0.0d0
        do i=1,npoi
          t_magnets(nmag)%xhull0(i)=xp(i)
          t_magnets(nmag)%yhull0(i)=yp(i)
          t_magnets(nmag)%zhull0(i)=zp(i)
          t_magnets(nmag)%xhull(i)=xp(i)
          t_magnets(nmag)%yhull(i)=yp(i)
          t_magnets(nmag)%zhull(i)=zp(i)
          gcen=gcen+[xp(i),yp(i),zp(i)]
        enddo

        if (t_magnets(nmag)%ctype.eq.'Cylinder') then
          size=t_magnets(nmag)%size
          vol=(size(2)**2-size(1)**2)*size(3)*t_magnets(nmag)%cylphi/360.0d0*pi1
        else
          call util_volume(npoi,xp,yp,zp,hulltiny,vol,kfail)
          if (kfail.ne.0) then
            write(lun6,*)"*** Error in clcbuff_to_magnets: Subroutine util_volume failed for ",
     &        trim(t_magnets(nmag)%cnam)
            stop
          endif
        endif

        t_magnets(nmag)%volume=vol

        gcen=gcen/npoi
        t_magnets(nmag)%gcen=gcen

        t_magnets(nmag)%kedge(:,1:nedge)=kedge(:,1:nedge)
        t_magnets(nmag)%nedge=nedge
        t_magnets(nmag)%kedge(:,1:nedge)=kedge(:,1:nedge)
        t_magnets(nmag)%nface=nface
        t_magnets(nmag)%kfacelast=kfacelast
        t_magnets(nmag)%kface(1:kfacelast)=kface(1:kfacelast)

        nplanmax=max(nplanmax,nface)

        nxdiv=t_magnets(nmag)%nxdiv
        nydiv=t_magnets(nmag)%nydiv
        nzdiv=t_magnets(nmag)%nzdiv

        if (t_magnets(nmag)%ctype.ne.'Cylinder') then
          t_magnets(nmag)%nvoxels=0
        endif

        allocate(t_magnets(nmag)%kvoxels(nxdiv,nydiv,nzdiv))
        t_magnets(nmag)%kvoxels=0
        allocate(t_magnets(nmag)%t_xyzcuts(nxdiv,nydiv,nzdiv))
        allocate(t_magnets(nmag)%t_xycuts(nxdiv,nydiv))
        allocate(t_magnets(nmag)%t_xcuts(nxdiv))

      enddo !nclcmag

      deallocate(xp,yp,zp,xpc,ypc,zpc,kface,kedge,khull)

      !call util_break


      nmag_t=0
      nspecmag_t=0
      do i=1,nmag
        if (t_magnets(i)%IsSpecial.eq.1) then
          nspecmag_t=nspecmag_t+1
        else
          nmag_t=nmag_t+1
        endif
      enddo

      nplanmax_t=nplanmax
      ncornmax_t=ncornmax

      nmagtot_t=nmag_t+nspecmag_t

      deallocate(magmodule)

      return
      end
+DECK,clcmag_to_bpe.
*CMZ :  2.04/13 04/09/2023  10.46.42  by  Michael Scheer
*CMZ :  2.04/07 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.55.09  by  Michael Scheer
*CMZ :  2.02/01 11/02/2022  09.47.13  by  Michael Scheer
*-- Author :    Michael Scheer   01/04/2016
      subroutine clcmag_to_bpe

      use bpolyederf90m
      use undumagf90m
      use commandlinef90m
      use magnets_structure

      implicit none

      double precision xyz(3),br(3),bn,dx,dy,dz,bpe17,gcen(3)

      integer :: idebug=0

      integer kmod,kmag,kcopy,npoi,n,k,iv,ipoi,i,im,lunlis,ieof,lunkill,
     &  last,kill,kv

      character(128) cline
      character(32) chsel

+seq,random.
+seq,phyconparam.

c      type (T_Magnet) :: tmag
      type (T_Voxel) :: tv

      allocate(bpebc(20,nvoxcopy_t))
      bpebc=0.0d0

      ! bpebc(1:3,... position x,y,z
      ! bpebc(4:6,... M vector, might be changed during relaxation
      ! bpebc(7,... length of M vector, might be changed during relaxation
      ! bpebc(8,... type
      ! bpebc(9,imag)=imat
      ! bpebc(10,imag) special magnet flag
      ! bpebc(11:13,imag) normalized M vector at the beginning, will survive
      ! bpebc(14,imag) length M vector at the beginning, will survive
      ! bpebc(15,imag) Mother volume
      ! bpebc(16,imag) kill flag
      ! bpebc(17,imag) select flag
      ! bpebc(18:20,imag) B of coils in voxel

      ! ibpeplan(imag)=nplan
      ! ibpecorn(iplan,imag)=ncorn
      ! ibpecol(imag) color index

      allocate(ibpeplan(nvoxcopy_t))
      allocate(ibpecol(nvoxcopy_t))
      allocate(ibpecorn(nplanmax,nvoxcopy_t))

      allocate(bpetm(3,8,nplanmax,nvoxcopy_t))
      allocate(bpemag(3,ncornmax,nplanmax,nvoxcopy_t))
      allocate(bperot(3,ncornmax,nplanmax,nvoxcopy_t))

      kv=0

      do iv=1,nvoxcopy_t

        if (idebug.ne.0) then
          print*,iv
        endif

        kmod=t_voxcopy(iv)%kmodule
        kmag=t_voxcopy(iv)%kproto

c        tmag=t_magnets(kmag)
        if (t_magnets(kmag)%IsPole.ne.0) cycle

        kv=kv+1

        im=t_voxcopy(iv)%kmagnet
        kvox=t_voxcopy(iv)%kvoxel
        kcopy=t_voxcopy(iv)%kcopy

        tv=t_magnets(kmag)%t_voxels(kvox)

        gcen=t_voxcopy(iv)%gcen
        br=t_voxcopy(iv)%br

        bpebc(1,kv)=gcen(1)+xcentershift
        bpebc(2:3,kv)=gcen(2:3)

        bpebc(4:6,kv)=br
        bpebc(7,kv)=norm2(br)

        if ((irecrepl.ne.0.and.tv%isblock.ne.0).or.t_magnets(kmag)%isblock.gt.0) then
          bpebc(8,kv)=-6.0
          dx=tv%xmax-tv%xmin
          dy=tv%ymax-tv%ymin
          dz=tv%zmax-tv%zmin
          call clcmag_bpemag(dx,dy,dz,bpemag(1:3,1:5,1:6,kv),bpebc(1:3,kv))
          ibpecorn(:,kv)=5
        else !Is Block}
          bpebc(8,kv)=1.0
        endif

        bpebc(9,kv)=t_magnets(kmag)%imat
        bpebc(10,kv)=t_magnets(kmag)%isspecial
        bn=norm2(br)

        if (bn.ne.0.0d0) bpebc(11:13,kv)=br/bn

        bpebc(14,kv)=bn
        bpebc(15,kv)=im
        bpebc(16,kv)=0.0
        bpebc(17,kv)=0.0

        ibpecol(kv)=t_magnets(kmag)%icol
        ibpeplan(kv)=tv%nface

        if (tv%IsBlock.gt.0) cycle

        k=1
        do n=1,tv%nface
          npoi=tv%kface(k)
          ibpecorn(n,kv)=npoi+1
          do i=1,npoi
            k=k+1
            ipoi=tv%kface(k)
            xyz=[tv%xhull(ipoi),tv%yhull(ipoi),tv%zhull(ipoi)]
            bpemag(1:3,i,n,kv)=xyz+bpebc(1:3,kv)
          enddo
          bpemag(1:3,npoi+1,n,kv)=bpemag(1:3,1,n,kv)
          k=k+1
        enddo

      enddo !voxel

      do iv=1,nvoxcopy_t

        kmod=t_voxcopy(iv)%kmodule
        kmag=t_voxcopy(iv)%kproto

c        tmag=t_magnets(kmag)
        if (t_magnets(kmag)%IsPole.eq.0) cycle

        kv=kv+1

        im=t_voxcopy(iv)%kmagnet
        kvox=t_voxcopy(iv)%kvoxel
        kcopy=t_voxcopy(iv)%kcopy

        tv=t_magnets(kmag)%t_voxels(kvox)

        gcen=t_voxcopy(iv)%gcen
        br=t_voxcopy(iv)%br

        bpebc(1,kv)=gcen(1)+xcentershift
        bpebc(2:3,kv)=gcen(2:3)

        bpebc(4:6,kv)=br
        bpebc(7,kv)=norm2(br)

        if ((irecrepl.ne.0.and.tv%isblock.ne.0).or.t_magnets(kmag)%isblock.gt.0) then
          bpebc(8,kv)=-6.0
          dx=tv%xmax-tv%xmin
          dy=tv%ymax-tv%ymin
          dz=tv%zmax-tv%zmin
          call clcmag_bpemag(dx,dy,dz,bpemag(1:3,1:5,1:6,kv),bpebc(1:3,kv))
          ibpecorn(:,kv)=5
        else !Is Block}
          bpebc(8,kv)=1.0
        endif

        bpebc(9,kv)=t_magnets(kmag)%imat
        bpebc(10,kv)=t_magnets(kmag)%isspecial
        bn=norm2(br)

        if (bn.ne.0.0d0) bpebc(11:13,kv)=br/bn

        bpebc(14,kv)=bn
        bpebc(15,kv)=im
        bpebc(16,kv)=0.0
        bpebc(17,kv)=0.0

        ibpecol(kv)=t_magnets(kmag)%icol
        ibpeplan(kv)=tv%nface

        if (tv%IsBlock.gt.0) cycle

        k=1
        do n=1,tv%nface
          npoi=tv%kface(k)
          ibpecorn(n,kv)=npoi+1
          do i=1,npoi
            k=k+1
            ipoi=tv%kface(k)
            xyz=[tv%xhull(ipoi),tv%yhull(ipoi),tv%zhull(ipoi)]
            bpemag(1:3,i,n,kv)=xyz+bpebc(1:3,kv)
          enddo
          bpemag(1:3,npoi+1,n,kv)=bpemag(1:3,1,n,kv)
          k=k+1
        enddo

      enddo !voxel

      if (killbadmag.eq.-9999) then
        bpebc(16,:)=1.0d0
      else
        bpebc(16,:)=0.0d0
      endif

      if (killbadmag.gt.0.or.killbadmag.eq.-9999) then
        write(lun6,*)
        write(lun6,*)"Killing all voxels, but"
        open(newunit=lunkill,file="undumag.kll")
        do while (.true.)
          call util_read_line(lunkill,cline,last)
          if (last.le.0) exit
          read(cline,*)kmag,kill
          if (kmag.gt.nmag) then
            write(lun6,*)"*** Error in undumag_ini_magnets: Non existing voxel ",kmag," on undumag.kll ***"
            stop
          endif
          if (killbadmag.ne.-9999) then
            bpebc(16,kmag)=kill
            write(lun6,*)"Killing voxel ",kmag," due to flag killbadmag"
          else
            write(lun6,*)kmag
            bpebc(16,kmag)=0.0d0
          endif
        enddo
        close(lunkill)
        write(lun6,*)
      endif

      if (intmaglis.ne.0) then
        write(lun6,*)
        write(lun6,*)" --- Due to flag intmaglis, only magnets on file undumag_magmap.lis do contribute to field map ---"
        write(lun6,*)
        open(newunit=lunlis,file="undumag_magmap.lis")
        do while (.true.)
          call util_skip_comment_end(lunlis,ieof)
          if (ieof.ne.0) exit
          read(lunlis,*)chsel,bpe17
          do iv=1,nvoxcopy_t
            kmag=t_voxcopy(iv)%kproto
            if (t_magnets(kmag)%cmoth.eq.chsel) then
              if (bpe17.gt.0.0d0) then
                bpebc(17,iv)=1.0d0
              else if (bpe17.lt.0.0d0) then
                bpebc(17,iv)=2.0d0
              endif
            endif
          enddo
        enddo
        close(lunlis)
      endif !intmaglis

      return
      end
+DECK,undumag_geo.
*CMZ :  2.04/13 04/09/2023  10.53.07  by  Michael Scheer
*CMZ :  2.04/09 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 28/02/2023  12.18.17  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  10.01.47  by  Michael Scheer
*CMZ :  2.02/02 17/02/2022  12.11.11  by  Michael Scheer
*CMZ :  2.02/01 30/01/2022  08.30.33  by  Michael Scheer
*-- Author :    Michael Scheer   01/11/2021
      subroutine undumag_geo

      ! Writes voxels to undumag.geo

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      double precision gcen(3),xc,yc,zc,x1,x2,y1,y2,z1,z2,x21,y21,z21,
     &  x,y,z,bx,by,bz,dx,dy,dz,bc,cw

      integer :: lunvox,imag,nplan,icorn,ncorn,moth,motho,ispec,iplan,
     &  kmod,kmag,im,kcopy,mothdiv(4),ncol,mag,mat,ix,iy,iz,itype,imat,icol,
     &  i

      character(2048) cline

c      type (T_Magnet) tmag
c      type (T_Magnet_Copy) tmagc

      write(lun6,*)
      write(lun6,*)'Writing geometry to undumag.geo'
      write(lun6,*)

      open(newunit=lunvox,file="undumag.geo")

      write(lunvox,'(a)')
     &  "* mag ityp xc yc zc moth ix iy iz mat icol mx my mz bc iplan icorn x y z cmag cmoth"

      nmag=nvoxcopy_t
      motho=0

      do imag=1,nmag

        kmod=t_voxcopy(imag)%kmodule
        kmag=t_voxcopy(imag)%kproto
        im=t_voxcopy(imag)%kmagnet
        kvox=t_voxcopy(imag)%kvoxel
        kcopy=t_voxcopy(imag)%kcopy

c        tmag=t_magnets(kmag)
c        tmagc=t_magcopy(im)

        gcen=bpebc(1:3,imag)
        nplan=ibpeplan(imag)
        moth=nint(bpebc(15,imag))

        if(moth.ne.motho) then
          chmag=t_magcopy(im)%cnam
          write(cline,*)"* ",trim(chmag),moth
          write(lunvox,'(a)')cline(2:len_trim(cline))
          motho=moth
        endif

        imat=nint(bpebc(9,imag))
        ispec=nint(bpebc(10,imag))
        bx=bpebc(11,imag)
        by=bpebc(12,imag)
        bz=bpebc(13,imag)
        bc=bpebc(14,imag)
        ncol=ibpecol(imag)
        itype=nint(bpebc(8,imag))

        mothdiv(1)=moth

        mothdiv(2)=t_magnets(kmag)%t_voxels(kvox)%ixdiv
        mothdiv(3)=t_magnets(kmag)%t_voxels(kvox)%iydiv
        mothdiv(4)=t_magnets(kmag)%t_voxels(kvox)%izdiv
        motho=0

        do iplan=1,nplan
          ncorn=ibpecorn(iplan,imag)
          do icorn=1,ncorn
            x=bpemag(1,icorn,iplan,imag)
            y=bpemag(2,icorn,iplan,imag)
            z=bpemag(3,icorn,iplan,imag)
            write(lunvox,*)imag,itype,
     &        sngl(gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &        ,mothdiv(1:4),imat,ncol
     &        ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &        ,iplan,icorn
     &        ,sngl(x),sngl(y),sngl(z)
     &        ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
            if (kplsym.ne.0) then
              if (ixsym.ne.0.and.iysym.ne.0.and.izsym.ne.0) then
                write(lunvox,*)nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)2*nmag+imag,itype,
     &            sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(-y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)3*nmag+imag,itype,
     &            sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)4*nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(-y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)5*nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)6*nmag+imag,itype,
     &            sngl(gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(-y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)7*nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(-y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
              else if (ixsym.ne.0.and.iysym.ne.0) then
                write(lunvox,*)nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)2*nmag+imag,itype,
     &            sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(-y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)3*nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(-y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
              else if (ixsym.ne.0.and.izsym.ne.0) then
                write(lunvox,*)nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)2*nmag+imag,itype,
     &            sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(bx),sngl(by),sngl(bz),sngl(-bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)3*nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
              else if (iysym.ne.0.and.izsym.ne.0) then
                write(lunvox,*)nmag+imag,itype,
     &            sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(-y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)2*nmag+imag,itype,
     &            sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(bx),sngl(by),sngl(bz),sngl(-bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
                write(lunvox,*)3*nmag+imag,itype,
     &            sngl(gcen(1)),sngl(-gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(-bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(-y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
              else if (ixsym.ne.0) then
                write(lunvox,*)nmag+imag,itype,
     &            sngl(-gcen(1)),sngl(gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(-x),sngl(y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
              else if (iysym.ne.0.) then
                write(lunvox,*)nmag+imag,itype,
     &            sngl(gcen(1)),sngl(-gcen(2)),sngl(gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(-bx),sngl(by),sngl(bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(-y),sngl(z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
              else if (izsym.ne.0.) then
                write(lunvox,*)nmag+imag,itype,
     &            sngl(gcen(1)),sngl(gcen(2)),sngl(-gcen(3))
     &            ,mothdiv(1:4),imat,ncol
     &            ,sngl(bx),sngl(by),sngl(-bz),sngl(bc)
     &            ,iplan,icorn
     &            ,sngl(x),sngl(y),sngl(-z)
     &            ,trim(t_magcopy(im)%cnam)," ",trim(t_magcopy(im)%cmoth)
              endif !syms
            endif !(kplsym.ne.0) then
          enddo
        enddo
      enddo !nmag

      dx=xmax_t-xmin_t
      dy=ymax_t-ymin_t
      dz=zmax_t-zmin_t

      do i=1,ncwires
        mag=i
        itype=nint(wire(1,i))
        moth=nint(wire(10,i))
        icol=nint(wire(9,i))
        x1=wire(3,i)
        y1=wire(4,i)
        z1=wire(5,i)
        ix=1
        iy=1
        iz=1
        mat=-1
        x2=wire(6,i)
        y2=wire(7,i)
        z2=wire(8,i)
        xc=(x2+x1)/2.0
        yc=(y2+y1)/2.0
        zc=(z2+z1)/2.0
        x21=(x2-x1)
        y21=(y2-y1)
        z21=(z2-z1)
        cw=wire(2,i)
        iplan=0
        icorn=0
        write(lunvox,*)mag,itype,xc,yc,zc,moth,ix,iy,iz,mat,icol,dx,dy,dz,cw,
     &    iplan,icorn,x1,y1,z1," wire ", adjustl(trim(t_coils(moth)%cnam))
      enddo !ncwires

      write(lun6,*)
      write(lun6,*)'Done'
      write(lun6,*)

      close(lunvox)

      return
      end
+DECK,clcmag_faces.
*CMZ :  2.04/13 03/09/2023  11.20.18  by  Michael Scheer
*CMZ :  2.04/09 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  12.58.25  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  12.43.30  by  Michael Scheer
*CMZ :  2.04/06 04/08/2023  11.32.02  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  19.30.13  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.28.35  by  Michael Scheer
*CMZ :  2.04/00 09/12/2022  11.08.58  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  10.13.35  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021
      subroutine clcmag_faces

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      Type(T_Magnet) tmag

      double precision p(3,3),wnorm(3),wcen(3)
      integer imag,k,npoi,l,ipoi,iface,nf
      character(128) ctype

+self,if=trace.
      print*,"-trace-: Entered clcmag_faces"
+self.

      do imag=1,nmag_t+nspecmag_t

        tmag=t_magnets(imag)

        ctype=tmag%ctype
        if (ctype.eq.'Cylinder') cycle

        nf=tmag%nface
        allocate(
     &    t_magnets(imag)%fcen(3,nf),
     &    t_magnets(imag)%fnorm(3,nf)
     &    )

        k=0
        do iface=1,nf
          k=k+1
          npoi=tmag%kface(k)
          wcen=0.0d0
          do l=1,npoi
            k=k+1
            ipoi=tmag%kface(k)
            if (l.le.3) then
              p(1:3,l)=[tmag%xhull(ipoi),tmag%yhull(ipoi),tmag%zhull(ipoi)]
            endif
            wcen=wcen+[tmag%xhull(ipoi),tmag%yhull(ipoi),tmag%zhull(ipoi)]
          enddo
          call util_vcross(p(:,2)-p(:,1),p(:,3)-p(:,2),wnorm)
          wnorm=wnorm/norm2(wnorm)
          t_magnets(imag)%fnorm(:,iface)=wnorm
          wcen=wcen/dble(npoi)
          t_magnets(imag)%fcen(:,iface)=wcen
        enddo !iface
      enddo !imag

+self,if=trace.
      print*,"-trace-: Leaving clcmag_faces"
+self.
      return
      end
+DECK,clcmag_inside_magnet.
*CMZ :  2.04/13 04/09/2023  10.39.10  by  Michael Scheer
*-- Author :    Michael Scheer   30/08/2023
      subroutine clcmag_inside_magnet(p,tmag,inside,tiny)

      use magnets_structure

      implicit none

      Type(T_Magnet) tmag

      double precision p(3),v(3),dot,tiny,gcen(3)
      integer inside,ifac,isurf

      gcen=tmag%gcen

      ! return value is 0, if point p is outside
      ! return value is 1, if point p is on surface
      ! return value is 2, if point p is inside

      inside=2
      isurf=0

      do ifac=1,tmag%nface
        v=p-tmag%fcen(1:3,ifac)-gcen(1:3)
        v=v/norm2(v)
        dot=dot_product(v,tmag%fnorm(1:3,ifac))
        if (dot.gt.tiny) then
          inside=0
          exit
        else if (abs(dot).le.tiny) then
          isurf=1
          exit
        endif
      enddo

      if (inside.eq.2.and.isurf.ne.0) inside=1

      return
      end
+DECK,clcmag_write_facets.
*CMZ :  2.04/14 05/09/2023  09.52.46  by  Michael Scheer
*CMZ :  2.04/13 03/09/2023  20.28.53  by  Michael Scheer
*CMZ :  2.04/09 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  12.58.25  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  12.43.30  by  Michael Scheer
*CMZ :  2.04/06 04/08/2023  11.32.02  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  19.30.13  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.28.35  by  Michael Scheer
*CMZ :  2.04/00 09/12/2022  11.08.58  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  10.13.35  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021
      subroutine clcmag_write_facets

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      Type(T_Magnet) tmag
      Type(T_Voxel) tv

      double precision, dimension(:,:), allocatable :: buff
      integer, dimension(:), allocatable :: ibuff
      character(128), dimension(:), allocatable :: cbuff
      integer imag,luno,npoi,iv,i,imago,ivo,iface,l,lpoi,j,ll,nf,lin

      allocate(ibuff(8*nfacets),buff(3,8*nfacets*ncornmax),cbuff(8*nfacets))

+self,if=trace.
      print*,"-trace-: Entered clcmag_write_facets"
+self.
      write(lun6,*)
      write(lun6,*)'Writing faces to undumag_facets.fct'

      imago=0
      ivo=0
      lin=0

      do i=1,nfacets

        imag=ifacets(1,i)
        iv=ifacets(2,i)
        iface=ifacets(3,i)
        lpoi=ifacets(4,i)
        npoi=ifacets(5,i)

        ibuff(i)=npoi
        do j=1,7
          ibuff(i+j*nfacets)=npoi
        enddo

        if (imag.ne.imago) then
          tmag=t_magnets(imag)
          ivo=0
        endif

        if (iv.ne.ivo) then
          tv=tmag%t_voxels(iv)
          ivo=0
        endif

c        write(luno,*)npoi,tmag%icol,tmag%icol,iv,imag,tmag%cnam,tmag%cmoth
        write(cbuff(i),*)npoi,tmag%icol,tmag%icol,iv,imag,tmag%cnam,tmag%cmoth

        do j=1,npoi
          ll=lpoi+j
          l=tv%kface(ll)
c          write(luno,*)
c     &      tv%xhull(l)+tv%gcen(1),
c     &      tv%yhull(l)+tv%gcen(2),
c     &      tv%zhull(l)+tv%gcen(3)
          lin=lin+1
          buff(:,lin)=
     &      [tv%xhull(l)+tv%gcen(1),
     &      tv%yhull(l)+tv%gcen(2),
     &      tv%zhull(l)+tv%gcen(3)]
        enddo

        ivo=iv
        imago=imag

      enddo

      open(newunit=luno,file='undumag_facets.fct')

      nf=nfacets
      if(izsym.ne.0) nf=nf*2

      write(luno,*) nf

      lin=0
      do i=1,nfacets
        write(luno,*)trim(cbuff(i))
        do l=1,ibuff(i)
          lin=lin+1
          write(luno,*)buff(:,lin)
        enddo
      enddo

      if (izsym.ne.0)  then
        lin=0
        do i=1,nfacets
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),buff(2,lin),-buff(3,lin)
          enddo
        enddo
      endif

      if (iysym.ne.0) then
        rewind(luno)
        read(luno,*) nf
        lin=0
        do i=1,nf
          read(luno,'(a)') cbuff(i)
          do l=1,ibuff(i)
            lin=lin+1
            read(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        rewind(luno)
        lin=0
        write(luno,*) 2*nf
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        lin=0
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),-buff(2,lin),buff(3,lin)
          enddo
        enddo
      endif

      if (ixsym.ne.0) then
        rewind(luno)
        lin=0
        read(luno,*) nf
        do i=1,nf
          read(luno,'(a)') cbuff(i)
          do l=1,ibuff(i)
            lin=lin+1
            read(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        rewind(luno)
        write(luno,*) 2*nf
        lin=0
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        lin=0
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)-buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
      endif

      flush(luno)
      close(luno)
      write(lun6,*)
      write(lun6,*)'Done'
+self,if=trace.
      print*,"-trace-: Leaving clcmag_write_facets"
+self.

      deallocate(buff,cbuff,ibuff)

      return
      end
+DECK,clcmag_magnet_facet.
*CMZ :  2.04/14 06/09/2023  07.41.20  by  Michael Scheer
*CMZ :  2.04/13 04/09/2023  12.00.02  by  Michael Scheer
*-- Author :    Michael Scheer   04/09/2023
      subroutine clcmag_magnet_facet(tmag,iv,kface,ison,hulltiny)

      use magnets_structure

      implicit none

      double precision hulltiny
      integer :: iv,kface,ison,ipoi,npoi,ifac,k,l,iface
c      integer :: ical=0,lund

      Type(T_Magnet) tmag

      double precision p(3),v(3),dot,gcen(3),gvcen(3)

c      if (tmag%kmag.gt.1) then
c        stop "Ende in clcmag_magnet_facet"
c      endif

      gcen=tmag%gcen
      gvcen=tmag%t_voxels(iv)%gcen
c      if(tmag%cnam.eq.'polLSF1'.and.tmag%nface.eq.5.and.iv.eq.2.and.kface.eq.3) then
c        print*,tmag%cnam,tmag%nface,iv,kface
c      endif

c      if (ical.eq.0) then
c        call clcmag_dump_hull_of_magnet(tmag%kmag,lund)
c      endif

      ison=0

      do ifac=1,tmag%nface
        if (tmag%kmag.eq.1) write(65,*)ifac,tmag%fcen(1:3,ifac)
        l=1
        iface=1
        do k=1,tmag%t_voxels(iv)%kfacelast
          if (iface.eq.kface) exit
          iface=iface+1
          l=l+tmag%t_voxels(iv)%kface(l)+1
        enddo
        ison=0
        npoi=tmag%t_voxels(iv)%kface(l)
        do ipoi=1,npoi
          l=l+1
c          p(1)=tmag%xhull(tmag%t_voxels(iv)%kface(l))
c          p(2)=tmag%yhull(tmag%t_voxels(iv)%kface(l))
c          p(3)=tmag%zhull(tmag%t_voxels(iv)%kface(l))
          p(1)=tmag%t_voxels(iv)%xhull(tmag%t_voxels(iv)%kface(l))+gvcen(1)
          p(2)=tmag%t_voxels(iv)%yhull(tmag%t_voxels(iv)%kface(l))+gvcen(2)
          p(3)=tmag%t_voxels(iv)%zhull(tmag%t_voxels(iv)%kface(l))+gvcen(3)
          if (tmag%kmag.eq.1) write(66,*)ifac,iv,ipoi,p
          v=p-tmag%fcen(1:3,ifac)-gcen(:)
          v=v/norm2(v)
          dot=dot_product(v,tmag%fnorm(1:3,ifac))
          if(abs(dot).le.hulltiny) then
            ison=ison+1
          endif
c          print*,ifac,dot,ison
        enddo

        if (ison.eq.npoi) then
          ison=1
          return
        endif
      enddo

c      ical=ical+1

      return
      end
+DECK,CLCMAG_MAGNET_MAIN_FACETS.
*CMZ :  2.04/14 05/09/2023  10.58.39  by  Michael Scheer
*CMZ :  2.04/13 03/09/2023  20.28.53  by  Michael Scheer
*CMZ :  2.04/09 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  12.58.25  by  Michael Scheer
*CMZ :  2.04/07 09/08/2023  12.43.30  by  Michael Scheer
*CMZ :  2.04/06 04/08/2023  11.32.02  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/03 04/03/2023  19.30.13  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.28.35  by  Michael Scheer
*CMZ :  2.04/00 09/12/2022  11.08.58  by  Michael Scheer
*CMZ :  2.02/01 29/01/2022  10.13.35  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021
      subroutine clcmag_magnet_main_facets

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      double precision, dimension(:,:), allocatable :: buff
      integer, dimension(:), allocatable :: ibuff
      character(128), dimension(:), allocatable :: cbuff
      integer imag,luno,npoi,iv,i,l,j,nf,lin,mmag,nface,k

      mmag=nmag_t+nspecmag_t

      allocate(ibuff(8*mmag*nplanmax),buff(3,8*mmag*nplanmax*ncornmax),
     &  cbuff(8*mmag*nplanmax))

+self,if=trace.
      print*,"-trace-: Entered clcmag_magnet_main_facets"
+self.
      write(lun6,*)
      write(lun6,*)'Writing faces to undumag_main_facets.fct'

      lin=0
      nface=0

      do imag=1,mmag
        k=1
        do l=1,t_magnets(imag)%kfacelast
          npoi=t_magnets(imag)%kface(k)
          nface=nface+1
          ibuff(nface)=npoi
          write(cbuff(nface),*)
     &      npoi,
     &      t_magnets(imag)%icol,t_magnets(imag)%icol,iv,
     &      imag,t_magnets(imag)%cnam,t_magnets(imag)%cmoth
          do j=1,npoi
            k=k+1
            i=t_magnets(imag)%kface(k)
            lin=lin+1
            buff(:,lin)=
     &        [t_magnets(imag)%xhull(i)+t_magnets(imag)%gcen(1),
     &        t_magnets(imag)%yhull(i)+t_magnets(imag)%gcen(2),
     &        t_magnets(imag)%zhull(i)+t_magnets(imag)%gcen(3)]
          enddo
          k=k+1
          if (k.gt.t_magnets(imag)%kfacelast) exit
        enddo
      enddo

      do k=1,nface
        do j=1,7
          ibuff(k+j*nface)=ibuff(k)
        enddo
      enddo

      open(newunit=luno,file='undumag_main_facets.fct')

      nf=nface
      if(izsym.ne.0) nf=nf*2

      write(luno,*) nf

      lin=0
      do i=1,nface
        write(luno,*)trim(cbuff(i))
        do l=1,ibuff(i)
          lin=lin+1
          write(luno,*)buff(:,lin)
        enddo
      enddo

      if (izsym.ne.0)  then
        lin=0
        do i=1,nface
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),buff(2,lin),-buff(3,lin)
          enddo
        enddo
      endif

      if (iysym.ne.0) then
        rewind(luno)
        read(luno,*) nf
        lin=0
        do i=1,nf
          read(luno,'(a)') cbuff(i)
          do l=1,ibuff(i)
            lin=lin+1
            read(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        rewind(luno)
        lin=0
        write(luno,*) 2*nf
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        lin=0
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),-buff(2,lin),buff(3,lin)
          enddo
        enddo
      endif

      if (ixsym.ne.0) then
        rewind(luno)
        lin=0
        read(luno,*) nf
        do i=1,nf
          read(luno,'(a)') cbuff(i)
          do l=1,ibuff(i)
            lin=lin+1
            read(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        rewind(luno)
        write(luno,*) 2*nf
        lin=0
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
        lin=0
        do i=1,nf
          write(luno,*)trim(cbuff(i))
          do l=1,ibuff(i)
            lin=lin+1
            write(luno,*)-buff(1,lin),buff(2,lin),buff(3,lin)
          enddo
        enddo
      endif

      flush(luno)
      close(luno)

      write(lun6,*)
      write(lun6,*)'Done'
+self,if=trace.
      print*,"-trace-: Leaving clcmag_main_facets"
+self.

      deallocate(buff,cbuff,ibuff)

      return
      end
+DECK,clcmag_dump_hull_of_magnet.
*CMZ :  2.04/14 06/09/2023  07.07.15  by  Michael Scheer
*-- Author :
      subroutine clcmag_dump_hull_of_magnet(imag,lund)

      use magnets_structure

      implicit none

      integer imag,lund,k,l,ipoi,npoi

      Type(T_Magnet) tmag

      tmag=t_magnets(imag)

      if (lund.gt.200.or.lund.lt.10) lund=10+imag

      write(lund,'(a)') '* ' // tmag%cnam // ' ' // tmag%cmoth // ' ' // tmag%ctype

      k=1
      do l=1,tmag%kfacelast
        if(k.gt.tmag%kfacelast-3) exit
        npoi=tmag%kface(k)
        k=k+1
        do ipoi=1,npoi
          write(lund,*)
     &      tmag%xhull(tmag%kface(k)),
     &      tmag%yhull(tmag%kface(k)),
     &      tmag%zhull(tmag%kface(k)),
     &      tmag%gcen(1),
     &      tmag%gcen(2),
     &      tmag%gcen(3),
     &      ipoi
          k=k+1
        enddo
      enddo

      flush(lund)
      close(lund)

      return
      end
+PATCH,SYSTEM,T=KUMAC.
*CMZ :  0.00/00 20/04/2016  13.01.46  by  Michael Scheer
+deck,dmain, T=kumac.
*CMZ :  2.04/13 02/09/2023  09.04.43  by  Michael Scheer
*CMZ :  1.10/00 11/10/2016  15.19.06  by  Michael Scheer
*CMZ :  1.09/01 05/10/2016  09.32.38  by  Michael Scheer
*CMZ :  1.02/01 06/09/2016  09.49.12  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.03.33  by  Michael Scheer
*CMZ :  1.16/01 14/03/2014  12.22.55  by  Michael Scheer
*CMZ :  1.12/17 18/06/2007  07.41.12  by  Michael Scheer
*CMZ :  1.12/16 04/06/2007  06.11.58  by  Michael Scheer
*CMZ :  1.10/03 24/08/2004  13.07.27  by  Michael Scheer
*CMZ :  1.02/01 05/08/2004  15.44.37  by  Michael Scheer
*CMZ :  0.00/00 09/01/2003  11.47.07  by  Michael Scheer
*-- Author :    Michael Scheer   19/05/98
macro dMAIN

sel uout_incl

set f77 -lan
set $UNDUMAG_INCL/main/*.f -f
set cmzedit.f -e

CD main

lmod * last

exec lastdir main

EXITM
+DECK,cmzsymbols, T=KUMAC.
*CMZ :  2.04/13 02/09/2023  08.28.49  by  Michael Scheer
*CMZ :  2.04/06 13/07/2023  14.08.35  by  Michael Scheer
*CMZ :  2.04/05 15/03/2023  13.14.33  by  Michael Scheer
*CMZ :  2.03/00 26/08/2022  11.02.19  by  Michael Scheer
*CMZ :  2.02/02 27/02/2022  17.51.38  by  Michael Scheer
*CMZ :  2.02/01 06/02/2022  11.20.59  by  Michael Scheer
*CMZ :  2.02/00 01/04/2021  07.16.16  by  Michael Scheer
*CMZ :  2.01/08 14/08/2020  07.28.59  by  Michael Scheer
*CMZ :  2.01/05 07/07/2020  09.50.20  by  Michael Scheer
*CMZ :  2.01/03 30/04/2019  15.27.29  by  Michael Scheer
*CMZ :  1.25/00 12/02/2018  12.56.09  by  Michael Scheer
*CMZ :  1.23/05 06/10/2017  12.25.35  by  Michael Scheer
*CMZ :  1.23/04 27/09/2017  11.40.04  by  Michael Scheer
*CMZ :  1.23/02 30/08/2017  14.51.27  by  Michael Scheer
*CMZ :  1.22/02 02/08/2017  08.26.04  by  Michael Scheer
*CMZ :  1.20/00 20/06/2017  13.29.34  by  Michael Scheer
*CMZ :  1.18/00 02/06/2017  12.05.50  by  Michael Scheer
*CMZ :  1.15/11 24/04/2017  11.42.01  by  Michael Scheer
*CMZ :  1.13/03 10/03/2017  16.31.47  by  Michael Scheer
*CMZ :  1.13/01 06/03/2017  20.37.49  by  Michael Scheer
*CMZ :  1.11/00 04/01/2017  10.14.18  by  Michael Scheer
*CMZ :  1.10/02 30/11/2016  09.54.39  by  Michael Scheer
*CMZ :  1.10/01 21/11/2016  12.17.20  by  Michael Scheer
*CMZ :  1.10/00 07/11/2016  12.19.31  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  09.19.25  by  Michael Scheer
*CMZ :  1.04/00 13/09/2016  14.38.54  by  Michael Scheer
*CMZ :  1.02/01 06/09/2016  09.49.12  by  Michael Scheer
*CMZ :  0.00/13 15/08/2016  08.45.03  by  Michael Scheer
*CMZ :  0.00/11 14/07/2016  15.41.42  by  Michael Scheer
*CMZ :  0.00/10 13/07/2016  14.25.39  by  Michael Scheer
*CMZ :  0.00/07 22/06/2016  14.22.29  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  11.36.32  by  Michael Scheer
*CMZ :  0.00/04 12/05/2016  08.24.51  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  14.49.54  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.24.38  by  Michael Scheer
*CMZ :  1.17/15 13/04/2016  13.05.57  by  Michael Scheer
*CMZ :  1.17/14 11/04/2016  16.22.06  by  Michael Scheer
*CMZ :  1.17/13 08/04/2016  08.54.59  by  Michael Scheer
*CMZ :  1.17/07 03/04/2016  19.43.16  by  Michael Scheer
*CMZ :  1.17/06 31/03/2016  13.13.00  by  Michael Scheer
*CMZ :  1.17/05 27/03/2016  08.04.41  by  Michael Scheer
*CMZ :  1.17/04 22/03/2016  16.34.31  by  Michael Scheer
*CMZ :  1.17/03 22/03/2016  08.05.59  by  Michael Scheer
*CMZ :  1.17/02 11/03/2016  15.25.33  by  Michael Scheer
*CMZ :  1.17/01 03/10/2014  08.35.16  by  Michael Scheer
*CMZ :  1.17/00 23/05/2014  16.02.09  by  Michael Scheer
*CMZ :  1.16/01 15/04/2009  13.41.52  by  Michael Scheer
*CMZ :  1.15/02 09/05/2008  09.24.22  by  Michael Scheer
*CMZ :  1.15/01 09/04/2008  15.36.25  by  Michael Scheer
*CMZ :  1.13/00 11/10/2007  12.15.15  by  Michael Scheer
*CMZ :  1.12/18 12/07/2007  16.22.39  by  Michael Scheer
*CMZ :  1.12/13 27/04/2007  09.53.17  by  Michael Scheer
*CMZ :  1.12/09 03/04/2007  13.17.21  by  Michael Scheer
*CMZ :  1.12/05 13/07/2006  13.12.49  by  Michael Scheer
*CMZ :  1.02/00 28/07/2004  14.41.55  by  Michael Scheer
*CMZ :  1.01/01 21/07/2004  14.10.58  by  Michael Scheer
*CMZ :  0.99/12 26/02/2004  11.08.11  by  Michael Scheer
*CMZ :  0.99/00 28/01/2004  15.21.34  by  Michael Scheer
*CMZ :  0.00/08 23/01/2004  12.58.00  by  Michael Scheer
*CMZ :  0.00/06 16/01/2004  10.23.28  by  Michael Scheer
*CMZ :  0.00/05 23/12/2003  15.45.45  by  Michael Scheer
*CMZ :  0.00/04 19/12/2003  16.59.32  by  Michael Scheer
*CMZ :  0.00/03 18/12/2003  11.19.58  by  Michael Scheer
*CMZ :  0.00/02 11/12/2003  08.27.10  by  Michael Scheer
*CMZ :  0.00/01 05/12/2003  15.49.03  by  Michael Scheer
*CMZ :  0.00/00 09/01/2003  11.47.07  by  Michael Scheer
*-- Author :    Michael Scheer   19/05/98
MACRO CMZSYMBOLS

ali/cre resti 'she  perl ~/perl/restorejed.pl undumag.in' c

ali/cre export_undumag 'exec undumag_export' c
ali/cre uexport 'exec undumag_export' c
ali/cre uexportwindows 'exec undumag_export_windows' c
ali/cre uexp 'exec undumag_export' c
ali/cre uexpw 'exec undumag_export_windows' c

ali/cre ei 'kedi undumag.in' c
ali/cre enam 'kedi undumag.nam' c
ali/cre ss 'exec cmzsymbols' c
ali/cre rd1 'she cd ~/undu/stage1 && bash ~/com/ddd.sh ~/undu/bin/undumag_omp.exe'
ali/cre rd2 'she cd ~/undu/stage2 && bash ~/com/ddd.sh ~/undu/bin/undumag_omp.exe'
ali/cre romp 'she cd ~/undu/stage && time ~/undu/bin/undumag_omp.exe'
*ali/cre rd 'she cd ~/undu/stage && bash ~/com/ddd.sh ~/undu/bin/undumag_omp.exe'
*ali/cre rd 'she cd ~/undu/stage && bash ~/com/ddd.sh ~/undu/bin/undumag.exe'
ali/cre rd 'she cd ~/undu/stage && bash ~/com/ddd.sh ~/undu/bin/undumag.exe'
ali/cre rdo 'she cd ~/undu/stage && bash ~/com/ddd.sh ~/undu/bin/undumag.exe'
*ali/cre rf 'she rm -f fel-undulator.paw && rm -f fel-undulator.polymag && ./fel-undulator.exe' c
ali/cre rf 'exec fprog' c
ali/cre rfo 'she rm -f fel-undulator.paw && rm -f fel-undulator.polymag && mv -f run.out run.out.bck && ./fel-undulator.exe > run.out' c
ali/cre rfd 'she rm -f fel-undulator.paw && rm -f fel-undulator.polymag && ddd --debugger idb -dbx -geometry +100 fel-undulator.exe &' c
ali/cre j 'exec job' c
ali/cre jd 'exec jobd' c
ali/cre jd1 'exec jobd 1' c
ali/cre jd2 'exec jobd 2' c
ali/cre j2 'j 2' c
ali/cre jo 'exec jobomp' c
ali/cre jos 'exec jobomp_static' c
ali/cre jdo 'exec jobompd' c
ali/cre pa 'she pawX11' c
ali/cre ero 'k/edi run.out &' c
ali/cre eoutu 'k/edi outu &' c
ali/cre dio 'she diff run.out run.out.bck' c
ali/cre efi 'k/edi fel-undulator.in' c
ali/cre eubq 'edi undumag_bpeq' c
ali/cre eui 'edi undumag_ini' c
ali/cre euio 'edi undumag_ini_old' c
ali/cre euim 'edi undumag_ini_magnets' c
ali/cre euimo 'edi undumag_ini_modules' c
ali/cre euin 'edi undumag_ini_new' c
ali/cre euir 'edi undumag_ini_rest' c
ali/cre eurc 'edi undumag_read_clc' c
ali/cre euiin 'edi undumag_ini undumag_ini_new' c
ali/cre eup 'edi undumag_proc' c
ali/cre euri0 'edi undumag_relax_iron0' c
ali/cre euri1 'edi undumag_relax_iron1' c
ali/cre euri2 'edi undumag_relax_iron2' c
ali/cre euri3 'edi undumag_relax_iron3' c
ali/cre euri4 'edi undumag_relax_iron4' c
ali/cre euri 'edi undumag_relax_iron' c
ali/cre eurr 'edi undumag_relax_rec' c
ali/cre eurim 'edi undumag_relax_iron_matrix' c
ali/cre eurrm 'edi undumag_relax_rec_matrix' c
ali/cre euseq 'edi /seq/$undumagf90m' c
ali/cre eufo 'edi undumag_force' c
ali/cre eue 'edi undumag_end' c
ali/cre euf 'edi undumag_field' c
ali/cre eufs 'edi undumag_bpolyeder_single' c
ali/cre ebs 'edi undumag_bpolyeder_single' c
ali/cre eucm 'edi undumag_cut_magnet' c
ali/cre eucp 'edi undumag_cut_plane' c
ali/cre eubp 'edi undumag_bpolyeder' c
ali/cre eubpi 'edi undumag_bpolyint' c
ali/cre euii 'edi undumag_bintinf' c
ali/cre eubp1 'edi undumag_bpolyeder1' c
ali/cre eubpv1 'edi undumag_bpolyeder_v1' c
ali/cre eubpm 'edi undumag_bpolyeder_matrix' c
ali/cre ebp2 'edi bpolypl2' c
ali/cre uflo 'she . ~/undu/shell/uflomp.sh' c
ali/cre uflod 'she . ~/undu/shell/uflompd.sh' c
ali/cre ufld 'she . ~/undu/shell/uflompd.sh' c
ali/cre uflcross 'she . ~/undu/shell/ufl_cross_win32.sh' c
ali/cre uflw 'she . ~/undu/shell/ufl_cross_win32.sh' c
ali/cre ufl 'she . ~/undu/shell/uflomp.sh' c
*ali/cre r 'she cd ~/undu/stage && ~/undu/bin/undumag_omp.exe && cat inf' c
ali/cre r2 'she cd ~/undu/stage2 && time ~/undu/bin/undumag_omp.exe && cat undumag.rad' c
ali/cre r 'cd $UNDUMAG/stage && . ../shell/undumag_run.sh' c
ali/cre rnol 'she cd ~/undu/stage && . shell/rnolog.sh' c
ali/cre ei 'kedi ~/undu/stage/undumag.clc' c
ali/cre en 'kedi ~/undu/stage/undumag.nam' c
ali/cre rom 'she cd ~/undu/stage && bash ~/com/root.sh map'
ali/cre estart 'kedi ../stage/startup.ddd' c
ali/cre eseq 'exec ecmn' c
ali/cre cxu15 'cx cpmu15' c
ali/cre cxu15f 'cx cpmu15full' c
ali/cre eu15 'edi cpmu15' c
ali/cre eu15f 'edi cpmu15full' c
*ali/cre eu15p 'edi $cpmu15par' c
ali/cre eu15p 'exec edicpmu15par' c
ali/cre eu15s 'edi $cpmu15spec' c
*ali/cre cxu17 'cx cpmu17' c
ali/cre eu17 'edi cpmu17' c
*ali/cre eu17p 'edi $cpmu17par' c
ali/cre eu17p 'exec edicpmu17par' c
ali/cre eu17s 'exec edicpmu17spec' c
ali/cre eurad 'edi undumag_to_radia' c
ali/cre eufd 'edi undumag_force_dipoles' c
ali/cre eufdn 'edi undumag_force_dipoles_nos' c
ali/cre eudf 'edi undumag_dipole_field' c
ali/cre eud 'edi undumag_dipoles_field' c
ali/cre uflompd 'she ../shell/uflompd.sh' c
ali/cre ess 'e $sesame_special' c
ali/cre ese 'e sesame' c
ali/cre eupl 'edi $undumagplotglobal $undumagplot undumag_plot' c
ali/cre egui 'e $ugui' c
ali/cre etb 'e $topbar' c
ali/cre eloi 'e msh_ipylogon' c
ali/cre upl1 'she cd ~/undu/stage && ipython3 --profile undumag -i .empty.py -- geo 1' c
ali/cre uplm1 'she cd ~/undu/stage && ipython3 --profile undumag -i .empty.py -- geo -1' c
ali/cre upl 'she cd ~/undu/stage && . ./plot.sh' c
ali/cre dwav 'cd //wave/python' c
ali/cre dwaves 'cd //waves/python' c
ali/cre ent 'edi //ntupplot/python/$ntupini' c
ali/cre dntup 'cd //ntupplot/python' c
ali/cre ehm 'e //waves/python/$m_hbook' c
ali/cre wout 'exec ~/undu/cmz/wavesout' c
ali/cre dundu 'exec dundupy' c
ali/cre eugg 'edi $uguiglobals $uguiglobind' c
ali/cre egeo 'edi $uguiglobals $uguiglobind $mgeometry' c
ali/cre egeo 'edi $mgeometry' c
*ali/cre elm 'edi $uguiglobals $uguiglobind $listmags' c
ali/cre elma 'edi $listmags' c
ali/cre elco 'edi $listcoils' c
ali/cre elmo 'edi $listmods' c
ali/cre evar 'edi $uguiglobals $uguiglobind $mlistvars' c
ali/cre esg 'edi $uguiglobals $uguiglobind $showgeo' c
ali/cre esg 'edi $showgeo' c
*ali/cre eplg 'edi $uguiglobals $uguiglobind $unduplgeo' c
ali/cre eplg 'exec eplg.kumac' c
ali/cre emat 'edi $uguiglobals $uguiglobind $mmaterial' c
*ali/cre erc 'edi $uguiglobals $uguiglobind $ureadclc' c
ali/cre erc 'edi $ureadclc' c
ali/cre ewc 'edi $uguiglobals $uguiglobind $uwriteclc' c
ali/cre erwc 'edi $uguiglobals $uguiglobind $ureadclc $uwriteclc' c
ali/cre ewc 'edi $uwriteclc' c
ali/cre edrop 'edi undumag_drop_zero_magnets' c
ali/cre econ 'edi $uguicontrol' c
ali/cre ecalc 'edi undumag_calc' c
ali/cre ebc 'edi undumag_bcoils' c
ali/cre ee 'edi eds_undulator' c
ali/cre ees 'edi eds_six' c
ali/cre cxes 'cx eds_six' c
ali/cre eee 'edi $eds_endpole' c
ali/cre ee12s 'edi $eds_param_six $eds_1234_six' c
ali/cre ee12 'edi $eds_param $eds_1234' c
ali/cre ee68 'edi $eds_param $eds_681012' c
ali/cre ee57 'edi $eds_param $eds_57911' c
ali/cre ehm 'edi //waves/python/$m_hbook' c
ali/cre r 'exec rundupy' c
ali/cre outpy 'exec outpy' c
ali/cre op 'exec outpy' c
ali/cre outpyi 'exec outpy_incl' c
ali/cre ecm 'edit /seq/$magnet_struct /for/clcmag_to_magnets /for/clcmag_cut /for/clcmag_xcut /for/clcmag_ycut /for/clcmag_zcut' c
ali/cre est 'edit /seq/$magnet_struct' c
ali/cre ectm 'e clcmag_to_magnets' c
ali/cre estm 'e clcspec_to_magnets' c
ali/cre ectc 'e clccoil_to_coils' c
ali/cre ecc 'e clcmag_cut' c
ali/cre eccx 'e clcmag_xcut' c
ali/cre eccy 'e clcmag_ycut' c
ali/cre eccz 'e clcmag_zcut' c
ali/cre eccv 'e clcmag_voxels' c
ali/cre eus 'e clcmag_sym' c
ali/cre ecccv 'e clcmag_copy_voxels' c
ali/cre eubeff 'e undumag_beff' c
ali/cre eubeffyz 'e undumag_beffy_beffz' c
ali/cre eub 'e undumag_beff' c
ali/cre eubyz 'e undumag_beffy_beffz' c
ali/cre erad 'e undumag_to_radia clcmag_to_radia' c
ali/cre o 'exec uout_omp' c
ali/cre eu 'edi $uconvertclc' c
*ali/cre o 'cx unduconvertclc' c
ali/cre o 'exec uout' c
ali/cre op 'exec outpy' c
ali/cre etrc 'edi $utransrotcop $ureadclc' c
ali/cre outi 'exec uout_incl'
ali/cre outg 'exec uout_git'
ali/cre outgh 'exec uout_github'
ali/cre eugeo 'e undumag_geo'
EXITM
+PATCH,NAM,T=TEXT.
*CMZ :  0.00/00 20/04/2016  13.01.58  by  Michael Scheer
+DECK,undumag,T=TEXT.
*CMZ :  2.04/14 04/09/2023  12.53.06  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  16.26.25  by  Michael Scheer
*CMZ :  2.04/09 16/08/2023  11.08.45  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  15.04.20  by  Michael Scheer
*CMZ :  2.04/00 08/09/2022  16.06.28  by  Michael Scheer
*CMZ :  2.03/00 14/08/2022  12.46.46  by  Michael Scheer
*CMZ :  2.02/02 01/07/2022  18.04.41  by  Michael Scheer
*CMZ :  2.02/01 10/02/2022  11.42.19  by  Michael Scheer
*CMZ :  2.02/00 18/09/2020  17.00.52  by  Michael Scheer
*CMZ :  2.01/08 14/08/2020  09.08.09  by  Michael Scheer
*CMZ :  2.01/05 26/06/2020  15.56.43  by  Michael Scheer
*CMZ :  2.01/04 18/07/2019  11.10.22  by  Michael Scheer
*CMZ :  2.01/03 16/07/2019  09.27.19  by  Michael Scheer
*CMZ :  2.00/01 12/04/2018  16.29.19  by  Michael Scheer
*CMZ :  1.25/00 31/01/2018  17.15.36  by  Michael Scheer
*CMZ :  1.24/01 16/10/2017  09.22.13  by  Michael Scheer
*CMZ :  1.24/00 12/10/2017  13.33.31  by  Michael Scheer
*CMZ :  1.23/03 21/09/2017  14.53.30  by  Michael Scheer
*CMZ :  1.23/02 18/09/2017  13.37.21  by  Michael Scheer
*CMZ :  1.22/02 24/07/2017  15.38.16  by  Michael Scheer
*CMZ :  1.22/01 20/07/2017  12.24.35  by  Michael Scheer
*CMZ :  1.22/00 04/07/2017  09.44.57  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  14.24.01  by  Michael Scheer
*CMZ :  1.20/02 22/06/2017  15.58.32  by  Michael Scheer
*CMZ :  1.18/03 14/06/2017  09.20.19  by  Michael Scheer
*CMZ :  1.18/02 09/06/2017  13.19.02  by  Michael Scheer
*CMZ :  1.17/07 22/05/2017  12.01.34  by  Michael Scheer
*CMZ :  1.17/06 19/05/2017  20.24.02  by  Michael Scheer
*CMZ :  1.17/05 18/05/2017  10.19.46  by  Michael Scheer
*CMZ :  1.17/00 08/05/2017  13.27.26  by  Michael Scheer
*CMZ :  1.15/11 23/04/2017  10.34.16  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.21.42  by  Michael Scheer
*CMZ :  1.15/07 05/04/2017  09.32.44  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.30.52  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  11.20.35  by  Michael Scheer
*CMZ :  1.15/02 02/04/2017  09.32.08  by  Michael Scheer
*CMZ :  1.15/00 24/03/2017  09.41.27  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  12.53.22  by  Michael Scheer
*CMZ :  1.13/03 10/03/2017  16.40.41  by  Michael Scheer
*CMZ :  1.13/01 06/03/2017  10.12.59  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  16.58.19  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  16.06.24  by  Michael Scheer
*CMZ :  1.11/04 25/01/2017  16.47.37  by  Michael Scheer
*CMZ :  1.11/03 13/01/2017  12.25.40  by  Michael Scheer
*CMZ :  1.11/01 09/01/2017  11.31.03  by  Michael Scheer
*CMZ :  1.11/00 04/01/2017  15.47.32  by  Michael Scheer
*CMZ :  1.10/00 01/11/2016  09.40.28  by  Michael Scheer
*CMZ :  1.09/01 06/10/2016  13.35.33  by  Michael Scheer
*CMZ :  1.08/00 27/09/2016  20.15.56  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  13.48.49  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.50.46  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  14.26.30  by  Michael Scheer
*CMZ :  1.06/00 20/09/2016  14.08.40  by  Michael Scheer
*CMZ :  1.04/01 14/09/2016  14.46.19  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  10.45.13  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  13.34.11  by  Michael Scheer
*CMZ :  1.02/01 09/09/2016  15.28.35  by  Michael Scheer
*CMZ :  1.02/00 22/08/2016  17.09.12  by  Michael Scheer
*CMZ :  1.01/00 21/08/2016  11.39.57  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  17.54.08  by  Michael Scheer
*CMZ :  0.00/13 09/08/2016  17.01.43  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  08.31.14  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  15.12.04  by  Michael Scheer
*CMZ :  0.00/10 13/07/2016  15.00.16  by  Michael Scheer
*CMZ :  0.00/09 27/06/2016  10.04.07  by  Michael Scheer
*CMZ :  0.00/04 10/05/2016  09.09.12  by  Michael Scheer
*CMZ :  0.00/02 26/04/2016  16.10.51  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  14.51.24  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.10.05  by  Michael Scheer
*-- Author :    Michael Scheer   20/04/2016
+seq,inputver.
 ! Name list file, to control UNDUMAG

 $undumagn

 nuthreads=-1 ! >0:   Number of CPU cores to be used
              ! else: Use all cores

 kechocalc=0 ! echo read lines of undumag.clc and undumag.in

 kpreset=0 ! Initial magnetization is read from undumag.pre

 matrix=1  ! Matrix mode: Fast, but can require much memory
           ! >0: Matrix is calculated
	   ! >1: Matrix is written to file undumag_matrix.pst	
	   ! <0: Matrix is read from file undumag_matrix.pre
	
 ixsym=0 ! Mirror all magnets and poles in y-z plane at xsym
 xsym=0. ! 9999: xsym is xcenter

 iysym=0 ! Mirror all magnets and poles in x-z plane at origin
 izsym=0 ! Mirror all magnets and poles in x-y plane at origin

 kxcenter=1   ! Center magnetic structure
 xcenter=0.   ! Magnetic structure is centered around xcenter

 maxiter=1000 ! Maximum number of iterations of main loop
 kprint=10    ! Test convergence and print progress every kprintth cycle
              ! Must be > 0 for option kresiron

 maxiterrec=5 ! Maximum number of iterations for magnets for each
                ! cycle of the main loop
 maxiteriron=100 ! Dito for iron poles
                ! -9999: (1-dampiron)**(2*maxiteriron-1) = 0.001
		
 nchiiron=100   ! number of iterations on magnetization curve M(H) for iron
 chicut=1.0e-8  ! Precision cut of Chi(H), -9999.: chicut = max(hconv,1.e-10)

 dampiron=1.0   ! Damping factor for the relaxation of iron
                ! 1: No damping
	        ! >0: Damping
	        ! 0 or missing: No damping

 kbextern=0     ! superimpose external field (bxex,byex,bzex)
 bxex=0.0       ! No symmetry operations are performed for this field
 byex=0.0
 bzex=0.0

 isplinefm=0    ! spline M(H) table, linear interpolation otherwize

 ibulk=0     ! bulk update of iron voxel

 kdumpconv=0 ! dump progress of relaxation for iron

 ! if dampfac.ne.0:
 hconvbase=1.0d0 ! hconv -> hconvbase*dampiron**hconvexp
                 ! and dampiron -> dampiron*dampfac
 hconvexp=0.0d0  ! This is applied when the current hconv is reached
 dampfac=0.0d0   !

 kresiron=1   ! RMS of iron residuals used as convergence critirion
              ! 1: UNDUMAG stops if resiron is reached
              ! 2: UNDUMAG stops if resiron and hconv are reached
	
 resiron=3.0d-3 ! convergence critirion according to kresiron, CHECK kprint

 hconv=1.0d-6 ! Convergence criterion,
              ! i.e. the rel. change of B at the reference point
	      ! hconv<0: Stop if deviation has reached a minimum
	      ! hconv<-1000: Stop if deviation, when sign of deviation has
	      ! changed (s.a. kresiron)

 xconvmin=9999. ! reference points, where convergence is tested
                ! is randomized according to randox
		! 9999: automatic
	
 xconvmax=9999. ! reference points, where convergence is tested
                ! is randomized according to randox
	        ! 9999: automatic
		
 dxconv=-0.9  ! spacing of reference points
              ! 9999: perlen/2.
	      ! <0: abs(dxconv) is factor of intervall size, i.e.
              ! exponential spacing between xconvmin and xconvmax,
              ! nxconv must be greater 0
	
 nxconv=9999  ! number of reference points (must be < 100 ),
              ! if dxconv is zero
	      ! 9999: twice the number of periods between xconvmax and xconvmin

 yconv=0.0
 zconv=0.0    ! is randomized according to randoz if zero

 killbadmag=0 ! To ignore problematic voxel listet in undumag.kll
              ! undumag.bad is written for killbadmag<0 according to
	      ! warnings of UNDUMAG
	      ! killbadmag=-9999: Kill all but the bad voxel
	
 iwarn2pi=1   ! Warning and attempt to recover of 2 Pi jump in undumag_bpeq

 rcvthron=0.1 ! allowed rel. deviation of the on-axis field from
               ! neighbouring values before recovering starts

 irecrepl=0   ! replace rectangular polyhedrons by blocks
	
+self,if=randos.
 randos=0.01  ! add noise to voxel positons to avoid boundary effects
+self.
 randox=0.001   ! add noise to x for field calculations to avoid boundary effects
              ! <0: means offset, no randomization
 randoy=0.0   ! add noise to y for field calculations to avoid boundary effects
              ! <0: means offset, no randomization
 randoz=0.001  ! add noise to z for field calculations to avoid boundary effects
              ! <0: means offset, no randomization

 irandmag=0   ! randomize calculation point inside voxel as well
              ! <0: Real deposition of the voxel center
	
 kshuffle=0   ! shuffle the iron voxel for each main iteration cycle

 corrtiny=0.123e-3 ! x,y,z-shift for corrections of boundary errors [mm]

 cuttiny=0.1   ! minimum size of cut volume relative to volume to be cut
               ! 0: will be set to 0.1
	       ! (only for new input format of undumag.clc)
	
 hulltiny=1.e-6 ! precision parameter for routine util_convex_hull_3d
                ! change may help in case of trouble
		! 0: will be set to 1.e-6

 iunduplot=1 ! Write Encapsulated PostScript files to show geometry
	     ! iunduplot<0: stop UNDUMAG after writing undumag.eps

 iundugeo=1111 ! Write geometry files
             ! Three bits for
	     ! undumag_facets.fct
	     ! undumag_voxels.geo
	     ! undumag.geo
	     ! undumag.mag
             ! ,i.e. iundugeo=1111 means to write all of them
	     ! iundugeo<0: stop UNDUMAG after writing undumag.geo

 ivrml=1     ! Write CAD file of setup
             ! 1: Display items
             ! 2: Display items with segmentation
	     ! ivrml<0: stop UNDUMAG after writing undumag.wrl	
	
 kplsym=1    ! Plot symmetric items for ixsym, iysym, or izsym
 kcomment=1  ! Print comment of input file undumag.clc to plots
 krunnum=1  ! Print run number to plots
 kdate=1  ! Print date to plots

 unduplot_mode=0   ! Plotting mode
                   !0: Overview
		   !else: Only 3d view according to unduplot_theta/phi
 unduplot_theta=0. ! Polar plotting angle
 unduplot_phi=0.   ! Azimut plotting angle

 ! Plotting window for set-up plots
 xminpl=9999.      !9999.: Automatically
 xmaxpl=9999.      !9999.: Automatically
 yminpl=9999.      !9999.: Automatically
 ymaxpl=9999.      !9999.: Automatically
 zminpl=9999.      !9999.: Automatically
 zmaxpl=9999.      !9999.: Automatically

 uwindow=1000. ! Only items with x-uwindow <= x <= x-uwindow contribute
               ! to field at x

 kmapmode=0    ! Format of field map
               ! 0: Field map includes material properties, magnetization etc.
	       ! else: Only x y z Bx By Bz iFail are given

 kmapnohead=0  ! No header line of map file

 knointmap=1   ! no map of field integrals
 	
 knomagmap=0   ! No field map inside magnets
 knopolmap=0   ! No field map inside poles

 intmaglis=0   ! Read magnets, that contribute to map from file undumag_magmap.lis
               ! otherwize take all
	
 iforcegrid=1  ! write x,y,z of grid nodes to map, not the noisy
               ! real position of calculation

 xmapmin=9999. ! xmin for field map
                ! 9999.: Auto scaling
		! 9000.: -PerLen / 2
		! -9000.: -PerLen / 4
 xmapmax=9999. ! xmax for field map
                ! 9999.: Auto scaling
		! 9000.: PerLen / 2
		! -9000.: +PerLen / 4
	
 dxmap=1.      ! Step size of field map in x
               ! 9999.: Same as for Beff calculations, i.e. perlen/(nxbeff-1)
	
 nxmap=1       ! Number of steps in x, if dxmap is zero

 ymapmin=-1.0  ! ymin for field map
 ymapmax=1.0   ! ymax for field map
 nymap=1       ! Number of steps for field map in y.
               ! nymap=1 means y=(ymapmax+ymapmin)/2 is used

 zmapmin=-20.0 ! zmin for field map
 zmapmax=20.0  ! zmax for field map
 nzmap=1       ! Number of steps for field map in z
               ! nzmap=1 means z=(zmapmax+zmapmin)/2 is used

 angmaprotx=0.0d0  ! rotation angle of map around x-axis
 cenmaprotxy=0.0d0 ! y of center of rotation for angmaprotx
 cenmaprotxz=0.0d0 ! z of center of rotation for angmaprotx

 isimpson=0  ! Spline (0) or Simpson (1) integration for magnetic field
             ! and force integrals
	     ! See subroutine util_spline_or_simpson_integral

 xbeff=-9999. ! Center for Beff calculations
              ! 9999: xcenter
              !-9999: (xmapmin+xmapmax)/2.
	      ! This value is adjusted by UNDUMAG within half a period
              ! around the original value
	
 xbeffy=-9999.0d0 ! if not -9999. xbeff for ByEff is forced to xbeffy
 xbeffz=-9999.0d0 ! if not -9999. xbeff for BzEff is forced to xbeffz

 perlen=9999.   ! Period-length for the calculation of the Beff
              ! 9999: Read it from undumag.clc
	
 nxbeff=101   ! Number of points for the calculation of Beff

 kbeffmode=9999  ! 0: Take full period for calculation
                 ! else: Take half period,
		 !       omit Abs(kbeffmode)*dx around Abs(perlen/4.),
		 !       check undumag_beff.dat!
		 !9999: automatic, i.e. if nperiods>0 is found in undumag.clc
		 !      kbeffmode is set zero, else one.
	
 iforce=0     ! Calculation of forces and torques
              ! iforce<0: Parameters for force calculations are taken
	      ! from undumag.clc
	      ! iforce=9999: The force box is calculated for chforcemag,
	      ! used for iforcedip
	
 iplforce=0   ! Write fields of force box to file undumag_force.fbx

 ubfcenx=0.0   ! center of box for forces and torques
 ubfceny=0.0
 ubfcenz=0.0

 ubflenx=100.0   ! dimensions of box for forces and torques,
                 ! dedgefb will be added
 ubfleny=100.0
 ubflenz=100.0

 dedgefb=0.02 ! expansion of force box for numerical reasons,
              ! is set to 0.02 if zero, should be greater than corrtiny,
	      ! to avoid force calculations inside of the magnet

 utorqcenx=9999.   ! reference point for torques, 9999.: box center
 utorqceny=9999.
 utorqcenz=9999.

 mbforcex=10 ! number of integration points
 mbforcey=10 ! number of integration points
 mbforcez=10 ! number of integration points

 ndivfboxy=1 ! Divide force box to calculate vertical force and torque
             ! distribution. Ndivfboxy should be different from number of
	     ! vertical division of the considered magnet or pole

 mfcolor=1   ! color index of force box

 idipoles=0      ! Calculate dipole representation of voxels

 iforcedip=0     ! Calculation of forces using dipole approximation for magnets
                 ! >0: Only the considered magnet or pole is approximated
                 ! <0: All magnets and poles are approximated

 chforcemag=''   ! Name of magnet for which forces are calculated
                 ! If the magnet appears in different modules, check
		 ! undumag_magnets.lis for the unique name (third column).

 kurad=0     ! call urad to calculate trajectory and radiation
 ebeam=1.722 ! Total beam energy in GeV

 xelec=9999. !x at start (longitudinal coordinate)
             !9999: xmapmin
 yelec=0.0 !y at start (vertical coord.)
 zelec=0.0 !z at start

 !the velocity is internally normalized according to the beam energy
 vxelec=1.0 !x comp. of velocity at start
 vyelec=0.0 !y comp. of velocity at start
 vzelec=0.0 !z comp. of velocity at start

 ds=0.2  !step size
 nstep=1 ! the trajectory is written for every nstepth tracking step
         ! nstep.le.zero means no output

 xf=9999. !x of end plane, where tracking stops
         !9999: xmapmax
 yf=0.0 !y of end plane, where tracking stops
 zf=0.0 !z of end plane, where tracking stops

 efx=1.0 !x of normal vector of end plane, where tracking stops
 efy=0.0 !y of normal vector of end plane, where tracking stops
 efz=0.0 !z of normal vector of end plane, where tracking stops

 traxyz_theta=30. ! Polar plotting angle for 3D-trajectory
 traxyz_phi=30.   ! Azimut plotting angle for 3D-trajectory

 xobsv=10000. ! x of observation point in millimeter
 yobsv=0.0    ! y of observation point in millimeter
 zobsv=0.0    ! z of observation point in millimeter

 phelow=1. ! lowest photon energy (eV)
 phehig=1000. ! highest photon energy (eV)
 nphener=1000 ! number of photon equidistant energies

 ieneloss=-1 ! energy loss due to radiation
            ! 0: no energy loss
	    ! 1: continous energy loss
	    !-1: discrete energy loss with quantum fluctuations
	
 ivelofield=0 ! to control the calculation of the velocity field
              ! 0: velocity field is included
              ! 1: velocity field is not included
              !-1: velocity field is only

 kudebug=0    ! debug flag

 $end

 $RANDOMN
 ! Seeds to initialize the FORTRAN random generator.
 ! Twelfe seed values are require; the first four seem to have no effect
 ! under Linux and gfortran

   irnmode=1 ! 1:  Seeds of this namelist are taken
	     ! 2:  Seeds are taken from namelist, but runnumber is added to
	     !     IRNSEED(12)
	     ! <0: Seeds are read from file wave.seeds
	     !
	     ! else:
	     !     Seed is initialize automatically, i.e. via
	     !     call random_seed(isize) with isize=12
	     !     giving reproducable seeds

   IRNSEED(1)=287027030
   IRNSEED(2)=-719361131
   IRNSEED(3)=574274270
   IRNSEED(4)=292048305
   IRNSEED(5)=185733336
   IRNSEED(6)=-1598963619
   IRNSEED(7)=572469522
   IRNSEED(8)=1446716853
   IRNSEED(9)=437591706
   IRNSEED(10)=1398099429
   IRNSEED(11)=570932571
   IRNSEED(12)=-1177695979

 $END
+PATCH,SEQ.
*CMZ :  0.00/00 20/04/2016  13.03.34  by  Michael Scheer
+KEEP,unduver.
*CMZ :  2.04/13 04/09/2023  12.06.16  by  Michael Scheer
*CMZ :  2.04/12 31/08/2023  06.57.59  by  Michael Scheer
*CMZ :  2.04/11 29/08/2023  15.03.24  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.14.31  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.16.48  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.57.08  by  Michael Scheer
*CMZ :  2.04/07 10/08/2023  09.14.02  by  Michael Scheer
*CMZ :  2.04/06 07/08/2023  10.05.29  by  Michael Scheer
*CMZ :  2.04/05 15/03/2023  13.22.48  by  Michael Scheer
*CMZ :  2.04/04 14/03/2023  11.22.26  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.38.01  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.57.20  by  Michael Scheer
*CMZ :  2.04/01 17/01/2023  13.16.06  by  Michael Scheer
*CMZ :  2.04/00 02/09/2022  07.23.21  by  Michael Scheer
*CMZ :  2.03/00 26/07/2022  07.27.06  by  Michael Scheer
*CMZ :  2.02/02 11/02/2022  10.16.30  by  Michael Scheer
*CMZ :  2.02/00 06/04/2021  15.55.28  by  Michael Scheer
*CMZ :  2.01/08 15/08/2020  08.40.43  by  Michael Scheer
*CMZ :  2.01/07 28/07/2020  10.27.15  by  Michael Scheer
*CMZ :  2.01/06 27/07/2020  12.07.59  by  Michael Scheer
*CMZ :  2.01/05 27/07/2020  10.28.00  by  Michael Scheer
*CMZ :  2.01/03 16/07/2019  09.36.59  by  Michael Scheer
*CMZ :  2.01/02 02/05/2018  14.22.15  by  Michael Scheer
*CMZ :  2.01/01 24/04/2018  17.18.04  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  15.17.18  by  Michael Scheer
*CMZ :  2.00/03 24/04/2018  13.33.50  by  Michael Scheer
*CMZ :  2.00/02 17/04/2018  13.44.53  by  Michael Scheer
*CMZ :  2.00/01 16/04/2018  15.48.23  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.51.26  by  Michael Scheer
*CMZ :  1.25/05 05/04/2018  19.30.01  by  Michael Scheer
*CMZ :  1.25/04 05/04/2018  16.14.01  by  Michael Scheer
*CMZ :  1.25/03 03/04/2018  08.32.34  by  Michael Scheer
*CMZ :  1.25/02 22/03/2018  15.10.45  by  Michael Scheer
*CMZ :  1.25/01 20/03/2018  16.23.14  by  Michael Scheer
*CMZ :  1.25/00 16/03/2018  15.06.30  by  Michael Scheer
*CMZ :  1.24/01 17/10/2017  10.11.38  by  Michael Scheer
*CMZ :  1.24/00 12/10/2017  15.01.01  by  Michael Scheer
*CMZ :  1.23/07 12/10/2017  08.31.17  by  Michael Scheer
*CMZ :  1.23/06 06/10/2017  14.22.02  by  Michael Scheer
*CMZ :  1.23/05 06/10/2017  12.51.05  by  Michael Scheer
*CMZ :  1.23/04 05/10/2017  12.36.30  by  Michael Scheer
*CMZ :  1.23/03 27/09/2017  09.39.17  by  Michael Scheer
*CMZ :  1.23/02 18/09/2017  15.33.46  by  Michael Scheer
*CMZ :  1.23/01 09/08/2017  08.38.14  by  Michael Scheer
*CMZ :  1.23/00 04/08/2017  09.35.04  by  Michael Scheer
*CMZ :  1.22/01 21/07/2017  15.02.00  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  10.36.01  by  Michael Scheer
*CMZ :  1.21/00 29/06/2017  16.12.16  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  16.11.17  by  Michael Scheer
*CMZ :  1.20/02 23/06/2017  14.23.56  by  Michael Scheer
*CMZ :  1.20/01 22/06/2017  14.46.47  by  Michael Scheer
*CMZ :  1.20/00 22/06/2017  11.27.31  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.34.58  by  Michael Scheer
*CMZ :  1.18/03 14/06/2017  11.29.53  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  15.11.00  by  Michael Scheer
*CMZ :  1.18/01 09/06/2017  08.54.59  by  Michael Scheer
*CMZ :  1.18/00 06/06/2017  14.48.14  by  Michael Scheer
*CMZ :  1.17/08 30/05/2017  16.29.12  by  Michael Scheer
*CMZ :  1.17/07 24/05/2017  13.12.04  by  Michael Scheer
*CMZ :  1.17/06 21/05/2017  14.25.54  by  Michael Scheer
*CMZ :  1.17/05 18/05/2017  12.07.07  by  Michael Scheer
*CMZ :  1.17/04 12/05/2017  13.52.43  by  Michael Scheer
*CMZ :  1.17/03 09/05/2017  13.37.52  by  Michael Scheer
*CMZ :  1.17/02 09/05/2017  13.11.36  by  Michael Scheer
*CMZ :  1.17/01 08/05/2017  20.51.09  by  Michael Scheer
*CMZ :  1.17/00 08/05/2017  16.57.03  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  14.11.11  by  Michael Scheer
*CMZ :  1.15/13 05/05/2017  10.21.44  by  Michael Scheer
*CMZ :  1.15/11 03/05/2017  09.26.17  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.48.35  by  Michael Scheer
*CMZ :  1.15/09 07/04/2017  15.00.04  by  Michael Scheer
*CMZ :  1.15/08 06/04/2017  15.01.20  by  Michael Scheer
*CMZ :  1.15/07 05/04/2017  16.02.20  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.33.09  by  Michael Scheer
*CMZ :  1.15/05 04/04/2017  12.48.22  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  13.12.53  by  Michael Scheer
*CMZ :  1.15/03 03/04/2017  11.00.07  by  Michael Scheer
*CMZ :  1.15/02 02/04/2017  09.46.32  by  Michael Scheer
*CMZ :  1.15/01 30/03/2017  11.37.22  by  Michael Scheer
*CMZ :  1.15/00 28/03/2017  12.03.00  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  12.54.38  by  Michael Scheer
*CMZ :  1.13/03 16/03/2017  17.18.19  by  Michael Scheer
*CMZ :  1.13/02 09/03/2017  17.35.51  by  Michael Scheer
*CMZ :  1.13/01 08/03/2017  17.07.42  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  17.04.56  by  Michael Scheer
*CMZ :  1.12/00 27/02/2017  15.49.37  by  Michael Scheer
*CMZ :  1.11/07 23/02/2017  17.25.07  by  Michael Scheer
*CMZ :  1.11/06 23/02/2017  13.48.56  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  16.08.44  by  Michael Scheer
*CMZ :  1.11/04 25/01/2017  16.58.21  by  Michael Scheer
*CMZ :  1.11/03 18/01/2017  09.43.51  by  Michael Scheer
*CMZ :  1.11/02 10/01/2017  10.20.14  by  Michael Scheer
*CMZ :  1.11/01 09/01/2017  13.56.32  by  Michael Scheer
*CMZ :  1.11/00 05/01/2017  09.37.44  by  Michael Scheer
*CMZ :  1.10/03 05/12/2016  16.30.30  by  Michael Scheer
*CMZ :  1.10/02 01/12/2016  13.35.11  by  Michael Scheer
*CMZ :  1.10/01 21/11/2016  13.02.21  by  Michael Scheer
*CMZ :  1.10/00 18/11/2016  09.20.28  by  Michael Scheer
*CMZ :  1.09/01 10/10/2016  10.18.30  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  12.55.22  by  Michael Scheer
*CMZ :  1.08/00 30/09/2016  13.55.02  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  19.17.35  by  Michael Scheer
*CMZ :  1.07/02 25/09/2016  13.41.46  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.51.16  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  15.02.55  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.52.28  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.02.46  by  Michael Scheer
*CMZ :  1.04/03 15/09/2016  17.38.28  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  16.33.46  by  Michael Scheer
*CMZ :  1.04/01 14/09/2016  15.26.25  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  13.37.05  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  14.36.16  by  Michael Scheer
*CMZ :  1.02/03 12/09/2016  11.55.27  by  Michael Scheer
*CMZ :  1.02/01 11/09/2016  12.34.04  by  Michael Scheer
*CMZ :  1.02/00 30/08/2016  13.27.12  by  Michael Scheer
*CMZ :  1.01/00 21/08/2016  12.52.29  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  18.47.41  by  Michael Scheer
*CMZ :  0.00/14 19/08/2016  14.37.09  by  Michael Scheer
*CMZ :  0.00/13 19/08/2016  14.12.39  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  09.27.38  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  16.30.10  by  Michael Scheer
*CMZ :  0.00/10 14/07/2016  14.01.01  by  Michael Scheer
*CMZ :  0.00/09 06/07/2016  08.51.18  by  Michael Scheer
*CMZ :  0.00/08 23/06/2016  15.45.45  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  14.00.43  by  Michael Scheer
*CMZ :  0.00/05 14/06/2016  13.56.01  by  Michael Scheer
*CMZ :  0.00/04 13/05/2016  14.51.39  by  Michael Scheer
*CMZ :  0.00/03 04/05/2016  11.43.21  by  Michael Scheer
*CMZ :  0.00/02 02/05/2016  10.24.12  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  16.04.05  by  Michael Scheer
*CMZ :  0.00/00 20/04/2016  12.51.37  by  Michael Scheer
*-- Author :    Michael Scheer   12/02/2004
      print *
      print *
      print *
      write(lun6,*)'     **********************************************************'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     *                       UNDUMAG                          *'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     *                    Version 2.04/13                     *'
      write(lun6,*)'     *                         4.9.2023                       *'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     *                     Michael Scheer                     *'
      write(lun6,*)'     *                       HZB/BESSY                        *'
      write(lun6,*)'     *                                                        *'
      write(lun6,*)'     **********************************************************'
      print *
      print *
      print *

      call util_zeit_kommentar(lun6,"")

      open(unit=999,file="undumag.ver")
      chuvers="2.04/13"
      write(999,*)chuvers
      close(999)
+KEEP,inputver.
*CMZ :  2.04/13 04/09/2023  12.06.16  by  Michael Scheer
*CMZ :  2.04/12 31/08/2023  06.57.59  by  Michael Scheer
*CMZ :  2.04/11 29/08/2023  15.03.24  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.14.31  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.16.48  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.57.08  by  Michael Scheer
*CMZ :  2.04/07 10/08/2023  09.14.02  by  Michael Scheer
*CMZ :  2.04/06 07/08/2023  10.05.29  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.38.01  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.57.20  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  14.22.34  by  Michael Scheer
*CMZ :  2.04/00 02/09/2022  07.23.44  by  Michael Scheer
*CMZ :  2.01/08 15/08/2020  08.40.43  by  Michael Scheer
*CMZ :  2.01/07 28/07/2020  10.27.15  by  Michael Scheer
*CMZ :  2.01/02 02/05/2018  14.22.15  by  Michael Scheer
*CMZ :  2.01/01 24/04/2018  17.18.04  by  Michael Scheer
*CMZ :  2.01/00 24/04/2018  15.17.18  by  Michael Scheer
*CMZ :  2.00/03 24/04/2018  13.33.50  by  Michael Scheer
*CMZ :  2.00/00 12/04/2018  08.51.26  by  Michael Scheer
*CMZ :  1.25/05 05/04/2018  19.30.01  by  Michael Scheer
*CMZ :  1.25/04 05/04/2018  16.14.01  by  Michael Scheer
*CMZ :  1.25/02 22/03/2018  15.10.45  by  Michael Scheer
*CMZ :  1.25/01 16/03/2018  15.07.26  by  Michael Scheer
*CMZ :  1.24/01 17/10/2017  10.11.38  by  Michael Scheer
*CMZ :  1.24/00 12/10/2017  15.01.01  by  Michael Scheer
*CMZ :  1.23/07 12/10/2017  08.31.17  by  Michael Scheer
*CMZ :  1.23/06 06/10/2017  14.22.02  by  Michael Scheer
*CMZ :  1.23/05 06/10/2017  12.51.05  by  Michael Scheer
*CMZ :  1.23/04 05/10/2017  12.36.30  by  Michael Scheer
*CMZ :  1.23/03 27/09/2017  09.39.17  by  Michael Scheer
*CMZ :  1.23/02 18/09/2017  15.33.46  by  Michael Scheer
*CMZ :  1.23/01 09/08/2017  08.38.14  by  Michael Scheer
*CMZ :  1.23/00 04/08/2017  09.35.04  by  Michael Scheer
*CMZ :  1.22/01 21/07/2017  15.02.00  by  Michael Scheer
*CMZ :  1.22/00 05/07/2017  10.36.01  by  Michael Scheer
*CMZ :  1.21/00 29/06/2017  16.12.16  by  Michael Scheer
*CMZ :  1.20/03 29/06/2017  16.11.17  by  Michael Scheer
*CMZ :  1.20/02 23/06/2017  14.23.56  by  Michael Scheer
*CMZ :  1.20/01 22/06/2017  14.46.47  by  Michael Scheer
*CMZ :  1.20/00 22/06/2017  11.27.31  by  Michael Scheer
*CMZ :  1.19/00 20/06/2017  12.34.58  by  Michael Scheer
*CMZ :  1.18/03 14/06/2017  11.29.53  by  Michael Scheer
*CMZ :  1.18/02 13/06/2017  15.11.00  by  Michael Scheer
*CMZ :  1.17/08 30/05/2017  16.29.12  by  Michael Scheer
*CMZ :  1.17/07 24/05/2017  13.12.04  by  Michael Scheer
*CMZ :  1.17/06 21/05/2017  14.25.54  by  Michael Scheer
*CMZ :  1.17/05 18/05/2017  12.07.07  by  Michael Scheer
*CMZ :  1.17/04 12/05/2017  13.52.43  by  Michael Scheer
*CMZ :  1.17/03 09/05/2017  13.37.52  by  Michael Scheer
*CMZ :  1.17/02 09/05/2017  13.11.36  by  Michael Scheer
*CMZ :  1.17/01 08/05/2017  20.51.09  by  Michael Scheer
*CMZ :  1.17/00 08/05/2017  16.57.03  by  Michael Scheer
*CMZ :  1.16/00 07/05/2017  14.11.11  by  Michael Scheer
*CMZ :  1.15/13 05/05/2017  10.21.44  by  Michael Scheer
*CMZ :  1.15/11 03/05/2017  09.26.17  by  Michael Scheer
*CMZ :  1.15/10 19/04/2017  12.48.35  by  Michael Scheer
*CMZ :  1.15/09 07/04/2017  15.00.04  by  Michael Scheer
*CMZ :  1.15/08 06/04/2017  15.01.20  by  Michael Scheer
*CMZ :  1.15/07 05/04/2017  16.02.20  by  Michael Scheer
*CMZ :  1.15/06 04/04/2017  13.33.09  by  Michael Scheer
*CMZ :  1.15/05 04/04/2017  12.48.22  by  Michael Scheer
*CMZ :  1.15/04 03/04/2017  13.12.53  by  Michael Scheer
*CMZ :  1.15/03 03/04/2017  11.00.07  by  Michael Scheer
*CMZ :  1.15/02 02/04/2017  09.46.32  by  Michael Scheer
*CMZ :  1.15/01 30/03/2017  11.37.22  by  Michael Scheer
*CMZ :  1.14/00 22/03/2017  12.54.38  by  Michael Scheer
*CMZ :  1.13/03 16/03/2017  17.18.19  by  Michael Scheer
*CMZ :  1.13/02 09/03/2017  17.35.51  by  Michael Scheer
*CMZ :  1.13/01 08/03/2017  17.07.42  by  Michael Scheer
*CMZ :  1.13/00 02/03/2017  17.04.56  by  Michael Scheer
*CMZ :  1.12/00 27/02/2017  15.49.37  by  Michael Scheer
*CMZ :  1.11/07 23/02/2017  17.25.07  by  Michael Scheer
*CMZ :  1.11/06 23/02/2017  13.48.56  by  Michael Scheer
*CMZ :  1.11/05 22/02/2017  16.08.44  by  Michael Scheer
*CMZ :  1.10/01 21/11/2016  13.02.21  by  Michael Scheer
*CMZ :  1.10/00 18/11/2016  09.20.28  by  Michael Scheer
*CMZ :  1.09/01 10/10/2016  10.18.30  by  Michael Scheer
*CMZ :  1.09/00 04/10/2016  12.55.22  by  Michael Scheer
*CMZ :  1.08/00 30/09/2016  13.55.02  by  Michael Scheer
*CMZ :  1.07/03 27/09/2016  19.17.35  by  Michael Scheer
*CMZ :  1.07/02 25/09/2016  13.41.46  by  Michael Scheer
*CMZ :  1.07/01 25/09/2016  11.51.16  by  Michael Scheer
*CMZ :  1.07/00 24/09/2016  15.02.55  by  Michael Scheer
*CMZ :  1.06/01 21/09/2016  15.52.28  by  Michael Scheer
*CMZ :  1.06/00 21/09/2016  13.02.46  by  Michael Scheer
*CMZ :  1.05/00 17/09/2016  10.39.52  by  Michael Scheer
*CMZ :  1.04/03 15/09/2016  17.38.28  by  Michael Scheer
*CMZ :  1.04/02 15/09/2016  16.33.46  by  Michael Scheer
*CMZ :  1.04/01 14/09/2016  15.26.25  by  Michael Scheer
*CMZ :  1.04/00 14/09/2016  13.37.05  by  Michael Scheer
*CMZ :  1.03/00 13/09/2016  14.36.16  by  Michael Scheer
*CMZ :  1.02/03 12/09/2016  11.55.27  by  Michael Scheer
*CMZ :  1.02/01 11/09/2016  12.34.04  by  Michael Scheer
*CMZ :  1.02/00 30/08/2016  13.27.12  by  Michael Scheer
*CMZ :  1.01/00 21/08/2016  12.52.29  by  Michael Scheer
*CMZ :  1.00/00 19/08/2016  18.47.41  by  Michael Scheer
*CMZ :  0.00/14 19/08/2016  14.37.09  by  Michael Scheer
*CMZ :  0.00/13 19/08/2016  14.12.39  by  Michael Scheer
*CMZ :  0.00/12 21/07/2016  09.27.38  by  Michael Scheer
*CMZ :  0.00/11 20/07/2016  16.30.10  by  Michael Scheer
*CMZ :  0.00/10 14/07/2016  14.01.01  by  Michael Scheer
*CMZ :  0.00/09 06/07/2016  08.51.18  by  Michael Scheer
*CMZ :  0.00/08 23/06/2016  15.45.45  by  Michael Scheer
*CMZ :  0.00/07 23/06/2016  15.45.22  by  Michael Scheer
*CMZ :  0.00/06 22/06/2016  14.00.43  by  Michael Scheer
*CMZ :  0.00/05 14/06/2016  13.56.01  by  Michael Scheer
*CMZ :  0.00/04 13/05/2016  14.51.39  by  Michael Scheer
*CMZ :  0.00/03 04/05/2016  11.43.21  by  Michael Scheer
*CMZ :  0.00/02 02/05/2016  10.24.12  by  Michael Scheer
*CMZ :  0.00/01 26/04/2016  16.04.05  by  Michael Scheer
*-- Author :    Michael Scheer   27/02/2004
* Version 2.04/13
+PATCH,$VERSION.
*CMZ :  0.00/00 20/04/2016  13.04.28  by  Michael Scheer
+DECK,V2_04.
*CMZ :  2.04/14 06/09/2023  07.42.07  by  Michael Scheer
*CMZ :  2.04/13 04/09/2023  12.06.16  by  Michael Scheer
*CMZ :  2.04/12 31/08/2023  06.57.59  by  Michael Scheer
*CMZ :  2.04/11 29/08/2023  15.03.24  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  16.14.31  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.16.48  by  Michael Scheer
*CMZ :  2.04/08 11/08/2023  14.57.08  by  Michael Scheer
*CMZ :  2.04/07 10/08/2023  09.14.03  by  Michael Scheer
*CMZ :  2.04/06 07/08/2023  10.05.29  by  Michael Scheer
*CMZ :  2.04/05 15/03/2023  13.22.48  by  Michael Scheer
*CMZ :  2.04/04 14/03/2023  11.22.26  by  Michael Scheer
*CMZ :  2.04/03 05/03/2023  16.38.01  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  20.57.20  by  Michael Scheer
*CMZ :  2.04/01 13/02/2023  14.22.34  by  Michael Scheer
*CMZ :  2.04/00 17/01/2023  13.14.13  by  Michael Scheer
*-- Author :    Michael Scheer   17/01/2023
*________________________________________________________________________
*
*::>          VERSION  2.04/14   06/09/2023 07.42.07
*
*________________________________________________________________________
*
*::>          VERSION  2.04/13   04/09/2023 12.06.16
*
* Facets file implemented, segmentation speeded up
*________________________________________________________________________
*
*::>          VERSION  2.04/12   31/08/2023 06.57.59
*
* Bugs for plotting of coils removed from undugui.py
*________________________________________________________________________
*
*::>          VERSION  2.04/11   29/08/2023 15.03.24
*
* Bug from undumag_read_clc for cylinders removed
* Graphics in undugui improved, bugs removed
*________________________________________________________________________
*
*::>          VERSION  2.04/10   23/08/2023 16.14.31
*
* Postscript 3d graphic improved, bug in undumag_drop_zero_magnets removed
*________________________________________________________________________
*
*::>          VERSION  2.04/09   18/08/2023 19.16.48
*
* Bugs in undugui.py
*________________________________________________________________________
*
*::>          VERSION  2.04/08   11/08/2023 14.57.08
*
* Treatment of cylinders implemented for new syntax
*
*________________________________________________________________________
*
*::>          VERSION  2.04/07   10/08/2023 09.14.03
*
* Bug in CLCTRANSROTCOP removed. Check for rectangular block improved.
* Check for size of interaction matrix implemented
*________________________________________________________________________
*
*::>          VERSION  2.04/06   07/08/2023 10.05.29
*
* Bugs... Variables for translations etc., translations etc. in GUI
*
*________________________________________________________________________
*
*::>          VERSION  2.04/05   15/03/2023 13.22.48
*
* First GITLAB-Version
*________________________________________________________________________
*
*::>          VERSION  2.04/04   14/03/2023 11.22.26
*
* Before GITLAB-Version
*________________________________________________________________________
*
*::>          VERSION  2.04/03   05/03/2023 16.38.01
*
* Bugs of segmentation removed
*________________________________________________________________________
*
*::>          VERSION  2.04/02   27/02/2023 20.57.20
*
* Bugs of segmentation removed
*________________________________________________________________________
*
*::>          VERSION  2.04/01   13/02/2023 14.22.34
*
* Bugs of segmentation removed
*________________________________________________________________________
*
*::>          VERSION  2.04/00   17/01/2023 13.14.13
*
* Inhomogenities, bugs removed
*
+PATCH,OBSOLETE.
*CMZ :  0.00/01 25/04/2016  08.11.13  by  Michael Scheer
+DECK,clcmag_write_facets.
*CMZ :  2.04/13 03/09/2023  12.09.43  by  Michael Scheer
*-- Author :    Michael Scheer   03/09/2023
      subroutine clcmag_write_facets

      use magnets_structure

      implicit none

      Type(T_Magnet) tmag
      Type(T_Voxel) tv

      character(128)cmag,cmoth,ctype

      integer ivo,imag,iv,nvox,npoi,ipoi,iface,nface,i,ix,iy,iz,luno

      open(newunit=luno,file='undumag.fct')

      ivo=0
      do i=1,nfacets
        imag=ifacets(1,i)
        iv=ifacets(2,i)
        if (iv.ne.ivo) then
          write(luno,'(a)')'vertices'

        endif
        iface=ifacets(3,i)
        tmag=t_magnets(imag)
        tv=tmag%t_voxels(iv)
        ix=tv%ixdiv
        iy=tv%iydiv
        iz=tv%izdiv
        cmag=tmag%cnam
        ctype=tmag%ctype
        cmoth=tmag%cmoth
        print*,cmag,cmoth,imag,iface
        ivo=iv
      enddo !iface

      flush(luno)
      close(luno)
      return
      end
+DECK,clcmag_copy_voxels.
*CMZ :  2.04/13 04/09/2023  10.41.24  by  Michael Scheer
*CMZ :  2.04/07 22/08/2023  09.03.52  by  Michael Scheer
*CMZ :  2.04/06 04/08/2023  11.26.53  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  20.06.46  by  Michael Scheer
*CMZ :  2.04/00 24/12/2022  13.07.12  by  Michael Scheer
*CMZ :  2.02/01 19/01/2022  10.54.41  by  Michael Scheer
*-- Author :    Michael Scheer   01/10/2021
      subroutine clcmag_copy_voxels

      use commandlinef90m
      use bpolyederf90m
      use undumagf90m
      use magnets_structure
      use displacement

      implicit none

      integer i_tvoxel_is_block
      integer imag,ivox,icopy,imodul,kmag

      type (T_Voxel) tv
      type (T_Voxel_Copy) tvc

+self,if=trace.
      print*,"-trace-: Entered clcmag_copy_voxels"
+self.

      call util_zeit_kommentar(lun6,"Entered clcmag_copy_voxels")

      nvoxcopy_t=0
      do imag=1,nmagtot_t
        nvoxcopy_t=nvoxcopy_t+t_magnets(t_magcopy(imag)%kproto)%nvoxels
      enddo !imag

      allocate(t_voxcopy(nvoxcopy_t))

      nrec=0
      niron=0
      nvoxcopy_t=0

      do imag=1,nmagtot_t
        kmag=t_magcopy(imag)%kproto
        imodul=t_magcopy(imag)%kmodule
        icopy=t_magcopy(imag)%kcopy
        do ivox=1,t_magnets(kmag)%nvoxels
          nvoxcopy_t=nvoxcopy_t+1
          t_voxcopy(nvoxcopy_t)%kmodule=imodul
          t_voxcopy(nvoxcopy_t)%kmagnet=imag
          t_voxcopy(nvoxcopy_t)%kproto=kmag
          t_voxcopy(nvoxcopy_t)%kvoxel=ivox
          t_voxcopy(nvoxcopy_t)%kcopy=icopy
          t_voxcopy(nvoxcopy_t)%gcen=t_magnets(kmag)%t_voxels(ivox)%gcen
     &      +t_magcopy(imag)%gcen-t_magnets(kmag)%gcen
          t_voxcopy(nvoxcopy_t)%br=t_magnets(kmag)%t_voxels(ivox)%br
          t_voxcopy(nvoxcopy_t)%Ispole=t_magnets(kmag)%Ispole
          if (t_magnets(kmag)%Ispole.eq.0) then
            nrec=nrec+1
          else
            niron=niron+1
          endif
        enddo !ivox
      enddo !imag

      do ivox=1,nvoxcopy_t
        tvc=t_voxcopy(ivox)
        imag=tvc%kproto
c        tmag=t_magnets(imag)
        tv=t_magnets(imag)%t_voxels(tvc%kvoxel)
        t_magnets(imag)%t_voxels(tvc%kvoxel)%IsBlock=t_magnets(imag)%IsBlock
        if (t_magnets(imag)%ctype.ne.'Cylinder'
     &      .and.tv%nhull.eq.8.and.tv%nedge.eq.12.and.tv%nface.eq.6
     &      .and.t_magnets(imag)%IsBlock.eq.0) then
          if (irecrepl.eq.0) then
            t_magnets(imag)%t_voxels(tvc%kvoxel)%IsBlock=-i_tvoxel_is_block(tv)
          else
            t_magnets(imag)%t_voxels(tvc%kvoxel)%IsBlock=i_tvoxel_is_block(tv)
          endif
        endif
      enddo !ivox

      call util_zeit_kommentar(lun6,"Leaving clcmag_copy_voxels")
+self,if=trace.
      print*,"-trace-: Leaving clcmag_copy_voxels"
+self.
      return
      end
+PATCH,PYTHON,T=PYTHON.
*CMZ :  2.01/05 26/02/2020  09.19.37  by  Michael Scheer
+KEEP,undumagseq,T=PYTHON.
*CMZ :  2.04/13 01/09/2023  08.30.05  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  08.21.45  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  16.32.24  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  11.27.45  by  Michael Scheer
*-- Author :    Michael Scheer   22/08/2022
def _undumag(callkey=''):

+seq,uguiglobind.

  print("Executing\nundumag.exe",Rmodus)
  if Rmodus.split()[0] == 'FILAMENTS':
    print('to update undumag.fil\n')
  elif Rmodus.split()[0] == 'SEGMENTATION':
    print('to perform segmentation, i.e. updating undumag.geo etc..\n')
  #endif
+self,if=trace.
  debug("\ntrace::_undumag:",callkey + " " + str(Rmodus))
+self.

  if IUNDUMAGisRunning:
    wError("UNDUNMAG IS RUNNING!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
    return
  #endif IUNDUMAGisRunning

  if NMagPolTot <= 0 and NCoil <= 0:
    wError("No magnetic items set-up so far...!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
  #endif IUNDUMAGisRunning

  if type(Rmodus) == str and len(Rmodus) and NCoil > 0:
    ureadfil("_undumag")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag after call to ureadfil")
+self.
    return
    #Quit("Ende in _undumag")

  Fnam = 'undumag.nam'
  Fclc = 'undumag.clc'

  #if MustWriteCLC:

  uwriteclc('UNDUMAG')
  uwritenam('UNDUMAG')

  uwait = Toplevel()
  uwait.title('Waiting for UNDUMAG to finish')

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)

  uwait.geometry(sgeo)
  uwait.attributes('-topmost', 1)

  lwarn = Label(uwait,text="   Be patient and check terminal...\n Plotting may also take some time ...  ",font=MyFont)
  lwarn.pack(fill=X)
  uwait.update()

  if len(Rmodus) == 0:

    IUNDUMAGisRunning = 1
    ifail = os.system(RunUndu)
    uwait.destroy()

    if ifail:
      IUNDUMAGisRunning = 0
      wError("\n*** UNDUMAG run failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
+self.
      return
    #endif

    undu_get_runnumber()
    nreloadupl()
    undu_overview()

    IUNDUMAGisRunning = 0

    ifail = 1
    itry = 0
    cline = '1'
    while itry < 10:
      try:
        Fsta = open("undumag.stat","r")
        cline = Fsta.readline().strip()
        break
      except:
        itry += 1
        sleep(3)
      #endtry
    #endwhile

    if cline == '0': ifail = 0
    if ifail: wError("\n*** UNDUMAG run failed ***")

  elif Rmodus.split()[0] == 'SEGMENTATION':

    IUNDUMAGisRunning = 1
    os.system(RunUndu + " " + Rmodus)
    uwait.destroy()
    IUNDUMAGisRunning = 0

    undu_get_runnumber()
    nreloadupl()

    try:
      Fsta = open("undumag.sta","r")
      cline = Fsta.readline().strip()
      cline = Fsta.readline().strip()
      if cline != 'Segmentation finished':
        wError("\n*** UNDUMAG run for segmentation failed ***")
      #endif trim(cline) != ' Segmentation finished'
    except:
      wError("\n*** UNDUMAG run for segmentation failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
      return
+self.
    #endtry

  #endif len(Rmodus) == 0
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag")
+self.

#enddef _undumag()

def _runundumag(callkey='',modus=''):

+seq,uguiglobind.

+self,if=trace.
  debug(NL,"trace::_runundumag:",callkey,modus)
+self.

  Rmodus = modus
  _undumag('_rundunmag')

#enddef
+KEEP,listcoils,T=PYTHON.
*CMZ :  2.04/13 01/09/2023  11.47.21  by  Michael Scheer
*CMZ :  2.04/12 30/08/2023  15.11.19  by  Michael Scheer
*CMZ :  2.04/10 20/08/2023  11.16.14  by  Michael Scheer
*CMZ :  2.03/00 18/07/2022  08.56.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  12.31.36  by  Michael Scheer
*CMZ :  2.02/00 16/03/2021  16.15.56  by  Michael Scheer
*-- Author :    Michael Scheer   02/02/2021
S_CylrIn = StringVar()
S_CylrOut = StringVar()
S_CylHeight = StringVar()
S_CyldPhi = StringVar()

S_Current_Coil = StringVar()
S_Name_Coil = StringVar()
S_nWindings_Coil = StringVar()
S_Filling_Coil = StringVar()
S_Xcen_Coil = StringVar()
S_Ycen_Coil = StringVar()
S_Zcen_Coil = StringVar()
S_VnX_Coil = StringVar()
S_VnY_Coil = StringVar()
S_VnZ_Coil = StringVar()
S_AngRot_Coil = StringVar()
S_xLenOut_Coil = StringVar()
S_zLenIn_Coil = StringVar()
S_zLenOut_Coil = StringVar()
S_RadiusIn_Coil = StringVar()
S_Height_Coil = StringVar()
S_nDivHeight_Coil = StringVar()
S_nDivWidth_Coil = StringVar()
S_nDivArc_Coil = StringVar()
S_Color_Coil = StringVar()

S_CylrIn.set('0.0')
S_CylrOut.set('40.')
S_CylHeight.set('40.')
S_CyldPhi.set('360.')

S_Current_Coil.set('1.0')
S_Name_Coil.set('CoilName')
S_Filling_Coil.set('1.0')
S_nWindings_Coil.set('1')
S_Xcen_Coil.set('30.')
S_Zcen_Coil.set('0.0')
S_VnX_Coil.set('0.0')
S_VnY_Coil.set('1.0')
S_VnZ_Coil.set('0.0')
S_AngRot_Coil.set('0.0')
S_xLenOut_Coil.set('50.0')
S_zLenIn_Coil.set('20.')
S_zLenOut_Coil.set('30.')
S_RadiusIn_Coil.set('10.')
height = 20.
S_Height_Coil.set(str(height))
S_nDivHeight_Coil.set('11')
S_Ycen_Coil.set(str(height))
S_nDivWidth_Coil.set('11')
S_nDivArc_Coil.set('6')
S_Color_Coil.set('green')

def _Check_Coil(coil):
    for var in coil[1]:
        try:
            val = calc_var(var)
        except:
            wError("Bad item " + var)
            return 1
        #endtry
    #endfor ic in range(len(coil))
    return 0
#enddef _Check_Coil()

def Set_Coil(k):
+seq,uguiglobind.

  color = S_Color_Coil.get()

  if color[0] != '$':
    try: color = str(DictUnduColors[color])
    except:
      wError("Unkown color: " + color)
      return
  #endif

  #print(k,NL,Coils[k])
  print("Set_Coil is still under construction...")
  return 1

  coil = [Coils[k][0],[S_Current_Coil.get(),S_Filling_Coil.get(),S_nWindings_Coil.get(), \
  S_Xcen_Coil.get(),S_Ycen_Coil.get(),S_Zcen_Coil.get(),S_VnX_Coil.get(), \
  S_VnY_Coil.get(),S_VnZ_Coil.get(),S_AngRot_Coil.get(),S_xLenOut_Coil.get(), \
  S_zLenIn_Coil.get(),S_zLenOut_Coil.get(),S_RadiusIn_Coil.get(),S_Height_Coil.get(), \
  S_nDivHeight_Coil.get(),S_nDivWidth_Coil.get(),S_nDivArc_Coil.get(), \
  color]]

  if _Check_Coil(coil): return 1

  Coils[k] = coil
#  try: coil[1][18] = UnduColors[int(coil[1][18])]
#  except: pass

  undu_coils_to_filaments()

  return 0

#enddef Set_Coil(k)

def Get_Coil(k):
+seq,uguiglobind.
  global Coils

  print(k,NL,Coils[k])
  print("Get_Coil is still under construction...")
  return

  if Coils[k][0][0] == 'RectWindings':
    par = Coils[k][1]
    S_Name_Coil.set(str(par[0]))
    S_Current_Coil.set(str(par[1]))
    S_Filling_Coil.set(str(par[2]))
    S_nWindings_Coil.set(str(par[3]))
    S_Xcen_Coil.set(str(par[4]))
    S_Ycen_Coil.set(str(par[5]))
    S_Zcen_Coil.set(str(par[6]))
    S_VnX_Coil.set(str(par[7]))
    S_VnY_Coil.set(str(par[8]))
    S_VnZ_Coil.set(str(par[9]))
    S_AngRot_Coil.set(str(par[10]))
    S_xLenOut_Coil.set(str(par[11]))
    S_zLenIn_Coil.set(str(par[12]))
    S_zLenOut_Coil.set(str(par[13]))
    S_RadiusIn_Coil.set(str(par[14]))
    S_Height_Coil.set(str(par[15]))
    S_nDivHeight_Coil.set(str(par[16]))
    S_nDivWidth_Coil.set(str(par[17]))
    S_nDivArc_Coil.set(str(par[18]))
    color = str(par[19])
    try: color = UnduColors[int(color)]
    except:pass
    try: color = DictUnduColors[color]
    except:pass
    S_Color_Coil.set(color)
  #endif

#enddef Get_Coil(k)

global WediCoil

def update_coils(caller=''):
+seq,uguiglobind.

  NCoil = len(Coils)
  DictCoils = {}
  idxcoil = 0

  #print("update_coils::",caller)

  for coil in Coils:
    key = coil[0][0]
    if not key in DictCoils: DictCoils[key] = []
    DictCoils[key].append(idxcoil)
    idxcoil += 1
  #endfor

#enddef updatecoils()

def _WaddCoils(key=''):
+seq,uguiglobind.

  WaddCoils = Toplevel()
  WaddCoils.title("Add Coil")
  WaddCoils.attributes('-topmost', 1)

  ewid=50
  elab=20

  bRace = Button(WaddCoils,text='Racetrack, rect. wind.',
                 command = _WaddCoilRace,width=elab)
  bRace.pack(expand=TRUE,fill=X)

  fbott = Frame(WaddCoils)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddCoils,width=elab)
  bCancel.pack(fill=X)
  fbott.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WaddCoils.geometry(sgeo)

  Umaster.wait_window(WaddCoils)

#enddef _WaddCoils(key)

def _WaddCoilRace():
+seq,uguiglobind.

  WaddCoilRace = Toplevel()
  WaddCoilRace.title("Add Racetrack Coil")
  WaddCoilRace.attributes('-topmost', 1)

  ewid=50
  elab=20

  fname = Frame(WaddCoilRace)
  tname = 'Name'
  lname = Label(fname,text=tname,font=MyFont,width=elab)
  ename = Entry(fname,text=S_Name_Coil,justify=CENTER,font=MyFont,width=ewid)
  lname.pack(side=LEFT,fill=X)
  ename.pack(side=RIGHT,fill=X)
  fname.pack(fill=X)

  fCurr = Frame(WaddCoilRace)
  tCurr = 'Current [A]'
  lCurr = Label(fCurr,text=tCurr,font=MyFont,width=elab)
  eCurr = Entry(fCurr,text=S_Current_Coil,justify=CENTER,font=MyFont,width=ewid)
  lCurr.pack(side=LEFT,fill=X)
  eCurr.pack(side=RIGHT,fill=X)
  fCurr.pack(fill=X)

  fFilling = Frame(WaddCoilRace)
  tFilling = 'Fillfactor'
  lFilling = Label(fFilling,text=tFilling,font=MyFont,width=elab)
  eFilling = Entry(fFilling,text=S_Filling_Coil,justify=CENTER,font=MyFont,width=ewid)
  lFilling.pack(side=LEFT,fill=X)
  eFilling.pack(side=RIGHT,fill=X)
  fFilling.pack(fill=X)

  fnWindings = Frame(WaddCoilRace)
  tnWindings = 'Number of windings'
  lnWindings = Label(fnWindings,text=tnWindings,font=MyFont,width=elab)
  enWindings = Entry(fnWindings,text=S_nWindings_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnWindings.pack(side=LEFT,fill=X)
  enWindings.pack(side=RIGHT,fill=X)
  fnWindings.pack(fill=X)

  fXcen = Frame(WaddCoilRace)
  tXcen = 'X center'
  lXcen = Label(fXcen,text=tXcen,font=MyFont,width=elab)
  eXcen = Entry(fXcen,text=S_Xcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddCoilRace)
  tYcen = 'Y center'
  lYcen = Label(fYcen,text=tYcen,font=MyFont,width=elab)
  eYcen = Entry(fYcen,text=S_Ycen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddCoilRace)
  tZcen = 'Z center'
  lZcen = Label(fZcen,text=tZcen,font=MyFont,width=elab)
  eZcen = Entry(fZcen,text=S_Zcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  fVnX = Frame(WaddCoilRace)
  tVnX = 'X of normal vector'
  lVnX = Label(fVnX,text=tVnX,font=MyFont,width=elab)
  eVnX = Entry(fVnX,text=S_VnX_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnX.pack(side=LEFT,fill=X)
  eVnX.pack(side=RIGHT,fill=X)
  fVnX.pack(fill=X)

  fVnY = Frame(WaddCoilRace)
  tVnY = 'Y of normal vector'
  lVnY = Label(fVnY,text=tVnY,font=MyFont,width=elab)
  eVnY = Entry(fVnY,text=S_VnY_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnY.pack(side=LEFT,fill=X)
  eVnY.pack(side=RIGHT,fill=X)
  fVnY.pack(fill=X)

  fVnZ = Frame(WaddCoilRace)
  tVnZ = 'Z of normal vector'
  lVnZ = Label(fVnZ,text=tVnZ,font=MyFont,width=elab)
  eVnZ = Entry(fVnZ,text=S_VnZ_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnZ.pack(side=LEFT,fill=X)
  eVnZ.pack(side=RIGHT,fill=X)
  fVnZ.pack(fill=X)

  fAngRot = Frame(WaddCoilRace)
  tAngRot = 'Rotation angle'
  lAngRot = Label(fAngRot,text=tAngRot,font=MyFont,width=elab)
  eAngRot = Entry(fAngRot,text=S_AngRot_Coil,justify=CENTER,font=MyFont,width=ewid)
  lAngRot.pack(side=LEFT,fill=X)
  eAngRot.pack(side=RIGHT,fill=X)
  fAngRot.pack(fill=X)

  fxLenOut = Frame(WaddCoilRace)
  txLenOut = 'Total length'
  lxLenOut = Label(fxLenOut,text=txLenOut,font=MyFont,width=elab)
  exLenOut = Entry(fxLenOut,text=S_xLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lxLenOut.pack(side=LEFT,fill=X)
  exLenOut.pack(side=RIGHT,fill=X)
  fxLenOut.pack(fill=X)

  fzLenIn = Frame(WaddCoilRace)
  tzLenIn = 'Inner width'
  lzLenIn = Label(fzLenIn,text=tzLenIn,font=MyFont,width=elab)
  ezLenIn = Entry(fzLenIn,text=S_zLenIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenIn.pack(side=LEFT,fill=X)
  ezLenIn.pack(side=RIGHT,fill=X)
  fzLenIn.pack(fill=X)

  fzLenOut = Frame(WaddCoilRace)
  tzLenOut = 'Total width'
  lzLenOut = Label(fzLenOut,text=tzLenOut,font=MyFont,width=elab)
  ezLenOut = Entry(fzLenOut,text=S_zLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenOut.pack(side=LEFT,fill=X)
  ezLenOut.pack(side=RIGHT,fill=X)
  fzLenOut.pack(fill=X)

  fRadiusIn = Frame(WaddCoilRace)
  tRadiusIn = 'Inner radius of arcs'
  lRadiusIn = Label(fRadiusIn,text=tRadiusIn,font=MyFont,width=elab)
  eRadiusIn = Entry(fRadiusIn,text=S_RadiusIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lRadiusIn.pack(side=LEFT,fill=X)
  eRadiusIn.pack(side=RIGHT,fill=X)
  fRadiusIn.pack(fill=X)

  fHeight = Frame(WaddCoilRace)
  tHeight = 'Height'
  lHeight = Label(fHeight,text=tHeight,font=MyFont,width=elab)
  eHeight = Entry(fHeight,text=S_Height_Coil,justify=CENTER,font=MyFont,width=ewid)
  lHeight.pack(side=LEFT,fill=X)
  eHeight.pack(side=RIGHT,fill=X)
  fHeight.pack(fill=X)


  fnDivHeight = Frame(WaddCoilRace)
  tnDivHeight = 'Number of vert. divisions'
  lnDivHeight = Label(fnDivHeight,text=tnDivHeight,font=MyFont,width=elab)
  enDivHeight = Entry(fnDivHeight,text=S_nDivHeight_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivHeight.pack(side=LEFT,fill=X)
  enDivHeight.pack(side=RIGHT,fill=X)
  fnDivHeight.pack(fill=X)

  fnDivWidth = Frame(WaddCoilRace)
  tnDivWidth = 'Number of hori. divisions'
  lnDivWidth = Label(fnDivWidth,text=tnDivWidth,font=MyFont,width=elab)
  enDivWidth = Entry(fnDivWidth,text=S_nDivWidth_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivWidth.pack(side=LEFT,fill=X)
  enDivWidth.pack(side=RIGHT,fill=X)
  fnDivWidth.pack(fill=X)

  fnDivArc = Frame(WaddCoilRace)
  tnDivArc = 'Number arc divisions'
  lnDivArc = Label(fnDivArc,text=tnDivArc,font=MyFont,width=elab)
  enDivArc = Entry(fnDivArc,text=S_nDivArc_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivArc.pack(side=LEFT,fill=X)
  enDivArc.pack(side=RIGHT,fill=X)
  fnDivArc.pack(fill=X)

  fColor = Frame(WaddCoilRace)
  tColor = 'Color'
  lColor = Label(fColor,text=tColor,font=MyFont,width=elab)
  eColor = Entry(fColor,text=S_Color_Coil,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  #debug("+ Race")
  fbott = Frame(WaddCoilRace)

  bCancel = Button(fbott,text='Cancel',command = _cnWaddCoilRace,width=elab)
  bCancel.pack(side=LEFT,fill=X)

  bClose = Button(fbott,text='Ok',command = lambda ct = 'RectWindings': _clWaddCoils(ct))
  bClose.pack(expand=TRUE,fill=X,side=LEFT)

  fbott.pack(expand=TRUE,fill=X)

#  x,y = Umaster.winfo_pointerxy()
#  sgeo = '+' + str(x) + '+' + str(y)
#  WaddCoilRace.geometry(sgeo)

  Umaster.wait_window(WaddCoilRace)

#enddef _WaddCoilRace(key)

def _WeditCoil():
+seq,uguiglobind.

  global WediCoil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil selected")
    return
  #endif not Selected_Coil:

  key = Coils[Selected_Coil][0][0]

  if key != 'RectWindings':
    wError("Unknown key " + key + " in WaddCoils")
    return
  #endif key != 'RectWindings'

  WediCoil = Toplevel()
  WediCoil.title("Edit Coil")
  WediCoil.attributes('-topmost', 1)

  Get_Coil(Selected_Coil)

  ewid=20
  elab=20

  fCurr = Frame(WediCoil)
  tCurr = 'Current [A]'
  lCurr = Label(fCurr,text=tCurr,font=MyFont,width=elab)
  eCurr = Entry(fCurr,text=S_Current_Coil,justify=CENTER,font=MyFont,width=ewid)
  lCurr.pack(side=LEFT,fill=X)
  eCurr.pack(side=RIGHT,fill=X)
  fCurr.pack(fill=X)

  fFilling = Frame(WediCoil)
  tFilling = 'Fillfactor'
  lFilling = Label(fFilling,text=tFilling,font=MyFont,width=elab)
  eFilling = Entry(fFilling,text=S_Filling_Coil,justify=CENTER,font=MyFont,width=ewid)
  lFilling.pack(side=LEFT,fill=X)
  eFilling.pack(side=RIGHT,fill=X)
  fFilling.pack(fill=X)

  fnWindings = Frame(WediCoil)
  tnWindings = 'Number of windings'
  lnWindings = Label(fnWindings,text=tnWindings,font=MyFont,width=elab)
  enWindings = Entry(fnWindings,text=S_nWindings_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnWindings.pack(side=LEFT,fill=X)
  enWindings.pack(side=RIGHT,fill=X)
  fnWindings.pack(fill=X)

  fXcen = Frame(WediCoil)
  tXcen = 'X center'
  lXcen = Label(fXcen,text=tXcen,font=MyFont,width=elab)
  eXcen = Entry(fXcen,text=S_Xcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WediCoil)
  tYcen = 'Y center'
  lYcen = Label(fYcen,text=tYcen,font=MyFont,width=elab)
  eYcen = Entry(fYcen,text=S_Ycen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WediCoil)
  tZcen = 'Z center'
  lZcen = Label(fZcen,text=tZcen,font=MyFont,width=elab)
  eZcen = Entry(fZcen,text=S_Zcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  fVnX = Frame(WediCoil)
  tVnX = 'X of normal vector'
  lVnX = Label(fVnX,text=tVnX,font=MyFont,width=elab)
  eVnX = Entry(fVnX,text=S_VnX_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnX.pack(side=LEFT,fill=X)
  eVnX.pack(side=RIGHT,fill=X)
  fVnX.pack(fill=X)

  fVnY = Frame(WediCoil)
  tVnY = 'Y of normal vector'
  lVnY = Label(fVnY,text=tVnY,font=MyFont,width=elab)
  eVnY = Entry(fVnY,text=S_VnY_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnY.pack(side=LEFT,fill=X)
  eVnY.pack(side=RIGHT,fill=X)
  fVnY.pack(fill=X)

  fVnZ = Frame(WediCoil)
  tVnZ = 'Z of normal vector'
  lVnZ = Label(fVnZ,text=tVnZ,font=MyFont,width=elab)
  eVnZ = Entry(fVnZ,text=S_VnZ_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnZ.pack(side=LEFT,fill=X)
  eVnZ.pack(side=RIGHT,fill=X)
  fVnZ.pack(fill=X)

  fAngRot = Frame(WediCoil)
  tAngRot = 'Rotation angle'
  lAngRot = Label(fAngRot,text=tAngRot,font=MyFont,width=elab)
  eAngRot = Entry(fAngRot,text=S_AngRot_Coil,justify=CENTER,font=MyFont,width=ewid)
  lAngRot.pack(side=LEFT,fill=X)
  eAngRot.pack(side=RIGHT,fill=X)
  fAngRot.pack(fill=X)

  fxLenOut = Frame(WediCoil)
  txLenOut = 'Total length'
  lxLenOut = Label(fxLenOut,text=txLenOut,font=MyFont,width=elab)
  exLenOut = Entry(fxLenOut,text=S_xLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lxLenOut.pack(side=LEFT,fill=X)
  exLenOut.pack(side=RIGHT,fill=X)
  fxLenOut.pack(fill=X)

  fzLenIn = Frame(WediCoil)
  tzLenIn = 'Inner width'
  lzLenIn = Label(fzLenIn,text=tzLenIn,font=MyFont,width=elab)
  ezLenIn = Entry(fzLenIn,text=S_zLenIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenIn.pack(side=LEFT,fill=X)
  ezLenIn.pack(side=RIGHT,fill=X)
  fzLenIn.pack(fill=X)

  fzLenOut = Frame(WediCoil)
  tzLenOut = 'Total width'
  lzLenOut = Label(fzLenOut,text=tzLenOut,font=MyFont,width=elab)
  ezLenOut = Entry(fzLenOut,text=S_zLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenOut.pack(side=LEFT,fill=X)
  ezLenOut.pack(side=RIGHT,fill=X)
  fzLenOut.pack(fill=X)

  fRadiusIn = Frame(WediCoil)
  tRadiusIn = 'Inner radius of arcs'
  lRadiusIn = Label(fRadiusIn,text=tRadiusIn,font=MyFont,width=elab)
  eRadiusIn = Entry(fRadiusIn,text=S_RadiusIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lRadiusIn.pack(side=LEFT,fill=X)
  eRadiusIn.pack(side=RIGHT,fill=X)
  fRadiusIn.pack(fill=X)

  fHeight = Frame(WediCoil)
  tHeight = 'Height'
  lHeight = Label(fHeight,text=tHeight,font=MyFont,width=elab)
  eHeight = Entry(fHeight,text=S_Height_Coil,justify=CENTER,font=MyFont,width=ewid)
  lHeight.pack(side=LEFT,fill=X)
  eHeight.pack(side=RIGHT,fill=X)
  fHeight.pack(fill=X)


  fnDivHeight = Frame(WediCoil)
  tnDivHeight = 'Number of vert. divisions'
  lnDivHeight = Label(fnDivHeight,text=tnDivHeight,font=MyFont,width=elab)
  enDivHeight = Entry(fnDivHeight,text=S_nDivHeight_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivHeight.pack(side=LEFT,fill=X)
  enDivHeight.pack(side=RIGHT,fill=X)
  fnDivHeight.pack(fill=X)

  fnDivWidth = Frame(WediCoil)
  tnDivWidth = 'Number of hori. divisions'
  lnDivWidth = Label(fnDivWidth,text=tnDivWidth,font=MyFont,width=elab)
  enDivWidth = Entry(fnDivWidth,text=S_nDivWidth_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivWidth.pack(side=LEFT,fill=X)
  enDivWidth.pack(side=RIGHT,fill=X)
  fnDivWidth.pack(fill=X)

  fnDivArc = Frame(WediCoil)
  tnDivArc = 'Number arc divisions'
  lnDivArc = Label(fnDivArc,text=tnDivArc,font=MyFont,width=elab)
  enDivArc = Entry(fnDivArc,text=S_nDivArc_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivArc.pack(side=LEFT,fill=X)
  enDivArc.pack(side=RIGHT,fill=X)
  fnDivArc.pack(fill=X)

  fColor = Frame(WediCoil)
  tColor = 'Color'
  lColor = Label(fColor,text=tColor,font=MyFont,width=elab)
  try: S_Color_Coil.set(UnduColors[int(S_Color_Coil.get())])
  except: pass
  eColor = Entry(fColor,text=S_Color_Coil,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fbott = Frame(WediCoil)
  bCancel = Button(fbott,text='Cancel',command = _cnWediCoil,width=elab)
  bCancel.pack(side=LEFT,fill=X)
  bClose = Button(fbott,text='Ok',command = lambda kw=key: _clWediCoil(kw))
  bClose.pack(expand=TRUE,fill=X,side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WediCoil.geometry(sgeo)

  Umaster.wait_window(WediCoil)

#enddef _WeditCoil(key)

def _clWaddCoils(key):
+seq,uguiglobind.

  color = S_Color_Coil.get()

  if color[0] != '$':
    try: color = DictUnduColors[color]
    except:
      wError("Unkown color: " + color)
      return
  #endif

  if key == 'RectWindings':

    coil = \
    [S_Current_Coil.get(),S_Filling_Coil.get(),S_nWindings_Coil.get(), \
    S_Xcen_Coil.get(),S_Ycen_Coil.get(),S_Zcen_Coil.get(),S_VnX_Coil.get(), \
    S_VnY_Coil.get(),S_VnZ_Coil.get(),S_AngRot_Coil.get(),S_xLenOut_Coil.get(), \
    S_zLenIn_Coil.get(),S_zLenOut_Coil.get(),S_RadiusIn_Coil.get(),S_Height_Coil.get(), \
    S_nDivHeight_Coil.get(),S_nDivWidth_Coil.get(),S_nDivArc_Coil.get(), \
    str(color)]

  #endif key

  Coils.append([[key,S_Name_Coil.get()],coil])
  NCoil = len(Coils)

  undu_coils_to_filaments(NCoil-1)
  xyzcoils = _ucoilplot('3d','notsame',NCoil-1,'_clWaddCoils')

  if key == 'RectWindings': WaddCoilRace.destroy()
#enddef _clWaddCoils()

def _clWediCoil(key):
  global WediCoil, Selected_Coil

  istat = Set_Coil(Selected_Coil)
  if istat: return

  WediCoil.destroy()
  _listCoils()
#enddef _clWediCoil()

def _cnWaddCoilRace():
+seq,uguiglobind.
  WaddCoilRace.destroy()
#enddef _cnWaddCoilRace()

def _cnWaddCoil():
+seq,uguiglobind.
  WaddCoil.destroy()
#enddef _clWaddCoils()

def _cnWaddCoils():
+seq,uguiglobind.
  WaddCoils.destroy()
#enddef _clWaddCoils()

def _cnWediCoil():
  global WediCoil
  WediCoil.destroy()
#enddef _clWaddCoils()

def _addCoils(key):
  _WaddCoils(key)
#enddef _addCoils()

def _clWlistCoils():
+seq,uguiglobind.
  global WlistCoils
  WlistCoils.destroy()
#enddef _clWlistCoils()

def _listCoils(modecoil='first'):
+seq,uguiglobind.

  global WlistCoils

  update_coils("_listCoiles: " + modecoil)

  if len(Coils) == 0: return

  try:
    sgeo = WlistCoils.destroy()
  except: sgeo = None

  WlistCoils = Toplevel()
  WlistCoils.title("List of Coils")
  WlistCoils.attributes('-topmost', 1)

  if len(Coils) == 1: Selected_Coil = 0

  global ButtCoil
  ButtCoil = []

  for key in DictCoils:

    fkey = Frame(WlistCoils)
    fhead = Frame(fkey)

    lab = Label(fhead,text="Index",font=MyFont,width=5)
    lab.pack(side=LEFT)
    lab = Label(fhead,text="Type",font=MyFont,width=15)
    lab.pack(side=LEFT)
    lab = Label(fhead,text="Name",font=MyFont,width=15)
    lab.pack(side=LEFT)

    header = DictCoilsHeader[key]
    nhead = len(header)
    lheader = []

    for t in header: lheader.append(len(t))

    ih = -1
    for t in header:
      ih += 1
      lab = Label(fhead,text=t,font=MyFont,width=max(5,lheader[ih]))
      lab.pack(side=LEFT)
    #endfor

    fhead.pack(side=TOP,fill=X)

    if len(Filaments) <= 0:
      Rmodus = 'FILAMENTS STDOUT=undumag.lun6'
      _undumag('listCoils')
      ureadfil()
    #endif

    for icoil in DictCoils[key]:

      fc = Frame(fkey)

      iVar = 0
      cidx = str(icoil+1)
      coil = Coils[icoil]
      cnam = coil[0][1]
      fila = Filaments[icoil]
      icol = int(fila[0][8])

      try:
        color = UnduColors[icol]
      except:
        print("*** Error in _listCoils: Unknown color index ***")
        icol = 2
      #endtry

      lab = Label(fc,text=cidx,font=MyFont,bg='white',width=5)
      lab.pack(side=LEFT)
      lab = Label(fc,text=key,font=MyFont,bg='white',width=15)
      lab.pack(side=LEFT)
      lab = Label(fc,text=cnam,font=MyFont,bg='white',width=15)
      lab.pack(side=LEFT)

      if key == 'Filaments':

        nfil = int(coil[1])

        for ifi in range(nfil):
          fil = coil[2][ifi]
          filfil = Filaments[icoil][ifi]
          iVar = 0
          for var in fil:
            if var[0] == '$':
              iVar = 1
              break
            #endif
          #endfor var in fil
          ic = -1
          for var in fil:
            ic += 1
            if var[0] == '$':
              val = calc_var(var)
              lab = Label(fc,text=var+"\n" +str(val),font=MyFont,bg='white',width=max(5,lheader[ic]))
            else:
              if iVar: lab = Label(fc,text="---\n"+var,font=MyFont,bg='white',width=max(5,lheader[ic]))
              else: lab = Label(fc,text=var,font=MyFont,bg='white',width=max(5,lheader[ic]))
            #endif var[0] == '$'
            lab.pack(side=LEFT)
          #endfor var in fil
          if iVar: lab = Label(fc,text="---\n"+str(filfil[9]),font=MyFont,bg='white',width=max(5,lheader[ic]))
          else: lab = Label(fc,text=str(filfil[9]),font=MyFont,bg='white',width=max(5,lheader[ic]))
          lab.pack(side=LEFT)
        #endfor ic in range(nfil)

      elif key == 'File':

        lab = Label(fc,text=coil[1],font=MyFont,bg='white')
        lab.pack(side=LEFT)

      elif key == "RectArc" or key == "RectBar" or \
      key == "ThickWire" or key == "CircArc":

        ic = -1
        iVar = 0
        for iv in [0,1]:
          for var in coil[1][iv]:
            if var[0] == '$':
              iVar = 1
              break
            #endif
            if iVar: break
          #endfor
        #endfor
        for iv in [0,1]:
          for var in coil[1][iv]:
            ic += 1
            if var[0] == '$':
              val = calc_var(var)
              lab = Label(fc,text=var+"\n" +str(val),font=MyFont,bg='white',width=max(5,lheader[ic]))
            else:
              if iVar: lab = Label(fc,text="---\n"+var,font=MyFont,bg='white',width=max(5,lheader[ic]))
              else: lab = Label(fc,text=var,font=MyFont,bg='white',width=max(5,lheader[ic]))
            #endif var[0] == '$'
            lab.pack(side=LEFT)
          #endfor var
        #endfor

      else: #key

        #print(icoil,cidx,key,cnam,coil[1])
        #if icoil: continue

        #print("*** key:",key)
        iVar = 0
        for var in coil[1]:
          if var[0] == '$':
            iVar = 1
            break
          #endif
        #endfor var

        ic = -1
        for var in coil[1]:
          ic += 1
          if var[0] == '$':
            val = calc_var(var)
            lab = Label(fc,text=var+"\n" +str(val),font=MyFont,bg='white',width=max(5,lheader[ic]))
          else:
            if iVar: lab = Label(fc,text="---\n"+var,font=MyFont,bg='white',width=max(5,lheader[ic]))
            else: lab = Label(fc,text=var,font=MyFont,bg='white',width=max(5,lheader[ic]))
          #endif var[0] == '$'
          lab.pack(side=LEFT)
        #endfor var

      #endif key

      lab = Label(fc,text="  ",font=MyFont,bg='white',width=5)
      lab.pack(side=LEFT)

      bi = Button(fc,text='select',command= lambda kcoil=icoil: _SelCoil(kcoil))
      bi.pack(side=LEFT)

      if len(Coils) > 1:
        bi.configure(bg='white')
      else:
        bi.configure(bg='yellow')
        Selected_Coil = 0
      #endif

      ButtCoil.append(bi)

      try:
        if Selected_Coil == icoil: ButtCoil[k].configure(bg='yellow')
      except: pass

      fc.pack(side=BOTTOM,fill=X)

    #endfor i in range(len(coil))

    fkey.pack(side=TOP,fill=X)

  #endfor key

  #debug("debug: List coils 2")

  fbench = Frame(WlistCoils)
  fbottom = Frame(WlistCoils)

  bedit = Button(fbench,text='Edit',command=_editCoil)
  bedit.pack(side=LEFT,expand=TRUE,fill=X)

  bcopy = Button(fbench,text='Copy',command=_copyCoil)
  bcopy.pack(side=LEFT,expand=TRUE,fill=X)

  bdel = Button(fbench,text='Delete',command=_delCoil)
  bdel.pack(side=LEFT,expand=TRUE,fill=X)

  bplot3d = Button(fbench,text='Plot 3d',command = lambda view = '3d': _plotCoil(view))
  bplot3d.pack(side=LEFT,expand=TRUE,fill=X)
  bplotxz = Button(fbench,text='Plot top view',command = lambda view = 'xz': _plotCoil(view))
  bplotxz.pack(side=LEFT,expand=TRUE,fill=X)
  bplotxy = Button(fbench,text='Plot side view',command = lambda view = 'xy': _plotCoil(view))
  bplotxy.pack(side=LEFT,expand=TRUE,fill=X)
  bplotzy = Button(fbench,text='Plot beam view',command = lambda view = 'zy': _plotCoil(view))
  bplotzy.pack(side=LEFT,expand=TRUE,fill=X)

  bClose = Button(fbottom,text='Ok',command=_clWlistCoils)
  bClose.pack(expand=TRUE,fill=X)

  fbench.pack(expand=TRUE,fill=X)
  fbottom.pack(expand=TRUE,fill=X)

  WlistCoils.update()

  if not sgeo:
    sgeo = Umaster.geometry()
  else:
    sgeo = sgeo.split('+')
  #endif not len(sgeo)
  x = str(int(sgeo[1]) + 30)
  y = str(int(sgeo[2]) + 80)
  sgeo = '+' + x + '+' + y
  WlistCoils.geometry(sgeo)

#enddef _listCoils()

def _editCoil():
  global Coils,Selected_Coil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil seleted")
    return
  #endif

  _WeditCoil()

#enddef _editCoil()

def _copyCoil():
  global Coils,Selected_Coil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil seleted")
    return
  #endif

  Coils.append(Coils[Selected_Coil])
  _listCoils()

#enddef _copyCoil()

def _delCoil():
  global Coils,Selected_Coil,Restore_Coil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil seleted")
    return
  #endif

  Restore_Coil = Coils.pop(Selected_Coil)
  _listCoils()

#enddef _delCoil()

def _plotCoil(view='3d'):
  global Selected_Coil, NCoil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil >= NCoil:
    wError("No coil seleted")
    return
  #endif not Seletec_Coil

  xyzcoils = _ucoilplot(view,'notsame',Selected_Coil,'_plotCoil')
#enddef _plotCoil()

def _SelCoil(k):
  global Selected_Coil,ButtCoil

  if Selected_Coil == k:
    ButtCoil[k].configure(bg='white')
    Selected_Coil = None
  else:
    ButtCoil[k].configure(bg='yellow')
    Selected_Coil = k
  #endif

#enddef _SelCoil(k)
+KEEP,listmags,T=PYTHON.
*CMZ :  2.04/13 01/09/2023  07.47.06  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  20.25.26  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  12.38.26  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.15.12  by  Michael Scheer
*CMZ :  2.04/06 07/07/2023  16.37.01  by  Michael Scheer
*CMZ :  2.02/02 05/03/2022  07.51.22  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  10.36.21  by  Michael Scheer
*-- Author :    Michael Scheer   07/12/2020

# +KEEP,listmags,T=PYTHON.{

S_Iron_Cmag = StringVar()
S_Iron_Cmoth = StringVar()

S_Iron_Ispec = StringVar()

S_Iron_Xcen = StringVar()
S_Iron_Ycen = StringVar()
S_Iron_Zcen = StringVar()

S_Iron_Xlen = StringVar()
S_Iron_Ylen = StringVar()
S_Iron_Zlen = StringVar()

S_Iron_ChamfUs = StringVar()
S_Iron_ChamfDs = StringVar()
S_Iron_Coating = StringVar()

S_Iron_corns = StringVar()
S_Iron_Ncorn = StringVar()
S_Iron_CornFile = StringVar()

S_Iron_nXdiv = StringVar()
S_Iron_nYdiv = StringVar()
S_Iron_nZdiv = StringVar()
S_Iron_FracDivY = StringVar()
S_Iron_FracDivZ = StringVar()

S_Iron_Key = StringVar()
S_Iron_Mat = StringVar()

S_Iron_Bc = StringVar()
S_Iron_Bxn = StringVar()
S_Iron_Byn = StringVar()
S_Iron_Bzn = StringVar()

S_Iron_Color = StringVar()

S_Cmag = StringVar()
S_Cmoth = StringVar()

S_Ispec = StringVar()

S_Xcen = StringVar()
S_Ycen = StringVar()
S_Zcen = StringVar()

S_Xlen = StringVar()
S_Ylen = StringVar()
S_Zlen = StringVar()

S_ChamfUs = StringVar()
S_ChamfDs = StringVar()
S_Coating = StringVar()

S_corns = StringVar()
S_Ncorn = StringVar()
S_CornFile = StringVar()

S_nXdiv = StringVar()
S_nYdiv = StringVar()
S_nZdiv = StringVar()
S_FracDivY = StringVar()
S_FracDivZ = StringVar()

S_Key = StringVar()
S_Mat = StringVar()

S_Bc = StringVar()
S_Bxn = StringVar()
S_Byn = StringVar()
S_Bzn = StringVar()

S_Color = StringVar()

MaddMag.add_command(label='REC block', command= lambda key='Block': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='REC polyhedron', command= lambda key='File': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='REC cylinder', command= lambda key='Cylinder': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='Iron block', command= lambda key='Block': _WaddPol(key), font=MyFont)
MaddMag.add_command(label='Iron polyhedron', command= lambda key='File': _WaddPol(key), font=MyFont)
MaddMag.add_command(label='Iron cylinder', command= lambda key='Cylinder': _WaddPol(key), font=MyFont)

def varlis_to_num(varlis):
  vnum = []

  for v in varlis:
    try:
      val = calc_var(v)
      vnum.append(val)
    except:
      vnum = []
      break
  #endfor v in varlis

  return vnum
#enddef varlis_to_num(varlis)

def read_cornfile(cornfile):

  corns = []

  if not os.path.exists(cornfile):
    wError("File " + cornfile + " not found!")
    return corns
  #endif not os.path.exists(cornfile)

  try:
    Fcorn = open(cornfile,'r')
    lines = Fcorn.readlines()
    Fcorn.close()
  except:  pass
  #endtry

  for line in lines:
    varis = line.strip().split()
    for var in varis:
      try:
        val = calc_var(var)
      except:
        corns = []
        wError("Could not resolve: " + var)
        return ifail, corns
      #endtry
      corns.append(varis)
  #endfor line in lines

  try:
    cornsnum = []
    for c in corns:
      c1 = calc_var(c[0])
      c2 = calc_var(c[1])
      c3 = calc_var(c[2])
      cornsnum.append([c1,c2,c3])
    #endfor
    verts,ifaces,faces,bounds = hull3d(cornsnum)
    if type(verts) != Tdf:
      hull = pd.DataFrame(verts)
    else:
      hull = verts
    #endif
  except:
    corns = []
  #endtry

  return corns
#enddef read_cornfile()

def update_magnets():
+seq,uguiglobind.

  if MagPolsTot == MagPolsUpdate: return

  Nmoth = 0
  Moths = []
  DictMoths = {}
  DictMagPolsTot = {}
  DictCoils = {}
  DictCoilsHead = {}
  MyMoth = {}
  Hulls = []
  SpecMagPols = []

  for mag in MagPolsDel:
    cnam = mag[0][0]
    if cnam in DictMagPolsSel:
      isel = DictMagPolsSel[mag]
      mpop = MagPolsSel.pop(isel)
    #endif
  #endfor mag in MagPolSel

  NMagPolTot = len(MagPolsTot)
  NMagPolSel = len(MagPolsSel)
  NMagPolDel = len(MagPolsDel)

  for m in range(NMagPolTot):

    mp = MagPolsTot[m]

    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    DictMagPolsTot[cnam] = m

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

    cen = mp[4]

    xcen = cen[0]
    ycen = cen[1]
    zcen = cen[2]

    xcen = calc_var(xcen)
    ycen = calc_var(ycen)
    zcen = calc_var(zcen)

    if typ.find('Block') > -1:
      corns = blockcorners(mp)
    elif typ == 'Cylinder':
      #print("update_magnets: Cyl hier einfügen")
      MagPolsTot[m][-1] = [xcen,ycen,zcen]
      continue
    elif typ == 'Corners':
      corns = []
      for corn in mp[7]:
        c1 = calc_var(corn[0])
        c2 = calc_var(corn[1])
        c3 = calc_var(corn[2])
        corns.append([c1,c2,c3])
      #endfor
    elif typ == 'File':
      corns = []
      for ic in range(len(mp[7])):
        c1 = calc_var(mp[7][ic][0])
        c2 = calc_var(mp[7][ic][1])
        c3 = calc_var(mp[7][ic][2])
        corns.append([c1,c2,c3])
      #endfor ic in range(len(mp[7]))
    else:
      print("*** Bad key " + typ + " in ureadclc ***")
    #endif typ == 'Block'

    xmin = 1.e30
    xmax = -1.e30
    ymin = 1.e30
    ymax = -1.e30
    zmin = 1.e30
    zmax = -1.e30

    for corn in corns:
      x = corn[0] + xcen
      y = corn[1] + ycen
      z = corn[2] + zcen
      if x < xmin: xmin = x
      if x > xmax: xmax = x
      if y < ymin: ymin = y
      if y > ymax: ymax = y
      if z < zmin: zmin = z
      if z > zmax: zmax = z
    #endfor corn in corns

    x = (xmin+xmax)/2.
    y = (ymin+ymax)/2.
    z = (zmin+zmax)/2.

    MagPolsTot[m][-1] = [x,y,z]

    verts,ifaces,faces,bounds = hull3d(corns)
    if type(verts) != Tdf:
      hull = pd.DataFrame(verts)
    else:
      hull = verts
    #endif
    hull.columns = ['xr','yr','zr']

    hull['x'] = hull.xr+xcen
    hull['y'] = hull.yr+ycen
    hull['z'] = hull.zr+zcen

    Hulls.append(hull)

  #endfor m in range(NMagPolTot)

  if NMagPolTot:

    # sort mothers by x

    xmins = 1.e30
    xmaxs = -1.e30
    ymins = 1.e30
    ymaxs = -1.e30
    zmins = 1.e30
    zmaxs = -1.e30

    moli = []

    for mo in range(Nmoth):

      moth = Moths[mo]

      xmin = 1.e30
      xmax = -1.e30
      ymin = 1.e30
      ymax = -1.e30
      zmin = 1.e30
      zmax = -1.e30

      xmins = 1.e30
      xmaxs = -1.e30
      ymins = 1.e30
      ymaxs = -1.e30
      zmins = 1.e30
      zmaxs = -1.e30

      for cmag in moth:
        mag = DictMagPolsTot[cmag]
        mp = MagPolsTot[mag]
        typ = mp[3]
        if typ == 'Cylinder':
          cyl = Ntcyls[DictCyls[cmag]]
          nc = nget(cyl[2])
          nh = Nhead[Ind]
          xmn = nh[6][1]
          xmx = nh[6][2]
          zmn = nh[5][1]
          zmx = nh[7][2]
          ymn = nh[8][1]
          ymx = nh[9][2]
        else:
          nhu = DictHulls[cmag]
          xmn = Hulls[nhu].x.min()
          xmx = Hulls[nhu].x.max()
          ymn = Hulls[nhu].y.min()
          ymx = Hulls[nhu].y.max()
          zmn = Hulls[nhu].z.min()
          zmx = Hulls[nhu].z.max()
        #endif Cyl
        if xmn < xmin: xmin = xmn
        if xmx > xmax: xmax = xmx
        if ymn < ymin: ymin = ymn
        if ymx > ymax: ymax = ymx
        if zmn < zmin: zmin = zmn
        if zmx > zmax: zmax = zmx
        if mp[2] == 'yes' or str(mp[2]) == '1':
          if xmn < xmins: xmins = xmn
          if xmx > xmaxs: xmaxs = xmx
          if ymn < ymins: ymins = ymn
          if ymx > ymaxs: ymaxs = ymx
          if zmn < zmins: zmins = zmn
          if zmx > zmaxs: zmaxs = zmx
        #endif MagPolsTot[mag][2] == 'yes'
      #endfor mag in moth

      moli.append([mo,
                   xmin,xmax,(xmin+xmax)/2.,
                   ymin,ymax,(ymin+ymax)/2.,
                   zmin,zmax,(zmin+zmax)/2.])

    #endfor mo in range(len(Moths))

    MothsXYZ = pd.DataFrame(moli)
    MothsXYZ.columns = ['imoth',
                        'xmin','xmax','x',
                        'ymin','ymax','y',
                        'zmin','zmax','z']
    MothsXYZ = MothsXYZ.sort_values(by=['x','y','z'])
    #print("lima:,MothsXYZ",MothsXYZ.query("imoth==0"))
    #print(MothsXYZ)

    SpecXYZ = [xmins,xmaxs,ymins,ymaxs,zmins,zmaxs]

    mocop = Moths
    Moths = []

    for mo in range(len(mocop)):
      Moths.append(mocop[MothsXYZ.imoth[mo]])
    #endfor mo in range(len(mocop))

    # sort by mothers

    mpcop = MagPolsTot

    MagPolsTot = []

    for mo in range(len(Moths)):
      moth = Moths[mo]
      for mag in moth:
        MyMoth[mag] = mo
        mag = DictMagPolsTot[mag]
        mag = mpcop[mag]
        MagPolsTot.append(mag)
        if mag[2] == 'yes': SpecMagPols.append(mag)
      #endfor mag in moth
    #endfor mo in range(len(Moths))

    NspecMagPol = len(SpecMagPols)

  #endif NMagPolTot

  MagPolsUpdate = deepcopy(MagPolsTot)

  Moths = []
  Nmoth = 0
  DictMoths = {}

  for m in range(NMagPolTot):

    mp = MagPolsTot[m]

    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    DictMagPolsTot[cnam] = m

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

  #endfor

#enddef update_magnets()

def default_mag(key):
+seq,uguiglobind.

  Npol = 0
  for mp in MagPolsTot:
    if mp[1] == 'Iron': Npol += 1
  #endfor mp in MagPolsTot

  if key == 'Block':

    ifound = -1
    l = NMagPol

    for i in range(NMagPol):

      l -= 1

      mp = MagPolsTot[l]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      mattype = mp[1]
      magkey = mp[3]

#      if mattype == 'Iron': Npol += 1

      if mattype == 'REC' and magkey.find('Block') > -1:

        ispec = mp[2]
        cen = mp[4]
        xcen = cen[0]
        ycen = cen[1]
        zcen = cen[2]
        vmat = mp[5]
        bc = calc_var(vmat[0])
        bxn = calc_var(vmat[1])
        byn = calc_var(vmat[2])
        bzn = calc_var(vmat[3])
        mat = vmat[4]
        col = vmat[5]
        siz = mp[6]
        xlen = siz[0]
        ylen = siz[1]
        zlen = siz[2]
        div = mp[7]
        nxdiv = div[0]
        nydiv = div[1]
        nzdiv = div[2]
        fracdivy = div[3]
        fracdivz = div[4]

        if magkey != 'Block':
          chamfus = siz[3]
          chamfds = siz[3]
          if magkey == "BlockUsChamf": chamfds = 0.0
          elif magkey == "BlockDsChamf": chamfus = 0.0
          #endif magkey == "BlockUsChamf"
        #endif magkey != 'Block'

        ifound = l
        break

      #endif mattype == 'REC' and magkey == 'Block'

    #endfor i in range(NMagPlot)

    if ifound > -1:
      S_Cmag.set(cnam)
      S_Cmoth.set(cmoth)
      S_Mat.set(mat)
      S_Color.set(col)
      S_Bc.set(bc)
      S_Bxn.set(bxn)
      S_Byn.set(byn)
      S_Bzn.set(bzn)
      S_Ispec.set(ispec)
      S_Xcen.set(xcen)
      S_Ycen.set(ycen)
      S_Zcen.set(zcen)
      S_Xlen.set(xlen)
      S_Ylen.set(ylen)
      S_Zlen.set(zlen)
      S_ChamfUs.set(chamfus)
      S_ChamfDs.set(chamfds)
      S_nXdiv.set(nxdiv)
      S_nYdiv.set(nydiv)
      S_nZdiv.set(nzdiv)
      S_FracDivY.set(fracdivy)
      S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-15.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("-20.0")
      S_Xlen.set("10.0")
      S_Ylen.set("40.")
      S_Zlen.set("40.")
      S_ChamfUs.set("0.3")
      S_ChamfDs.set("0.3")
      S_nXdiv.set("1")
      S_nYdiv.set("3")
      S_nZdiv.set("3")
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'Cylinder':

    ifound = -1
    l = NMagPol

    for i in range(NMagPol):

      l -= 1

      mp = MagPolsTot[l]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      mattype = mp[1]
      magkey = mp[3]

      if mattype == 'REC' and key == 'Cylinder':

        ispec = mp[2]
        cen = mp[4]
        xcen = cen[0]
        ycen = cen[1]
        zcen = cen[2]
        vmat = mp[5]
        bc = calc_var(vmat[0])
        bxn = calc_var(vmat[1])
        byn = calc_var(vmat[2])
        bzn = calc_var(vmat[3])
        mat = vmat[4]
        col = vmat[5]

        size = mp[6]
        rin = float(size[0])
        rout = float(size[1])
        h = float(size[2])
        dphi = float(size[3])
        nphi = int(size[6])+1
        if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3

        size = mp[6]
        rin = float(size[0])
        rout = float(size[1])
        h = float(size[2])
        dphi = float(size[3])
        nphi = int(size[6])+1
        if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3
        div = mp[7]
        nxdiv = div[0]
        nydiv = div[1]
        nzdiv = nphi
        fracdivy = div[3]
        fracdivz = div[4]
        ifound = l
        break

      #endif mattype == 'REC' and magkey == 'Block'

    #endfor i in range(NMagPlot)

    if ifound > -1:
      S_Cmag.set(cnam)
      S_Cmoth.set(cmoth)
      S_Mat.set(mat)
      S_Color.set(col)
      S_Bc.set(bc)
      S_Bxn.set(bxn)
      S_Byn.set(byn)
      S_Bzn.set(bzn)
      S_Ispec.set(ispec)
      S_Xcen.set(xcen)
      S_Ycen.set(ycen)
      S_Zcen.set(zcen)

      S_CylrIn.set(rin)
      S_CylrOut.set(rout)
      S_CylHeight.set(h)
      S_CyldPhi.set(dphi)

      S_nXdiv.set(nxdiv)
      S_nYdiv.set(nydiv)
      S_nZdiv.set(nzdiv)
      S_FracDivY.set(fracdivy)
      S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-15.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("-20.0")

      S_CylrIn.set('0.0')
      S_CylrOut.set('40')
      S_CylHeight.set('40.')
      S_CyldPhi.set('360.')

      S_nXdiv.set('1')
      S_nYdiv.set('1')
      S_nZdiv.set('5')
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'File':

    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):

        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]

        if mattype == 'REC' and magkey == 'File':
          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          bxn = calc_var(vmat[1])
          byn = calc_var(vmat[2])
          bzn = calc_var(vmat[3])
          mat = vmat[4]
          col = vmat[5]
          div = mp[8]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]
          ifound = l
          break
        #endif mattype == 'REC' and magkey == 'Block'
      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Cmag.set(cnam)
        S_Cmoth.set(cmoth)
        S_Mat.set(mat)
        S_Color.set(col)
        S_Bc.set(bc)
        S_Bxn.set(bxn)
        S_Byn.set(byn)
        S_Bzn.set(bzn)
        S_Ispec.set(ispec)
        S_Xcen.set(xcen)
        S_Ycen.set(ycen)
        S_Zcen.set(zcen)
        S_CornFile.set("")
        S_nXdiv.set(str(int(nxdiv)))
        S_nYdiv.set(str(int(nydiv)))
        S_nZdiv.set(str(int(nzdiv)))
        S_FracDivY.set(fracdivy)
        S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-20.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("0.0")
      S_CornFile.set("")
      S_nXdiv.set("1")
      S_nYdiv.set("1")
      S_nZdiv.set("1")
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  else:
    wError("In default_mag fehlt noch key " + key)
    return
  #endif key == 'Block'

#enddef default_mag(key)

def default_pol(key):
+seq,uguiglobind.

  if key == 'Block':

    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):

        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]

        if mattype == 'Iron' and magkey.find('Block') > -1:

          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          if bc == 0.0:  bc = 0.001
          mat = vmat[4]
          col = vmat[5]
          siz = mp[6]
          xlen = siz[0]
          ylen = siz[1]
          zlen = siz[2]
          div = mp[7]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]

          if magkey != 'Block':
            chamfus = siz[3]
            chamfds = siz[3]
            if magkey == "BlockUsChamf": chamfds = 0.0
            elif magkey == "BlockDsChamf": chamfus = 0.0
            #endif magkey == "BlockUsChamf"
          #endif magkey != 'Block'

          ifound = l
          break

        #endif mattype == 'REC' and magkey == 'Block'

      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Iron_Cmag.set(cnam)
        S_Iron_Cmoth.set(cmoth)
        S_Iron_Mat.set(mat)
        S_Iron_Color.set(col)
        S_Iron_Bc.set(bc)
        S_Iron_Ispec.set(ispec)
        S_Iron_Xcen.set(xcen)
        S_Iron_Ycen.set(ycen)
        S_Iron_Zcen.set(zcen)
        S_Iron_Xlen.set(xlen)
        S_Iron_Ylen.set(ylen)
        S_Iron_Zlen.set(zlen)
        S_Iron_ChamfUs.set(chamfus)
        S_Iron_ChamfDs.set(chamfds)
        S_Iron_nXdiv.set(nxdiv)
        S_Iron_nYdiv.set(nydiv)
        S_Iron_nZdiv.set(nzdiv)
        S_Iron_FracDivY.set(fracdivy)
        S_Iron_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      if len(Materials):
        im = 0
        for m in Materials:
          im += 1
          if m[1] == 'Iron':
            S_Iron_Mat.set(str(im))
            break
          #endif
        #endfor
      else:
        S_Iron_Mat.set("2")
      #endif
      S_Iron_Color.set("blue")
      S_Iron_Bc.set("0.001")
      S_Iron_Ispec.set("yes")
      S_Iron_Xcen.set("-5.0")
      S_Iron_Ycen.set("-22.5")
      S_Iron_Zcen.set("-17.5")
      S_Iron_Xlen.set("10.0")
      S_Iron_Ylen.set("35.")
      S_Iron_Zlen.set("35.")
      S_Iron_ChamfUs.set("0.1")
      S_Iron_ChamfDs.set("0.1")
      S_Iron_nXdiv.set("3")
      S_Iron_nYdiv.set("5")
      S_Iron_nZdiv.set("5")
      S_Iron_FracDivY.set("1.")
      S_Iron_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'File':
    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):
        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]
        if mattype == 'Iron' and magkey == 'File':
          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          if bc == 0.0:  bc = 0.001
          mat = vmat[4]
          col = vmat[5]
          div = mp[8]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]
          ifound = l
          break
        #endif mattype == 'REC' and magkey == 'Block'
      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Iron_Cmag.set(cnam)
        S_Iron_Cmoth.set(cmoth)
        S_Iron_Mat.set(mat)
        S_Iron_Color.set(col)
        S_Iron_Bc.set(bc)
        S_Iron_Ispec.set(ispec)
        S_Iron_Xcen.set(xcen)
        S_Iron_Ycen.set(ycen)
        S_Iron_Zcen.set(zcen)
        S_Iron_CornFile.set("")
        S_Iron_nXdiv.set(str(int(nxdiv)))
        S_Iron_nYdiv.set(str(int(nydiv)))
        S_Iron_nZdiv.set(str(int(nzdiv)))
        S_Iron_FracDivY.set(fracdivy)
        S_Iron_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Iron_Mat.set("1")
      S_Iron_Color.set("blue")
      S_Iron_Bc.set("0.001")
      S_Iron_Ispec.set("yes")
      S_Iron_Xcen.set("-20.0")
      S_Iron_Ycen.set("-25.0")
      S_Iron_Zcen.set("0.0")
      S_Iron_CornFile.set("")
      S_Iron_nXdiv.set("1")
      S_Iron_nYdiv.set("1")
      S_Iron_nZdiv.set("1")
      S_Iron_FracDivY.set("1.")
      S_Iron_FracDivZ.set("1.")
    #endif NMagPols > 0

  else:
    wError("In default_pol fehlt noch key " + key)
    return
  #endif key == 'Block'

#enddef default_pol(key)

def _WaddMag(key):
+seq,uguiglobind.

  #print("_WaddMag")
  WaddMag = Toplevel()

  ewid=20

  S_Cmag.set("mag" + str(NMagPolTot+1))
  fName = Frame(WaddMag)
  tName = 'name'
  lName = Label(fName,text=tName,font=MyFont)
  eName = Entry(fName,text=S_Cmag,justify=CENTER,font=MyFont,width=ewid)
  lName.pack(side=LEFT,fill=X)
  eName.pack(side=RIGHT,fill=X)
  fName.pack(fill=X)

  S_Cmoth.set("Moth" + str(Nmoth+1))
  fMoth = Frame(WaddMag)
  tMoth = 'mother volume'
  lMoth = Label(fMoth,text=tMoth,font=MyFont)
  eMoth = Entry(fMoth,text=S_Cmoth,justify=CENTER,font=MyFont,width=ewid)
  lMoth.pack(side=LEFT,fill=X)
  eMoth.pack(side=RIGHT,fill=X)
  fMoth.pack(fill=X)

  default_mag(key)

#  fMatType = Frame(WaddMag)
#  tMatType = 'material type'
#  lMatType = Label(fMatType,text=tMatType,font=MyFont)
#  eMatType = Entry(fMatType,text=S_MateType,justify=CENTER,font=MyFont,width=ewid)
#  lMatType.pack(side=LEFT,fill=X)
#  eMatType.pack(side=RIGHT,fill=X)
#  fMatType.pack(fill=X)

  fMat = Frame(WaddMag)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  fColor = Frame(WaddMag)
  tColor = 'color'
  lColor = Label(fColor,text=tColor,font=MyFont)
  eColor = Entry(fColor,text=S_Color,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fBc = Frame(WaddMag)
  tBc = 'remanence'
  lBc = Label(fBc,text=tBc,font=MyFont)
  eBc = Entry(fBc,text=S_Bc,justify=CENTER,font=MyFont,width=ewid)
  lBc.pack(side=LEFT,fill=X)
  eBc.pack(side=RIGHT,fill=X)
  fBc.pack(fill=X)

  fBxn = Frame(WaddMag)
  tBxn = 'x - component'
  lBxn = Label(fBxn,text=tBxn,font=MyFont)
  eBxn = Entry(fBxn,text=S_Bxn,justify=CENTER,font=MyFont,width=ewid)
  lBxn.pack(side=LEFT,fill=X)
  eBxn.pack(side=RIGHT,fill=X)
  fBxn.pack(fill=X)

  fByn = Frame(WaddMag)
  tByn = 'y - component'
  lByn = Label(fByn,text=tByn,font=MyFont)
  eByn = Entry(fByn,text=S_Byn,justify=CENTER,font=MyFont,width=ewid)
  lByn.pack(side=LEFT,fill=X)
  eByn.pack(side=RIGHT,fill=X)
  fByn.pack(fill=X)

  fBzn = Frame(WaddMag)
  tBzn = 'z - component'
  lBzn = Label(fBzn,text=tBzn,font=MyFont)
  eBzn = Entry(fBzn,text=S_Bzn,justify=CENTER,font=MyFont,width=ewid)
  lBzn.pack(side=LEFT,fill=X)
  eBzn.pack(side=RIGHT,fill=X)
  fBzn.pack(fill=X)

  fIspec = Frame(WaddMag)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  fXcen = Frame(WaddMag)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddMag)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddMag)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key == 'Block':

    WaddMag.title("Add Magnet Block")

    fXlen = Frame(WaddMag)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddMag)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddMag)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fChamfUS = Frame(WaddMag)
    tChamfUS = 'Up-stream chamfer'
    lChamfUS = Label(fChamfUS,text=tChamfUS,font=MyFont)
    eChamfUS = Entry(fChamfUS,text=S_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChamfUS.pack(side=LEFT,fill=X)
    eChamfUS.pack(side=RIGHT,fill=X)
    fChamfUS.pack(fill=X)

    fChamfDS = Frame(WaddMag)
    tChamfDS = 'Down-stream chamfer'
    lChamfDS = Label(fChamfDS,text=tChamfDS,font=MyFont)
    eChamfDS = Entry(fChamfDS,text=S_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChamfDS.pack(side=LEFT,fill=X)
    eChamfDS.pack(side=RIGHT,fill=X)
    fChamfDS.pack(fill=X)

  elif key == 'Cylinder':

    WaddMag.title("Add Magnet Cylinder")

    fXlen = Frame(WaddMag)
    tXlen = 'R_inner'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_CylrIn,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddMag)
    tYlen = 'R_outer'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_CylrOut,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddMag)
    tZlen = 'Height'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_CylHeight,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fPhi = Frame(WaddMag)
    tPhi = 'Angle range'
    lPhi = Label(fPhi,text=tPhi,font=MyFont)
    ePhi = Entry(fPhi,text=S_CyldPhi,justify=CENTER,font=MyFont,width=ewid)
    lPhi.pack(side=LEFT,fill=X)
    ePhi.pack(side=RIGHT,fill=X)
    fPhi.pack(fill=X)

  elif key == 'File':

    WaddMag.title("Add REC Polyhedron")

    fcfil = Frame(WaddMag)
    tcfil = 'Filename'
    lcfil = Label(fcfil,text=tcfil,font=MyFont)
    ecfil = Entry(fcfil,text=S_CornFile.get(),justify=CENTER,font=MyFont,width=ewid)
    lcfil.pack(side=LEFT,fill=X)
    ecfil.pack(side=RIGHT,fill=X)
    fcfil.pack(fill=X)

  else:
    wError("In _WaddMag fehlt noch key " + key)
    return
  #endif key == 'Block'

  if key != 'Cylinder':

    fnXdiv = Frame(WaddMag)
    tnXdiv = 'nXdiv'
    lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
    enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
    lnXdiv.pack(side=LEFT,fill=X)
    enXdiv.pack(side=RIGHT,fill=X)
    fnXdiv.pack(fill=X)

    fnYdiv = Frame(WaddMag)
    tnydiv = 'nYdiv'
    lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
    enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
    lnYdiv.pack(side=LEFT,fill=X)
    enYdiv.pack(side=RIGHT,fill=X)
    fnYdiv.pack(fill=X)

    fnZdiv = Frame(WaddMag)
    tnzdiv = 'nZdiv'
    lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
    enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
    lnZdiv.pack(side=LEFT,fill=X)
    enZdiv.pack(side=RIGHT,fill=X)
    fnZdiv.pack(fill=X)

    fFracDivY = Frame(WaddMag)
    tfracdivy = 'FracDivY'
    lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
    eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
    lFracDivY.pack(side=LEFT,fill=X)
    eFracDivY.pack(side=RIGHT,fill=X)
    fFracDivY.pack(fill=X)
    fFracDivY = Frame(WaddMag)

    fFracDivZ = Frame(WaddMag)
    tfracdivz = 'FracDivZ'
    lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
    eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
    lFracDivZ.pack(side=LEFT,fill=X)
    eFracDivZ.pack(side=RIGHT,fill=X)
    fFracDivZ.pack(fill=X)
  else:

    fnXdiv = Frame(WaddMag)
    tnXdiv = 'nR_div'
    lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
    enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
    lnXdiv.pack(side=LEFT,fill=X)
    enXdiv.pack(side=RIGHT,fill=X)
    fnXdiv.pack(fill=X)

    fnYdiv = Frame(WaddMag)
    tnydiv = 'nH_div'
    lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
    enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
    lnYdiv.pack(side=LEFT,fill=X)
    enYdiv.pack(side=RIGHT,fill=X)
    fnYdiv.pack(fill=X)

    fnZdiv = Frame(WaddMag)
    tnzdiv = 'nAng_div'
    lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
    enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
    lnZdiv.pack(side=LEFT,fill=X)
    enZdiv.pack(side=RIGHT,fill=X)
    fnZdiv.pack(fill=X)

    #fFracDivY = Frame(WaddMag)
    #tfracdivy = 'FracDivY'
    #lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
    #eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
    #lFracDivY.pack(side=LEFT,fill=X)
    #eFracDivY.pack(side=RIGHT,fill=X)
    #fFracDivY.pack(fill=X)
    #fFracDivY = Frame(WaddMag)

    #fFracDivZ = Frame(WaddMag)
    #tfracdivz = 'FracDivZ'
    #lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
    #eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
    #lFracDivZ.pack(side=LEFT,fill=X)
    #eFracDivZ.pack(side=RIGHT,fill=X)
    #fFracDivZ.pack(fill=X)

  #endif Cylinder

  WaddMag.attributes('-topmost', 1)

  fbott = Frame(WaddMag)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddMag)
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)
  bClose = Button(fbott,text='Ok',width=ewid+2,command = lambda kw=key: _clWaddMag(kw))
  bClose.pack(side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  sgeo = Wmaster.geometry().split('+')
  whw = sgeo[0].split('x')
  ww = int(whw[0])
  wh = int(whw[1])
  xw = int(sgeo[1])
  yw = int(sgeo[2])
  x = xw + int(ww/10)
  y = yw + int(wh/10)
  sgeo = '+' + str(x) + '+' + str(y)
  WaddMag.geometry(sgeo)
#  smgeo = Umaster.geometry()
#  smoff = smgeo.split('+')
#  WaddMag.geometry("+" + str(int(smoff[1])+50) + "+" + str(int(smoff[1])+20))

  Umaster.wait_window(WaddMag)

#enddef _WaddMag(key)

def _WaddPol(key):
+seq,uguiglobind.

  #print("_WaddPol")
  WaddPol = Toplevel()
  sgeo = Wmaster.geometry().split('+')
  whw = sgeo[0].split('x')
  ww = int(whw[0])
  wh = int(whw[1])
  xw = int(sgeo[1])
  yw = int(sgeo[2])
  x = xw + int(ww/10)
  y = yw + int(wh/10)
  sgeo = '+' + str(x) + '+' + str(y)
  WaddPol.geometry(sgeo)
  WaddPol.attributes('-topmost', 1)

  ewid=20

  S_Iron_Cmag.set("pol" + str(Npol+1))
  fName = Frame(WaddPol)
  tName = 'name'
  lName = Label(fName,text=tName,font=MyFont)
  eName = Entry(fName,text=S_Iron_Cmag,justify=CENTER,font=MyFont,width=ewid)
  lName.pack(side=LEFT,fill=X)
  eName.pack(side=RIGHT,fill=X)
  fName.pack(fill=X)

  S_Iron_Cmoth.set("Moth" + str(Nmoth+1))
  fMoth = Frame(WaddPol)
  tMoth = 'mother volume'
  lMoth = Label(fMoth,text=tMoth,font=MyFont)
  eMoth = Entry(fMoth,text=S_Iron_Cmoth,justify=CENTER,font=MyFont,width=ewid)
  lMoth.pack(side=LEFT,fill=X)
  eMoth.pack(side=RIGHT,fill=X)
  fMoth.pack(fill=X)

  default_pol(key)

  fMat = Frame(WaddPol)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Iron_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  fColor = Frame(WaddPol)
  tColor = 'color'
  lColor = Label(fColor,text=tColor,font=MyFont)
  eColor = Entry(fColor,text=S_Iron_Color,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fIspec = Frame(WaddPol)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Iron_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  fXcen = Frame(WaddPol)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Iron_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddPol)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Iron_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddPol)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Iron_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key == 'Block':

    WaddPol.title("Add Iron Block")

    fXlen = Frame(WaddPol)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Iron_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddPol)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Iron_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddPol)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Iron_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fChamfUS = Frame(WaddPol)
    tChamfUS = 'Up-stream chamfer'
    lChamfUS = Label(fChamfUS,text=tChamfUS,font=MyFont)
    eChamfUS = Entry(fChamfUS,text=S_Iron_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChamfUS.pack(side=LEFT,fill=X)
    eChamfUS.pack(side=RIGHT,fill=X)
    fChamfUS.pack(fill=X)

    fChamfDS = Frame(WaddPol)
    tChamfDS = 'Down-stream chamfer'
    lChamfDS = Label(fChamfDS,text=tChamfDS,font=MyFont)
    eChamfDS = Entry(fChamfDS,text=S_Iron_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChamfDS.pack(side=LEFT,fill=X)
    eChamfDS.pack(side=RIGHT,fill=X)
    fChamfDS.pack(fill=X)

  elif key == 'File':

    WaddPol.title("Add Iron Polyhedron")

    fcfil = Frame(WaddPol)
    tcfil = 'Filename'
    lcfil = Label(fcfil,text=tcfil,font=MyFont)
    ecfil = Entry(fcfil,text=S_Iron_CornFile.get(),justify=CENTER,font=MyFont,width=ewid)
    lcfil.pack(side=LEFT,fill=X)
    ecfil.pack(side=RIGHT,fill=X)
    fcfil.pack(fill=X)

  else:
    wError("In _WaddPol fehlt noch key " + key)
    return
  #endif key == 'Block'

  fnXdiv = Frame(WaddPol)
  tnXdiv = 'nXdiv'
  lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
  enXdiv = Entry(fnXdiv,text=S_Iron_nXdiv,justify=CENTER,font=MyFont,width=ewid)
  lnXdiv.pack(side=LEFT,fill=X)
  enXdiv.pack(side=RIGHT,fill=X)
  fnXdiv.pack(fill=X)

  fnYdiv = Frame(WaddPol)
  tnydiv = 'nYdiv'
  lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
  enYdiv = Entry(fnYdiv,text=S_Iron_nYdiv,justify=CENTER,font=MyFont,width=ewid)
  lnYdiv.pack(side=LEFT,fill=X)
  enYdiv.pack(side=RIGHT,fill=X)
  fnYdiv.pack(fill=X)

  fnZdiv = Frame(WaddPol)
  tnzdiv = 'nZdiv'
  lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
  enZdiv = Entry(fnZdiv,text=S_Iron_nZdiv,justify=CENTER,font=MyFont,width=ewid)
  lnZdiv.pack(side=LEFT,fill=X)
  enZdiv.pack(side=RIGHT,fill=X)
  fnZdiv.pack(fill=X)

  fFracDivY = Frame(WaddPol)
  tfracdivy = 'FracDivY'
  lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
  eFracDivY = Entry(fFracDivY,text=S_Iron_FracDivY,justify=CENTER,font=MyFont,width=ewid)
  lFracDivY.pack(side=LEFT,fill=X)
  eFracDivY.pack(side=RIGHT,fill=X)
  fFracDivY.pack(fill=X)

  fFracDivZ = Frame(WaddPol)
  tfracdivz = 'FracDivZ'
  lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
  eFracDivZ = Entry(fFracDivZ,text=S_Iron_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
  lFracDivZ.pack(side=LEFT,fill=X)
  eFracDivZ.pack(side=RIGHT,fill=X)
  fFracDivZ.pack(fill=X)

  fbott = Frame(WaddPol)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddPol)
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fbott,text='Ok',width=ewid+2,command = lambda kw=key: _clWaddPol(kw))
  bClose.pack(side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  Umaster.wait_window(WaddPol)

#enddef _WaddPol(key)

def try_calc_var(stvar):
  try:
    calc_var(stvar)
    return 'ok'
  except:
    wError("Bad input: " + stvar)
  #endtry
#enddef try_calc_var(stvar)

def _cnWaddMag():
  global WaddMag
  WaddMag.destroy()
#enddef _cnWaddMag()

def _cnWaddPol():
  global WaddPol
  WaddPol.destroy()
#enddef _cnWaddPol()

def _clWaddPol(key):
+seq,uguiglobind.

  mp = []

  cnam = S_Iron_Cmag.get()
  if cnam.strip() == "": wError("Name must be given!"); return
  if NMagPol and  cnam in DictMagPolsTot: wError("Magnet is already defined"); return

  cmoth = S_Iron_Cmoth.get()
  if cmoth.strip() == "": wError("Name of mother volume must be given!"); return

  mp.append([cnam,cmoth])

  #smattype = S_Iron_MatType.get().strip()
  #if smattype != 'REC': wError("Unknown material " + mattype); return
  mp.append('Iron')

  sispec = S_Iron_Ispec.get().strip().lower()
  if sispec[0] == 'y' or sispec == '1': sis = 'yes'
  elif sispec[0] == 'n' or sispec == '0': sis = 'no'
  else: wError("Bad input " + sispec); return
  mp.append(sis)

  if key == 'Block':
    schamfus = S_Iron_ChamfUs.get().strip()
    if try_calc_var(schamfus) != 'ok': return
    chamfus = calc_var(schamfus)
    schamfds = S_Iron_ChamfDs.get().strip()
    if try_calc_var(schamfds) != 'ok': return
    chamfds = calc_var(schamfds)
    if chamfus == 0.0 and chamfds == 0.0: mp.append('Block')
    elif chamfus != 0.0 and chamfds != 0.0:
      if chamfus != chamfds:
        wError("Chamfer must be equal or one must be zero")
        return
      #endif chamfus != chamfds
      mp.append('BlockChamf')
    elif chamfus != 0.0: mp.append('BlockUsChamf')
    elif chamdus != 0.0: mp.append('BlockDsChamf')
  elif key == 'File':
    mp.append('File')
  else:
    wError("In _clWaddPol fehlt noch key " + key)
    return
  #endif key == 'RECBlock'

  sxcen = S_Iron_Xcen.get().strip()
  if try_calc_var(sxcen) != 'ok': return
  sycen = S_Iron_Ycen.get().strip()
  if try_calc_var(sycen) != 'ok': return
  szcen = S_Iron_Zcen.get().strip()
  if try_calc_var(szcen) != 'ok': return

  mp.append([sxcen,sycen,szcen])

  sBc = S_Iron_Bc.get().strip()
  if try_calc_var(sBc) != 'ok': return

  scolor = S_Iron_Color.get().strip()
  if scolor not in Variables and scolor not in DictUnduColors:
    wError(scolor + " not in: " + str(DictUnduColors))
    return
  #endif scolor not in UnduColors

  if try_calc_var(sxcen) != 'ok': return

  smatindex = S_Iron_Mat.get()
  ifound = 0

  if smatindex[0] == '$':
    if try_calc_var(smatindex) != 'ok': return
    sval = str(calc_var(smatindex))
  else:
    sval = smatindex
  #endif smatindex[0] == '$'

  for mat in Materials:
    if mat[0] == sval:
      ifound = 1
      break
  #endfor mat in Materials

  if ifound == 0:
    wError("Undefined material index in _clWaddPole")
    _MaddMatIron()
    return
  #endif ifound == 0

  mp.append([sBc,"0.0","1.0","0.0",smatindex,scolor])

  if key == 'Block':

    sxlen = S_Iron_Xlen.get().strip()
    if try_calc_var(sxlen) != 'ok': return
    sylen = S_Iron_Ylen.get().strip()
    if try_calc_var(sylen) != 'ok': return
    szlen = S_Iron_Zlen.get().strip()
    if try_calc_var(szlen) != 'ok': return

    if chamfus == 0.0 and chamfds == 0.0: mp.append([sxlen,sylen,szlen,'0.0'])
    elif chamfus != 0.0: mp.append([sxlen,sylen,szlen,schamfus])
    else: mp.append([sxlen,sylen,szlen,schamfds])

  elif key == 'File':
    cfile = S_Iron_CornFile.get().strip()
    if cfile == "": wError("Filename must be given!")
    corns = read_cornfile(cfile)
    if corns == []:
      wError("Problems with " + cfile)
      return
    #endif corns == []
    mp.append(corns)

  #endif key == 'RECBlock'

  snxdiv = S_Iron_nXdiv.get().strip()
  if try_calc_var(snxdiv) != 'ok': return
  snydiv = S_Iron_nYdiv.get().strip()
  if try_calc_var(snydiv) != 'ok': return
  snzdiv = S_Iron_nZdiv.get().strip()
  if try_calc_var(snzdiv) != 'ok': return
  sfracdivy = S_Iron_FracDivY.get().strip()
  if try_calc_var(sfracdivy) != 'ok': return
  sfracdivz = S_Iron_FracDivZ.get().strip()
  if try_calc_var(sfracdivz) != 'ok': return

  mp.append([snxdiv,snydiv,snzdiv,sfracdivy,sfracdivz])

  xloc=None
  yloc = None
  zloc = None
  mp.append([xloc,yloc,zloc])

  MagPolsTot.append(mp)
  NMagPolTot += 1
  update_magnets()

  WaddPol.destroy()
#enddef _clWaddPol()

def _clWaddMag(key):
+seq,uguiglobind.
  global UnduColors, DictUnduColors

  mp = []

  cnam = S_Cmag.get()
  if cnam.strip() == "": wError("Name must be given!"); return
  if NMagPol and  cnam in DictMagPolsTot: wError("Magnet is already defined"); return

  cmoth = S_Cmoth.get()
  if cmoth.strip() == "": wError("Name of mother volume must be given!"); return

  mp.append([cnam,cmoth])

  #smattype = S_MateType.get().strip()
  #if smattype != 'REC': wError("Unknown material " + mattype); return
  mp.append('REC')

  sispec = S_Ispec.get().strip().lower()

  if sispec[0] == 'y' or sispec == '1': sis = 'yes'
  elif sispec[0] == 'n' or sispec == '0': sis = 'no'
  else: wError("Bad input " + sispec); return

  mp.append(sis)

  if key == 'Block':

    schamfus = S_ChamfUs.get().strip()

    if try_calc_var(schamfus) != 'ok': return

    chamfus = calc_var(schamfus)
    schamfds = S_ChamfDs.get().strip()

    if try_calc_var(schamfds) != 'ok': return
    chamfds = calc_var(schamfds)

    if chamfus == 0.0 and chamfds == 0.0:
      mp.append('Block')
    elif chamfus != 0.0 and chamfds != 0.0:
      if chamfus != chamfds:
        wError("Chamfer must be equal or one must be zero")
        return
      #endif chamfus != chamfds
      mp.append('BlockChamf')
    elif chamfus != 0.0: mp.append('BlockUsChamf')
    elif chamdus != 0.0: mp.append('BlockDsChamf')
    #endif

  elif key == 'Cylinder':

    mp.append('Cylinder')

  elif key == 'File':
    mp.append('File')
  else:
    wError("In _clWaddMag fehlt noch key " + key)
    return
  #endif key == 'RECBlock'

  sxcen = S_Xcen.get().strip()
  if try_calc_var(sxcen) != 'ok': return
  sycen = S_Ycen.get().strip()
  if try_calc_var(sycen) != 'ok': return
  szcen = S_Zcen.get().strip()
  if try_calc_var(szcen) != 'ok': return

  mp.append([sxcen,sycen,szcen])

  sBc = S_Bc.get().strip()
  if try_calc_var(sBc) != 'ok': return
  sBxn = S_Bxn.get().strip()
  if try_calc_var(sBxn) != 'ok': return
  sByn = S_Byn.get().strip()
  if try_calc_var(sByn) != 'ok': return
  sBzn = S_Bzn.get().strip()
  if try_calc_var(sBzn) != 'ok': return

  scolor = S_Color.get().strip()
  if scolor not in Variables and scolor not in DictUnduColors:
    wError(scolor + " not in: " + str(DictUnduColors))
    return
  #endif scolor not in UnduColors

  if try_calc_var(sxcen) != 'ok': return

  smatindex = S_Mat.get()
  ifound = 0

  if smatindex[0] == '$':
    if try_calc_var(smatindex) != 'ok': return
    sval = str(calc_var(smatindex))
  else:
    sval = smatindex
  #endif smatindex[0] == '$'

  for mat in Materials:
    if mat[0] == sval:
      ifound = 1
      break
  #endfor mat in Materials

  if ifound == 0:
    wError("Undefined material index _clWaddMag")
    _MaddMatREClin()
    return
  #endif ifound == 0

  mp.append([sBc,sBxn,sByn,sBzn,smatindex,scolor])

  if key == 'Block':

    sxlen = S_Xlen.get().strip()
    if try_calc_var(sxlen) != 'ok': return
    sylen = S_Ylen.get().strip()
    if try_calc_var(sylen) != 'ok': return
    szlen = S_Zlen.get().strip()
    if try_calc_var(szlen) != 'ok': return

    if chamfus == 0.0 and chamfds == 0.0: mp.append([sxlen,sylen,szlen,'0.0'])
    elif chamfus != 0.0: mp.append([sxlen,sylen,szlen,schamfus])
    else: mp.append([sxlen,sylen,szlen,schamfds])

  elif key == 'Cylinder':

    srin = S_CylrIn.get().strip()
    if try_calc_var(srin) != 'ok': return
    srout = S_CylrOut.get().strip()
    if try_calc_var(srout) != 'ok': return
    shig = S_CylHeight.get().strip()
    if try_calc_var(shig) != 'ok': return
    sdphi = S_CyldPhi.get().strip()
    if try_calc_var(sdphi) != 'ok': return

    mp.append([srin,srout,shig,sdphi])

  elif key == 'File':
    cfile = S_CornFile.get().strip()
    if cfile == "": wError("Filename must be given!")
    corns = read_cornfile(cfile)
    if corns == []:
      wError("Problems with " + cfile)
      return
    #endif corns == []
    mp.append(corns)

  #endif key == 'Block'

  snxdiv = S_nXdiv.get().strip()
  if try_calc_var(snxdiv) != 'ok': return
  snydiv = S_nYdiv.get().strip()
  if try_calc_var(snydiv) != 'ok': return
  snzdiv = S_nZdiv.get().strip()
  if try_calc_var(snzdiv) != 'ok': return
  sfracdivy = S_FracDivY.get().strip()
  if try_calc_var(sfracdivy) != 'ok': return
  sfracdivz = S_FracDivZ.get().strip()
  if try_calc_var(sfracdivz) != 'ok': return

  mp.append([snxdiv,snydiv,snzdiv,sfracdivy,sfracdivz])

  xloc=None
  yloc = None
  zloc = None

  mp.append([xloc,yloc,zloc])
  MagPolsTot.append(mp)

  if mp[3] == 'Cylinder':
    size = mp[6]
    Quit(mp,'\n',size)
    rin = float(size[0])
    rout = float(size[1])
    h = float(size[2])
    dphi = float(size[3])
    nphi = int(size[4][3])+1
    if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3
    Ncylinder += 1
    ccyl = 'ncyl_' + str(Ncylinder)
    ncyl = ncylinder(ccyl,
                     xcen,ycen,zcen,rout-rin,rin,rin,h,0.0,90.,dphi,nphi,1)
    poly = cylinderpoly(ccyl)
    Ntcyls.append([imp,mp,ccyl,poly])
  #endif

  NMagPolTot += 1

  update_magnets()

  WaddMag.destroy()
#enddef _clWaddMag()

def _EditMagGet(mag):
+seq,uguiglobind.

  #print("Baustelle _EditMagGet")

# Concept of magnets

# Block:
#  mp[0] = [name, mother]
#  mp[1] = material Type
#  mp[2] = special flag
#  mp[3] = shape key-word
#  mp[4] = [xcen,ycen,zcen]
#  mp[5] = [Bc, Bxn, Byn, Bzn, material index, color index]
#  mp[6] = [xlen,ylen,zlen,chamf]
#  mp[7] = [nxdiv,nydiv,nzdiv,fracdivy]
#  mp[8] = [xloc,yloc,zloc]

# File:
#  mp[0] = [name, mother]
#  mp[1] = material Type
#  mp[2] = special flag
#  mp[3] = shape key-word
#  mp[4] = [xcen,ycen,zcen]
#  mp[5] = [Bc, Bxn, Byn, Bzn, material index, color index]
#  mp[6] = number of points
#  mp[7] = points
#  mp[8] = [nxdiv,nydiv,nzdiv,fracdivy]
#  mp[9] = [xloc,yloc,zloc]

  MagPol = MagPolsTot[mag]

#  mattype = _EditMagGetSplit(MagPol[1],S_MateType.get())
#  MagPol[1] = mattype

  key = S_Key.get()
  if key != MagPol[3]:
    wError("Shape key-word can not be changed!")
  #endif key != MagPol[4]

  cen = MagPol[4]

  xcen = _EditMagGetSplit(cen[0],S_Xcen.get())
  ycen = _EditMagGetSplit(cen[1],S_Ycen.get())
  zcen = _EditMagGetSplit(cen[2],S_Zcen.get())

  cen = [xcen,ycen,zcen]
  MagPol[4] = [xcen,ycen,zcen]

  vmat = MagPol[5]
  bc = _EditMagGetSplit(vmat[0],S_Bc.get())
  bxn = _EditMagGetSplit(vmat[1],S_Bxn.get())
  byn = _EditMagGetSplit(vmat[2],S_Byn.get())
  bzn = _EditMagGetSplit(vmat[3],S_Bzn.get())
  mat = _EditMagGetSplit(vmat[4],S_Mat.get())
  col = _EditMagGetSplit(vmat[5],S_Color.get())
  MagPol[5] = [bc,bxn,byn,bzn,mat,col]

  if key.find('Block') > -1:

    leng = MagPol[6]
    xlen = _EditMagGetSplit(leng[0],S_Xlen.get())
    ylen = _EditMagGetSplit(leng[1],S_Ylen.get())
    zlen = _EditMagGetSplit(leng[2],S_Zlen.get())

    chamf = '0.0'
    chamfus = _EditMagGetSplit(leng[3],S_ChamfUs.get())
    chamfds = _EditMagGetSplit(leng[3],S_ChamfDs.get())

    if key == 'BlockChamf':
      if chamfus != chamfds:
        wError("Up-stream and down-stream chamfer must be the same for key 'BlockChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfus
    elif key == 'BlockUsChamf':
      if chamfds != '0.0':
        wError("Down-stream chamfer must be zero for key 'BlockUsChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfus
    elif key == 'BlockDsChamf':
      if chamfus != '0.0':
        wError("Up-stream chamfer must be zero for key 'BlockUsChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfds
    #endif key == 'BlockChamf')

    MagPol[6] = [xlen,ylen,zlen,chamf]

    div = MagPol[7]

    nxdiv = _EditMagGetSplit(div[0],S_nXdiv.get())
    nydiv = _EditMagGetSplit(div[1],S_nYdiv.get())
    nzdiv = _EditMagGetSplit(div[2],S_nZdiv.get())

    fracdivy = _EditMagGetSplit(div[3],S_FracDivY.get())
    fracdivz = _EditMagGetSplit(div[4],S_FracDivZ.get())

    MagPol[7] = [nxdiv,nydiv,nzdiv,fracdivy,fracdivz]

  elif key == 'File':

    cmag = MagPol[0][0]
    fnam = DictCornFiles[cmag]
    fget = S_CornFile.get()
    corns = MagPol[7]

    if fnam != fget:
      if not os.path.exists(fget):
        wError("File " + fget + " not found!")
      else:
        try:
          corns = read_cornfile(fget)
          cornsnum = []
          for c in corns:
            c1 = calc_var(c[0])
            c2 = calc_var(c[1])
            c3 = calc_var(c[2])
            cornsnum.append([c1,c2,c3])
          #endfor
          verts,ifaces,faces,bounds = hull3d(cornsnum)
          if type(verts) != Tdf:
            hull = pd.DataFrame(verts)
          else:
            hull = verts
          #endif
          DictCornFiles[cname[0]] = cmag
          MagPol[7] = corns
          MagPol[6] = str(len(corns))
        except:
          wError("Could not process " + fget + "!")
        #endtry
      #endif not os.path.exists(fnam)
    #endif fnam != S_CornFile

    div = MagPol[8]
    nxdiv = _EditMagGetSplit(div[0],S_nXdiv.get())
    nydiv = _EditMagGetSplit(div[1],S_nYdiv.get())
    nzdiv = _EditMagGetSplit(div[2],S_nZdiv.get())
    fracdivy = _EditMagGetSplit(div[3],S_FracDivY.get())
    fracdivz = _EditMagGetSplit(div[4],S_FracDivZ.get())
    MagPol[8] = [nxdiv,nydiv,nzdiv,fracdivy,fracdivz]

  else:
    wError("_EditMagGet: " + key + " einfügen!")
  #endif key == 'Block'

  MagPolsTot[mag] = MagPol
  #print("_EditMagGet:",MagPolsTot[mag])

  WEditMag.destroy()

#enddef _EditMagGet(mag)

def _EditMagGetSplit(var,stvar):

  split = stvar.split('=')

  if var != split[0]:
    try :
      var = calc_var(split[0])
    except:
      wError("Bad input " + stvar)
    #endtry
  #endif cenold[0] != split[0]

  return str(var)

#enddef _EditMagGetSplit(stvar)

MagPolsDel = []
NMagPolDel = 0

def _delmagpol(imp):
  global DictMagPolsTot, MagPolsTot, MagPolsDel

  print("_delmagpol",imp)

  mag = MagPolsTot[imp]
  cnam = mag[0][0]
  cmoth = mag[0][1]

  if not cnam in DictMagPolsTot:
    wError("Magnet is not defined")
    return
  #endif cnam in MagPolsTot

  mp = MagPolsTot.pop(imp)
  MagPolsDel.append(mp)

  update_magnets()
  _listMags('update')
#enddef _delmagpol(imp)

def _resmagpol(imp):
  global DictMagPolsTot, MagPolsTot, MagPolsDel

  print("_resmagpol",imp)

  mp = MagPolsTotDel.pop(imp)
  MagPolsTots.append(mp)

  update_magnets()
  _listMags('update')
#enddef _resmagpol(imp)

def addmagpol_to_list(mag):
  global DictMagPolsTot, MagPolsTot
  cnam = mag[0][0]
  cmoth = mag[0][1]
  if cnam in DictMagPolsTot:
    wError("Magnet is already defined")
    return
  #endif cnam in MagPolsTot
  MagPolsTot.append(mag)
  update_magnets()
#enddef addmagpol_to_list()

def _clWCopyMag(mag):
  global MagPolsTot, S_newname, S_newmother, NMagPol, WCopyMag

  mp = deepcopy(MagPolsTot[mag])

  CopyMagX = -1
  CopyMagY = -1
  CopyMag_CheckMode = 0

  mp[0][0] = S_newname.get()
  mp[0][1] = S_newmother.get()

  NMagPol += 1
  MagPolsTot.append(mp)
  update_magnets()

  WCopyMag.destroy()
  _listMags('update')

#def _clWCopyMag(mag)

def _cnWCopyMag(mag):
  WCopyMag.destroy()
#def _cnWCopyMag(mag)

def _copyMag(imp):
  global MagPolsTot, S_newname, S_newmother, WCopyMag

  mp = MagPolsTot[imp]

  cmag = mp[0][0]
  cmoth = mp[0][1]

  WCopyMag = Toplevel()
  WCopyMag.title("Copy Magnetic Item")

  try:
    if CopyMagX: pass
  except:
    CopyMag_CheckMode = 0
    CopyMagX = -1
    CopyMagY = -1
  #endtry

  if CopyMagX == -1: CopyMagX, CopyMagY = Umaster.winfo_pointerxy()

  sgeo = '+' + str(CopyMagX-200) + '+' + str(CopyMagY)
  WCopyMag.geometry(sgeo)

  WCopyMag.title("Copy of " + cmag)
  WCopyMag.attributes('-topmost', 1)

  ewid = 25

  S_newname = StringVar()
  S_newname.set("")
  fnewname = Frame(WCopyMag)
  tnewname = 'name'
  lnewname = Label(fnewname,text=tnewname,font=MyFont)
  enewname = Entry(fnewname,text=S_newname,justify=CENTER,font=MyFont,width=ewid)
  lnewname.pack(side=LEFT,fill=X)
  enewname.pack(side=RIGHT,fill=X)
  fnewname.pack(fill=X)

  S_newmother = StringVar()
  S_newmother.set("")
  fnewmother = Frame(WCopyMag)
  tnewmother = 'mother volume'
  lnewmother = Label(fnewmother,text=tnewmother,font=MyFont)
  enewmother = Entry(fnewmother,text=S_newmother,justify=CENTER,font=MyFont,width=ewid)
  lnewmother.pack(side=LEFT,fill=X)
  enewmother.pack(side=RIGHT,fill=X)
  fnewmother.pack(fill=X)

  fC = Frame(WCopyMag)

  bCancel = Button(fC,text='Cancel',command= lambda mag=imp: _cnWCopyMag(mag))
  bCancel.bind('<Return>', lambda event, mag=imp: _cnWCopyMag(mag))
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fC,text='Ok',command= lambda mag=imp: _clWCopyMag(mag),width=ewid)
  bClose.bind('<Return>',lambda event, mag=imp: _clWCopyMag(mag))
  bClose.pack(side=LEFT,fill=X)

  fC.pack(fill=X)

#enddef _copyMag(imp)

def _ccWEditMag(mag):
  # Check
  global EditMag_CheckMode,CopyMag_CheckMode,  WEditMag, MagPolsTot,MagPolOld
  global SgeoWeditMag
  #print("_ccWEditMag(mag):",mag)

  EditMag_CheckMode = 1
  sgeo = WEditMag.geometry().split('+')
  SgeoWeditMag = '+' + sgeo[1] + '+' + sgeo[2]
  WEditMag.destroy()

  _editMag(mag)
  #print("Check:",stat)

  EditMag_CheckMode = 0
#def _ccWEditMag(mag)

def _cnWEditMag(mag):
  # Cancel
  global EditMag_CheckMode,CopyMag_CheckMode,EditMagX,EditMagY,WEditMag, \
  WCopyMag,MagPol,MagPolOld, MagPolsTot, \
  Nvar,Ncalc,Variables,Calcs,VariablesOld,CalcOld

  #print("_cnWEditMag(mag):",mag)
  EditMag_CheckMode = 0
  EditMagX = -1
  EditMagY = -1
  #print("_cn:",MagPolOld)
  MagPolsTot[mag] = MagPolOld
  Variables = VariablesOld
  Calcs = CalcsOld
  Nvar = len(Variables)
  Ncalc = len(Calcs)
  WEditMag.destroy()
#def _cnWEditMag(mag)

def _crWEditMag(mag):
  # Restore
  global MagPolOld,MagPolsTot
  #print("_cr:",NL,MagPolOld)
  MagPolsTot[mag] = MagPolOld
  WEditMag.destroy()
  _editMag(mag)
#def _crWEditMag(mag)

def _clWEditMag(mag):
+seq,uguiglobind.

  EditMagX = -1
  EditMagY = -1
  EditMag_CheckMode = 0

  _EditMagGet(mag)

  WEditMag.destroy()
  _listMags('update')

#def _clWEditMag(mag)

def _focoEditMag(ev,imp,idx,kdx):
+seq,uguiglobind.
  print(ev,imp,idx,kdx)
#enddef focoEditMag(imp,idx,kdx)

def _editMag(imp):
+seq,uguiglobind.
  global SgeoWeditMag, VariablesOld, CalcsOld

  #print("_editMag::CheckMode:",EditMag_CheckMode)
  #print("_editMag::imp:",imp)

  if not EditMag_CheckMode:
    MagPolOld = deepcopy(MagPolsTot[imp])
    VariablesOld = deepcopy(Variables)
    CalcsOld = deepcopy(Calcs)
  else:
    _EditMagGet(imp)
  #endif not EditMag_CheckMode

  MagPol = MagPolsTot[imp]
  #print(MagPol)
  mp = MagPol

  cmag = mp[0][0]
  cmoth = mp[0][1]

  WEditMag = Toplevel()
  WEditMag.title("Edit Magnetic Item")

  try:
    if EditMagX: pass
  except:
    EditMag_CheckMode = 0
    EditMagX = -1
    EditMagY = -1
  #endtry

  if EditMagX == -1:
    EditMagX, EditMagY = Umaster.winfo_pointerxy()
    EditMagX -= 200
  #endif EditMagX == -1

  if not EditMag_CheckMode:
    sgeo = '+' + str(EditMagX) + '+' + str(EditMagY)
  else:
    sgeo = SgeoWeditMag
  #endif not EditMag_CheckMode

  WEditMag.geometry(sgeo)

  WEditMag.title(cmag)
  WEditMag.attributes('-topmost', 1)

  #([cname,mag,ispec,key,cen,vmat,siz,div]

  ewid = 30

  mattype = mp[1]

  if mattype.find("$") > -1:
    V_MatType = calc_var(mattype)
    tvmattype = mattype + " = " + str(V_MatType)
  else:
    tvmattype = mattype
  #endif mattype.find("$") > -1

  S_MateType.set(mattype)

#  ewid = max(ewid,len(tvmattype))

  #ewid = len(mattype)
  ispec = mp[2]
  ewid = max(ewid,len(ispec))

  key = mp[3]
  ewid = max(ewid,len(key))

  cen = mp[4]

  xcen = cen[0]
  ycen = cen[1]
  zcen = cen[2]

  if type(xcen) == str and xcen.find("$") > -1:
    V_Xcen = calc_var(xcen)
    tvxcen = xcen + " = " + str(V_Xcen)
  else:
    tvxcen = xcen
  #endif xcen.find("$")

  ewid = max(ewid,len(tvxcen))

  if type(ycen) == str and ycen.find("$") > -1:
    V_Ycen = calc_var(ycen)
    tvycen = ycen + " = " + str(V_Ycen)
  else:
    tvycen = ycen
  #endif ycen.find("$")

  ewid = max(ewid,len(tvycen))

  if type(zcen) == str and ycen.find("$") > -1:
    V_Zcen = calc_var(zcen)
    tvzcen = zcen + " = " + str(V_Zcen)
  else:
    tvzcen = zcen
  #endif zcen.find("$")

  ewid = max(ewid,len(tvzcen))

  vmat = mp[5]
  bc = vmat[0]

  if type(bc) == str and bc.find("$") > -1:
    V_Bc = calc_var(bc)
    tvbc = bc + " = " + str(V_Bc)
  else:
    tvbc = bc
  #endif bc.find("$")

  ewid = max(ewid,len(tvbc))

  bxn = calc_var(vmat[1])
  byn = calc_var(vmat[2])
  bzn = calc_var(vmat[3])

  if type(bxn) == str and bxn.find("$") > -1:
    V_Bxn = calc_var(bxn)
    tvbxn = bxn + " = " + str(V_Bxn)
  else:
    tvbxn = str(bxn)
  #endif bxn.find("$") > -1

  ewid = max(ewid,len(tvbxn))

  if type(byn) == str and byn.find("$") > -1:
    V_Byn = calc_var(byn)
    tvbyn = byn + " = " + str(V_Byn)
  else:
    tvbyn = str(byn)
  #endif byn.find("$") > -1

  ewid = max(ewid,len(tvbyn))

  if type(bzn) == str and bzn.find("$") > -1:
    V_Bzn = calc_var(bzn)
    tvbzn = bzn + " = " + str(V_Bzn)
  else:
    tvbzn = str(bzn)
  #endif bzn.find("$") > -1

  ewid = max(ewid,len(tvbzn))

  mat = vmat[4]
  col = vmat[5]

  if type(mat) == str and mat.find("$") > -1:
    V_Mat = calc_var(mat)
    tvmat = mat + " = " + str(V_Mat)
  else:
    tvmat = mat
  #endif mat.find("$") > -1

  ewid = max(ewid,len(tvmat))

  if type(col) == str and col.find("$") > -1:
    vcol = calc_var(col)
    tvcol = col + " = " + str(vcol)
  else:
    tvcol = col
  #endif col.find("$") > -1

  ewid = max(ewid,len(tvcol))

  siz = mp[6]

  if key.find('Block') > -1:

    xlen = siz[0]
    ylen = siz[1]
    zlen = siz[2]

    chamf = siz[3]

    tvchus = '0.0'
    tvchds = '0.0'

    if type(chamf) == str and chamf.find("$") > -1:
      V_Chamf = calc_var(chamf)
      if key == 'BlockUsChamf':
        tvchus = chamf + " = " + str(V_Chamf)
      elif key == 'BlockDsChamf':
        tvchds = chamf + " = " + str(V_Chamf)
      elif key == 'BlockChamf':
        tvchus = chamf + " = " + str(V_Chamf)
        tvchds = chamf + " = " + str(V_Chamf)
      #endif key == 'BlockUsChamf'
    else:
      if key == 'BlockUsChamf':
        tvchus = chamf
      elif key == 'BlockDsChamf':
        tvchds = chamf
      elif key == 'BlockChamf':
        tvchus = chamf
        tvchds = chamf
      #endif key == 'BlockUsChamf'
    #endif xlen.find("$")

    ewid = max(ewid,len(tvchus))
    ewid = max(ewid,len(tvchds))

    if type(xlen) == str and xlen.find("$") > -1:
      V_Xlen = calc_var(xlen)
      tvxlen = xlen + " = " + str(V_Xlen)
    else:
      tvxlen = xlen
    #endif xlen.find("$")
    ewid = max(ewid,len(tvxlen))

    if type(ylen) == str and ylen.find("$") > -1:
      V_Ylen = calc_var(ylen)
      tvylen = ylen + " = " + str(V_Ylen)
    else:
      tvylen = ylen
    #endif ylen.find("$")
    ewid = max(ewid,len(tvylen))

    if type(zlen) == str and zlen.find("$") > -1:
      V_Zlen = calc_var(zlen)
      tvzlen = zlen + " = " + str(V_Zlen)
    else:
      tvzlen = zlen
    #endif zlen.find("$")
    ewid = max(ewid,len(tvzlen))

    div = mp[7]

  elif key == 'File':

    div = mp[8]
    ewid = max(ewid,len(DictCornFiles[cmag]))

  else:
    Quit("In _editMag fehlt noch key " + key)
  #endif key == 'Block'

  nxdiv = div[0]
  nydiv = div[1]
  nzdiv = div[2]
  fracdivy = div[3]
  fracdivz = div[4]

  vxcen = calc_var(xcen)
  vycen = calc_var(ycen)
  vzcen = calc_var(zcen)

  vbc = calc_var(bc)
  vbxn = calc_var(bxn)
  vbyn = calc_var(byn)
  vbzn = calc_var(bzn)

  vnxdiv = calc_var(nxdiv)
  vnydiv = calc_var(nydiv)
  vnzdiv = calc_var(nzdiv)
  vfracdivy = calc_var(fracdivy)

  if type(nxdiv) == str and nxdiv.find("$") > -1:
    tnxdiv = nxdiv + " = " + str(vnxdiv)
  else:
    tnxdiv = nxdiv
  #endif nxdiv.find("$")
  ewid = max(ewid,len(tnxdiv))

  if type(nydiv) == str and nydiv.find("$") > -1:
    tnydiv = nydiv + " = " + str(vnydiv)
  else:
    tnydiv = nydiv
  #endif nydiv.find("$")
  ewid = max(ewid,len(tnydiv))

  if type(nzdiv) == str and nzdiv.find("$") > -1:
    tnzdiv = nzdiv + " = " + str(vnzdiv)
  else:
    tnzdiv = nzdiv
  #endif nzdiv.find("$")
  ewid = max(ewid,len(tnzdiv))

  if type(fracdivy) == str and fracdivy.find("$") > -1:
    tfracdivy = fracdivy + " = " + str(vfracdivy)
  else:
    tfracdivy = fracdivy
  #endif fracdivy.find("$")
  ewid = max(ewid,len(tfracdivy))

  #S_MateType.set(tvmattype)
  #fMatType = Frame(WEditMag)
  #tMatType = 'material type'
  #lMatType = Label(fMatType,text=tMatType,font=MyFont)
  #eMatType = Entry(fMatType,text=S_MateType,justify=CENTER,font=MyFont,width=ewid)
  #lMatType.pack(side=LEFT,fill=X)
  #eMatType.pack(side=RIGHT,fill=X)
  #fMatType.pack(fill=X)

  S_Mat.set(tvmat)
  fMat = Frame(WEditMag)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  S_Color.set(tvcol)
  fcol = Frame(WEditMag)
  tcol = 'color'
  lcol = Label(fcol,text=tcol,font=MyFont)
  ecol = Entry(fcol,text=S_Color,justify=CENTER,font=MyFont,width=ewid)
  lcol.pack(side=LEFT,fill=X)
  ecol.pack(side=RIGHT,fill=X)
  fcol.pack(fill=X)

  S_Bc.set(tvbc)
  fBc = Frame(WEditMag)
  tBc = 'remanence'
  lBc = Label(fBc,text=tBc,font=MyFont)
  eBc = Entry(fBc,text=S_Bc,justify=CENTER,font=MyFont,width=ewid)
  lBc.pack(side=LEFT,fill=X)
  eBc.pack(side=RIGHT,fill=X)
  fBc.pack(fill=X)

  S_Bxn.set(tvbxn)
  fBxn = Frame(WEditMag)
  tBxn = 'x - component'
  lBxn = Label(fBxn,text=tBxn,font=MyFont)
  eBxn = Entry(fBxn,text=S_Bxn,justify=CENTER,font=MyFont,width=ewid)
  lBxn.pack(side=LEFT,fill=X)
  eBxn.pack(side=RIGHT,fill=X)
  fBxn.pack(fill=X)

  S_Byn.set(tvbyn)
  fByn = Frame(WEditMag)
  tByn = 'y - component'
  lByn = Label(fByn,text=tByn,font=MyFont)
  eByn = Entry(fByn,text=S_Byn,justify=CENTER,font=MyFont,width=ewid)
  lByn.pack(side=LEFT,fill=X)
  eByn.pack(side=RIGHT,fill=X)
  fByn.pack(fill=X)

  S_Bzn.set(tvbzn)
  fBzn = Frame(WEditMag)
  tBzn = 'z - component'
  lBzn = Label(fBzn,text=tBzn,font=MyFont)
  eBzn = Entry(fBzn,text=S_Bzn,justify=CENTER,font=MyFont,width=ewid)
  lBzn.pack(side=LEFT,fill=X)
  eBzn.pack(side=RIGHT,fill=X)
  fBzn.pack(fill=X)

  S_Ispec.set(ispec)
  fIspec = Frame(WEditMag)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  S_Key.set(key)
#  fKey = Frame(WEditMag)
#  tKey = 'shape key-word'
#  lKey = Label(fKey,text=tKey,font=MyFont)
#  eKey = Entry(fKey,text=S_Key,justify=CENTER,font=MyFont,width=ewid)
#  lKey.pack(side=LEFT,fill=X)
#  eKey.pack(side=RIGHT,fill=X)
#  fKey.pack(fill=X)

#  if key == 'File':
#    S_CornFile.set(DictCornFiles[cmag])
#    ffile = Frame(WEditMag)
#    tfile = 'filename'
#    lfile = Label(ffile,text=tfile,font=MyFont)
#    efile = Entry(ffile,text=S_CornFile,justify=CENTER,font=MyFont,width=ewid)
#    lfile.pack(side=LEFT,fill=X)
#    efile.pack(side=RIGHT,fill=X)
#    ffile.pack(fill=X)
#  #endif key == 'File'

  S_Xcen.set(tvxcen)
  fXcen = Frame(WEditMag)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  S_Ycen.set(tvycen)
  fYcen = Frame(WEditMag)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  S_Zcen.set(tvzcen)
  fZcen = Frame(WEditMag)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key.find('Block') > -1:

    S_Xlen.set(tvxlen)
    fXlen = Frame(WEditMag)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    S_Ylen.set(tvylen)
    fYlen = Frame(WEditMag)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    S_Zlen.set(tvzlen)
    fZlen = Frame(WEditMag)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    S_ChamfUs.set(tvchus)
    fChUs = Frame(WEditMag)
    tChUs = 'Up-stream chamfer'
    lChUs = Label(fChUs,text=tChUs,font=MyFont)
    eChUs = Entry(fChUs,text=S_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChUs.pack(side=LEFT,fill=X)
    eChUs.pack(side=RIGHT,fill=X)
    fChUs.pack(fill=X)

    S_ChamfDs.set(tvchds)
    fChDs = Frame(WEditMag)
    tChDs = 'Down-stream chamfer'
    lChDs = Label(fChDs,text=tChDs,font=MyFont)
    eChDs = Entry(fChDs,text=S_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChDs.pack(side=LEFT,fill=X)
    eChDs.pack(side=RIGHT,fill=X)
    fChDs.pack(fill=X)

  elif key == 'File':
    pass
  else:
    Quit("In _editMag fehlt noch key " + key)
  #endif key == 'Block'

  S_nXdiv.set(tnxdiv)
  fnXdiv = Frame(WEditMag)
  tnxdiv = 'nXdiv'
  lnXdiv = Label(fnXdiv,text=tnxdiv,font=MyFont)
  enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
  lnXdiv.pack(side=LEFT,fill=X)
  enXdiv.pack(side=RIGHT,fill=X)
  fnXdiv.pack(fill=X)

  S_nYdiv.set(tnydiv)
  fnYdiv = Frame(WEditMag)
  tnydiv = 'nYdiv'
  lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
  enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
  lnYdiv.pack(side=LEFT,fill=X)
  enYdiv.pack(side=RIGHT,fill=X)
  fnYdiv.pack(fill=X)

  S_nZdiv.set(tnzdiv)
  fnZdiv = Frame(WEditMag)
  tnzdiv = 'nZdiv'
  lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
  enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
  lnZdiv.pack(side=LEFT,fill=X)
  enZdiv.pack(side=RIGHT,fill=X)
  fnZdiv.pack(fill=X)

  S_FracDivY.set(tfracdivy)
  fFracDivY = Frame(WEditMag)
  tfracdivy = 'FracDivY'
  lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
  eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
  lFracDivY.pack(side=LEFT,fill=X)
  eFracDivY.pack(side=RIGHT,fill=X)
  fFracDivY.pack(fill=X)

  S_FracDivZ.set(tfracdivz)
  fFracDivZ = Frame(WEditMag)
  tfracdivz = 'FracDivZ'
  lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
  eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
  lFracDivZ.pack(side=LEFT,fill=X)
  eFracDivZ.pack(side=RIGHT,fill=X)
  fFracDivZ.pack(fill=X)

  WEditMag.update()

  widtot = WEditMag.winfo_width()
  wide = eXcen.winfo_width()
  wscale = ewid / wide
  wforce = int(widtot/2.*wscale) + 2

  fCheckRestore = Frame(WEditMag)
  fCheckRestore.pack(fill=X)

  bCheck = Button(fCheckRestore,text='Check',command= lambda mag=imp: _ccWEditMag(mag))
  bCheck.bind('<Return>',lambda event, mag=imp: _ccWEditMag(mag))
  bCheck.pack(expand=TRUE,side=LEFT,fill=X)

  bRestore = Button(fCheckRestore,text='Restore',command= lambda mag=imp: _crWEditMag(mag),width=wforce)
  bRestore.bind('<Return>',lambda event, mag=imp: _crWEditMag(mag))
  bRestore.pack(side=LEFT,fill=X)

  fC = Frame(WEditMag)
  fC.pack(fill=X)

  bClose = Button(fC,text='Ok',command= lambda mag=imp: _clWEditMag(mag),width=wforce)
  bClose.bind('<Return>',lambda event, mag=imp: _clWEditMag(mag))
  bClose.pack(expand=TRUE,side=LEFT,fill=X)

  WEditMag.update()

  #print("Leaving _editMag")

#enddef _editMag(imp)

def _clWallListMags():
  global WallListMags
  WallListMags.destroy()
#enddef _clWallListMags()

def _clWselListMags():
#+seq,uguiglobind.
  global WselListMags
  WselListMags.destroy()
#enddef _clWselListMags()

def _clWdelListMags():
#+seq,uguiglobind.
  global WdelListMags
  WdelListMags.destroy()
#enddef _clWdelListMags()

NMagPolSel = -1
DictMagPolsSel = {}
MagPolsSel = []

def _selectMag(cmag):

  global NMagPolSel, MagPolsSel,DictMagPolsSel,WallListMags, \
  DictMagPolsTot, MyMoth, Moths, NMothSel, DictMothsSel

  #print('_selectMag(cmag):',cmag)
  #print('_selectMag(cmag):',DictMagPolsSel)

  if cmag in DictMagPolsSel:

    #print('_selectMag(cmag): cmag in DictMagPolsSel')

    mag = MagPolsTot[DictMagPolsTot[cmag]]
    cmoth = mag[0][1]
    moth = MyMoth[cmag]

    NMagPolSel -= 1
    DictMagPolsSel.pop(cmag)

    MagPolsSel = []
    dm = {}
    i = -1

    for cm in DictMagPolsSel:
      MagPolsSel.append(cm)
      i += 1
      dm[cm] = i
    #endfor cm in DictMagPolsSel

    DictMagPolsSel = dm

    if NMothSel > 0 and cmoth in DictMothsSel:
      NMothSel -= 1
      DictMothsSel.pop(cmoth)
      MothsSel = []
      dm = {}
      i = -1
      for cm in DictMothsSel:
        MothsSel.append(cm)
        i += 1
        dm[cm] = i
      #endfor cm in DictMothsSel
      DictMothsSel = dm
    #endif NMothSel > 0

  else:

    #print('_selectMag(cmag): cmag NOT in DictMagPolsSel')
    MagPolsSel.append(cmag)
    DictMagPolsSel[cmag] = NMagPolSel
    NMagPolSel += 1

  #endif not mag in DictMagsSel

  _configMagButts()

  WallListMags.update()

#enddef _selectMag(mag)

NMothSel = 0
DictMothsSel = {}
MothsSel = []

def _selectMoth(cmoth):

  global NMothSel, MothsSel,DictMothsSel, DictMoths,DictMagPolsSel

  #print("selecMoth:cmoth",cmoth)

  if cmoth in DictMothsSel:
    moth = DictMoths[cmoth]
    for cmag in Moths[moth]:
      if cmag in DictMagPolsSel:
        _selectMag(cmag)
#        break
      #endif cmag in DictMagPolsSeleted
    #endfor mag in Moths[moth]
  else:
    MothsSel.append(cmoth)
    DictMothsSel[cmoth] = NMothSel
    moth = DictMoths[cmoth]
    NMothSel += 1
    for mag in Moths[moth]: _selectMag(mag)
  #endif not moth in DictMothsSel

#enddef _selectMag(imp)

def _configMagButts():

  global NMagPolSel, MagPolsSel,DictMagPolsSel
  global All_butts, ndmp, NMothSel

  #print('configMagButts()?\n',DictMothsSel,'\n',DictMagPolsSel)
  for i in range(len(All_butts)):
    butts = All_butts[i]
    cmoth = butts[0]['text']
    butts[0].configure(fg= 'black', bg='white')
    cmag = butts[1]['text']
    #print(cmoth,cmag)
    if cmag in DictMagPolsSel:
      for j in range(1,len(All_butts[i])):
        b = All_butts[i][j]
        b.configure(fg= 'black', bg='cyan')
    else:
      for b in All_butts[i]: b.configure(fg= 'black', bg='white')
    #endif cmag in DictMagPolsSel

  for i in range(len(All_butts)):
    butts = All_butts[i]
    cmoth = butts[0]['text']
    if cmoth in DictMothsSel:
      butts[0].configure(fg= 'black', bg='cyan')
    #endif cmag in DictMothsSel
  #endfor i in range(ndmp)
  #print('configMagButts()!\n')

#enddef _configMagButts()

def _selectAll():

  global DictMagPolsSel, DictMothsSel,NMothSel,NMagPolSel,MagPolsSel,MothSel
  global MagPolsTot,Moths

  DictMagPolsSel = {}
  DictMothsSel = {}
  MothsSel = []
  MagPolsSel = []
  NMothSel = 0
  NMagPolSel = 0

  for cmoth in DictMoths:
    imoth = DictMoths[cmoth]
    MothsSel.append(Moths[imoth])
    DictMothsSel[cmoth] = NMothSel
    NMothSel += 1
  #endif

  for mag in MagPolsTot:
    cmag = mag[0][0]
    MagPolsSel.append(cmag)
    DictMagPolsSel[cmag] = NMagPolSel
    NMagPolSel += 1
  #endif

  #print("_selectAll:\n",DictMothsSel,'\n',DictMagPolsSel)

  _configMagButts()
#enddef _selectAll()

def _deselectAll():
  global DictMagPolsSel, DictMothsSel,NMothSel,NMagPolSel,MagPolsSel,MothSel
  DictMagPolsSel = {}
  DictMothsSel = {}
  MothsSel = []
  MagPolsSel = []
  NMothSel = 0
  NMagPolSel = 0
  _configMagButts()
#enddef _deselectAll()

def _listMags(mode='all'):
+seq,uguiglobind.

  global WselListMags, WdelListMags
  global ndmp, WselGeo, WallGeo, WdelGeo
  global all_fmagmoth, all_fmoth, all_fmag, All_butts, all_lastmp, \
  all_firstmp, all_fxyz, all_fbott, all_fpn, bPrev,bCont, all_fb, all_fedi, \
  all_fcop, all_fdel, all_fplot, isopen_all,isopen_sel,isopen_del, \
  all_fplotxy, all_fplotxz, all_fplotyz

  global sel_fmagmoth, sel_fmoth, sel_fmag, sel_butts, sel_lastmp, \
  sel_firstmp, sel_fxyz, sel_fbott, sel_fpn, bPrev,bCont, sel_width, \
  sel_width_old, sel_width_ini, sel_fb, sel_fedi, sel_del, sel_fplot, sel_fcop

  global del_fmagmoth, del_fmoth, del_fmag, del_butts, del_lastmp, \
  del_firstmp, del_fxyz, del_fbott, del_fpn, bPrev,bCont, del_width, \
  del_width_old, del_width_ini, del_fb, del_fedi, del_del, del_fplot, del_fcop

  if not NMagPolTot:
    wError("No magnets or poles defined so far")
    return
  #endif NMagPolTot

  # counter, i.e. indices + 1
  try:
    all_firstmp = all_lastmp + 1
  except:
    EditMag_CheckMode = 0
    CopyMag_CheckMode = 0
    ndmp = 10
    all_firstmp = 1
  #endtry:

  #print('_listMags:mode,all_firstmp',mode,all_firstmp)
  iupdateall = 0
  iupdatesel = 0
  iupdatedel = 0

  try:
    WallGeo = WallListMags.geometry()
    if mode == 'update':
      iupdateall = 1
      mode = 'all'
      WallListMags.destroy()
    #endif
  except: WallGeo = WallMags=""
  try:
    WselGeo = WselListMags.geometry()
    if mode == 'update':
      iupdatesel = 1
      mode = 'selected'
      WselListMags.destroy()
    #endif
  except: WselGeo=""
  try:
    WdelGeo = WdelListMags.geometry()
    if mode == 'update':
      iupdatedel = 1
      mode = 'deleted'
      WalldelMags.destroy()
    #endif
  except: WdelGeo=""

  #print('_listMags:mode,all_firstmp vor update_magnets',mode,all_firstmp)
  update_magnets()
  #print('_listMags:mode,all_firstmp nach update_magnets',mode,all_firstmp)

  if mode == 'all' or iupdateall == 1:

    if mode == 'all':
      all_lastmp = all_firstmp + ndmp - 1
      all_firstmp = 1
      all_lastmp = min(ndmp,NMagPolTot)
    else:
      if all_lastmp > NMagPolTot - 1:
        all_lastmp = NMagPolTot -1
        all_firstmp = all_lastmp - ndmp
      #if all_lastmp > NMagPolTot - 1
      WallListMags.destroy()
    #endif mode == 'all'

    WallListMags = Toplevel()
    WallListMags.title("List of Magnetic Items")
    WallListMags.attributes('-topmost', 1)

    All_butts = []
    all_frames = []

    all_fmagmoth = Frame(WallListMags)
    all_fmoth = Frame(all_fmagmoth)
    all_fmag = Frame(all_fmagmoth)
    all_fkey = Frame(all_fmagmoth)
    all_fxyz = Frame(all_fmagmoth)
    all_fb = Frame(all_fmagmoth)
    all_fedi = Frame(all_fmagmoth)
    all_fdel = Frame(all_fmagmoth)
    all_fcop = Frame(all_fmagmoth)
    all_fplot = Frame(all_fmagmoth)
    all_fplotxy = Frame(all_fmagmoth)
    all_fplotxz = Frame(all_fmagmoth)
    all_fplotzy = Frame(all_fmagmoth)
    all_fsel = Frame(WallListMags)
    all_fbott = Frame(WallListMags)
    all_fpn = Frame(WallListMags)

    all_fmoth.pack(side=LEFT)

    #print("List:",mode,NL,MagPolsTot[0])

    for imp in range(all_lastmp):

      mp = MagPolsTot[imp]

      cmag = mp[0][0]
      cmoth = mp[0][1]

      buttmoth = Button(all_fmoth,text=cmoth,
                        command= lambda moth=cmoth: _selectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)

      buttmag = Button(all_fmag,text=cmag,
                       command= lambda mag = cmag: _selectMag(mag))
      buttmag.pack(side=TOP,fill=X)

      ckey = mp[3]
      buttkey = Button(all_fkey,text=ckey,bg='white')
      buttkey.pack(side=TOP,fill=X)

      mp1 = round(mp[-1][0],3)
      mp2 = round(mp[-1][1],3)
      mp3 = round(mp[-1][2],3)
      txyz = str([mp1,mp2,mp3])
      buttxyz = Button(all_fxyz,text=txyz)
      buttxyz.pack(side=TOP,fill=X)

      vmat = mp[5]

      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])

      mat = vmat[4]

      tb = " P " #Pole

      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        try: tb = str(bc) + sxyz
        except: tb = bc + sxyz
      #endif Variables[mat] == 1

      buttb = Button(all_fb,text=tb)
      buttb.pack(side=TOP,fill=X)

      buttcop = Button(all_fcop,text='Copy',
                       command= lambda mag = imp: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttedi = Button(all_fedi,text='Edit',
                       command= lambda mag = imp: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttdel = Button(all_fdel,text='Delete',
                       command= lambda mag = imp: _delmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttplot = Button(all_fplot,text='Plot 3d',
                       command= lambda mag = imp, key = '3dselected': _plotMag(mag,key))
      buttplot.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotxy,text='XY',
                       command= lambda mag = imp, key = 'xy': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotxz,text='XZ',
                       command= lambda mag = imp, key = 'xz': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotzy,text='ZY',
                       command= lambda mag = imp, key = 'zy': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

#      All_butts.append([buttmoth,buttmag,buttkey,buttxyz,buttb,buttedi,buttcop,\
#      buttdel,buttplot])
      All_butts.append([buttmoth,buttmag,buttkey,buttxyz,buttb])
    #endfor imp in range( NMagPolsTot)

    WallListMags.update()

    if NMagPolTot > ndmp:
      bPrev = Button(all_fpn,text='Previous',command= lambda key='all_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bPlotSel = Button(all_fpn,text='Plot Selection',command= lambda item=-2: _showGeo('3d',item))
      bPlotSel.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(all_fpn,text='Next',command= lambda key='all_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolTot > 0

    #bsel = Button(all_fsel,text='Select All',command=_selectAll)
    #bsel.pack(side=LEFT,expand=TRUE,fill=BOTH)
    #bdsel = Button(all_fsel,text='Deselect All',command=_deselectAll)
    #bdsel.pack(side=RIGHT,expand=TRUE,fill=BOTH)
    bdsel = Button(all_fsel,text='Plot whole device',command=_showGeo)
    bdsel.pack(side=RIGHT,expand=TRUE,fill=BOTH)
    bClose = Button(all_fbott,text='Close',command=_clWallListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    all_fmag.pack(side=LEFT)
    all_fmoth.pack(side=LEFT)
    all_fkey.pack(side=LEFT)
    all_fxyz.pack(side=LEFT)
    all_fb.pack(side=LEFT)
    all_fedi.pack(side=LEFT)
    all_fcop.pack(side=LEFT)
    all_fdel.pack(side=LEFT)
    all_fplot.pack(side=LEFT)
    all_fplotxy.pack(side=LEFT)
    all_fplotxz.pack(side=LEFT)
    all_fplotzy.pack(side=LEFT)

    all_fmagmoth.pack(side=TOP)
    all_fpn.pack(side=TOP,fill=X)
    all_fsel.pack(side=TOP,fill=X)
    all_fbott.pack(side=TOP,fill=X)

    if iupdateall == 1:
      sgeo = WallGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WallListMags.geometry(sgeo)
    else:
      sgeo = Wmaster.geometry().split('+')
      whw = sgeo[0].split('x')
      ww = int(whw[0])
      wh = int(whw[1])
      xw = int(sgeo[1])
      yw = int(sgeo[2])
      x = xw + int(ww/3)
      y = yw + int(wh/10)
      sgeo = '+' + str(x) + '+' + str(y)
      #WallListMags.geometry(sgeo)
    #endif mode == 'update'

    _configMagButts()
    WallListMags.update()

  elif mode == 'all_prev':

    all_lastmp = all_firstmp + ndmp - 1
    all_lastmp = max(all_lastmp-2*ndmp, ndmp)
    all_firstmp = max(all_firstmp-2*ndmp,1)

    ibut = ndmp
    for imp in range(all_lastmp-1,all_firstmp-2,-1):
      mp = MagPolsTot[imp]
      cmag = mp[0][0]
      cmoth = mp[0][1]
      All_butts[ibut-1][0].config(text=cmoth, command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      All_butts[ibut-1][1].config(text=cmag,command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsTot[imp][-1])
      All_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      All_butts[ibut-1][3].configure(text=tb)
      All_butts[ibut-1][4].config(text='Edit',command= lambda mag = imp: _editMag(mag))
      All_butts[ibut-1][5].config(text='Copy',command= lambda mag = imp: _copyMag(mag))
      All_butts[ibut-1][6].config(text='Plot',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(all_lastmp,all_firstmp,-1)

    _configMagButts()
    WallListMags.update()

  elif mode == 'all_next':

    all_lastmp = all_firstmp + ndmp - 1

    if all_lastmp > NMagPolTot - 1:
      all_lastmp = NMagPolTot -1
      all_firstmp = all_lastmp - ndmp
    #if all_lastmp > NMagPolTot - 1

    ibut = ndmp
    for imp in range(all_lastmp-1,all_firstmp-2,-1):
      mp = MagPolsTot[imp]
      cmag = mp[0][0]
      cmoth = mp[0][1]
      All_butts[ibut-1][0].config(text=cmoth, command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      All_butts[ibut-1][1].config(text=cmag,command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsTot[imp][-1])
      All_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      All_butts[ibut-1][3].configure(text=tb)
      All_butts[ibut-1][4].config(text='Edit',command= lambda mag = imp: _editMag(mag))
      All_butts[ibut-1][4].config(text='Copy',command= lambda mag = imp: _copyMag(mag))
      All_butts[ibut-1][5].config(text='Plot',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(all_lastmp,all_firstmp,-1)

    _configMagButts()
    WallListMags.update()

  #endif mode == 'all'

  # counter, i.e. indices + 1
  try:
    sel_firstmp = sel_lastmp + 1
  except:
    ndmp = 10
    sel_firstmp = 1
  #endtry:

  if mode == 'selected' or iupdatesel == 1:

    if NMagPolSel < 0: return

    if mode == 'selected':
      sel_lastmp = sel_firstmp + ndmp - 1
      sel_firstmp = 1
      sel_lastmp = min(ndmp,NMagPolSel)
    else:
      if sel_lastmp > NMagPolSel - 1:
        sel_lastmp = NMagPolSel -1
        sel_firstmp = sel_lastmp - ndmp
      #endif sel_lastmp > NMagPolSel - 1
      mode == 'selected'
    #endif mode == 'selected'

    WselListMags = Toplevel()
    WselListMags.title("List of Selected Magnetic Items")
    WselListMags.attributes('-topmost', 1)

    sel_butts = []
    sel_frames = []

    sel_fmagmoth = Frame(WselListMags)
    sel_fmoth = Frame(sel_fmagmoth)
    sel_fmag = Frame(sel_fmagmoth)
    sel_fxyz = Frame(sel_fmagmoth)
    sel_fb = Frame(sel_fmagmoth)
    sel_fedi = Frame(sel_fmagmoth)
    sel_fdel = Frame(sel_fmagmoth)
    sel_fcop = Frame(sel_fmagmoth)
    sel_fplot = Frame(sel_fmagmoth)
    sel_fbott = Frame(WselListMags)
    sel_fpn = Frame(WselListMags)

    sel_fmoth.pack(side=LEFT)

    sel_width_ini = WselListMags.winfo_reqwidth()
    sel_width = sel_width_ini

    for isel in range(sel_lastmp):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      buttmoth = Button(sel_fmoth,text=cmoth, bg='white',
                        command= lambda moth=cmoth: _selectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)
      buttmag = Button(sel_fmag,text=cmag, bg='white',
                       command= lambda mag = cmag: _selectMag(mag))
      buttmag.pack(side=TOP,fill=X)
      txyz = str(mp[-1])
      buttxyz = Button(sel_fxyz,text=txyz, bg='white')
      buttxyz.pack(side=TOP,fill=X)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        tb = str(bc) + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1

      buttb = Button(sel_fb,text=tb, bg='white')
      buttb.pack(side=TOP,fill=X)

      buttdel = Button(sel_fdel,text='Delete', bg='white',
                       command= lambda mag = imp: _delmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttedi = Button(sel_fedi,text='Edit', bg='white',
                       command= lambda mag = imp: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttcop = Button(sel_fcop,text='Copy', bg='white',
                       command= lambda mag = imp: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttplot = Button(sel_fplot,text='Plot', bg='white',
                       command= lambda mag = imp: _plotMag(mag))
      buttplot.pack(side=TOP,fill=X)

      sel_butts.append([buttmoth,buttmag,buttxyz,buttb,buttedi,buttcop,buttplot])
    #endfor imp in range( NMagPolSel)

    WselListMags.update()

    sel_width_ini = WselListMags.winfo_width()
    sel_width = sel_width_ini

    if NMagPolSel > ndmp:
      bPrev = Button(sel_fpn,text='Previous',command= lambda key='sel_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(sel_fpn,text='Next',command= lambda key='sel_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolSel > 0

    bClose = Button(sel_fbott,text='Ok',command=_clWselListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    sel_fmag.pack(side=LEFT)
    sel_fmoth.pack(side=LEFT)
    sel_fxyz.pack(side=LEFT)
    sel_fb.pack(side=LEFT)
    sel_fedi.pack(side=LEFT)
    sel_fcop.pack(side=LEFT)
    sel_fdel.pack(side=LEFT)
    sel_fplot.pack(side=LEFT)

    sel_fmagmoth.pack(side=TOP)
    sel_fpn.pack(side=TOP,fill=X)
    sel_fbott.pack(side=TOP,fill=X)

    if iupdatesel == 1:
      sgeo = WselGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WselListMags.geometry(sgeo)
    #endif mode == 'update'
    #x,y = Umaster.winfo_pointerxy()
    #sgeo = '+' + str(x) + '+' + str(y)
    #WselListMags.geometry(sgeo)

    WselListMags.update()
    sel_width = WselListMags.winfo_width()
    #sel_width = sel_fmagmoth.winfo_width()
    sel_width_old = sel_width

  elif mode == 'sel_prev':

    sel_lastmp = sel_firstmp + ndmp - 1

    sel_lastmp = max(sel_lastmp-2*ndmp, ndmp)
    sel_firstmp = max(sel_firstmp-2*ndmp,1)

    ibut = ndmp
    for isel in range(sel_lastmp-1,sel_firstmp-2,-1):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      sel_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      sel_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsSel[imp][-1])
      sel_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      sel_butts[ibut-1][3].configure(text=tb)
      sel_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = imp: _editMag(mag))
      sel_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(sel_lastmp,sel_firstmp,-1)

  elif mode == 'sel_next':

    sel_lastmp = sel_firstmp + ndmp - 1

    if sel_lastmp > NMagPolSel - 1:
      sel_lastmp = NMagPolSel -1
      sel_firstmp = sel_lastmp - ndmp
    #if sel_lastmp > NMagPolSel - 1

    ibut = ndmp
    for isel in range(sel_lastmp-1,sel_firstmp-2,-1):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      sel_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      sel_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsSel[imp][-1])
      sel_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      sel_butts[ibut-1][3].configure(text=tb)
      sel_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = imp: _editMag(mag))
      sel_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(sel_lastmp,sel_firstmp,-1)

  #endif mode == 'sel'

  # counter, i.e. indices + 1
  try:
    del_firstmp = del_lastmp + 1
  except:
    ndmp = 10
    del_firstmp = 1
  #endtry:

  if mode == 'deleted' or iupdatedel == 1:

    if NMagPolDel < 0: return

    if mode == 'deleted':
      del_lastmp = del_firstmp + ndmp - 1
      del_firstmp = 1
      del_lastmp = min(ndmp,NMagPolDel)
    else:
      if del_lastmp > NMagPolDel - 1:
        del_lastmp = NMagPolDel -1
        del_firstmp = del_lastmp - ndmp
      #endif del_lastmp > NMagPolDel - 1
      mode == 'delected'
    #endif mode == 'delected'

    WdelListMags = Toplevel()
    WdelListMags.title("List of Delected Magnetic Items")
    WdelListMags.attributes('-topmost', 1)

    del_butts = []
    del_frames = []

    del_fmagmoth = Frame(WdelListMags)
    del_fmoth = Frame(del_fmagmoth)
    del_fmag = Frame(del_fmagmoth)
    del_fxyz = Frame(del_fmagmoth)
    del_fb = Frame(del_fmagmoth)
    del_fedi = Frame(del_fmagmoth)
    del_fdel = Frame(del_fmagmoth)
    del_fcop = Frame(del_fmagmoth)
    del_fplot = Frame(del_fmagmoth)
    del_fbott = Frame(WdelListMags)
    del_fpn = Frame(WdelListMags)

    del_fmoth.pack(side=LEFT)

    del_width_ini = WdelListMags.winfo_reqwidth()
    del_width = del_width_ini

    for idel in range(del_lastmp):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      buttmoth = Button(del_fmoth,text=cmoth, bg='white',
                        command= lambda moth=cmoth: _delectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)
      buttmag = Button(del_fmag,text=cmag, bg='white',
                       command= lambda mag = cmag: _delectMag(mag))
      buttmag.pack(side=TOP,fill=X)
      txyz = str(mp[-1])
      buttxyz = Button(del_fxyz,text=txyz, bg='white')
      buttxyz.pack(side=TOP,fill=X)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        tb = str(bc) + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1

      buttb = Button(del_fb,text=tb, bg='white')
      buttb.pack(side=TOP,fill=X)

      buttdel = Button(del_fdel,text='Restore', bg='white',
                       command= lambda mag = idel: _resmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttedi = Button(del_fedi,text='Edit', bg='white',
                       command= lambda mag = idel: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttcop = Button(del_fcop,text='Copy', bg='white',
                       command= lambda mag = idel: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttplot = Button(del_fplot,text='Plot', bg='white',
                       command= lambda mag = idel: _plotMag(mag))
      buttplot.pack(side=TOP,fill=X)

      del_butts.append([buttmoth,buttmag,buttxyz,buttb,buttedi,buttcop,buttplot])
    #endfor idel in range( NMagPolDel)

    WdelListMags.update()

    del_width_ini = WdelListMags.winfo_width()
    del_width = del_width_ini

    if NMagPolDel > ndmp:
      bPrev = Button(del_fpn,text='Previous',command= lambda key='del_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(del_fpn,text='Next',command= lambda key='del_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolDel > 0

    bClose = Button(del_fbott,text='Ok',command=_clWdelListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    del_fmag.pack(side=LEFT)
    del_fmoth.pack(side=LEFT)
    del_fxyz.pack(side=LEFT)
    del_fb.pack(side=LEFT)
    del_fedi.pack(side=LEFT)
    del_fcop.pack(side=LEFT)
    del_fdel.pack(side=LEFT)
    del_fplot.pack(side=LEFT)

    del_fmagmoth.pack(side=TOP)
    del_fpn.pack(side=TOP,fill=X)
    del_fbott.pack(side=TOP,fill=X)

    if iupdatedel == 1:
      sgeo = WdelGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WdelListMags.geometry(sgeo)
    #endif mode == 'update'
    #x,y = Umaster.winfo_pointerxy()
    #sgeo = '+' + str(x) + '+' + str(y)
    #WdelListMags.geometry(sgeo)

    WdelListMags.update()
    del_width = WdelListMags.winfo_width()
    #del_width = del_fmagmoth.winfo_width()
    del_width_old = del_width

  elif mode == 'del_prev':

    del_lastmp = del_firstmp + ndmp - 1

    del_lastmp = max(del_lastmp-2*ndmp, ndmp)
    del_firstmp = max(del_firstmp-2*ndmp,1)

    ibut = ndmp
    for idel in range(del_lastmp-1,del_firstmp-2,-1):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      del_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _delectMoth(cmoth))
      del_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = idel: _delectMag(cmag))
      txyz = str(MagPolsDel[idel][-1])
      del_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      del_butts[ibut-1][3].configure(text=tb)
      del_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = idel: _editMag(mag))
      del_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = idel: _plotMag(mag))
      ibut -= 1
    #endfor idel in range(del_lastmp,del_firstmp,-1)

  elif mode == 'del_next':

    del_lastmp = del_firstmp + ndmp - 1

    if del_lastmp > NMagPolDel - 1:
      del_lastmp = NMagPolDel -1
      del_firstmp = del_lastmp - ndmp
    #if del_lastmp > NMagPolDel - 1

    ibut = ndmp
    for idel in range(del_lastmp-1,del_firstmp-2,-1):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      del_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _delectMoth(cmoth))
      del_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = idel: _delectMag(cmag))
      txyz = str(MagPolsDel[idel][-1])
      del_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]

      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      del_butts[ibut-1][3].configure(text=tb)
      del_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = idel: _editMag(mag))
      del_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = idel: _plotMag(mag))
      ibut -= 1
    #endfor idel in range(del_lastmp,del_firstmp,-1)

  #endif mode == 'del'

#enddef _listMags()

# +KEEP,listmags,T=PYTHON.}
+KEEP,uwriteclc,T=PYTHON.
*CMZ :  2.04/13 01/09/2023  10.25.29  by  Michael Scheer
*CMZ :  2.04/06 10/07/2023  10.00.28  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  09.21.13  by  Michael Scheer
*CMZ :  2.03/00 31/08/2022  11.28.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  12.05.08  by  Michael Scheer
*CMZ :  2.02/01 30/04/2021  14.53.27  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  12.54.31  by  Michael Scheer
*CMZ :  2.01/08 30/07/2020  10.49.14  by  Michael Scheer
*CMZ :  1.32/11 14/04/2020  16.26.11  by  Michael Scheer
*CMZ :  1.32/05 25/10/2019  14.13.42  by  Michael Scheer
*-- Author :    Michael Scheer   09/10/2019
+seq,writetrc.
def write_variables(Fclc):

+seq,uguiglobind.

  if not '$Mcoating' in Variables and not '$Mcoating' in Pars:
    Fclc.write("$Mcoating = 0.0 ! Coating of magnets \n")
  #endif not '$PerLen' in Variables

  if not '$PerLen' in Variables and not '$PerLen' in Pars:
    Fclc.write("$PerLen = 0.0 ! Dummy for period-length\n")
  #endif not '$PerLen' in Variables

  for p in Pars:
    ps = p[1:] # strip $
    if '$' + ps in Variables: continue
    Fclc.write("$" + ps + "=" + str(Pars[p]) + "\n")
  #endfor p in Pars

  for vnam in Variables:
    if vnam in DictCalcs: continue
    vcom = DictVcomments[vnam]
    if len(vcom): vcom = ' ! ' + vcom
    Fclc.write("$" + vnam[1:] + "=" + str(Variables[vnam]) + vcom + "\n")
  #endfor p in Pars
  Fclc.write("\n")

  for c in DictUnduColors:
    if c[0] != '$': sc = '$' + c
    else: sc = c
    if sc in Pars or sc in Variables: continue
    s = "$" + c + "=" + str(DictUnduColors[c])
    Fclc.write(s+"\n")
  #endfor c in UnduColors

  for calc in Calcs:
    com = DictVcomments[calc[0]]
    if len(com.strip()): com = '! ' + com
    Fclc.write(calc[0] + " = " + calc[1] + com + "\n")
  #endfor calc

#enddef write_variables

def write_coils(coils,Fclc,kcoil=-1):

  #print("write_coils:",coils,kcoil)
  iexplain = 0

  Fclc.write(NL)

  icoil = -1
  for coil in coils:

    #if calc_var(coil[1][0]) == 0.0: continue

    icoil += 1
    if kcoil > -1 and kcoil != icoil: continue

    key = coil[0][0].upper()

    Fclc.write("\n& Coil\n")
    Fclc.write(coil[0][0] + " " + coil[0][1] + "\n")

    if key == 'RECTWINDINGS':

      if iexplain == 0:
        iexplain = 1
        Fclc.write("* RectWindings:\n")
        Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
        Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad divisions, color-index\n")
      #endif

      scoil = ''
      for s in coil[1]:
        scoil = scoil + ' ' + s
      #endfor s in coil[1]
      Fclc.write(scoil + "\n")

    elif key == 'FILAMENTS':

      Fclc.write(coil[1] + "\n")
      for i in range(int(coil[1])):
        atom = ''
        for dat in coil[2][i]:
          atom += dat + " "
      #endfor
      Fclc.write(atom + "\n")

    elif key == 'FILE':
      Fclc.write(coil[1] + "\n")

    elif key == 'RECTARC' or key == 'RECTBAR' or \
    key == 'THICKWIRE' or key == 'CIRCARC':

      for i in range(2):
        atom = ''
        for dat in coil[1][i]:
          atom += dat + " "
        #endfor
        Fclc.write(atom + "\n")
      #endfor
    #endfor

    else:

      atom = ''
      for dat in coil[1]:
        atom += dat + " "
      #endfor
      Fclc.write(atom + "\n")

    #endif key

  #endfor coil in coils

#enddef write_coils(coils,fileclc)

def write_coils_old(coils,Fclc):

  Fclc = open(Fclc,'a')

  Fclc.write("************\n")
  Fclc.write("\n")
  Fclc.write("Coils\n")

  iexplain = 0

  for coil in coils:

   if iexplain == 0 and coil[0][0].upper() == 'RECTWINDINGS':
     iexplain = 1
     Fclc.write("\n* RectWindings:\n")
     Fclc.write("\n* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
     Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad divisions, color-index\n*")
   #endif

   Fclc.write(coil[0] + "\n")
   scoil = ''
   for s in coil[1]:
     scoil = scoil + ' ' + s
   #endfor s in coil[1]
   Fclc.write(scoil + "\n")
  #endfor coil in coils

  Fclc.write("EndCoils\n")
  Fclc.write("************\n")

  Fclc.close()

#enddef write_coils_old(coils,fileclc)

def uwriteclc(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print("\n\ntrace: uwriteclc:callkey:",callkey)
  print("AppleII_Mode,Hybrid_Mode:",AppleII_Mode,Hybrid_Mode)
+self.

  if yesno(S_IzSym.get()) == 'yes': izsym = 1
  else: izsym = 0
  if yesno(S_IySym.get()) == 'yes': iysym = 1
  else: iysym = 0
  if yesno(S_IxSym.get()) == 'yes': ixsym = 1
  else: ixsym = 0

  blanks = "                                                                                                      "

  mpperi = deepcopy(MagPols)
  mpspec = deepcopy(SpecMagPols)

  Npar = len(Pars)
  Nvar = len(Variables)

  mats = deepcopy(Materials)

  for m in mats:
    if m[1] == 'REC': m[1] = 1
    elif m[1] == 'Iron': m[1] = 2
  #endfor

  Mode = 'Unknown'

  if callkey == 'UNDUMAG':
  #if callkey != "clWfclc":
    if int(AppleII_Mode) > 0:
      Mode = 'AppleII'
      AppleII_Mode = 0
    elif int(Hybrid_Mode) == 1:
      Mode = 'Hybrid'
      Hybrid_Mode = 0
    elif int(Hybrid_Mode) == 2:
      Mode = 'Mirror'
      Hybrid_Mode = 0
  #endif

+self,if=trace.
  debug("trace: uwriteclc:Mode",Mode)
+self.

  if int(AppleII_Mode) > 0:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fmu = open(FileMu,'w')
    Fmu.write(S_Mu_AppleII.get() + " " + S_KsiPerp_AppleII.get() + " ! mu_Par and ksi_Per\n")
    Fmu.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("\n")
    Fclc.write("*! Lines written by undugui.py\n")
    Fclc.write("Mode AppleII\n")
    #Fclc.write("*! AppleII\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Apple II Undulator"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fsav = open("appleii.lst",'w')
    for par in AppleII: Fsav.write(par + " " + str(AppleII[par])+"\n")
    Fsav.close()

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("$nPeriods=" + S_nPer_AppleII.get() + "\n")
    Fclc.write("$LxMag=" + S_Xlen_AppleII.get() + "\n")
    Fclc.write("$LyMag=" + S_Ylen_AppleII.get() + "\n")
    Fclc.write("$LzMag=" + S_Zlen_AppleII.get() + "\n")
    Fclc.write("$AirGap=" + S_AirGap_AppleII.get() + "\n")
    Fclc.write("$Mcoating=" + S_DeadCoat_AppleII.get() + "\n")
    Fclc.write("$FullGap=" + S_FullGap_AppleII.get() + "\n")
    Fclc.write("$matrec=1\n")
    Fclc.write("$mat4=2\n")
    Fclc.write("$mat34=3\n")
    Fclc.write("$Br=" + S_Br_AppleII.get() + "\n")
    Fclc.write("$Mu=" + S_Mu_AppleII.get() + "\n")
    Fclc.write("$KsiPerp=" + S_KsiPerp_AppleII.get() + "\n")
    Fclc.write("$S2Shift=" + S_S2Shift_AppleII.get() + "\n")
    Fclc.write("$S3Shift=" + S_S3Shift_AppleII.get() + "\n")
    Fclc.write("$zSlit=" + S_HorSlit_AppleII.get() + "\n")
    Fclc.write("$xMagCen=" + str(AppleII['xMagCen']) + "\n")
    Fclc.write("$nMagDivX=" + S_NdivX_AppleII.get() + "\n")
    Fclc.write("$nHalfMagDivX=" + S_NdivXHalf_AppleII.get() + "\n")
    Fclc.write("$nMagDivY=" + S_NdivY_AppleII.get() + "\n")
    Fclc.write("$nMagDivZ=" + S_NdivZ_AppleII.get() + "\n")

    Fclc.write("\n")
    Fclc.write("$CurrentByCoil = 0.0\n")
    Fclc.write("$FullGapByCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$zCoilByCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutByCoil = 60.\n")
    Fclc.write("$zLenInByCoil = 40.\n")
    Fclc.write("$zLenOutByCoil = 50.\n")
    Fclc.write("$HeightByCoil = 30.\n")
    Fclc.write("\n")
    Fclc.write("$CurrentBzCoil = 0.0\n")
    Fclc.write("$FullGapBzCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$yCoilBzCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutBzCoil = 60.\n")
    Fclc.write("$zLenInBzCoil = 40.   ! Consider rotation!!\n")
    Fclc.write("$zLenOutBzCoil = 50.  ! Consider rotation!!\n")
    Fclc.write("$HeightBzCoil = 30.   ! Consider rotation!!\n")
    Fclc.write("\n")

    Fclc.write("$nDivHeightCoil = 1\n")
    Fclc.write("$nDivWindCoil = 1\n")
    Fclc.write("$nDivArcCoil = 6\n")

    Fclc.write("$FillingCoil = 0.5\n\n")

    for c in DictUnduColors:
      s = "$" + c
      if not s in Variables:
        s = "$" + c + "=" + str(DictUnduColors[c])
        Fclc.write(s+"\n")
      #endif
    #endfor c in UnduColors

    Fclc.write("\n$E1Br = $Br / 4.\n")
    Fclc.write("$E2Br = - $Br * 3. / 4.\n")
    Fclc.write("$PerLen = 4. * ( $LxMag + $AirGap )\n")
    Fclc.write("$HalfGap = $FullGap / 2.\n")
    Fclc.write("$HalfPerLen = $PerLen / 2.\n")
    Fclc.write("$LxHalfMag = $LxMag / 2.\n")
    Fclc.write("$yMagCen = - $HalfGap - $LyMag / 2.\n")
    Fclc.write("$zMagCen = - $LzMag / 2. - $zSlit / 2.\n")
    Fclc.write("$hS3Shift = $S3Shift / 2.\n")
    Fclc.write("$hS2Shift = $S2Shift / 2.\n")

    Fclc.write("$x1LRMagCen = $xMagCen + $LxHalfMag / 2. - $hS3Shift - $hS2Shift\n")
    Fclc.write("$x2LRMagCen = $x1LRMagCen + $LxHalfMag / 2. + $AirGap + $LxMag / 2.\n")
    Fclc.write("$x3LRMagCen = $x2LRMagCen + $LxHalfMag + $AirGap + $LxHalfMag / 2.\n")
    Fclc.write("$x4LRMagCen = $x3LRMagCen + $LxHalfMag\n")
    Fclc.write("$x5LRMagCen = $x4LRMagCen + $LxHalfMag / 2. + $AirGap + $LxMag / 2.\n")
    Fclc.write("$x6LRMagCen = $x5LRMagCen + $LxMag / 2. + $AirGap + $LxHalfMag / 2.\n")

    Fclc.write("$x1LLMagCen = $x1LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x2LLMagCen = $x2LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x3LLMagCen = $x3LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x4LLMagCen = $x4LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x5LLMagCen = $x5LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x6LLMagCen = $x6LRMagCen + $S3Shift + $S2Shift\n")

    Fclc.write("$x1ULMagCen = $x1LRMagCen\n")
    Fclc.write("$x2ULMagCen = $x2LRMagCen\n")
    Fclc.write("$x3ULMagCen = $x3LRMagCen\n")
    Fclc.write("$x4ULMagCen = $x4LRMagCen\n")
    Fclc.write("$x5ULMagCen = $x5LRMagCen\n")
    Fclc.write("$x6ULMagCen = $x6LRMagCen\n")

    Fclc.write("$x1URMagCen = $x1LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x2URMagCen = $x2LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x3URMagCen = $x3LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x4URMagCen = $x4LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x5URMagCen = $x5LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x6URMagCen = $x6LLMagCen - $S2Shift * 2.\n")

    Fclc.write("$yUMagCen = - $yMagCen\n")

    Fclc.write("$zLLMagCen = - $zMagCen\n")
    Fclc.write("$zULMagCen = - $zMagCen\n")

    Fclc.write("$yModCen = - 2. * $yMagCen\n")
    Fclc.write("$zModCen = - 2. * $zMagCen\n")

    Fclc.write("\n* Upstream endpoles\n\n")

    Fclc.write("$x1E1LLMagCen = $x1LLMagCen - $PerLen\n")
    Fclc.write("$x2E1LLMagCen = $x2LLMagCen - $PerLen\n")
    Fclc.write("$x3E1LLMagCen = $x3LLMagCen - $PerLen\n")

    Fclc.write("$x1E1ULMagCen = $x1ULMagCen - $PerLen\n")
    Fclc.write("$x2E1ULMagCen = $x2ULMagCen - $PerLen\n")
    Fclc.write("$x3E1ULMagCen = $x3ULMagCen - $PerLen\n")

    Fclc.write("$x1E1LRMagCen = $x1LRMagCen - $PerLen\n")
    Fclc.write("$x2E1LRMagCen = $x2LRMagCen - $PerLen\n")
    Fclc.write("$x3E1LRMagCen = $x3LRMagCen - $PerLen\n")

    Fclc.write("$x1E1URMagCen = $x1URMagCen - $PerLen\n")
    Fclc.write("$x2E1URMagCen = $x2URMagCen - $PerLen\n")
    Fclc.write("$x3E1URMagCen = $x3URMagCen - $PerLen\n")

    Fclc.write("$x1E2LLMagCen = $x1LLMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2LLMagCen = $x2LLMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2LLMagCen = $x3LLMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2ULMagCen = $x1ULMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2ULMagCen = $x2ULMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2ULMagCen = $x3ULMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2LRMagCen = $x1LRMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2LRMagCen = $x2LRMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2LRMagCen = $x3LRMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2URMagCen = $x1URMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2URMagCen = $x2URMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2URMagCen = $x3URMagCen - $HalfPerLen\n")

    Fclc.write("\n* Downstream endpoles\n\n")

    Fclc.write("$dxED0 = ( $nPeriods + 1.0 ) * $PerLen\n")
    Fclc.write("$dxED1 = ( $nPeriods + 2.0 ) * $PerLen\n")
    Fclc.write("$dxED2 = ( $nPeriods + 1.5 ) * $PerLen\n")

    Fclc.write("$x1D0LLMagCen = $x1E1LLMagCen + $dxED0\n")
    Fclc.write("$x2D0LLMagCen = $x2E1LLMagCen + $dxED0\n")
    Fclc.write("$x3D0LLMagCen = $x3E1LLMagCen + $dxED0\n")

    Fclc.write("$x1D0LRMagCen = $x1E1LRMagCen + $dxED0\n")
    Fclc.write("$x2D0LRMagCen = $x2E1LRMagCen + $dxED0\n")
    Fclc.write("$x3D0LRMagCen = $x3E1LRMagCen + $dxED0\n")

    Fclc.write("$x1D0ULMagCen = $x1E1ULMagCen + $dxED0\n")
    Fclc.write("$x2D0ULMagCen = $x2E1ULMagCen + $dxED0\n")
    Fclc.write("$x3D0ULMagCen = $x3E1ULMagCen + $dxED0\n")

    Fclc.write("$x1D0URMagCen = $x1E1URMagCen + $dxED0\n")
    Fclc.write("$x2D0URMagCen = $x2E1URMagCen + $dxED0\n")
    Fclc.write("$x3D0URMagCen = $x3E1URMagCen + $dxED0\n")

    Fclc.write("$x1D1LLMagCen = $x1E1LLMagCen + $dxED1\n")
    Fclc.write("$x2D1LLMagCen = $x2E1LLMagCen + $dxED1\n")
    Fclc.write("$x3D1LLMagCen = $x3E1LLMagCen + $dxED1\n")

    Fclc.write("$x1D1LRMagCen = $x1E1LRMagCen + $dxED1\n")
    Fclc.write("$x2D1LRMagCen = $x2E1LRMagCen + $dxED1\n")
    Fclc.write("$x3D1LRMagCen = $x3E1LRMagCen + $dxED1\n")

    Fclc.write("$x1D1ULMagCen = $x1E1ULMagCen + $dxED1\n")
    Fclc.write("$x2D1ULMagCen = $x2E1ULMagCen + $dxED1\n")
    Fclc.write("$x3D1ULMagCen = $x3E1ULMagCen + $dxED1\n")

    Fclc.write("$x1D1URMagCen = $x1E1URMagCen + $dxED1\n")
    Fclc.write("$x2D1URMagCen = $x2E1URMagCen + $dxED1\n")
    Fclc.write("$x3D1URMagCen = $x3E1URMagCen + $dxED1\n")

    Fclc.write("$x1D2LLMagCen = $x1E1LLMagCen + $dxED2\n")
    Fclc.write("$x2D2LLMagCen = $x2E1LLMagCen + $dxED2\n")
    Fclc.write("$x3D2LLMagCen = $x3E1LLMagCen + $dxED2\n")

    Fclc.write("$x1D2LRMagCen = $x1E1LRMagCen + $dxED2\n")
    Fclc.write("$x2D2LRMagCen = $x2E1LRMagCen + $dxED2\n")
    Fclc.write("$x3D2LRMagCen = $x3E1LRMagCen + $dxED2\n")

    Fclc.write("$x1D2ULMagCen = $x1E1ULMagCen + $dxED2\n")
    Fclc.write("$x2D2ULMagCen = $x2E1ULMagCen + $dxED2\n")
    Fclc.write("$x3D2ULMagCen = $x3E1ULMagCen + $dxED2\n")

    Fclc.write("$x1D2URMagCen = $x1E1URMagCen + $dxED2\n")
    Fclc.write("$x2D2URMagCen = $x2E1URMagCen + $dxED2\n")
    Fclc.write("$x3D2URMagCen = $x3E1URMagCen + $dxED2\n")

    Fclc.write("$colormag = $red\n")
    Fclc.write("$e1colormag = $magenta\n")
    Fclc.write("$e2colormag = $green\n")

    Fclc.write("\n")
    Fclc.write("$RectRiByCoil = $zLenOutByCoil - $zLenInByCoil\n")
    Fclc.write("$nWindingByCoil = ( $zLenOutByCoil - $zLenInByCoil ) * $HeightByCoil\n")
    Fclc.write("$xCoilByCoilDS = ( $nPeriods + 2. ) * $PerLen + $xLenOutByCoil\n")
    Fclc.write("$xCoilByCoilUS = - $xCoilByCoilDS\n")
    Fclc.write("$yCoilTop = ( $FullGapByCoil + $HeightByCoil ) / 2.\n")
    Fclc.write("$yCoilBottom = - $yCoilTop\n")
    Fclc.write("$RectRiBzCoil = $zLenOutBzCoil - $zLenInBzCoil\n")
    Fclc.write("$nWindingBzCoil = ( $zLenOutBzCoil - $zLenInBzCoil ) * $HeightBzCoil\n")
    Fclc.write("$xCoilBzCoilDS = $xCoilByCoilDS + $xLenOutByCoil + $xLenOutBzCoil\n")
    Fclc.write("$xCoilBzCoilUS = - $xCoilBzCoilDS\n")
    Fclc.write("$zBzCoilRight = ( $FullGapBzCoil + $HeightBzCoil ) / 2.\n")
    Fclc.write("$zBzCoilLeft = - $zBzCoilRight\n")
    Fclc.write("$nCoilColor = $red\n")

    if Nvar > 0:
      Fclc.write("\n")
      Fclc.write("* Additional variables\n")
      Fclc.write("\n")
      for v in Variables:
        vnd = v.split('$')[1]
        if not v in VAppleII and not vnd in AppleII and not vnd in Pars:
          Fclc.write(v + " = " + str(Variables[v]) + "\n")
        #if not v in VAppleII
      #endfor p in Pars
    #endif Npar > 0

    Fclc.write("\n")
    Fclc.write("*---------- Magnets\n")
    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag1 HMag1 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag2 Mag2 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag3 HMag3 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x3LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag4 HMag4 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x4LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag5 Mag5 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x5LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag6 HMag6 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x6LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag7 HMag7 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag8 Mag8 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag9 HMag9 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x3URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag10 HMag10 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag11 Mag11 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag12 HMag12 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag13 HMag13 $colormag               !key, name, mother, color\n")
    Fclc.write("$x1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag14 Mag14 $colormag                !key, name, mother, color\n")
    Fclc.write("$x2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag15 HMag15 $colormag               !key, name, mother, color\n")
    Fclc.write("$x3LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag16 HMag16 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag17 Mag17 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag18 HMag18 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag19 HMag19 $colormag               !key, name, mother, color\n")
    Fclc.write("$x1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag20 Mag20 $colormag                !key, name, mother, color\n")
    Fclc.write("$x2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag21 HMag21 $colormag               !key, name, mother, color\n")
    Fclc.write("$x3LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag22 HMag22 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag23 Mag23 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag24 HMag24 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag25 Mag25 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag26 Mag26 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x2E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag27 HMag27 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x3E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag28 HMag28 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x1E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag29 Mag29 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x2E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag30 HMag30 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x3E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag31 HMag31 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag32 Mag32 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x2E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag33 HMag33 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x3E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag34 HMag34 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag35 Mag35 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x2E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag36 HMag36 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x3E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag37 HMag37 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag38 Mag38 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag39 HMag39 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag40 HMag40 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag41 Mag41 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag42 HMag42 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag43 HMag43 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag44 Mag44 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag45 HMag45 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag46 HMag46 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag47 Mag47 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag48 HMag48 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag49 HMag49 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag50 Mag50 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag51 HMag51 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag52 HMag52 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag53 Mag53 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag54 HMag54 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag55 HMag55 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag56 Mag56 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag57 HMag57 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag58 HMag58 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag59 Mag59 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag60 HMag60 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag61 HMag61 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag62 Mag62 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag63 HMag63 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag64 HMag64 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag65 Mag65 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag66 HMag66 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag67 HMag67 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag68 Mag68 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag69 HMag69 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag70 HMag70 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag71 Mag71 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag72 HMag72 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag73 HMag73 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag74 Mag74 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag75 HMag75 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag76 HMag76 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag77 Mag77 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag78 HMag78 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag79 HMag79 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag80 Mag80 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag81 HMag81 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag82 HMag82 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag83 Mag83 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag84 HMag84 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.            !offset of module\n")
    Fclc.write("$nPeriods           !number of arrays within module\n")
    Fclc.write("$PerLen 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.            !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write("3                       ! number of material files\n")
    Fclc.write("1 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write("2 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write("3 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write(" \n")

    Fclc.write("\n")
    Fclc.write("Coils\n*\n")
    Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
    Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad\n")
    Fclc.write("* divisions, color-index\n")

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilUS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilDS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilUS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilDS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.close()

    shutil.copyfile(FileCLC,"undumag_AppleII.clc")
    print("\n--- ",FileCLC," written and copyied to undumag_AppleII.clc ---")

  elif int(Hybrid_Mode) == 2:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')
    Fsav = open('mirror.lst','w')

    Fclc.write("\n")
    Fclc.write("* Lines written by undugui.py\n")
    Fclc.write("Mode Mirror\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Planar Hybrid Undulator (Simulated Infinite Length)"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("\n")

    Fclc.write("$PerLen = " + str(eval(Mirror["PerLen_Mirror"])) + "\n")
    Fclc.write("$Mcoating=" + str(Mirror["Mcoating_Mirror"]) + " ! coating of REC magnets\n")
    Fclc.write("\n")

    for par in Mirror:

      Fsav.write(par + " " + str(Mirror[par])+"\n")

      if par == "Mat_Mirror": continue
      if par == "MatPol_Mirror": continue
      if par == "Mcoating_Mirror": continue
      if par == "PerLen_Mirror": continue

      if len(str(Mirror[par]).split()) > 1:
        sline = "$" + par + " = '" + str(Mirror[par]) + "'\n"
      else:
        sline = "$" + par + " = " + str(Mirror[par]) + NL
      #endif
      Fclc.write(sline)

    #endfor par in Mirror

    Fsav.close()

    Fclc.write("\n")

    sline = "$PerLen_Mirror = $PerLen" + NL
    Fclc.write(sline)
    sline = "$Mcoating_Mirror = $Mcoating" + NL
    Fclc.write(sline)

    Fclc.write("\n")
    Fclc.write("\n$ixSym="+str(ixsym))
    Fclc.write("\n$iySym="+str(iysym))
    Fclc.write("\n$izSym="+str(izsym))
    Fclc.write("\n")

    Fclc.write("\n")
    for c in DictUnduColors:
      s = "$" + c + "=" + str(DictUnduColors[c])
      Fclc.write(s+"\n")
    #endfor c in UnduColors

    Fclc.write("\n")
    for var in VMirror:
      svar = str(VMirror[var])
      if svar == '$nPeriods_Mirror' or \
      svar == '$Mcoating_Mirror' or \
      svar == '$PerLen_Mirror': continue
      else:
        sline = var + " = " + svar + NL
      #endif
      Fclc.write(sline)
    #endfor var in VMirror

    Fclc.write("\n")
    Fclc.write("*------ Magnets and Poles\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockDsChamf mag Mag $ColorMag                                                                   !key, name, mother, color\n")
    Fclc.write("$xMagHalf $yMag $zMagHalf                                                                        !position\n")
    Fclc.write("$Br_Mirror 1. 0. 0. $RECIndex_Mirror                                                             !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMagHalf $LyMag_Mirror $LzMagHalf $ChamfMag_Mirror                                             !dimensions \n")
    Fclc.write("$nDivX_MagHalf $nDivY_Mag_Mirror $nDivZ_MagHalf_Mirror $FracDivY_Mag_Mirror $FracDivZ_Mag_Mirror !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockUsChamf pol Pol $ColorPol                                                                   !key, name, mother, color\n")
    Fclc.write("$xPolHalf $yPol $zPolHalf                                                                        !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                !material index\n")
    Fclc.write("$LxPolHalf $LyPol $LzPolHalf $ChamfPol_Mirror                                                    !dimensions \n")
    Fclc.write("$nDivX_PolHalf $nDivY_Pol_Mirror $nDivZ_PolHalf_Mirror $FracDivY_Pol_Mirror $FracDivZ_Pol_Mirror !segmentation\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("*------ Mirror\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("Block mirror Mirror $ColorMir                                                                   !key, name, mother, color\n")
    Fclc.write("$xMirror $yMirrorHalf $zMirrorHalf                                                                        !position\n")
    Fclc.write("$IronIndex_Mirror                                                                                !material index\n")
    Fclc.write("$LxMirror $LyMirrorHalf $LzMirrorHalf                                                   !dimensions \n")
    Fclc.write("$nMirDivX $nMirDivY $nMirDivZ $FracDivMirY $FracDivMirZ !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.                   !offset of module\n")
    Fclc.write("1                          !number of arrays within module\n")
    Fclc.write("$PerLen_Mirror 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.                   !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")
    Fclc.write(" \n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write(str(Nmat) + "            ! number of material files\n")

    for imat in range(Nmat):
      mat = mats[imat]
      if imat == int(Mirror["RECIndex_Mirror"]) - 1:
        mat[4] = str(Mirror["mu_Mirror"]) + " " + str(Mirror["KsiPerp_Mirror"]) + "  ! mu_Par and ksi_Perp\n"
      #endif
      Fclc.write(str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3] + "\n")
      if mat[2] == '1':
        Fmat = open(str(mat[3]),'w')
        for line in mat[4]: Fmat.write(line)
        Fmat.close()
      #endif mat[2] == '1'
    #endfor imat in range(Nmat)

    Fclc.close()

    try:
      stat = shutil.copyfile(FileCLC,"undumag_Mirror.clc")
      print("\n--- ",FileCLC," written and copyied to undumag_Mirror.clc ---")
    except:
      print("\n--- ",FileCLC," written, but not copied to  undumag_Mirror.clc! Is it a link?  ---")
    #endif

  elif int(Hybrid_Mode) > 0:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("\n")
    Fclc.write("* Lines written by undugui.py\n")
    Fclc.write("Mode Hybrid\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Planar Hybrid Undulator"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fsav = open("hybrid.lst",'w')
    for par in Hybrid: Fsav.write(par + " " + str(Hybrid[par])+"\n")
    Fsav.close()

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("\n")

    Fclc.write("$PerLen = " + str(eval(Hybrid["PerLen_Hybrid"])) + "\n")
    Fclc.write("$nPeriods = " + str(eval(Hybrid["nPeriods_Hybrid"])) + "\n")
    Fclc.write("$Mcoating=" + str(Hybrid["Mcoating_Hybrid"]) + " ! coating of REC magnets\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("\n$ixSym="+str(ixsym))
    Fclc.write("\n$iySym="+str(iysym))
    Fclc.write("\n$izSym="+str(izsym))
    Fclc.write("\n")

    for par in Hybrid:
      if par == "MatPol_Hybrid": continue
      if par == "nPeriods_Hybrid": continue
      if par == "Mcoating_Hybrid": continue
      if par == "PerLen_Hybrid": continue
      if len(str(Hybrid[par]).split()) > 1:
        sline = "$" + par + " = '" + str(Hybrid[par]) + "'\n"
      else:
        sline = "$" + par + " = " + str(Hybrid[par]) + NL
      #endif
      Fclc.write(sline)
    #endfor par in Hybrid

    Fclc.write("\n")
    Fclc.write("$CurrentByCoil = 0.0\n")
    Fclc.write("$FullGapByCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$zCoilByCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutByCoil = 60.\n")
    Fclc.write("$zLenInByCoil = 40.\n")
    Fclc.write("$zLenOutByCoil = 50.\n")
    Fclc.write("$HeightByCoil = 30.\n")
    Fclc.write("\n")
    Fclc.write("$CurrentBzCoil = 0.0\n")
    Fclc.write("$FullGapBzCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$yCoilBzCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutBzCoil = 60.\n")
    Fclc.write("$zLenInBzCoil = 40.   ! Consider rotation!!\n")
    Fclc.write("$zLenOutBzCoil = 50.  ! Consider rotation!!\n")
    Fclc.write("$HeightBzCoil = 30.  ! Consider rotation!!\n")
    Fclc.write("\n")

    Fclc.write("$nDivHeightCoil = 1\n")
    Fclc.write("$nDivWindCoil = 1\n")
    Fclc.write("$nDivArcCoil = 6\n")

    Fclc.write("$FillingCoil = 0.5\n")

    Fclc.write("\n")

    for c in DictUnduColors:
      s = "$" + c + "=" + str(DictUnduColors[c])
      Fclc.write(s+"\n")
    #endfor c in UnduColors

    sline = "$PerLen_Hybrid = $PerLen" + NL
    Fclc.write(sline)
    sline = "$nPeriods_Hybrid = $nPeriods" + NL
    Fclc.write(sline)
    sline = "$Mcoating_Hybrid = $Mcoating" + NL
    Fclc.write(sline)

    for var in VHybrid:
      svar = str(VHybrid[var])
      if svar == '$nPeriods_Hybrid' or \
      svar == '$Mcoating_Hybrid' or \
      svar == '$PerLen_Hybrid': continue
      else:
        sline = var + " = " + svar + NL
      #endif
      Fclc.write(sline)
    #endfor var in VHybrid

    Fclc.write("\n")
    Fclc.write("$RectRiByCoil = $zLenOutByCoil - $zLenInByCoil\n")
    Fclc.write("$nWindingByCoil = ( $zLenOutByCoil - $zLenInByCoil ) * $HeightByCoil\n")
    Fclc.write("$xCoilByCoilDS = ( $nPeriods + 2. ) * $PerLen + $xLenOutByCoil\n")
    Fclc.write("$xCoilByCoilUS = - $xCoilByCoilDS\n")
    Fclc.write("$yCoilTop = ( $FullGapByCoil + $HeightByCoil ) / 2.\n")
    Fclc.write("$yCoilBottom = - $yCoilTop\n")
    Fclc.write("$RectRiBzCoil = $zLenOutBzCoil - $zLenInBzCoil\n")
    Fclc.write("$nWindingBzCoil = ( $zLenOutBzCoil - $zLenInBzCoil ) * $HeightBzCoil\n")
    Fclc.write("$xCoilBzCoilDS = $xCoilByCoilDS + $xLenOutByCoil + $xLenOutBzCoil\n")
    Fclc.write("$xCoilBzCoilUS = - $xCoilBzCoilDS\n")
    Fclc.write("$zBzCoilRight = ( $FullGapBzCoil + $HeightBzCoil ) / 2.\n")
    Fclc.write("$zBzCoilLeft = - $zBzCoilRight\n")
    Fclc.write("$nCoilColor = $red\n")

    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("*------ Magnets\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockDsChamf pol3_H Pol3_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xHalfPol3_Hybrid $yPol_Hybrid $zPol_Hybrid                                                         !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockChamf mag2_H Mag2_H $ColorMag_Hybrid                                                            !key, name, mother, color\n")
    Fclc.write("$xMag2_Hybrid $yMag_Hybrid $zMag_Hybrid                                                             !position\n")
    Fclc.write("$Br_Hybrid -1. 0. 0. $RECIndex_Hybrid                                                               !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyMag_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockChamf pol2_H Pol2_H $ColorPol_Hybrid                                                           !key, name, mother, color\n")
    Fclc.write("$xPol2_Hybrid $yPol_Hybrid $zPol_Hybrid                                                             !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockChamf mag1_H Mag1_H $ColorMag_Hybrid                                                            !key, name, mother, color\n")
    Fclc.write("$xMag1_Hybrid $yMag_Hybrid $zMag_Hybrid                                                             !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyMag_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockDsChamf pol1_H Pol1_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xHalfPol1_Hybrid $yPol_Hybrid $zPol_Hybrid                                                         !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.                   !offset of module\n")
    Fclc.write("$nPeriods_Hybrid           !number of arrays within module\n")
    Fclc.write("$PerLen_Hybrid 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.                   !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")
    Fclc.write(" \n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockUsChamf epolh_H EPol_H $ColorPol_Hybrid                                                        !key, name, mother, color\n")
    Fclc.write("$xEndPolHalf_Hybrid $yPol_Hybrid $zPol_Hybrid                                                       !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag1_H EMag1_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag1_Hybrid $yEndMag1_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag1_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockChamf epol1_H EPol1_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndPol1_Hybrid $yEndPol1_Hybrid $zPol_Hybrid                                                      !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyEndPol1_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag2_H EMag2_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag2_Hybrid $yEndMag2_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid -1. 0. 0. $RECIndex_Hybrid                                                               !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag2_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockChamf epol2_H EPol2_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndPol2_Hybrid $yEndPol2_Hybrid $zPol_Hybrid                                                      !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyEndPol2_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag3_H EMag3_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag3_Hybrid $yEndMag3_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag3_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write(str(Nmat) + "            ! number of material files\n")

    for imat in range(Nmat):
      mat = mats[imat]
      if imat == int(Hybrid["RECIndex_Hybrid"]) - 1:
        mat[4] = str(Hybrid["mu_Hybrid"]) + " " + str(Hybrid["KsiPerp_Hybrid"]) + "  ! mu_Par and ksi_Perp\n"
      Fclc.write(str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3] + "\n")
      if mat[2] == '1':
        Fmat = open(str(mat[3]),'w')
        for line in mat[4]: Fmat.write(line)
        Fmat.close()
      #endif mat[2] == '1'
    #endfor imat in range(Nmat)

    Fclc.write("\n")
    Fclc.write("Coils\n*\n")
    Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
    Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad\n")
    Fclc.write("* divisions, color-index\n")

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilUS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilDS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilUS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilDS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("EndCoils\n")
    Fclc.write("*************\n")

    Fclc.close()

    try:
      stat = shutil.copyfile(FileCLC,"undumag_Hybrid.clc")
      print("\n--- ",FileCLC," written and copyied to undumag_Hybrid.clc ---")
    except:
      print("\n--- ",FileCLC," written, but not copied to  undumag_Hybrid.clc! Is it a link?  ---")
    #endif

  else:

    #if key == 'UNDUMAG':
    #if Mode == 'Hybrid':
    #Hybrid_Mode=1
    #endif

    # Other Modes

    if Nmodul <= 0 and NMagPolTot > NspecMagPol:
      wError("No modules defined, but periodic items found, cannot write geometry file!")
      return
    #endif Nmodul <= 0 and NMagPolTot > NspecMagPol:

    if Nmat <= 0 and NMagPolTot > 0:
      wError("No material defined, cannot write geometry file!")
      return
    #endif Nmat <= 0

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("*! Lines written by undugui.py\n")
    Fclc.write("Mode " + Mode + "\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    Fclc.write(Ucomment.strip() + "\n")

    write_variables(Fclc)

    if NMagPolTot:
      Fclc.write("\n")
      Fclc.write("* Magnets \n")
      Fclc.write("\n")
    #endif

    #debug("uwriteclc")
    imag = 0

    for mp in MagPolsTot:

      imag += 1

      ckey = "\n& "
      if mp[2] == 'yes' or mp[2] == 1: ckey = "\n& Special_"

      if mp[1] == 'Iron': ckey += "Pole\n"
      else: ckey += "Magnet\n"

      cnam = mp[0][0]
      cmoth = mp[0][1]
      key = mp[3]
      cen = mp[4]
      vmat = mp[5]

      scol = vmat[5]
      if scol in DictUnduColors: col = str(DictUnduColors[scol])
      else: col = scol

      Fclc.write(ckey)

      line = key + " " + cnam + " " + cmoth + " " + col
      comm = "!key, name, mother, color\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      line = cen[0] + " " + cen[1] + " " + cen[2]
      comm = "!position\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      if mp[1] == 'Iron':
        line = vmat[4]
        comm = " !material index\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
      else:
        line = vmat[0] + " " + vmat[1] + " " + vmat[2] + " " + vmat[3] + " " + vmat[4]
        comm = "!Bc, direction of magnetization, material index\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
      #endif

      if key != 'File' and key != 'Corners':

        siz = mp[6]
        div = mp[7]

        line = siz[0] + " " + siz[1] + " " + siz[2] + " " + siz[3]
        comm = "!dimensions\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        line = div[0] + " " + div[1] + " " + div[2] + " " + div[3] + " " + div[4]
        comm = "!segmentation\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      else:

        ncorn = mp[6]
        corns = mp[7]
        div = mp[8]

        line = div[0] + " " + div[1] + " " + div[2] + " " + div[3] + " " + div[4]
        comm = "!segmentation\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        line = ncorn
        comm = "!number of corners\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        for corn in corns:
          line = str(corn[0]) + " " + str(corn[1]) + " " + str(corn[2])
          comm = "!x y z\n"
          n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
        #endfor

      #endif

    #endfor

    for m in Modules:
      Fclc.write("\n& Module\n")
      line = m[0]
      comm = "!offset of module\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[1]
      comm = "!number of arrays within module\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[2]
      comm = "!spacing and direction of arrangement, rotation angle\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[3]
      comm = "!scaling and symmetry of magnetization vector\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
    #endfor

    if Nmat:

      Fclc.write("\n& Materials\n")

      line = str(Nmat)
      comm = "! number of material files\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      for imat in range(Nmat):

        mat = mats[imat]
        line = str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3]
        comm = "! number, type, mode, and  filename\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        if mat[2] == '1':
          Fmat = open(str(mat[3]),'w')
          for line in mat[4]: Fmat.write(line)
          Fmat.close()
        #endif mat[2] == '1'

      #endfor imat in range(Nmat)

    #endif Nmat

    if len(Coils): write_coils(Coils,Fclc)

    Fclc.close()

  #endif int(AppleII_Mode) > 0

  #print(TransRotCop)
  if len(TransRotCop) > 0:
    uwritetrc(FileCLC)
  #endif

+self,if=trace.
  print(NL,"trace:: Leaving uwriteclc('",callkey,"')")
+self.
#enddef uwriteclc()
+KEEP,unduplgeo,T=PYTHON.
*CMZ :  2.04/14 04/09/2023  13.21.19  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  15.45.12  by  Michael Scheer
*CMZ :  2.04/09 17/08/2023  15.19.59  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  13.14.39  by  Michael Scheer
*CMZ :  2.04/00 24/12/2022  11.49.32  by  Michael Scheer
*CMZ :  2.03/00 14/07/2022  12.03.10  by  Michael Scheer
*CMZ :  2.02/02 04/07/2022  14.31.24  by  Michael Scheer
*CMZ :  2.02/01 26/01/2022  12.39.30  by  Michael Scheer
*CMZ :  2.02/00 24/03/2021  15.14.49  by  Michael Scheer
*-- Author :    Michael Scheer   26/10/2020

+seq,UnduColors.
+seq,ureadclc.

def undu_coil(ntup='ncoil', fcoil='undumag.fil'):
  if fexist(fcoil):
    ncoil = ncread(ntup,"itype:curr:x1:y1:z1:x2:y2:z2:icol:num:ncoil",fcoil)
    if Nlines > 0: ninfo(ncoil)
  else:
    ncoil = ncre(ntup,"itype:curr:x1:y1:z1:x2:y2:z2:icol:num:ncoil")
  #endif
  return ncoil
#enddef undu_coil

def undu_plot_coil_4x4(ntup='!', fcoil='!'):
  zone(2,2)
  undu_plot_coil('!','!','3d',0)
  nextzone()
  undu_plot_coil('!','!','top',0)
  nextzone()
  undu_plot_coil('!','!','side',0)
  nextzone()
  undu_plot_coil('!','!','beam',0)
#enddef

def undu_plot_coil_top(ntup='!', fcoil='!',isame=0):
  undu_plot_coil('!','!','top',isame)
def undu_plot_coil_side(ntup='!', fcoil='!',isame=0):
  undu_plot_coil('!','!','side',isame)
def undu_plot_coil_beam(ntup='!', fcoil='!',isame=0):
  undu_plot_coil('!','!','beam',isame)

def undu_plot_coil(ntup='!', fcoil='!', mode='3d', isame=0):

  if ntup == '!': ntup = 'ncoil'
  if fcoil == '!': fcoil = 'undumag.fil'
  if not nexist(ntup): ncoil = undu_coil(ntup,fcoil)
  else: ncoil = nget("ncoil")

  if not len(ncoil): return

  #print(ntup,fcoil,mode)

  xmin = min(ncoil.x1.min(),ncoil.x2.min())
  xmax = max(ncoil.x1.max(),ncoil.x2.max())
  ymin = min(ncoil.y1.min(),ncoil.y2.min())
  ymax = max(ncoil.y1.max(),ncoil.y2.max())
  zmin = min(ncoil.z1.min(),ncoil.z2.min())
  zmax = max(ncoil.z1.max(),ncoil.z2.max())

  d = (xmax-xmin)*0.1
  xmin -= d
  xmax += d
  if xmin == xmax:
    xmin = xmin - 1.0
    xmax = xmax + 1.0
  #endif

  d = (ymax-ymin)*0.1
  ymin -= d
  ymax += d
  if ymin == ymax:
    ymin = ymin - 1.0
    ymax = ymax + 1.0
  #endif

  d = (zmax-zmin)*0.1
  zmin -= d
  zmax += d
  if zmin == zmax:
    zmin = zmin - 1.0
    zmax = zmax + 1.0
  #endif

  yzmin = min(ymin,zmin)
  yzmax = max(ymax,zmax)

  if mode.lower() == 'xz' or mode.lower() == 'top':

    if not isame:
      null(xmin,xmax,zmin,zmax)
      txyz("Coil","x/mm","z/mm")
    #endif

    # Exterm langsam!!     for w in ncoil.itertuples():
    #        Ax.plot([w.x1,w.x2],[w.z1,w.z2],UnduColors[w.icol])
    #for w in ncoil.itertuples()

    for icoil in range(ncoil.ncoil.max()):
      coil = ncoil.query("ncoil=="+str(icoil+1))
      for w in coil.itertuples():
        Ax.plot([w.x1,w.x2],[w.z1,w.z2],UnduColors[w.icol])
    #endfor icoil in range(ncoil.num.max()+1)

  elif mode.lower() == 'xy' or mode.lower() == 'side':

    if not isame:
      null(xmin,xmax,ymin,ymax)
      txyz("Coil","x/mm","y/mm")
    #endif

    for icoil in range(ncoil.ncoil.max()):
      coil = ncoil.query("ncoil=="+str(icoil+1))
      for w in coil.itertuples():
        Ax.plot([w.x1,w.x2],[w.y1,w.y2],UnduColors[w.icol])
    #endfor icoil in range(ncoil.num.max()+1)

  elif mode.lower() == 'yz' or mode.lower() == 'beam':

    if not isame:
      null(yzmin,yzmax,yzmin,yzmax)
      txyz("Coil","z/mm","y/mm")
    #endif

    #    Elegant, aber extrem langsam!!
    #    for w in ncoil.itertuples(): Ax.plot([w.z1,w.z2],[w.y1,w.y2],color='blue')

    for icoil in range(ncoil.ncoil.max()):
      coil = ncoil.query("ncoil=="+str(icoil+1))
      for w in coil.itertuples():
        Ax.plot([w.z1,w.z2],[w.y1,w.y2],UnduColors[w.icol])
    #endfor icoil in range(ncoil.num.max()+1)

  else:

    if not isame:
      null3d(xmin,xmax,yzmin,yzmax,yzmin,yzmax)
      txyz("Coil","x/mm","z/mm","y/mm")
    #endif

    for icoil in range(ncoil.ncoil.max()):
      coil = ncoil.query("ncoil=="+str(icoil+1))
      for w in coil.itertuples():
        Ax.plot([w.x1,w.x2],[w.z1,w.z2],[w.y1,w.y2],UnduColors[w.icol])
    #endfor icoil in range(ncoil.num.max()+1)

  #endif mode.lower() == '3d'

#enddef undu_plot_coil(...)

def undu_geo(plopt='sameline'):

+seq,argumentsind.
+seq,mhbglobind.
+seq,UnduColorsind.

  kdump = Kdump
  kpdf = Kpdf
  kecho = Kecho

  Kdump = False
  Kpdf = False
  Kecho = False

  if nargs > 2: ugeomode = int(args[2])
  else: ugeomode = 0

  if plopt == '!': plopt = 'sameline'

  if not nexist("ngeo"):
    if fexist("undumag.geo"):
      tclc = os.stat('undumag.clc').st_mtime_ns
      tgeo = os.stat('undumag.geo').st_mtime_ns
      if tclc > tgeo:
        wError("undumag.geo is older than undumag.clc!")
        return
      else:
        ngeo = ncread("ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
      #endif
    #endif
  #endif

  if Nlines <= 0:
    undu_plot_coil()
    return
  #endif

  ninfo(ngeo)

  xmin = ngeo.x.min()
  ymin = ngeo.y.min()
  zmin = ngeo.z.min()

  xmax = ngeo.x.max()
  ymax = ngeo.y.max()
  zmax = ngeo.z.max()

  dx = (xmax-xmin)/20.
  dy = (ymax-ymin)/20.
  dz = (zmax-zmin)/20.

  xyzmax = xmax + dx
  if ymax+dy > xyzmax: xyzmax=ymax+dy
  if zmax+dz > xyzmax: xyzmax=zmax+dz
  xyzmin=xmin-dx

  if ymin-dy < xyzmin: xyzmin=ymin-dy
  if zmin-dz < xyzmin: xyzmin=zmin-dz

  yzmin=min(ymin,zmin)
  yzmax=max(ymax,zmax)

  null3d(xmin-dx,xmax+dx,yzmin,yzmax,yzmin,yzmax)

  txyz("geo","x","z","y")
  if len(ngeo) == 0: return

  if ugeomode < 0:
    return
  #endif ugeomode < 0

  ssel = "cmag != 'wire'"
  nmag = ngeo.query(ssel)

  isame = 0

  if len(nmag):

    if ugeomode > 0: # convex hull of items

      mmin = int(ngeo.mag.min())
      mmax = int(ngeo.mag.max())

      for mag in range(mmin,mmax+1):

        ssel = "mag == " + str(mag)
        icmin,icmax = nminmax(nmag,"icol",ssel)

        icmin = int(icmin)
        icmax = int(icmax)

        setmarkercolor(UnduColors[icmin])
        #setlinecolor(UnduColors[icmin])
        nhull = nhull3d(nmag,"x:z:y",ssel,'sameline',
                        facecolor=UnduColors[icmin],edgecolor=UnduColors[icmin],
                        alpha=0,ishow=0)

      #endfor mag in range(mmin,mmax)

      txyz("geo","x","z","y")

    else: # convex hull of mothers

      mmin = int(ngeo.moth.min())
      mmax = int(ngeo.moth.max())

      for moth in range(mmin,mmax+1):

        ssel = "moth==" + str(moth)

        icmin,icmax = nminmax(ngeo,"icol",ssel)
        try: icmin = int(icmin)
        except: continue

        setmarkercolor(UnduColors[icmin])
        #setlinecolor(UnduColors[icmin])

        nhull = nhull3d(ngeo,"x:z:y",ssel,'sameline')
        nhull = nhull3d(ngeo,"x:z:y",ssel,'sameline',
                        facecolor=UnduColors[icmin],edgecolor=UnduColors[icmin],
                        alpha=0,ishow=0)

      #endfor mag in range(mmin,mmax)

      txyz("geo","x","z","y")

    #endif ugeomode

  #endif

  undu_plot_coil(isame=isame)

  Kdump = kdump
  Kpdf = kpdf
  Kecho = kecho

#enddef undu_geo()

def undu_plot_mag(select='yc<0 and zc<0',plopt='sameline'):

+seq,mhbglobind.
+seq,UnduColorsind.

  kdump = Kdump
  kpdf = Kpdf
  kecho = Kecho

  Kdump = False
  Kpdf = False
  Kecho = False

  if plopt == '!': plopt = 'sameline'

  if not nexist("ngeo"):
    if fexist("undumag.geo"):
      tclc = os.stat('undumag.clc').st_mtime_ns
      tgeo = os.stat('undumag.geo').st_mtime_ns
      if tclc > tgeo:
        wError("undumag.geo is older than undumag.clc!")
        return
      else:
        print('\nReading undumag.geo...')
        ngeo = ncread("ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
        print('done\n')
      #endif
    #endif
  #endif

  print('\nSelection for ',select)

  if len(select) > 0:
    nt = ngeo.query(select)
  else:
    nt = ngeo
  #endif

  print('\nStart plotting')

  if len(nt) == 0:
    print("\n*** Nothing to plot for",select)
    return
  #endif

  xmin = nt.x.min()
  ymin = nt.y.min()
  zmin = nt.z.min()

  xmax = nt.x.max()
  ymax = nt.y.max()
  zmax = nt.z.max()

  dx = (xmax-xmin)/20.
  dy = (ymax-ymin)/20.
  dz = (zmax-zmin)/20.

  xyzmax = xmax + dx
  if ymax+dy > xyzmax: xyzmax=ymax+dy
  if zmax+dz > xyzmax: xyzmax=zmax+dz
  xyzmin=xmin-dx

  if ymin-dy < xyzmin: xyzmin=ymin-dy
  if zmin-dz < xyzmin: xyzmin=zmin-dz

  yzmin=min(ymin,zmin)
  yzmax=max(ymax,zmax)

  null3d(xmin-dx,xmax+dx,yzmin,yzmax,yzmin,yzmax)

  nhull = nhull3d(nt,"x:z:y",'',plopt,edgecolor='black',ishow=0)
  plt.show(block=False)

  mmin = nt.mag.min()
  mmax = nt.mag.max()

  for m in range(mmin,mmax+1):
    selma = "mag==" + str(m)
    nm = nt.query(selma)
    icol = nm.icol.max()
    if len(nm) > 0:
      nhull = nhull3d(nm,"x:z:y",'',plopt,edgecolor=UnduColors[icol],ishow=0)
  #endfor

  plt.show(block=False)
  #txyz(select,"x","z","y")

  Kdump = kdump
  Kpdf = kpdf
  Kecho = kecho

#enddef undu_plot_mag()

def undu_mags(plopt='sameline'):

+seq,argumentsind.
+seq,mhbglobind.
+seq,UnduColorsind.

  #reakpoint()
  kdump = Kdump
  kpdf = Kpdf
  kecho = Kecho

  Kdump = False
  Kpdf = False
  Kecho = False


  if nargs > 2: ugeomode = int(args[2])
  else: ugeomode = 0

  if plopt == '!': plopt = 'sameline'

  if not nexist("nmags"):
    nmags = ncread("nmags","imoth:mag:icol:iplan:icorn:x:y:z:bx:by:bz:imat:cmag:cmoth:ispole","undumag.mag")
  else:
    nmags = nget("nmags")
  #endif

  if not nexist("nvox"):
    nvox = ncread("nvox","cnam:cmoth:icol:modu:kmag:lmag:ivox:icop:x:y:z:bxi:byi:bzi:bxe:bye:bze:ispole","undumag_voxel.lis")
  else:
    nvox = nget("nvox")
  #endif

  xmin = nmags.x.min()
  ymin = nmags.y.min()
  zmin = nmags.z.min()

  xmax = nmags.x.max()
  ymax = nmags.y.max()
  zmax = nmags.z.max()

  dx = (xmax-xmin)/20.
  dy = (ymax-ymin)/20.
  dz = (zmax-zmin)/20.

  xyzmax = xmax + dx
  if ymax+dy > xyzmax: xyzmax=ymax+dy
  if zmax+dz > xyzmax: xyzmax=zmax+dz
  xyzmin=xmin-dx

  if ymin-dy < xyzmin: xyzmin=ymin-dy
  if zmin-dz < xyzmin: xyzmin=zmin-dz

#  getzone('3d')
  null3d(xyzmin,xyzmax,xyzmin,xyzmax,xyzmin,xyzmax)

#  print("Returning");return
  txyz("Magnets","x","z","y")

  if ugeomode < 0:
    ninfo(nmags)
    return
  #endif ugeomode < 0

  mmin = int(nmags.mag.min())
  mmax = int(nmags.mag.max())

  if ugeomode == 0: # convex hull of items

    for mag in range(mmin,mmax+1):

      ssel = "mag==" + str(mag)
      icmin,icmax = nminmax(nmags,"icol",ssel)
      icmin = int(icmin)
      icmax = int(icmax)
      setmarkercolor(UnduColors[icmin])
      setlinecolor(UnduColors[icmin])
      if mag > 1:
        nhull = nhull3d(nmags,"x:z:y",ssel,'sameline',ishow=0)
      else:
        nhull = nhull3d(nmags,"x:z:y",ssel,plopt,ishow=0)
      #endif mag > 0
    #endfor mag in range(mmin,mmax)

    txyz("Magnets","x","z","y")

  #endif ugeomode

  Kdump = kdump
  Kpdf = kpdf
  Kecho = kecho

#enddef undu_mags()
+KEEP,showgeo,T=PYTHON.
*CMZ :  2.04/14 05/09/2023  08.47.32  by  Michael Scheer
*CMZ :  2.04/13 04/09/2023  10.03.11  by  Michael Scheer
*CMZ :  2.04/12 31/08/2023  06.57.01  by  Michael Scheer
*CMZ :  2.04/11 29/08/2023  14.59.29  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  13.18.56  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.12.52  by  Michael Scheer
*CMZ :  2.04/06 09/07/2023  12.23.11  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  08.28.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  11.43.34  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  11.36.44  by  Michael Scheer
*-- Author :    Michael Scheer   13/10/2020
+seq,unduplgeo.

def read_main_faces(fname,cs='xyz'):

  F=open(fname,'r')
  fread = F.readlines()
  F.close()

  faces = []
  voxels = []

  l=0
  nface=-1
  #breakpoint()
  nmag = int(fread[l].strip())
  l += 1
  for imag in range(nmag):
    npoi = int(fread[l].split()[0])
    voxels.append(fread[l].split())
    nface += 1
    l += 1
    fac = []
    for ipoi in range(npoi):
      p = np.fromstring(fread[l].strip(),dtype=np.float,sep=' ')
      if cs.lower() == 'xzy':
        fac.append([p[0],p[2],-p[1]])
      else:
        fac.append([p[0],p[1],p[2]])
      #endif
      l += 1
    #endfor npoi
    faces.append(np.array(fac))
  #endfor nmag

  return faces,voxels
#enddef read_main_faces(fname)

def _ucoilplot(view='3d', modus='same', item=-1,callkey=''):

  global Coils, Filaments, UnduColors, CurrLoops, NMagPolTot

+self,if=trace.
  print(NL,"trace:: _ucoilplot:",view,modus,item,callkey)
+self.

  if NMagPolTot >= 0 and len(Filaments) == 0:
+self,if=trace.
    print(NL,"trace:: Leaving _ucoilplot, no coils...")
+self.
    return
  #endif

  xmin = 1.e30
  xmax = -1.e30
  ymin = 1.e30
  ymax = -1.e30
  zmin = 1.e30
  zmax = -1.e30

  coiltit = "Coils"
  icoil = -1
  ifound = 0

  kallzero = 1
  for coil in Filaments:
    icoil += 1
    if item > -1 and icoil != item: continue
    curr = calc_var(Coils[icoil][1][0])
    coiltit = Coils[icoil][0][1]
    ifound = 1
    if curr == 0 and modus != 'notsame': continue
    kallzero = 0
    for wire in coil:
      xmin = min(xmin,wire[2],wire[5])
      xmax = max(xmax,wire[2],wire[5])
      ymin = min(ymin,wire[3],wire[6])
      ymax = max(ymax,wire[3],wire[6])
      zmin = min(zmin,wire[4],wire[7])
      zmax = max(zmax,wire[4],wire[7])
    #endfor wire in coil

  #endfor coil in Filaments

  if kallzero: return [xmin,xmax,ymin,ymax,zmin,zmax,kallzero]

  dx = (xmax-xmin)*0.1
  dy = (ymax-ymin)*0.1
  dz = (zmax-zmin)*0.1

  if dx == 0.0: dx = 1.
  if dy == 0.0: dy = 1.
  if dz == 0.0: dz = 1.

  if ifound == 0:
    wError("No coils to plot")
+self,if=trace.
    print(NL,"trace:: Leaving _ucoilplot due to error")
+self.
    return
  #endif

  if view.lower() == 'xz' or view.lower() == 'top':

    if not modus == 'same':
      null(xmin-dx,xmax+dx,zmin-dz,zmax+dz)
      txyz(coiltit,"x/mm","z/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #               x1    x2    z1   z2     y1    y2
        # 3d: Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
        Ax.plot([w[2],w[5]],[w[4],w[7]],color)
      #endfor
    #endfor

  elif view.lower() == 'xy' or view.lower() == 'side':

    if not modus == 'same':
      null(xmin-dx,xmax+dx,ymin-dy,ymax+dy)
      txyz(coiltit,"x/mm","y/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #               x1    x2    z1   z2     y1    y2
        # 3d: Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
        Ax.plot([w[2],w[5]],[w[3],w[6]],color)
      #endfor
    #endfor

  elif view.lower() == 'zy' or view.lower() == 'beam':

    if not modus == 'same':
      null(zmin-dz,zmax+dz,ymin-dy,ymax+dy)
      txyz(coiltit,"z/mm","y/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #               x1    x2    z1   z2     y1    y2
        # 3d: Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
        Ax.plot([w[4],w[7]],[w[3],w[6]],color)
      #endfor
    #endfor

  else:

    if not modus == 'same':
      null3d(xmin-dx,xmax+dx,zmin-dx,zmax+dz,ymin-dy,ymax+dy)
      Xmin = xmin - dx
      Xmax = xmax + dx
      Ymin = ymin - dy
      Ymax = ymax + dy
      Zmin = zmin - dz
      Zmax = zmax + dz
      txyz(coiltit,"x/mm","z/mm","y/mm")
    #endif

    icoil = -1

    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #         x1    x2    z1   z2     y1    y2
        Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
      #endfor
    #endfor

  #endif modus

+self,if=trace.
  print(NL,"trace:: Leaving _ucoilplot")
+self.

  return [xmin,xmax,ymin,ymax,zmin,zmax,kallzero]

#enddef _ucoilplot(view='3d', modus='same')

def _h3d(h3d,sx,sy,sz):
  global Hull3D
  Hull3D = []
  for plan in h3d:
    pl = []
    for p in plan:
      xzy = [sx*p[0],sy*p[2],sz*p[1]]
      pl.append(xzy)
    #endfor p in plan
    Hull3D.append(pl)
  #endfor p in plan
#enddef _h3d(h3d,sx,sy,sz)

def plothull3dxzy(isame=0,facecolor='blue',alpha=0.5,edgecolor='black', ishow=1,modus='line'):
+seq,uguiglobind.

  h3d =deepcopy(Hull3D)

  if cIxSym == 'yes' and cIySym == 'yes' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'yes' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'no' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'yes' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'no' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'yes' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'no' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'no' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  #endif cIxSym == 'yes' and cIySym == 'yes' and if cIzSym == 'yes'

#enddef plothull3dxzy(isame=0,facecolor='blue',alpha=0.5,edgecolor='black', ishow=1)

def _plotMag(imp,key='3dselected'):

  if imp>=0:
    cmag = MagPolsTot[imp][0][0]
    if not cmag in DictMagPolsSel: _selectMag(cmag)
  #endif

  #print('plotMag()?\n',imp,key,'\nDictMothsSel:\n',DictMothsSel,\
  #'\nDictMagPolsSel:\n',DictMagPolsSel)

  if len(DictMagPolsSel) == 0:
    wError(" Nothing selected! ")
    return
  #endif

  setisame(0)

  if key == '3d' or key == '3dselected':
    _showGeoPython(modus='3dselected',item=-4,callkey='plotMag')
  else:
    _showGeoPythonXYZ(modus=key,item=-2,callkey='plotMag')
  #endif

#enddef _plotMag(imp,key='3d'):


def _plotSingleMag(imp,key='xy',isame=0,nmodules=0,itrans=1):

  global MagPolsTot,WallListMags,Isame
  global Xmin,Xmax,Zmin,Zmax,Ymin,Ymax
  global Ntcyls

  mp = MagPolsTot[imp]
  cmag = MagPolsTot[imp][0][0]
  cmoth = MagPolsTot[imp][0][1]

  col = mp[5][5]

  if not col in DictUnduColors:
    kcol = int(calc_var(col))
    col = UnduColors[kcol]
  #endif col not in UnduColors

  points = []
  cen = mp[4]

  if isame <= 0:
    store_kdump_kpdf(); optdump(False); optpdf(False)
  #endif

  if isame == 0:
    ms = getmarkersize()
    setmarkersize(0)
  #endif

  xc = calc_var(cen[0])
  yc = calc_var(cen[1])
  zc = calc_var(cen[2])

  if mp[3].find('Block') > -1:

    corns = blockcorners(mp)

    if itrans != 0 and (cmoth in DictTransRotCop or cmag in DictTransRotCop):
      ctr = []
      for c in corns:
        trc = TransRot(cmag,cmoth,c[0],c[1],c[2])
        ctr.append(trc)
      #endfor
      corns = ctr
    #endif

    if key == 'xy':
      for c in corns: points.append([xc+c[0],yc+c[1]])
    elif key == 'xz':
      for c in corns: points.append([xc+c[0],zc+c[2]])
    elif key == 'zy':
      for c in corns: points.append([zc+c[2],yc+c[1]])
    #endif

    verts, iedges, edges, bounds = qhull2d(points)

  elif mp[3] == 'File' or mp[3] == 'Corners':

    for ic in range(len(mp[7])):

      c1 = xc + calc_var(mp[7][ic][0])
      c2 = yc + calc_var(mp[7][ic][1])
      c3 = zc + calc_var(mp[7][ic][2])

      if itrans != 0 and (cmoth in DictTransRotCop or cmag in DictTransRotCop):
        trc = TransRot(cmag,cmoth,c[0],c[1],c[2])
      else:
        trc = [c1,c2,c3]
      #endif
      if key == 'xy':
        pass
        #c1 = xc + calc_var(mp[7][ic][0])
        #c2 = yc + calc_var(mp[7][ic][1])
      elif key == 'xz':
        c2 = c3
      elif key == 'zy':
        c1 = c3
      #endif

      points.append([c1,c2])

    #endfor ic in range(len(mp[7]))

    verts, iedges, edges, bounds = qhull2d(points)

  elif mp[3] == 'Cylinder':
    ifound = 0
    for ntc in Ntcyls:
      if ntc[1][0][0] == cmag:

        imag = DictMagPolsTot[cmag]
        cen = MagPolsTot[imag][4]

        xc = calc_var(cen[0])
        yc = calc_var(cen[1])
        zc = calc_var(cen[2])

        cen = [xc,yc,zc]

        poly,bounds = cylinderpoly(ntc[2])
        verts = poly

        bounds = [1.e30,-1.e30,1.e30,-1.e30,1.e30,-1.e30]

        iedges = []
        edges = []

        for pgn in poly:

          n = len(pgn)

          for i in range(n):

            j = i + 1
            if j == n: j = 0

            q1 = pgn[i]
            p1 = [q1[0] + xc,q1[1] + yc,q1[2] + zc]
            q2 = pgn[j]
            p2 = [q2[0] + xc,q2[1] + yc,q2[2] + zc]

            if itrans != 0:
              if cmoth in DictTransRotCop or cmag in DictTransRotCop:
                p1 = TransRot(cmag,cmoth,p1[0],p1[1],p1[2])
                p2 = TransRot(cmag,cmoth,p2[0],p2[1],p2[2])
              #endif
            #endif

            if p1[0] < bounds[0]: bounds[0] = p1[0]
            if p2[0] < bounds[0]: bounds[0] = p2[0]
            if p1[0] > bounds[1]: bounds[1] = p1[0]
            if p2[0] > bounds[1]: bounds[1] = p2[0]
            if p1[1] < bounds[2]: bounds[2] = p1[1]
            if p2[1] < bounds[2]: bounds[2] = p2[1]
            if p1[1] > bounds[3]: bounds[3] = p1[1]
            if p2[1] > bounds[3]: bounds[3] = p2[1]
            if p1[2] < bounds[4]: bounds[4] = p1[2]
            if p2[2] < bounds[4]: bounds[4] = p2[2]
            if p1[2] > bounds[5]: bounds[5] = p1[2]
            if p2[2] > bounds[5]: bounds[5] = p2[2]

            if key == 'xy':
              edges.append([[p1[0],p1[1]],[p2[0],p2[1]]])
            elif key == 'xz':
              edges.append([[p1[0],p1[2]],[p2[0],p2[2]]])
            elif key == 'zy':
              edges.append([[p1[2],p1[1]],[p2[2],p2[1]]])
            #endif
            iedges.append([i,j])
          #endfor pgn
        #endfor poly
        break
      #endif cmag
    #endfor Ntcyls

    if key == 'xy':
      pass
    elif key == 'xz':
      bounds[2]= bounds[4]
      bounds[3]= bounds[5]
    elif key == 'zy':
      bounds[0]= bounds[4]
      bounds[1]= bounds[5]
    #endif

  else:
    print('\n*** ', mp[3], 'noch in  _plotSingleMag einfuegen\n')
  #endif type of magnet

  edges = np.array(edges)

  if nmodules <= 0 or itrans == 0:
    for ed in edges:
      et = ed.T
      plt.plot(et[0],et[1],c=col)
    #endfor

  else:

    for m in range(nmodules):

      nper,[tx,ty,tz],rm,ang = _module_to_shift_and_rot(m)

      xrmin = 1.e30
      xrmax = -1.e30
      yrmin = 1.e30
      yrmax = -1.e30
      zrmin = 1.e30
      zrmax = -1.e30

      for ed in edges:
        if ang != 0:
          edr = []
          for i in range(len(ed)):
            if key == 'xy':
              x = ed[i][0]
              y = ed[i][1]
              xr = r[0][0]*x + r[0][1]*y
              yr = r[1][0]*x + r[1][1]*y
              if xr < xrmin: xrmin = xr
              if xr > xrmax: xrmax = xr
              if yr < yrmin: yrmin = yr
              if yr > yrmax: yrmax = yr
            elif key == 'xz':
              x = ed[i][0]
              y = ed[i][2]
              xr = r[0][0]*x + r[0][2]*y
              yr = r[2][0]*x + r[2][2]*y
              if xr < xrmin: xrmin = xr
              if xr > xrmax: xrmax = xr
              if yr < zrmin: zrmin = yr
              if yr > zrmax: zrmax = yr
            #endif
            elif key == 'zy':
              x = ed[i][2]
              y = ed[i][1]
              xr = r[2][2]*x + r[2][1]*y
              yr = r[1][2]*x + r[2][1]*y
              if xr < zrmin: zrmin = xr
              if xr > zrmax: zrmax = xr
              if yr < yrmin: yrmin = yr
              if yr > yrmax: yrmax = yr
            #endif
            edr.append([xr,yr])
          #endfor
          edr = np.array(edr)
          bounds = [xrmin,xrmax,yrmin,yrmax]
        else:
          edr = np.array(edges)
        #endif
      #endfor edges

      for iper in range(nper):

        ett = []
        for e in edr:
          et = e.T
          ett.append(et)
        #endfor

        for e in ett:
          e[0] += iper * tx
          e[1] += iper * ty
          plt.plot(e[0],e[1],c=col)
        #endfor

      #endfor nper

      if nper > 1:
        if key == 'xy':
          tx = (nper-1) * tx
          ty = (nper-1) * ty
        elif key == 'xz':
          tx = (nper-1) * tx
          ty = (nper-1) * tz
        elif key == 'zy':
          tx = (nper-1) * tz
          ty = (nper-1) * ty
        #endif
        if tx > 0: bounds[1] += tx
        else: bounds[0] -= tx
        if ty > 0: bounds[3] += ty
        else: bounds[2] -= ty
      #endif

    #endfor nmodules

  #endif

  return bounds

#enddef _plotSingleMag(imp)

def _showGeo(modus='3d',item=-1,kseg=0,callkey=''):
+self,if=trace.
  print(NL,"trace:: _showGeo:",modus,item,kseg,callkey)
+self.
  if modus == 'undu3d' or modus == 'eps':
    _showGeoUndu(modus,item,1,callkey='showGeo')
  else:
    _showGeoPython(modus,item,callkey='showGeo')
+self,if=trace.
    print(NL,"trace:: Leaving _showGeo")
+self.
#enddef _showGeo(modus='3d',item=-1,kseg=0)

def _module_to_shift_and_rot(imodu):
  global Modules

  mo = Modules[imodu]

  lcen = mo[0]

  w = lcen.split()

  offx = calc_var(w[0])
  offy = calc_var(w[1])
  offz = calc_var(w[2])

  nper = calc_var(mo[1])
  s = mo[2].split()

  perlen = calc_var(s[0])

  vspace = [calc_var(s[1]),calc_var(s[2]),calc_var(s[3])]
  ang = calc_var(s[4])

  cen = [0.0,0.0,0.0]
  vin = [1.0,0.0,0.0]
  istat, vdum, rm = util_rotate(cen,vspace,ang,vin)

  rot11 = rm[0][0]; rot12 = rm[0][1]; rot13 = rm[0][2]
  rot21 = rm[1][0]; rot22 = rm[1][1]; rot23 = rm[1][2]
  rot31 = rm[2][0]; rot32 = rm[2][1]; rot33 = rm[2][2]

  tx = vspace[0] * perlen
  ty = vspace[1] * perlen
  tz = vspace[2] * perlen

  w = mo[3].split()

  bsx = calc_var(w[0])
  bsy = calc_var(w[1])
  bsz = calc_var(w[2])

  return nper,[tx,ty,tz],rm,ang
#enddef _module_to_shift_and_rot(imodu)

def _showGeoPython(modus='3d',item=-1,callkey=''):

+seq,uguiglobind.
+seq,UnduColorsind.

+self,if=trace,debugsgp.
  print(NL,"trace:: _showGeoPython:",modus,item,callkey)
+self.

  isameo = getisame()

  if not isameo: zone(1,1)

  if NMagPolTot == 0 and len(Filaments) == 0:
    print("Nothing to plot!")
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPython")
+self.
    return
  #endif NMagPolTot == 0

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30
  zplmin = 1.e30
  zplmax = -1.e30

  xyzcoils = []

  if not NMagPolTot:
    xyzcoils = _ucoilplot('3d','notsame',callkey='ShowGeoPython')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPython after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: showGeoPython")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  if item == -4 and len(DictMagPolsSel) == 0:
    wError(" Nothing selected! ")
    return
  #endif

  plopt = ''

  Kpdf = False
  Kdump = False
  Kecho = False

  dot()
  getzone('3d')

  null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
  setisame(1)

  if len(Filaments) and modus == '3d':
    xyzcoils = _ucoilplot(callkey='ShowGeoPython')

  if item == -3: nmodul = 1
  else: nmodul = Nmodul

  for mm in range(nmodul):

    nper,[tx,ty,tz],rm,ang = _module_to_shift_and_rot(mm)

    if item == -3: nper = 1

    rot11 = rm[0][0]; rot12 = rm[0][1]; rot13 = rm[0][2]
    rot21 = rm[1][0]; rot22 = rm[1][1]; rot23 = rm[1][2]
    rot31 = rm[2][0]; rot32 = rm[2][1]; rot33 = rm[2][2]

    w = Modules[mm][3].split()
    bsx = calc_var(w[0])
    bsy = calc_var(w[1])
    bsz = calc_var(w[2])

    nmp = NMagPolTot

    if item == -4:
      nmp = NMagPolSel
    #endif

+self,if=trace,debugsgp.
    print(NL,"trace:: showGeoPython:nmp",nmp)
+self.
    for imp in range(nmp):

      if item == -4:
        cmag = MagPolsSel[imp]
        imag = DictMagPolsTot[cmag]
        mp = MagPolsTot[imag]
        #print(mp)
      else:
        mp = MagPolsTot[imp]
      #endif

      sspec = str(mp[2])

+self,if=trace,debugsgp.
      try: print(NL,"imag,cmag,mp",imag,cmag,NL,mp)
      except: pass
      print(mp)
+self.
      if sspec == '1' or sspec == 'yes': ispec=1
      else: ispec = 0

      if item == -2 and ispec !=0: continue # skip specials
      if item == -3 and ispec ==0: continue # only specials

      cmag = mp[0][0]
      cmoth = mp[0][1]

      col = mp[5][5]

      if not col in DictUnduColors:
        kcol = int(calc_var(col))
        col = UnduColors[kcol]
      #endif col not in UnduColors

      points = []
      iscyl = 0

      cen = mp[4]

      xc = calc_var(cen[0])
      yc = calc_var(cen[1])
      zc = calc_var(cen[2])

      if mp[3].find('Block') > -1:

        corns = blockcorners(mp)
+self,if=debugsgp.
        print("corns:",NL,corns)
+self.
        for corn in corns:

          xx = corn[0]; yy = corn[1]; zz = corn[2]

          if callkey != 'plotMag':
            if cmoth in DictTransRotCop or cmag in DictTransRotCop:
              t = TransRot(cmag,cmoth,xx,yy,zz)
              xx = t[0]
              yy = t[1]
              zz = t[2]
              #print("t:",cmag,yy,t[2])
            #endif
            x = xc + rot11*xx + rot12*yy + rot13*zz
            y = yc + rot21*xx + rot22*yy + rot23*zz
            z = zc + rot31*xx + rot32*yy + rot33*zz
          else:
            x = xx + xc
            y = yy + yc
            z = zz + zc
          #endif

          points.append([x,y,z])

        #endfor corn in corns

      elif mp[3] == 'File' or mp[3] == 'Corners':

        for ic in range(len(mp[7])):

          xx = calc_var(mp[7][ic][0])
          yy = calc_var(mp[7][ic][1])
          zz = calc_var(mp[7][ic][2])

          if callkey != 'plotMag':
            if cmoth in DictTransRotCop or cmag in DictTransRotCop:
              t = TransRot(cmag,cmoth,c1,c2,c3)
              xx = t[0]
              yy = t[1]
              zz = t[2]
            #endif
            x = xc + rot11*xx + rot12*yy + rot13*zz
            y = yc + rot21*xx + rot22*yy + rot23*zz
            z = zc + rot31*xx + rot32*yy + rot33*zz
          else:
            x = xx + xc
            y = yy + yc
            z = zz + zc
          #endif

          points.append([x,y,z])

        #endfor ic in range(len(mp[7]))

      elif mp[3] == 'Cylinder':
        iscyl = 1
      else:
        Quit("_showGeoPython: " + mp[3] + " hier einfügen")
      #endif mp[3] == 'Block'

      #dtx = -tx; dty = -ty; dtz = -tz
      dtx = 0.; dty = 0.; dtz = 0.

      mper = nper

      for iper in range(mper):

        if not iscyl:

          pp = []

          for p in points:
            pp.append([p[0]+dtx,p[1]+dty,p[2]+dtz])
          #endfor p in points
+self,if=debugsgp.
          print("pp:",NL,pp)
+self.
          verts,ifaces,faces,bounds = hull3d(pp)
          plothull3dxzy(isame=1,edgecolor=col,ishow=0,modus='line')

          if bounds[0] < xplmin: xplmin = bounds[0]
          if bounds[1] > xplmax: xplmax = bounds[1]
          if bounds[2] < yplmin: yplmin = bounds[2]
          if bounds[3] > yplmax: yplmax = bounds[3]
          if bounds[4] < zplmin: zplmin = bounds[4]
          if bounds[5] > zplmax: zplmax = bounds[5]

        else: #iscyl

          for ntc in Ntcyls:
            if ntc[1][0][0] == cmag:

              poly,bounds = cylinderpoly(ntc[2])

              for pgn in poly:

                pp = []

                for poi in pgn:

                  p = [poi[0] + xc,poi[1] + yc,poi[2] + zc]

                  if callkey != 'plotMag':
                    if cmoth in DictTransRotCop or cmag in DictTransRotCop:
                      p = TransRot(cmag,cmoth,p[0],p[1],p[2])
                    #endif
                    if ang != 0:
                      x = rot11*p[0] + rot12*p[1] + rot13*p[3] + dtx
                      y = rot21*p[0] + rot22*p[1] + rot23*p[3] + dty
                      z = rot31*p[0] + rot32*p[1] + rot33*p[3] + dtz
                    else:
                      x = p[0] + dtx
                      y = p[1] + dty
                      z = p[2] + dtz
                    #endif
                  else:
                    x = p[0]
                    y = p[1]
                    z = p[2]
                  #endif

                  if x < xplmin: xplmin = x
                  if x > xplmax: xplmax = x
                  if y < yplmin: yplmin = y
                  if y > yplmax: yplmax = y
                  if z < zplmin: zplmin = z
                  if z > zplmax: zplmax = z

                  pp.append([x,y,z])

                #endfor

                pt = np.array(pp).T
                vplxyz(pt[0],pt[2],pt[1],'samelineclosed',color=col)

              #endfor
              break
            #endif
          #endfor

        #endif iscyl

        if ispec != 0: break
        dtx += tx; dty += ty; dtz += tz

      #endfor iper in range(1,nper+1):

    #endfor mag in range(nmag)

    if ispec != 0: break
  #endfor mm in range(Nmodul)

  if len(xyzcoils) and xyzcoils[6] == 0:
    xplmin = min(xplmin,xyzcoils[0])
    xplmax = max(xplmax,xyzcoils[1])
    yplmin = min(yplmin,xyzcoils[2])
    yplmax = max(yplmax,xyzcoils[3])
    zplmin = min(zplmin,xyzcoils[4])
    zplmax = max(zplmax,xyzcoils[5])
  #endif

  dx = (xplmax - xplmin) * 0.05
  dy = (yplmax - yplmin) * 0.05
  dz = (zplmax - zplmin) * 0.05

  ax = plt.gca()

  ax.set_xlim(xplmin-dx,xplmax+dx)
  ax.set_zlim(yplmin-dy,yplmax+dy)
  ax.set_ylim(zplmin-dz,zplmax+dz)

  txyz(Ucomment,"x [mm]","z [mm]","y [mm]")

  setisame(isameo)

+self,if=trace,debugsgp.
  print(NL,"trace:: Leaving _showGeoPython:")
+self.
#enddef _showGeoPython(modus='3d',item=-1)

def _showGeoPythonXYZ(modus='xy',item=-1,callkey=''):

+seq,uguiglobind.
+seq,UnduColorsind.

+self,if=trace,debugsgp.
  print(NL,"trace:: _showGeoPythonXYZ:",modus,item,callkey)
+self.

  isameo = getisame()

  if not isameo: zone(1,1)

  if NMagPolTot == 0 and len(Filaments) == 0:
    print("Nothing to plot!")
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ")
+self.
    return
  #endif NMagPolTot == 0

  isameo = getisame()

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30
  zplmin = 1.e30
  zplmax = -1.e30

  if not NMagPolTot:
    _ucoilplot(modus,'notsame',callkey='ShowGeoPythonXYZ')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: showGeoPythonXYZ")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  dot()
  getzone()

  plopt = ''

  Kpdf = False
  Kdump = False
  Kecho = False

  kgo = getgrid()
  if kgo: optgrid()
  setishow(0)

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30

  null()

  itrans = 1
  if callkey == 'plotMag': itrans = 0

  if item == -4: # specials

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 0: continue
      bounds = _plotSingleMag(imag,modus,1,0,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  elif item == -2: #selected

    for cmag in MagPolsSel:
      imag = DictMagPolsTot[cmag]
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  elif item == -3: # periodic

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 1: continue
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  else: # all

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 0: itrans = 1
      else: itrans = 0
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

    if len(Filaments):
      xyzcoils = _ucoilplot(modus,callkey='ShowGeoPythonXYZ')
      #print(xyzcoils)
      if xyzcoils[6] == 0:
        if modus == 'xy':
          xplmin = min(xplmin,xyzcoils[0])
          xplmax = max(xplmax,xyzcoils[1])
          yplmin = min(yplmin,xyzcoils[2])
          yplmax = max(yplmax,xyzcoils[3])
        elif modus == 'xz':
          xplmin = min(xplmin,xyzcoils[0])
          xplmax = max(xplmax,xyzcoils[1])
          yplmin = min(yplmin,xyzcoils[4])
          yplmax = max(yplmax,xyzcoils[5])
        elif modus == 'zy':
          xplmin = min(xplmin,xyzcoils[4])
          xplmax = max(xplmax,xyzcoils[5])
          yplmin = min(yplmin,xyzcoils[2])
          yplmax = max(yplmax,xyzcoils[3])
        #endif
      #endif

  #endif item

  dx = (xplmax - xplmin) * 0.05
  dy = (yplmax - yplmin) * 0.05

  ax = plt.gca()

  ax.set_xlim(xplmin-dx,xplmax+dx)
  ax.set_ylim(yplmin-dy,yplmax+dy)

  setishow(1)

  if modus == 'xy':
    txyz(Ucomment,"x [mm]","y [mm]")
  elif modus == 'xz':
    txyz(Ucomment,"x [mm]","z [mm]")
  elif modus == 'zy':
    txyz(Ucomment,"z [mm]","y [mm]")
  #endif

  if not NMagPolTot:
    _ucoilplot(modus,'notsame',callkey='ShowGeoPythonXYZ')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: Leaving _showGeoPythonXYZ")
+self.

  setisame(isameo)

#enddef _showGeoPythonXYZ(modus='3d',item=-1)

def _showGeoUndu(modus='3d',item=-1,kseg=0,callkey=''):
+seq,uguiglobind.
+seq,UnduColorsind.

  isameo = get_isame()
  print("_showGeoUndu:",modus,item,kseg,callkey)
  print("_showGeoUndu:MustUpdate:",MustUpdate)

  Rmodus = 'SEGMENTATION STDOUT=undumag.lun6'

  if NMagPolTot == 0:
    print("Nothing to plot!")
    return
  #endif NMagPolTot == 0

  if MustUpdate:
+self,if=debpy.
    Quit("*** _undumag in showgeo wegen MustUpdate ***")
+self.

    _undumag("showGeoUndu")  #run undumag

#    if nexist("Ngeo"): Ngeo = ndelete("Ngeo")
#    if fexist('undumag.geo'):
#      Ngeo = ncread("Ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
    MustUpdate = 0

  #endif MustUpdate

  if modus == 'undu3d':

    if item < 0:

      FcBox = []
+self,if=mainf.
      if fexist('undumag_main_facets.fct'):
        tclc = os.stat('undumag.clc').st_mtime_ns
        tgeo = os.stat('undumag_main_facets.fct').st_mtime_ns
        if tclc > tgeo:
          wError("undumag_main_facets.fct is older than undumag.clc!")
          return
        else:
          print('\n--> Reading undumag_main_facets.fct')
          mfaces,mvoxels = read_main_faces('undumag_main_facets.fct')
          Main_Facets = [mfaces,mvoxels]
          print('\n--> Done')
      else:
        wError("File undumag_main_facets not found!")
        return
      #endif
+self.
      if fexist('undumag_facets.fct'):
        tclc = os.stat('undumag.clc').st_mtime_ns
        tgeo = os.stat('undumag_facets.fct').st_mtime_ns
        if tclc > tgeo:
          wError("undumag_facets.fct is older than undumag.clc!")
          return
        else:
          print('\n--> Reading undumag_facets.fct')
          faces,voxels = read_faces('undumag_facets.fct')
          Facets = [faces,voxels]
          if fexist('undumag_facets.box'):
            fbox = open('undumag_facets.box','r')
            FcBox = fbox.readline().split()
            fbox.close()
          print('\n--> Done')
      else:
        wError("File undumag_facets.fct not found!")
        return
      #endif

      plopt = ''

      Kpdf = False
      Kdump = False
      Kecho = False

      dot()
      getzone('3d')

      facets = Facets[0]
      voxels = Facets[1]

#     if not len(FcBox):
#
#        for f in faces:
#          ft = f.T
#          xmin = ft[0].min()
#        #endfor

#        xmin = Nvox.x.min()
#        xmax = Nvox.x.max()
#        ymin = Nvox.y.min()
#        ymax = Nvox.y.max()
#        zmin = Nvox.z.min()
#        zmax = Nvox.z.max()
#
#      else:
#
#        xmin = float(FcBox[0])
#        xmax = float(FcBox[1])
#        ymin = float(FcBox[2])
#        ymax = float(FcBox[3])
#        zmin = float(FcBox[4])
#        zmax = float(FcBox[5])
#
#      #endif

#      dx = (xmax - xmin) / 10.
#      dy = (ymax - ymin) / 10.
#      dz = (zmax - zmin) / 10.

      #null3d(xmin-dx,xmax+dx,zmin-dz,zmax+dz,ymin-dy,ymax+dy)

      null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
      txyz(Ucomment,"x [mm]","z [mm]", "y [mm]")

      ax = plt.gca()
      iface = -1
#      for v in voxels:
#        nfacets = int(v[0])
#        fcol = int(v[1])
#        edcol = int(v[2])
#        fvox = []
#        for i in range(nfacets):
#          iface += 1
#          fvox.append(faces[iface])
#        #endfor
#        fpl = mplot3d.art3d.Poly3DCollection(fvox)
#        ax.add_collection3d(fpl)
      #endfor

      nfacets = len(facets)

      fcols = []
      for v in voxels:
        if not v[1] in fcols: fcols.append(v[1])
      #endfor

      for col in fcols:
        fcolcol = []
        for i in range(nfacets):
          if voxels[i][1] == col:
            fcolcol.append(facets[i])
          #endif
        #endfor
        fpl = mplot3d.art3d.Poly3DCollection(fcolcol)
        fpl.set_color(UnduColors[int(col)])
        fpl.set_edgecolor('black')
        ax.add_collection3d(fpl)

      #endfor

    #endif item < 0

  if modus == 'undu3dvgeo':

    if item < 0:

      if fexist('undumag_voxels.geo'):
        tclc = os.stat('undumag.clc').st_mtime_ns
        tgeo = os.stat('undumag_voxels.geo').st_mtime_ns
        if tclc > tgeo:
          wError("undumag_voxels.geo is older than undumag.clc!")
          return
        else:
          print('\n--> Reading undumag_voxels.geo')
          Nvox = ncread("Nvox","mag:ivox:ix:iy:iz:iplan:icorn:x:y:z:xc:yc:zc:vol:icol","undumag_voxels.geo")
          print('\n--> Done')
      else:
        wError("File undumag_voxels.geo not found!")
        return
      #endif

      plopt = ''

      Kpdf = False
      Kdump = False
      Kecho = False

      dot()
      getzone('3d')
      #nplot("Nvox","x:z:y","mag<10")
      nmag = int(Nvox.mag.max())

#      xmin = Nvox.x.min()
#      xmax = Nvox.x.max()
#      ymin = Nvox.y.min()
#      ymax = Nvox.y.max()
#      zmin = Nvox.z.min()
#      zmax = Nvox.z.max()

#      dx = (xmax - xmin) / 10.
#      dy = (ymax - ymin) / 10.
#      dz = (zmax - zmin) / 10.

      #null3d(xmin-dx,xmax+dx,zmin-dz,zmax+dz,ymin-dy,ymax+dy)
      null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
      txyz(Ucomment,"x [mm]","z [mm]", "y [mm]")

      for mag in range(nmag):
        selmag = 'mag==' + str(mag+1)
        kcol = Nvox.query(selmag + ' and iplan==1 and icorn==1').icol.max()
        col = UnduColors[kcol]
        mhull3d(Nvox,"x:z:y",selmag,edgecolor=col,isame=1)
      #endfor mag in range(nmag)
    #endif item < 0

  elif modus == 'undu3dngeo':

    if item < 0:

      if not nexist("Ngeo"):
        if fexist("undumag.geo"):
          tclc = os.stat('undumag.clc').st_mtime_ns
          tgeo = os.stat('undumag.geo').st_mtime_ns
          if tclc > tgeo:
            wError("undumag.geo is older than undumag.clc!")
            return
          else:
            Ngeo = ncread("Ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
          #endif
        #endif
      #endif

      plopt = ''

      Kpdf = False
      Kdump = False
      Kecho = False

      dot()
      getzone('3d')
      #nplot("Ngeo","x:z:y","mag<10")
      nmag = int(Ngeo.mag.max())

      xmin = Ngeo.x.min()
      xmax = Ngeo.x.max()
      ymin = Ngeo.y.min()
      ymax = Ngeo.y.max()
      zmin = Ngeo.z.min()
      zmax = Ngeo.z.max()

      dx = (xmax - xmin) / 10.
      dy = (ymax - ymin) / 10.
      dz = (zmax - zmin) / 10.

      #null3d(xmin-dx,xmax+dx,zmin-dz,zmax+dz,ymin-dy,ymax+dy)
      null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
      txyz(Ucomment,"x [mm]","z [mm]", "y [mm]")

      for mag in range(nmag):
        selmag = 'mag==' + str(mag+1)
        kcol = Ngeo.query(selmag + ' and iplan==1 and icorn==1').icol.max()
        col = UnduColors[kcol]
        mhull3d(Ngeo,"x:z:y",selmag,edgecolor=col,isame=1)
      #endfor mag in range(nmag)

    #endif item < 0

  elif modus == 'eps':
    eps = Image.open('undumag.eps')
    eps.show()
  #endif modus == '3d'

  Isame = isameo

+self,if=trace.
  print(NL,"trace:: Leaving _showGeoUndu",NL)
+self.

#enddef _showGeoUndu(modus)
+KEEP,uguiglobind,T=PYTHON.
*CMZ :  2.04/14 04/09/2023  14.42.33  by  Michael Scheer
*CMZ :  2.04/13 04/09/2023  09.59.52  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  15.27.56  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  10.49.05  by  Michael Scheer
*CMZ :  2.03/00 14/08/2022  15.24.23  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  11.18.16  by  Michael Scheer
*CMZ :  2.02/00 26/03/2021  10.47.49  by  Michael Scheer
*-- Author :    Michael Scheer   12/10/2020
  global TransRotCop,EchoCLC,DictTransRotCop
  global Xmin,Xmax,Ymin,Ymax,Zmin,Zmax
  global Ucfg,Uclcorig, Uclc, Nmag, Npol, Nmodul, NspecMag, NspecPol, \
  Magnets, Pols, SpecMags, SpecPols,  NMagPol, MagPols,  NspecMagPol, SpecMagPols, \
  NMagPolTot, MagPolsTot, DictMagPolsTot, DictCoils, DictCoilsHeader, DictCalcs, IclcRead, \
  Nmat, Materials, Br, Rmu, Coating, PerLen, ChamfM, ChamfP, MCol, PCol, \
  AirGap, KeeperGap, MspaceX, MoffY, Parameters, Variables, Npar, Ncalc, Nvar, \
  CalcLines, Calcs, Pars, Ucomment, Modules, MagPolsTotOld, MagPolOld, \
  EditMag_CheckMode,CopyMag_CheckMode, EditMagX, EditMagY,CopyMagX, CopyMagY,WWait, WError, \
  CheckVars, CheckCalcs, CheckDictCalcs, CheckVarNum, VarNum, \
  MagPolsUpdate, MagPolsDel, NMagPolDel,SpecXYZ,DictCornFiles,S_Ucomment,\
  S_ChamfUs, S_ChamfDs, S_Coating,DictVcomments,DictPcomments, IUNDUMAGisRunning

  global Rmodus, Debug, Ical, MyFontStyle, MyFontSize,MyFont, RunUndu, \
  MustUpdate, MustWriteCLC, UnduColors, DictUnduColors

  global UMain, Mgeo, Mmat, MpreDefs, MShowGeo,MShowGeo2, MListVars
  global WaddMag, WappleII, Whybrid, WFileCLC, S_FileCLC, S_FileNAM, FileCLC, FileNAM, LinesNam, FileMu, \
  WallListMags, WlistVars, WAddVars, WlistMat, Wmirror, WsetMirror

  global AppleII_Mode, AppleII, AppleIIOld, VAppleII, \
  S_nPer_AppleII, S_FullGap_AppleII, \
  S_Xlen_AppleII, S_Ylen_AppleII, S_Zlen_AppleII, \
  S_DeadCoat_AppleII, S_AirGap_AppleII, S_Br_AppleII, S_Mu_AppleII, S_KsiPerp_AppleII, \
  S_HorSlit_AppleII, S_S2Shift_AppleII, S_S3Shift_AppleII, \
  S_NdivX_AppleII, S_NdivY_AppleII, S_NdivZ_AppleII, S_NdivXHalf_AppleII

  global V_CmagOld, V_CmothOld, V_XcenOld, V_YcenOld, V_ZcenOld, V_cornsOld, V_NcornOld, V_CornFileOld, \
  V_nXdivOld, V_nYdivOld, V_nZdivOld, \
  V_FracDivYOld,   V_FracDivZOld,  V_XlenOld, V_YlenOld, V_ZlenOld, V_KeyOld, V_MatTypeOld, V_MatOld, \
  V_BcOld, V_BxnOld, V_BynOld, V_BznOld, V_IspecOld

  global WEditMagOld, WCopyMagOld, S_CmagOld, S_CmothOld, S_XcenOld, S_YcenOld, S_ZcenOld, S_cornsOld, S_NcornOld, S_CornFileOld, \
  S_nXdivOld, S_nYdivOld, S_nZdivOld, \
  S_FracDivYOld, S_FracDivZOld, S_XlenOld, S_YlenOld, S_ZlenOld, S_KeyOld, S_MateTypeOld, S_MatOld, \
  S_BcOld, S_BxnOld, S_BynOld, S_BznOld, S_IspecOld

  global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi,DictHulls

  global V_Cmag, V_Cmoth, V_Xcen, V_Ycen, V_Zcen, V_corns, V_Ncorn, V_CornFile, \
  V_nXdiv, V_nYdiv, V_nZdiv, \
  V_FracDivY, V_FracDivZ, V_Xlen, V_Ylen, V_Zlen, V_Key, V_MatType, V_Mat, \
  V_Bc, V_Bxn, V_Byn, V_Bzn, V_Ispec

  global WEditMag,WCopyMag, S_Cmag, S_Cmoth, S_Xcen, S_Ycen, S_Zcen, S_corns, S_Ncorn, S_CornFile, \
  S_nXdiv, S_nYdiv, S_nZdiv, \
  S_FracDivY, S_FracDivZ, S_Xlen, S_Ylen, S_Zlen, S_Key, S_MateType, S_Mat, \
  S_Bc, S_Bxn, S_Byn, S_Bzn, S_Ispec, S_Color, WsearchVar, S_SearchVar

  global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi

  global WaddPol, WEditPol,WCopyPol, S_Iron_Cmag, S_Iron_Cmoth, S_Iron_Xcen, S_Iron_Ycen, S_Iron_Zcen, S_Iron_corns, S_Iron_Ncorn, S_Iron_CornFile, \
  S_Iron_nXdiv, S_Iron_nYdiv, S_Iron_nZdiv, \
  S_Iron_FracDivY,S_Iron_FracDivZ,S_Iron_Xlen, S_Iron_Ylen, S_Iron_Zlen, S_Iron_Key, S_Iron_MatType, S_Iron_Mat, \
  S_Iron_Bc, S_Iron_Bxn, S_Iron_Byn, S_Iron_Bzn, S_Iron_Ispec, S_Iron_Color

  global LastCLC, LastNAM
  global Nmoth, MyMoth, Moths, MothsXYZ, Hulls, DictMoths, DictCoils, DictCoilsHeader, DictCalcs, \
  NMothSel, NMagPolSel,MagPolsSel,DictMagPolsSel, MothsSel,DictMothsSel
  global Ngeo,Nvox,Facets,FcBox

  global WFileNAM, WSetSym, NamelistVars, DictNamelistVars, \
  S_IxSym, S_IySym, S_IzSym, S_KxCenter, S_xSym, S_xCenter, \
  cIxSym, cIySym, cIzSym, KxCenter, cIxSym, Xcenter, Xsym

  global GeoWaddVars, GeoWlistVars
  global Mirror, VMirror, Hybrid, VHybrid, Hybrid_Mode

  global WSetMap, \
  S_xMapMin,S_yMapMin,S_zMapMin,S_xMapMax,S_yMapMax,S_zMapMax, S_MHmap, \
  S_dxMap,S_NxMap,S_NyMap,S_NzMap,S_dxBeff,S_NxBeff, S_xMinBeff,S_xMaxBeff

  global NCoil, Coils, Filaments, S_Current_Coil, S_Name_Coil, \
  S_nWindings_Coil, S_Filling_Coil, \
  S_Xcen_Coil,S_Ycen_Coil,S_Zcen_Coil,S_VnX_Coil,S_VnY_Coil,S_VnZ_Coil, \
  S_AngRot_Coil,S_xLenOut_Coil,S_zLenIn_Coil,S_zLenOut_Coil,S_RadiusIn_Coil, \
  S_Height_Coil,S_nDivHeight_Coil,S_nDivWidth_Coil,S_nDivArc_Coil,S_Color_Coil, \
  WaddCoil,WaddCoils,Selected_Coil, Stored_Coil, Restore_Coil, CurrLoops, \
  WaddCoilRace,WaddCoilCirc

  global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi,Ntcyls,Ncylinder,DictCyls

+KEEP,uguiglobals,T=PYTHON.
*CMZ :  2.04/14 04/09/2023  14.42.33  by  Michael Scheer
*CMZ :  2.04/13 04/09/2023  09.59.52  by  Michael Scheer
*CMZ :  2.04/12 30/08/2023  09.28.56  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  15.27.56  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  10.49.05  by  Michael Scheer
*CMZ :  2.04/09 17/08/2023  11.38.41  by  Michael Scheer
*CMZ :  2.03/00 14/08/2022  15.24.55  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  11.18.16  by  Michael Scheer
*CMZ :  2.02/00 26/03/2021  10.47.49  by  Michael Scheer
*-- Author :    Michael Scheer   12/10/2020
#import m_hbook as m

global TransRotCop, EchoCLC,DictTransRotCop
global Xmin,Xmax,Ymin,Ymax,Zmin,Zmax

global Ucfg,Uclcorig, Uclc, Nmag, Npol, Nmodul, NspecMag, NspecPol, \
Magnets, Pols, SpecMags, SpecPols, NMagPol, MagPols,  NspecMagPol, SpecMagPols, \
NMagPolTot, MagPolsTot, DictMagPolsTot, DictCoils, DictCoilsHeader, DictCalcs, IclcRead, \
Nmat, Materials, Br, Rmu, Coating, PerLen, ChamfM, ChamfP, MCol, PCol, \
AirGap, KeeperGap, MspaceX, MoffY, Parameters, Variables, Npar, NCalc, Nvar, \
CalcLines,Calcs,Pars, Ucomment, Modules, MagPolsTotOld, MagPolOld, \
EditMag_CheckMode,CopyMag_CheckMode, EditMagX, EditMagY,CopyMagX, CopyMagY, WWait, WError, \
CheckVars, CheckCalcs, CheckDictCalcs, CheckVarNum, VarNum, \
MagPolsUpdate, MagPolsDel, NMagPolDel, SpecXYZ, DictCornFiles,S_Ucomment,\
S_ChamfUs, S_ChamfDs, S_Coating,DictVcomments,DictPcomments, IUNDUMAGisRunning

global NCoil, Coils, Filaments, S_Current_Coil, S_Name_Coil, \
S_nWindings_Coil,S_Filling_Coil, \
S_Xcen_Coil,S_Ycen_Coil,S_Zcen_Coil,S_VnX_Coil,S_VnY_Coil,S_VnZ_Coil, \
S_AngRot_Coil,S_xLenOut_Coil,S_zLenIn_Coil,S_zLenOut_Coil,S_RadiusIn_Coil, \
S_Height_Coil,S_nDivHeight_Coil,S_nDivWidth_Coil,S_nDivArc_Coil,S_Color_Coil, \
WaddCoil,WaddCoils, Selected_Coil, Stored_Coil, Restore_Coil, CurrLoops, \
WaddCoilRace,WaddCoilCirc

global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi,Ntcyls,Ncylinder,DictCyls

global Rmodus, Debug, Ical, MyFontStyle, MyFontSize,MyFont, RunUndu, \
MustUpdate, MustWriteCLC, UnduColors, DictUnduColors
global UMain,  Mgeo, Mmat, MpreDefs, MShowGeo,MShowGeo2, MListVars
global WaddMag, WappleII, Whybrid, WFileCLC, S_FileCLC, S_FileNAM, FileCLC, FileNAM, LinesNam, FileMu, \
WallListMags, WlistVars, WAddVars, WlistMat,Wmirror, WsetMirror

global Mirror, VMirror, Hybrid, VHybrid, Hybrid_Mode

global AppleII_Mode, AppleII, AppleIIOld, VAppleII, \
S_nPer_AppleII, S_FullGap_AppleII, \
S_Xlen_AppleII, S_Ylen_AppleII, S_Zlen_AppleII, \
S_DeadCoat_AppleII, S_AirGap_AppleII, S_Br_AppleII, S_Mu_AppleII, S_KsiPerp_AppleII, \
S_HorSlit_AppleII, S_S2Shift_AppleII, S_S3Shift_AppleII, \
S_NdivX_AppleII, S_NdivY_AppleII, S_NdivZ_AppleII, S_NdivXHalf_AppleII

global WEditMag,WCopyMag, S_Cmag, S_Cmoth, S_Xcen, S_Ycen, S_Zcen, S_corns, S_Ncorn, S_CornFile, \
S_nXdiv, S_nYdiv, S_nZdiv, S_FracDivY, S_FracDivZ, S_Xlen, S_Ylen, S_Zlen, S_Key, S_MateType, S_Mat, \
S_Bc, S_Bxn, S_Byn, S_Bzn, S_Ispec, S_Color

global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi

global WaddPol, WEditPol,WCopyPol, S_Iron_Cmag, S_Iron_Cmoth, S_Iron_Xcen, S_Iron_Ycen, S_Iron_Zcen, S_Iron_corns, S_Iron_Ncorn, S_Iron_CornFile, \
S_Iron_nXdiv, S_Iron_nYdiv, S_Iron_nZdiv,S_Iron_FracDivY, S_Iron_FracDivZ, S_Iron_Xlen, S_Iron_Ylen, S_Iron_Zlen, S_Iron_Key, S_Iron_MatType, S_Iron_Mat, \
S_Iron_Bc, S_Iron_Bxn, S_Iron_Byn, S_Iron_Bzn, S_Iron_Ispec, S_Iron_Color

global LastCLC, LastNAM
global Nmoth, MyMoth, Moths, MothsXYZ, Hulls, DictMoths, DictCoils, DictCoilsHeader, DictCalcs, \
NMothSel, NMagPolSel,MagPolsSel,DictMagPolsSel, MothsSel,DictMothsSel
global Ngeo,Nvox,Facets,FcBox

global WFileNAM, WSetSym, NamelistVars, DictNamelistVars, \
S_IxSym, S_IySym, S_IzSym, S_KxCenter, S_xSym, S_xCenter, \
cIxSym, cIySym, cIzSym, KxCenter, cIxSym, Xcenter, Xsym

global V_CmagOld, V_CmothOld, V_XcenOld, V_YcenOld, V_ZcenOld, V_cornsOld, V_NcornOld, V_CornFileOld, \
V_nXdivOld, V_nYdivOld, V_nZdivOld, V_FracDivYOld, V_FracDivZOld, V_XlenOld, V_YlenOld, V_ZlenOld, V_KeyOld, V_MatTypeOld, V_MatOld, \
V_BcOld, V_BxnOld, V_BynOld, V_BznOld, V_IspecOld

global WEditMagOld, WCopyMagOld, S_CmagOld, S_CmothOld, S_XcenOld, S_YcenOld, S_ZcenOld, S_cornsOld, S_NcornOld, S_CornFileOld, \
S_nXdivOld, S_nYdivOld, S_nZdivOld, S_FracDivYOld, S_FracDivZOld, S_XlenOld, S_YlenOld, S_ZlenOld, S_KeyOld, S_MateTypeOld, S_MatOld, \
S_BcOld, S_BxnOld, S_BynOld, S_BznOld, S_IspecOld

global S_CylrIn,S_CylrOut,S_CylHeight,S_CyldPhi, DictHulls

global V_Cmag, V_Cmoth, V_Xcen, V_Ycen, V_Zcen, V_corns, V_Ncorn, V_CornFile, \
V_nXdiv, V_nYdiv, V_nZdiv, V_FracDivY, V_FracDivZ, V_Xlen, V_Ylen, V_Zlen, V_Key, V_MatType, V_Mat, \
V_Bc, V_Bxn, V_Byn, V_Bzn, V_Ispec

global WEditMag,WCopyMag, S_Cmag, S_Cmoth, S_Xcen, S_Ycen, S_Zcen, S_corns, S_Ncorn, S_CornFile, \
S_nXdiv, S_nYdiv, S_nZdiv, S_FracDivY, S_FracDivZ, S_Xlen, S_Ylen, S_Zlen, S_Key, S_MateType, S_Mat, \
S_Bc, S_Bxn, S_Byn, S_Bzn, S_Ispec, WsearchVar, S_SearchVar

global WSetMap, \
S_xMapMin,S_yMapMin,S_zMapMin,S_xMapMax,S_yMapMax,S_zMapMax, S_MHmap, \
S_dxMap,S_NxMap,S_NyMap,S_NzMap,S_dxBeff,S_NxBeff,S_xMinBeff,S_xMaxBeff

+DECK,undugui,T=PYTHON.
*CMZ :  2.04/13 01/09/2023  08.13.17  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  08.19.02  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  11.28.16  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  16.32.24  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  10.25.22  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  10.21.28  by  Michael Scheer
*CMZ :  2.02/01 14/04/2021  13.09.46  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  10.26.36  by  Michael Scheer
*CMZ :  2.01/08 30/07/2020  10.49.14  by  Michael Scheer
*CMZ :  1.32/11 14/04/2020  16.26.11  by  Michael Scheer
*CMZ :  1.32/05 25/10/2019  14.13.42  by  Michael Scheer
*-- Author :    Michael Scheer   09/10/2019

# +PATCH,//UNDUMAG/PYTHON
# +DECK,undugui,T=PYTHON.

global WavesMode
WavesMode = 'UNDUMAG'

global idebug
idebug = 0
def debug(arg=''):
  global idebug
  idebug += 1
  print("idebug:",idebug)
  if arg: print("\n",arg,"\n")
#enddef debug(arg)

+seq,uguiimports.
+seq,uguiglobals.
+seq,undumagplotglobal.

global Ntcyls, Ncylinder
Ntcyls = []
Ncylinder = 0
DictCyls = {}
DictHulls = {}
#=============================================================================

+self,if=trace.
debug("trace:: Before $uguiini")
+self.
+seq,uguiini.
+self,if=trace.
debug("trace:: After $uguiini, before ureadclc")
+self.
+seq,ureadclc.
+self,if=trace.
debug("trace:: After ureadclc")
+self.

def start():
  pass
#enddef

def _nTopLevel(title='TopLevel',att='-topmost',attn=1):
  tl = Toplevel()
  tl.title(title)
  tl.attributes(att,attn)
  return tl
#enddef _nTopLevel

def _MbLeave(ev):
+seq,uguiglobind.
  Mgeo.unpost()
  Mmat.unpost()
#enddef _MbLeave(ev)

def _MenuBar(ev):
+seq,uguiglobind.

  item = Umaster.call(ev.widget, "index", "active")
  #print("Index:",type(item), item)

  x,y = Umaster.winfo_pointerxy()
  ww, wh, wx, wy = getgeo()

  rx = (x-wx) / ww
  #print(item,rx)

  rxgeoi = 0.
  rxgeoe = 0.093
  rxmati = 0.09
  rxmate = 0.179

  xgeoi = wx + rxgeoi * ww
  xgeoe = wx + rxgeoe * ww
  ixgeo = int(xgeoi)

  xmati = wx + rxmati * ww
  xmate = wx + rxmate * ww
  ixmat = int(xmati)

  iytb = int(wy + 0.1 * wh)

  if item == 1:
    Mgeo.post(ixgeo,iytb)
    Mmat.unpost()
  elif item == 2:
    Mmat.post(ixmat,iytb)
    Mgeo.unpost()
  elif rx >= rxmate:
    Mgeo.unpost()
    Mmat.unpost()
  #endif index

#enddef _MenuBar(ev)

def _exit():
  #print("Entered _exit")
  Quit("\n\n --- End of undugui.py --- \n")
#enddef _exit()

def _canvas_key(ev):
  if ev.key in ['q', 'Q']:
      Quit()
#enddef canvas_key(ev)

+self,if=trace.
debug("trace:: Before uwriteclc")
+self.
+seq,uwriteclc.
+self,if=trace.
debug("trace:: After uwriteclc")
+self.

def ureadfil(callkey=''):

+seq,uguiglobind.

  #debug("debug: Filaments")

+self,if=trace.
  print(NL,"trace::ureadfil:",callkey,NCoil)
+self.

  IUNDUMAGisRunning = 1
  os.system(RunUndu + " " + Rmodus)
  IUNDUMAGisRunning = 0

  undu_get_runnumber()

  if NCoil > 0:

    try:
      Fsta = open("undumag.sta","r")
      cline = Fsta.readline().strip()
      cline = Fsta.readline().strip()
      if cline != 'Calculation of coil filaments finished':
        wError("\n*** UNDUMAG run for filaments failed ***")
      #endif trim(cline) != ' Segmentation finished'
    except:
      wError("\n*** UNDUMAG run for filaments failed ***")
    #endtry

    if not fexist("undumag.fil"):
+self,if=trace.
      print(NL,"trace:: Leaving ureadfil: No file undumag.fil")
+self.
      return
    #endif
  #endif NCoil

  tclc = os.stat('undumag.clc').st_mtime_ns
  tfil = os.stat('undumag.fil').st_mtime_ns

  if tclc > tfil:
    print(NL,"*** Warning: File undumag.fil older then undumag.clc, will ignore it.\nRerun UNDUMAG with appropriate number of coils or delete it.")
    return
  #endif

  Ffil = open("undumag.fil","r")
  fils = Ffil.readlines()
  Ffil.close()

  fs = fils[1].split()
  icoilo = fs[-1]
  icoil = icoilo
  l = len(fils)
  i = 0
  fil = []
  while i < l:
    i += 1
    fs = fils[i].split()
    icoil = fs[-1]
    if icoil != icoilo:
      Filaments.append(fil)
      fil = []
    elif i == l - 1:
      for k in range(len(fs)): fs[k] = float(fs[k])
      fs[0] = int(fs[0])
      for k in range(1,8): fs[k] = float(fs[k])
      for k in range(8,11): fs[k] = int(fs[k])
      fil.append(fs)
      Filaments.append(fil)
      break
    #endif
    for k in range(len(fs)): fs[k] = float(fs[k])
    fs[0] = int(fs[0])
    for k in range(1,8): fs[k] = float(fs[k])
    for k in range(8,11): fs[k] = int(fs[k])
    fil.append(fs)
    icoilo = icoil
  #endwhile

  if len(Filaments) != len(Coils): Quit("*** Error in ureadfil(): Number of coils does not match ***")

  #debug("debug: Ende Filaments")
+self,if=trace.
  print(NL,"trace:: Leaving ureadfil")
+self.
#enddef

+self,if=trace.
debug("trace:: Before ureadclc")
+self.
+seq,undumagseq.
+self,if=trace.
debug("trace:: After $undumag")
+self.

#=============================================================================

if platform.system() == 'Linux': RunUndu = "bash $UNDUMAG/shell/undumag_run.sh"
elif platform.system() == 'Windows': RunUndu = '..\\bin\\undumag.exe '
else: Quit("*** Error: Unknown platform: ",platform.system())

iLoad = 0
EchoCLC = 0

#debug()
if os.path.exists("undugui.cfg"):
  Fcfg = open("undugui.cfg","r")
  Ucfg = Fcfg.readlines()
  for line in Ucfg:
    line = line.split('!')
    line = line[0].strip()
    words = line.split(':')
    w0 = words[0].strip().upper()
    w1 = 'FALSE'
    if len(words) > 1:
      w1 = words[1].strip().upper()
    if w1 == '1': w1 == 'TRUE'
    if w0 == 'RUNUNDU': RunUndu = words[1]
    if w0 == 'ECHOCLC' and w1 == 'TRUE': EchoCLC = 1
    if w0 == 'LOADLAST' and w1 == 'TRUE': iLoad += 1
    if w0 == 'SHOWLAST' and w1 == 'TRUE': iLoad += 10
  #endfor
  Fcfg.close()
#endtry

+self,if=debugureadclc.
ugui_ini()
ureadclc('debugureadclc')
Quit("Stop after test call to ureadclc")
+self.

NL = "\n"
Rmodus = ''

AppleII = {}

+self,if=trace.
debug("trace:: Before mshwelcome")
+self.
mshwelcome(program='UNDUMAG',year='2022')
+self,if=trace.
debug("trace:: After mshwelcome, before undu_get_runnumber")
+self.

undu_get_runnumber()
+self,if=trace.
debug("trace:: Before ugui_ini")
+self.
ugui_ini()
+self,if=trace.
debug("trace:: After ugui_ini, before $ugui")
+self.

+seq,ugui.
+self,if=trace.
debug("trace:: After $ugui, before ntupini")
+self.
start()

ntupini()
+self,if=trace.
debug("trace:: After ntupini(), before startup")
+self.
startup("undugui_start.py")
+self,if=trace.
debug("trace:: After startup")
+self.

WaveFilePrefix = 'undugui_'

#debug("Vor iLoad")
if iLoad:
+self,if=trace.
  debug("trace:: Before ureadclc")
+self.
  ureadclc("Load")
+self,if=trace.
  debug("trace:: After ureadclc")
+self.
  if iLoad > 1:
+self,if=trace.
    debug("trace:: Before _showGeo")
+self.
    _showGeo("3d")
+self,if=trace.
    debug("trace:: After _showGeo")
+self.
  #endif
#endif
#uwriteclc()
#Quit("Ende nach uwriteclc")

#_WaddCoils()
#_WaddCoilRace()
#_listCoils()

#Quit("\n\n --- End of undugui.py --- \n")
+KEEP,undumagplot,T=PYTHON.
*CMZ :  2.04/14 04/09/2023  13.21.19  by  Michael Scheer
*CMZ :  2.04/06 19/05/2023  14.39.38  by  Michael Scheer
*CMZ :  2.04/00 12/01/2023  13.01.22  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  08.59.11  by  Michael Scheer
*CMZ :  2.02/02 03/03/2022  12.00.04  by  Michael Scheer
*CMZ :  2.02/01 14/04/2021  15.36.43  by  Michael Scheer
*CMZ :  2.02/00 25/03/2021  13.45.13  by  Michael Scheer
*CMZ :  2.01/08 09/08/2020  17.37.56  by  Michael Scheer
*CMZ :  2.01/05 05/03/2020  15.42.01  by  Michael Scheer
*-- Author : Michael Scheer

# +PATCH,//UNDUMAG/PYTHON
# +KEEP,undumagplot,T=PYTHON.

+seq,undureadbeff.

def check_run():
  global MrunOld, Nreload, Mrun
  undu_get_runnumber()
  if MrunOld == -1:
    MrunOld = Mrun
  else:
    if Mrun != MrunOld:
      window_clear()
      MrunOld = Mrun
  #endif
  if Nreload == 1: nreloadupl()
#enddef

def wError(errtxt='Fehler in undumag_plot.py'):
  print(errtxt)
#enddef

def undu_traj(varlis='x:z:y',sel="",plopt=''):
+seq,uguibeffglobind.
  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil,Kover,Kurad

  if not os.path.exists("urad_traxyz.dat"):
    Kurad = 0
    return
  #endif

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("ntraj"):
    vlis = 'x:y:z:t:vx:vy:vz:Bx:By:Bz:gamma:Ex:Ey:Ez'
    ntraj = ncread("ntraj",vlis,"urad_traxyz.dat")
  #endif not UnduTrajRead

  Kurad = 1

  ebeam = ntraj.gamma.max()*0.000511

  ms = getmarkersize()
  setmarkersize(1.0)

  nplot("ntraj",varlis,sel,"",plopt)

  if not re.search("same",plopt) and varlis == 'x:z:y':
    txyz("Trajectory for E = " + str("%g"%ebeam) + " GeV","x [mm]","z [mm]","y [mm]")

  setmarkersize(ms)
#enddef undu_traj(sel="",plopt='')

def undu_get_runnumber():

  global MrunOld, Nreload, Kover, Mrun,Mcomment,Mdate,Waveplot,Krun,ROFx,ROFy

  try:
    Frun = open("undumag.run",'r')
    srun = Frun.readline().strip()
    Frun.close()
    spl = srun.split(' ',1)
    Mrun = spl[0]
    spl = spl[1].strip().split()
    Mcomm = ""
    for i in range(len(spl)-2): Mcomm += ' ' + spl[i]
    Mcomment = ""
    for c in Mcomm:
      if ord(c) != 0: Mcomment += c
    #endfor
    #Mcomment.strip()
    Mdate = spl[-1] + " " + spl[-2]
  except:
    Mrun = '-9999'
    Mcomment = 'No file undumag.run found'
    Mdate = time.asctime(time.localtime(time.time()))
  #endtry

  Waveplot = 2

  Krun = True

  ROFx = 1.0-len(Mcomment)/100
  ROFx = 0.03
  ROFy = 0.95

#enddef undu_get_runnumber()

#if not MShWelcome: undu_get_runnumber()

def undu_nbybz_profile(sel="",plopt=''):

  global MrunOld, Nreload, Kover, Mrun
  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nbprof"):
    vlis = 'x:y:z:Bx:By:Bz'
    nbprof = ncread("nbprof",vlis,"undumag_field_profile.dat")
  else:
    nbprof = nget("nbprof")
  #endif not UnduMapRead

  if plopt == '':
    if len(nbprof) < 20:
      plopt = 'marker'
    else:
      plopt = 'line'
    #endif
  #endif

  plotopt(plopt)
  iline, imarker = Iline,Imarker

  if Iline:
    nplot("nbprof","z:By",sel,"",'line')
    lmblue()
    nplot("nbprof","z:Bz",sel,"",'sameline')
    lmred()
    if imarker:
      nplot("nbprof","z:By",sel,"",'samemarker')
      lmblue()
      nplot("nbprof","z:Bz",sel,"",'samemarker')
    #endif
    imarker = 0
   #endif

  lmred()
  if imarker:
    nplot("nbprof","z:By",sel,"",'marker')
    lmblue()
    nplot("nbprof","z:Bz",sel,"",'samemarker')
    if not Kover: plt.legend(['By','Bz'])
  #endif
  lmred()

  if not Kover: plt.legend(['By','Bz'])

  tit = "Field Profile"
  if sel != "": tit += ' ( ' + sel + ' )'
  txyz(tit,"z [mm]","B [T]")

#enddef undu_nbybz_profile()

def undu_read_guimode():
  global ngmod
  if not nexist("ngmod") and os.path.exists("undumag.gmd"):
    ngmod = ncread("ngmod","krun:gmod","undumag.gmd")
  #endif
#enddef

def undu_read_mat():

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

+self,if=tracepl.
  print("tracepl::undu_read_mat: Entered")
+self.
  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nmat"):
    nmat = ncread("nmat","mat:mtyp:mkind:h:m:chi","undumag.mat")
  #endif

  if not nexist("nbr") and os.path.exists("undumag.brn"):
    fmh = open("undumag.brn","r")
    lines = fmh.readlines()
    fmh.close()
    if len(lines) > 1:
      nbr = ncread("nbr","mat:br","undumag.brn")
    #endif
  #endif

  if not nexist("nmh") and os.path.exists("undumag.mh"):
    fmh = open("undumag.mh","r")
    lines = fmh.readlines()
    fmh.close()
    if len(lines) > 1:
      nmh = ncread("nmh","mtyp:mmod:easyX:easyY:easyZ:h:m:mat:kbr","undumag.mh")
    #endif
  #endif

+self,if=tracepl.
  print("tracepl::undu_read_mat: Leaving")
+self.
#enddef

def undu_mat_mh(mat=12):
+self,if=tracepl.
  print("tracepl::undu_mat_mh: Entered")
+self.
  optnstat()
  undu_read_mat()

  mat1 = 1
  mat2 = 1

  if mat == 12:
    if nexist("nmh"):
      if nmh.mtyp.min() == 1 and nmh.mtyp.max() == 2:
        zone(3,1)
        mat1 = 1
        mat2 = 2
      #endif
    else:
      mat1 = 0
      mat2 = 0
    #endif
  elif mat == 1:
    mat1 = nexist("nmh")
    mat2 = 0
  elif mat == 2:
    mat1 = 0
    mat2 = nexist("nmh")
  #endif

+self,if=tracepl.
  print("tracepl::undu_mat_mh: mat1,mat2:",mat1,mat2)
+self.
  if mat1 == 0 and mat2 == 0:

    if mat == 1:

      if nexist("nmat"):

        n1 = nmat.query("mtyp==1")
        nmatmax = n1.mat.max()

        magmin = n1.m.min()
        magmax = n1.m.max()
        hmin = n1.h.min()
        hmax = n1.h.max()

        null(hmin,hmax,magmin,magmax)

        for i in range(nmatmax):
          sel = "mtyp==1 and mat==" + str(i+1)
          h1 = nmat.query(sel).h.min()
          h2 = nmat.query(sel).h.max()
          m1 = nmat.query(sel).m.min()
          m2 = nmat.query(sel).m.max()
          chi = (m2-m1) / (h2-h1)
          npllbs(nmat,"h:m",sel)
          dm = m2 - m1
          dh = (h2-h1)*0.8
          textWC(h1+dh,m1+dh*chi-dm*0.2,"$\mu_0$ = " + str(g3(chi+1.0)),8)
        #endfor

        txyz("Magnetisation along easy-axis","H [T]","$\mu_0$ M [T]")
      #endif

    elif mat == 2:
      pass
    #endif mat == 1

  elif mat1 == 1:

    if len(nmh.query("mtyp==1")):

      setmarkersize(2)

      hmn = nmh.query('mtyp==1').h.min()
      hmx = nmh.query('mtyp==1').h.max()
      dh = (hmx - hmn) / 20.
      if dh < 1.e-6: dh = 0.1
      hmn -= dh
      hmx += dh

      bcmn = nmh.query('mtyp==1').m.min()
      bcmx = nmh.query('mtyp==1').m.max()
      dh = (bcmx - bcmn) / 20.
      if dh < 1.e-6: dh = 0.1

      bcmn -= dh
      bcmx += dh

      null(hmn,hmx,bcmn,bcmx)

      nplmrs(nmh,"h:m","mtyp==1")

      if nexist("nbr"):
        vm,vbr = ncopv(nbr,"mat:abs(br)")
        lbr = len(vbr)
        for i in range(lbr):
          sel = "mat==" + str(vm[i])
          h1 = nmat.query(sel).h.min()
          h2 = nmat.query(sel).h.max()
          m1 = nmat.query(sel).m.min()
          m2 = nmat.query(sel).m.max()
          chi = (m2-m1) / (h2-h1)
          npllbs(nmat,"h:m",sel)
          print(sel,h1,h2,m1,m2)
          dm = bcmx - bcmn
          dh = (hmx-hmn)*0.8
          textWC(hmn+dh,bcmn+dh*chi-dm*0.2,"$\mu_0$ = " + str(g3(chi+1.0)),8)
        #endfor
      #endif

      txyz("Magnetisation along easy-axis","H [T]","$\mu_0$ M [T]")

  #endif

  if mat2 == 2:

    if mat1: nextzone()

    hmn = max(nmh.query('mtyp==2 and mmod==3').h.min(),nmat.query('mtyp==2 and mkind==3').h.min())
    hmx = min(nmh.query('mtyp==2 and mmod==3').h.max(),nmat.query('mtyp==2 and mkind==3').h.max())

    setmarkersize(2)
    null(0.,0.005,0.,2.5)
    txyz("Magnetisation of Fe","H [T]","$\mu_0$ M [T]")

    nplot(nmh,"h:m","mtyp==2 and mmod==3 and h<0.005","","same")
    xint = vcre(1000,hmn,0.005)
    ninter(nmat,"h:m","mtyp==2 and mkind==3",xint)
    nplot(Ninter,"x:y","","","sameline",color='b')
    nextzone()

    hmx = nmh.query('mtyp==2 and mmod==3').h.max()
    null(0.,hmx*1.1,0.,2.5)
    txyz("Magnetisation of Fe","H [T]","$\mu_0$ M [T]")

    sel = "mtyp == 2 and mmod==3 and h <=" + str(hmx)
    nplot(nmh,"h:m",sel,"","same")
    xint = vcre(1000,hmn,hmx)
    sel = "mtyp == 2 and mkind==3 and h <=" + str(hmx)
    ninter(nmat,"h:m","mat==2",xint)
    nplot(Ninter,"x:y","","","sameline",color='b')

  #endif

+self,if=tracepl.
  print("tracepl::undu_mat_mh: Leaving")
+self.
#enddef undu_mat_mh(mat=12)

def undu_read_map():

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nmap") and fexist("undumag.map"):
    fmap = open("undumag.map","r")
    icomm = 1
    ncomm = 0
    while icomm:
      cline = fmap.readline()
      if cline[0] != '*': icomm=0
      ncomm += 1
    #endwhile
    words = cline.split()
    if len(words) > 8:
      vlis = 'kmoth:kmag:mat:ityp:matmod:x:y:z:Bx:By:Bz:B:Hx:Hy:Hz:H:Mx:My:Mz:M:BxD:ByD:BzD:ifail:kfail'
    else:
      vlis = 'x:y:z:Bx:By:Bz:ifail:kfail'
    #endif
    nmap = ncread("nmap",vlis,"undumag.map",skiphead=ncomm)
  #endif not UnduMapRead

  if not nexist("nmapint") and fexist("undumag_integral.map"):
    vlis = 'xi:xe:y:z:byint1:bzint1:byint2:bzint2'
    nmapint = ncread("nmapint",vlis,"undumag_integral.map")
  #endif not UnduMapRead

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nmapintinf"):
    vlis = 'y:z:byint1:bzint1:byint1dip:bzint1dip'
    nmapintinf = ncread("nmapintinf",vlis,"undumag_integrals_inf.map")
  #endif not UnduMapRead

#enddef undu_read_map()

def undu_nbybz_eff(sel="",plopt='line'):
+seq,uguibeffglobind.

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil
  global Nhead

  undu_readbeff()

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nbyeff"):
    nbyeff = ncread("nbyeff","n:x:by:bz:ifail","undumag_byeff.dat")
  #endif

  if not nexist("nbzeff"):
    nbzeff = ncread("nbzeff","n:x:by:bz:ifail","undumag_bzeff.dat")
  #endif

  ksta = getstat()
  optnstat()

  nplot("nbyeff","x:by",sel,"",plopt)
  lmblue()
  nplot("nbzeff","x:bz",sel,"",plopt+"same")
  #if not Kover: plt.legend(['By', 'Bz'])

  if not Kover:
    text(0.7,0.9,"ByMax: "+ '{:.3g}'.format(Undu_ByMax) + " T",color='red',halign='left')
    text(0.7,0.82,"ByMin: "+ '{:.3g}'.format(Undu_ByMin) + " T",color='red',halign='left')
    text(0.7,0.7,"BzMax: "+ '{:.3g}'.format(Undu_BzMax) + " T",color='blue',halign='left')
    text(0.7,0.62,"BzMin: "+ '{:.3g}'.format(Undu_BzMin) + " T",color='blue',halign='left')
    text(0.60,0.26,"Beff: "+ '{:.3g}'.format(Undu_Beff) + " T",16,halign=LEFT)
    text(0.60,0.20,"Keff: "+ '{:.3g}'.format(Undu_Keff),16,halign=LEFT)
  else:
    text(0.3,0.9,"ByMax: "+ '{:.3g}'.format(Undu_ByMax) + " T",color='red',halign='left')
    text(0.3,0.82,"ByMin: "+ '{:.3g}'.format(Undu_ByMin) + " T",color='red',halign='left')
    text(0.3,0.7,"BzMax: "+ '{:.3g}'.format(Undu_BzMax) + " T",color='blue',halign='left')
    text(0.3,0.62,"BzMin: "+ '{:.3g}'.format(Undu_BzMin) + " T",color='blue',halign='left')
    text(0.65,0.26,"Beff: "+ '{:.3g}'.format(Undu_Beff) + " T",halign=LEFT)
    text(0.65,0.20,"Keff: "+ '{:.3g}'.format(Undu_Keff),halign=LEFT)
  #endif

#  nogrid()

  if not re.search("same",plopt): txyz("On-axis field for Beff","x [mm]","B [T]")
  lmred()

  optstat(ksta)
#enddef undu_nbybz_eff(sel="",plopt='line')

def undu_nbybz(sel="",plopt='line',lzone=0):
+seq,uguibeffglobind.

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil,Kover

  if not Kover and lzone == 0:
    check_run()
    zone(1,1)
  #endif

  ksta = getstat()
  optnstat()

  if not nexist("nuon"):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
  #endif not Uonread

  nplot("nuon","x:by",sel,"",plopt)
  lmblue()
  nplot("nuon","x:bz",sel,"",plopt+"same")
  if not Kover: plt.legend(['By', 'Bz'])

  if not re.search("same",plopt): txyz("On-axis field","x [mm]","B [T]")
  lmred()

  optstat(ksta)

#enddef undu_nbybz(sel="",plopt='line')

def undu_nbybzInt1(sel="",plopt='line'):
+seq,uguibeffglobind.

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  optnstat()

  if not nexist("nuon"):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
  #endif not Uonread

  undu_readbeff()

  nplot("nuon","x:byi",sel,"",plopt)
  lmblue()
  nplot("nuon","x:bzi",sel,"",plopt+"same")
  #if not Kover: plt.legend(['By_Int1', 'Bz_Int1'])

  if not Kover:
    text(0.6,0.9,"1. Integral of By: "+ '{:.3g}'.format(Undu_ByInt1) + " Tmm",color='red',halign='left')
    text(0.6,0.82,"1. Integral of Bz: "+ '{:.3g}'.format(Undu_BzInt1) + " Tmm",color='blue',halign='left')
  else:
    text(0.01,0.9,"1. Int. of By:\n"+ '{:.3g}'.format(Undu_ByInt1) + " Tmm",6,color='red',halign='left')
    text(0.01,0.7,"1. Int. of Bz:\n"+ '{:.3g}'.format(Undu_BzInt1) + " Tmm",6,color='blue',halign='left')
  #endif

  if not re.search("same",plopt): txyz("First integral of on-axis field","x [mm]","B_Int_1 [Tmm]")
  lmred()

#enddef undu_nbybzInt1(sel="",plopt='line')

def undu_nbybzInt2(sel="",plopt='line'):
+seq,uguibeffglobind.

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nuon"):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
  #endif not Uonread

  undu_readbeff()

  nplot("nuon","x:byii",sel,"",plopt)
  lmblue()
  nplot("nuon","x:bzii",sel,"",plopt+"same")

  if not Kover:
    text(0.7,0.9,"2. Integral of By: "+ '{:.3g}'.format(Undu_ByInt2) + " Tmm$^{2}$",color='red')
    text(0.7,0.82,"2. Integral of Bz: "+ '{:.3g}'.format(Undu_BzInt2) + " Tmm$^{2}$",color='blue')
  else:
    text(0.01,0.9,"2. Int. of By:\n"+ '{:.3g}'.format(Undu_ByInt2) + " Tmm$^{2}$",6,color='red',halign='left')
    text(0.01,0.7,"2. Int. of Bz:\n"+ '{:.3g}'.format(Undu_BzInt2) + " Tmm$^{2}$",6,color='blue',halign='left')
  #endif

  if not re.search("same",plopt): txyz("Second integral of on-axis field","x [mm]","B_Int_2 [Tmm$^{2}$]")
  lmred()

#enddef undu_nbybzInt2(sel="",plopt='line')

def undu_nbzeff(sel="",plopt='line'):
+seq,uguibeffglobind.
  global Ubzeffread

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nbzeff"):
    nbzeff = ncread("nbzeff","n:x:by:bz:ifail","undumag_bzeff.dat")
  #endif not Ubzeffread

  nplot("nbzeff","x:bz",sel,"",plopt)
  if not re.search("same",plopt): txyz("Field for BzEff","x[mm]","Bz[T]")
#enddef undu_nbz()

def undu_nbyeff(sel="",plopt='line'):
+seq,uguibeffglobind.

  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nbyeff"):
    nbyeff = ncread("nbyeff","n:x:by:bz:ifail","undumag_byeff.dat")
  #endif not Ubyeffread

  nplot("nbyeff","x:by",sel,"",plopt)
  if not re.search("same",plopt): txyz("Field for ByEff","x[mm]","By[T]")
#enddef undu_nbz()

def undu_nby(sel="",plopt='line'):
+seq,uguibeffglobind.
  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nuon"):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
  #endif not Uonread
  nplot("nuon","x:by",sel,"",plopt)
  if not re.search("same",plopt): txyz("On-axis field","x[mm]","By[T]")
#enddef undu_nbz()

def undu_nbyint1(sel="",plopt='line'):
+seq,uguibeffglobind.
  Quit("War mal falsch, noch nötig??")
  if not nexist("nuon"):
    window_clear()
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
  #endif not Uonread
  nplot("nuon","x:byi",sel,"",plopt)
  if not re.search("same",plopt): txyz("On-axis field","x[mm]","By[T]")
#enddef undu_nbz()

def undu_nby(sel="",plopt='line'):
+seq,uguibeffglobind.
  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nuon"):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
  #endif not Uonread
  nplot("nuon","x:by",sel,"",plopt)
  if not re.search("same",plopt): txyz("On-axis field","x[mm]","By[T]")
#enddef undu_nby()

def undu_nbz(sel="",plopt='line'):
+seq,uguibeffglobind.
  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil

  if not Kover:
    check_run()
    zone(1,1)
  #endif

  if not nexist("nuon"):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
  #endif not Uonread
  nplot("nuon","x:bz",sel,"",plopt)
  if not re.search("same",plopt): txyz("On-axis field","x[mm]","Bz[T]")
  #endif not re.search("same",plopt)
#enddef undu_nby()

def undu_b():
+seq,argumentsind.
+seq,mhbglobind.

  global Uonread, Ubyeffread, Ubzeffread, UnduMapRead

  print("\n--- Begin of undu_b() ---\n")

  knew = 0
  check_run()

  if not nexist('nuon'):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")
    knew = 1
  if not nexist('nbyeff'):
    nbyeff = ncread("nbyeff","n:x:by:bz:ifail","undumag_byeff.dat")
    knew = 1
  if not nexist('nbzeff'):
    nbzeff = ncread("nbzeff","n:x:by:bz:ifail","undumag_bzeff.dat")
    knew = 1

  if not nexist("nmap") and fexist("undumag.map"):
    fmap = open("undumag.map","r")
    icomm = 1
    ncomm = 0
    while icomm:
      cline = fmap.readline()
      if cline[0] != '*': icomm=0
      ncomm += 1
    #endwhile
    words = cline.split()
    if len(words) > 8:
      vlis = 'kmoth:kmag:mat:ityp:matmod:x:y:z:Bx:By:Bz:B:Hx:Hy:Hz:H:Mx:My:Mz:M:BxD:ByD:BzD:ifail:kfail'
    else:
      vlis = 'x:y:z:Bx:By:Bz:ifail:kfail'
    #endif
    nmap = ncread("nmap",vlis,"undumag.map",skiphead=ncomm)
    knew = 1
  #endif

  Uonread = 1
  Ubyeffread = 1
  Ubzeffread = 1
  UnduMapRead = 1

  if knew: nlist()
  #nplot(nuon,"x:by")

  print("\n--- End of undu_b() ---\n")

#enddef undu_b():

def ndeleteupl(isilent=1):
  if Nntup > 0: print("\n --- Deleting old Ntuples\n")
  ndelete("Nvox",isilent)
  ndelete("ngeo",isilent)
  ndelete("nmap",isilent)
  ndelete("nmapint",isilent)
  ndelete("nmapintinf",isilent)
  ndelete("nbyeff",isilent)
  ndelete("nbzeff",isilent)
  ndelete("ncoil",isilent)
  ndelete("nbprof",isilent)
  ndelete("ntraj",isilent)
  ndelete("nuon",isilent)
  ndelete("nmat",isilent)
  ndelete("nmh",isilent)
#enddef ndeleteupl(isilent=0)

def nreloadupl():

  global Nreload,Nvox
  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil,ngeo

  ndeleteupl()

  # Attention: There is also an Ngeo in undugui.py
  if not nexist("ngeo"):
    if fexist("undumag.geo"):
      tclc = os.stat('undumag.clc').st_mtime_ns
      tgeo = os.stat('undumag.geo').st_mtime_ns
      if tclc > tgeo:
        wError("undumag.geo is older than undumag.clc!")
      else:
        ngeo = ncread("ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
      #endif
    #endif
  #endif

  if fexist('undumag_voxels.geo'):
    tclc = os.stat('undumag.clc').st_mtime_ns
    tgeo = os.stat('undumag_voxels.geo').st_mtime_ns
    if tclc > tgeo:
      wError("undumag_voxels.geo is older than undumag.clc!")
    else:
      print('\n--> Reading undumag_voxels.geo')
      Nvox = ncread("Nvox","mag:ivox:ix:iy:iz:iplan:icorn:x:y:z:xc:yc:zc:vol:icol","undumag_voxels.geo")
      print('\n--> Done')
    #endif
  #endif

  if fexist('urad_traxyz.dat'):
    vlis = 'x:y:z:t:vx:vy:vz:Bx:By:Bz:gamma:Ex:Ey:Ez'
    ntraj = ncread("ntraj",vlis,"urad_traxyz.dat")
  #endif

  if fexist('undumag_field_profile.dat'):

    vlis = 'x:y:z:Bx:By:Bz'
    nbprof = ncread("nbprof",vlis,"undumag_field_profile.dat")

  #endif

  if fexist('undumag_integral.map'):
    vlis = 'xi:xe:y:z:byint1:bzint1:byint2:bzint2'
    nmapint = ncread("nmapint",vlis,"undumag_integral.map")

  #endif

  if fexist('undumag_integrals_inf.map'):
    vlis = 'y:z:byint1:bzint1:byint1dip:bzint1dip'
    nmapintinf = ncread("nmapintinf",vlis,"undumag_integrals_inf.map")
  #endif

  if fexist('undumag.mat'):
    nmat = ncread("nmat","mat:mtyp:mkind:h:m:chi","undumag.mat")
  #endif

  if fexist('undumag.mh'):
    fmh = open('undumag.mh','r')
    mh = fmh.readlines()
    fmh.close()
    if len(mh) > 1:
      nmh = ncread("nmh","mtyp:mmod:easyX:easyY:easyZ:h:m:mat:kbr","undumag.mh")
    #endif
  #endif

  if not nexist("nbr") and os.path.exists("undumag.brn"):
    fmh = open("undumag.brn","r")
    lines = fmh.readlines()
    fmh.close()
    if len(lines) > 1:
      nbr = ncread("nbr","mat:br","undumag.brn")
    #endif
  #endif

  if fexist('undumag_on-axis.dat'):
    nuon = ncread("nuon","x:by:bz:byi:bzi:byii:bzii:ifail","undumag_on-axis.dat")

  if fexist('undumag_byeff.dat'):
    nbyeff = ncread("nbyeff","n:x:by:bz:ifail","undumag_byeff.dat")

  if fexist('undumag_bzeff.dat'):
    nbzeff = ncread("nbzeff","n:x:by:bz:ifail","undumag_byeff.dat")

  if fexist('undumag_byeff.fil'):
    ncoil = ncread("ncoil","itype:curr:x1:y1:z1:x2:y2:z2:icol:num:ncoil","undumag.fil")

  if fexist("undumag.map"):
    fmap = open("undumag.map","r")
    icomm = 1
    ncomm = 0
    while icomm:
      cline = fmap.readline()
      if cline[0] != '*': icomm=0
      ncomm += 1
    #endwhile
    words = cline.split()
    if len(words) > 8:
      vlis = 'kmoth:kmag:mat:ityp:matmod:x:y:z:Bx:By:Bz:B:Hx:Hy:Hz:H:Mx:My:Mz:M:BxD:ByD:BzD:ifail:kfail'
    else:
      vlis = 'x:y:z:Bx:By:Bz:ifail:kfail'
    #endif
    nmap = ncread("nmap",vlis,"undumag.map",skiphead=ncomm)
  #endif

  nlist()
  print(NL,NL)

  Nreload = 0
#enddef

def undu_overview():

  global Kover, Kurad, Hybrid_Mode, AppleII_Mode
  global ntraj,nbprof,nmap,nmapint,nmapintf,nmh,nbr,nmat,nbyeff,nbzeff,ncoil,ngmod

  idebug = 0

  KdumpO = get_kdump()
  KpdfO = get_kpdf()
  KechoO = get_kecho()

  set_kdump(False)
  set_kpdf(False)
  set_kecho(False)

  Kover = 1
  window_clear()

  undu_read_guimode()
  undu_read_mat()

  iFe = 0
  if nexist('nmh') and  nmh.mtyp.max() == 2: iFe = 1

  ksta = getstat()
  optnstat()

  if idebug: print("ngmod.gmod.max():",ngmod.gmod.max())

  if ngmod.gmod.max() < 3:

    if iFe: zone(4,2)
    else: zone(3,2)

    undu_nbybz()
    nextzone()

    undu_nbybzInt1()
    nextzone()

    if iFe == 0:

      if os.path.exists("urad_traxyz.dat"):
        undu_traj()
        nextzone()
      else:
        Kurad = 0
        undu_nbybzInt2()
        nextzone()
      #endif

      undu_nbybz_eff()
      nextzone()

      undu_nbybz_profile()
      nextzone()

      undu_mat_mh(1)

    else:

      Kurad = 0

      undu_nbybzInt2()
      nextzone()

      undu_mat_mh(1)
      nextzone()

      undu_nbybz_eff()
      nextzone()

      undu_nbybz_profile()
      nextzone()

      hmn = max(nmh.query('mat==2').h.min(),nmat.query('mat==2').h.min())
      hmx = min(nmh.query('mat==2').h.max(),nmat.query('mat==2').h.max())

      setmarkersize(2)
      null(0.,0.005,0.,2.5)
      txyz("Magnetisation of Fe","H [T]","$\mu_0$ M [T]")

      nplot(nmh,"h:m","mat==2 and h<0.005","","same")
      xint = vcre(1000,hmn,0.005)
      ninter(nmat,"h:m","mat==2",xint)
      nplot(Ninter,"x:y","","","sameline",color='b')
      nextzone()

      null(0.,hmx*1.1,0.,2.5)
      txyz("Magnetisation of Fe","H [T]","$\mu_0$ M [T]")

      sel = "mat == 2 and h <=" + str(hmx)
      nplot(nmh,"h:m",sel,"","same")
      xint = vcre(1000,hmn,hmx)
      ninter(nmat,"h:m","mat==2",xint)
      nplot(Ninter,"x:y","","","sameline",color='b')

    #endif

  else: # Mirror

    zone(5,1)
    setleftmargin(0.06)
    setrightmargin(0.97)
    #setxspace(0.5)

    undu_nbybz_eff()
    nextzone()

    undu_nbybz_profile()
    nextzone()

    setmarkersize(2)

    if nexist("nmh"):
      nplot(nmh,"h:m","mtyp==1")
      hmn = max(nmh.query('mtyp==1').h.min(),nmat.query('mtyp==1').h.min())
      hmx = min(nmh.query('mtyp==1').h.max(),nmat.query('mtyp==1').h.max())
      sel = 'mat == 1 and h <= ' + str(hmx)
      xint = vcre(100,hmn,hmx)
      ninter(nmat,"h:m","mtyp==1",xint)
      sel = 'x <= ' + str(hmx)
      nplot(Ninter,"x:y","","","sameline",color='b')
      txyz("Magnetisation along easy-axis","H [T]","$\mu_0$ M [T]")
    else:
      nplot(nmat,"h:m","mtyp==1","","line",color='b')
      txyz("Magnetisation curve for easey axis","H [T]","$\mu_0$ M [T]")
    #endif

    nextzone()

    null(0.,0.005,0.,2.5)
    txyz("Magnetisation of Fe","H [T]","$\mu_0$ M [T]")

    if nexist("nmh"):
      nplot(nmh,"h:m","mat==2 and mmod!=0","","same")
    #endif

    #ninter(nmat,"h:m","mat==2 and h<0.005")
    ninter(nmat,"h:m","h<=0.005 and mat==2")
    vplxy(Ninter.x,Ninter.y,"sameline",color='b')
    nextzone()

    if nexist("nmh"):
      nstat(nmh,"h","mat==2 and mmod!=0",isilent=1)
      null(0.,Nmax*1.1,0.,2.5)
      nplot(nmh,"h:m","mat==2 and mmod!=0","","same")
      ninter(nmat,"h:m","mat==2")
      vplxy(Ninter.x,Ninter.y,"sameline",color='b')
    else:
      npllb(nmat,"h:m","mat==2")
    #endif
    txyz("Magnetisation of Fe","H [T]","$\mu_0$ M [T]")

  #endif

  set_kdump(KdumpO)
  set_kpdf(KpdfO)
  set_kecho(KechoO)

  undu_get_runnumber()

  if Krun == True: run_on_figure()

  pp("undumag_overview.pdf")

  Kover = 0

  optstat(ksta)

#enddef
+PATCH,MODULES.
*CMZ :  2.04/05 14/03/2023  12.19.23  by  Michael Scheer
+DECK,magnet_struct,T=F77.
*CMZ :  2.04/14 06/09/2023  06.43.30  by  Michael Scheer
*CMZ :  2.04/13 03/09/2023  09.50.42  by  Michael Scheer
*CMZ :  2.04/10 23/08/2023  08.17.05  by  Michael Scheer
*CMZ :  2.04/05 14/03/2023  19.31.25  by  Michael Scheer
*CMZ :  2.04/03 03/03/2023  16.41.34  by  Michael Scheer
*CMZ :  2.04/02 27/02/2023  16.37.47  by  Michael Scheer
*CMZ :  2.04/01 23/01/2023  09.51.15  by  Michael Scheer
*CMZ :  2.04/00 13/01/2023  10.56.20  by  Michael Scheer
*CMZ :  2.02/02 16/02/2022  15.17.02  by  Michael Scheer
*CMZ :  2.02/01 06/02/2022  11.20.01  by  Michael Scheer
*-- Author :    Michael Scheer   25/04/2021
      module magnets_structure

      double precision ::
     &  xcwmin=1.0d30,xcwmax=-1.0d30,
     &  ycwmin=1.0d30,ycwmax=-1.0d30,
     &  zcwmin=1.0d30,zcwmax=-1.0d30,
     &  xmin_t=1.0d30,xmax_t=-1.0d30,
     &  ymin_t=1.0d30,ymax_t=-1.0d30,
     &  zmin_t=1.0d30,zmax_t=-1.0d30,
     &  xsymmm_t

      integer nclcbuff,nclcspec,nclcmag,nclccoil,nclcvar,nclcmod,nclcmat,
     &  kunduplot_mode

      integer :: nvar_t=0,nmag_t=0,nvox_t=0,niron_t=0,kvox=0,kfirstiron_t=0,
     &  nspecmag_t=0,kfirstiron_spec_t=0,ncoils_t=0,ncwires_t=0,nmagtot_t=0,
     &  ncornmax_t=8,nplanmax_t=16, nmodule_t=0, nmagcopy_t=0,nvoxcopy_t=0,
     &  nclccop_t=0,nmoth_t=0,nmothtot_t=0,nmagsym_t=0,ninhom_t=0,nmaginhom_t=0

      integer, dimension (:,:), allocatable :: ifacets
      integer :: nfacets=0
      integer, dimension (:), allocatable :: ksort_t,kmaglist_t,maginhom_t

      character(512), dimension (:), allocatable :: clcbuff,clcmag,clccoil,
     &  clcvar,clcmod,clcmat,clctrarot,clccop,clcspec,clcinhom

      type T_variable
        character(128) cname
        double precision val
      end type T_variable

      type(T_variable), dimension(:), allocatable :: t_variables

      type T_Voxel

      double precision, dimension (:), allocatable :: xhull,yhull,zhull
      double precision, dimension (:,:), allocatable :: plan, vcen,vnorm

      integer, dimension (:,:), allocatable :: kedge
      integer, dimension (:), allocatable :: kface,khull

      double precision xyz(3),size(3),trans(3),rot(3,3),Br(3),
     &  gcen(3),volume,xmin,xmax,ymin,ymax,zmin,zmax

      integer nhull,ixdiv,iydiv,izdiv,nedge,nface,kfacelast,
     &  IsPole,IsBlock,mxdiv,mydiv,mzdiv

      end type T_Voxel

      type T_Voxel_Copy
        integer kmagnet,kmodule,kcopy,kvoxel,kproto,ispole
        double precision Br(3),gcen(3)
      end type T_Voxel_Copy

      type T_Magnet_Copy
        integer kproto,kmodule,kcopy,IsPole,IsSpecial
        double precision gcen(3),Br(3),BrN,xmin,xmax,ymin,ymax,zmin,zmax,
     &    size(3),volume
        character(32) ctype,cnam,cmoth
      end type T_Magnet_Copy

      type T_Magnet_Sym
        integer kproto,kmodule,kcopy,IsPole,IsSpecial
        double precision gcen(3),Br(3),BrN,xmin,xmax,ymin,ymax,zmin,zmax
        character(32) ctype,cnam,cmoth
      end type T_Magnet_Sym

      type T_Magnet

        double precision, dimension (:,:), allocatable :: fcen,fnorm
        double precision, dimension (:), allocatable :: xhull0,yhull0,zhull0,
     &    xhull,yhull,zhull,ydivs,zdivs

        integer, dimension (:,:,:), allocatable :: kvoxels
        integer, dimension (:,:), allocatable :: kedge
        integer, dimension (:), allocatable :: kface,khull,kcopy

        character(512), dimension (:), allocatable :: cinhom

        double precision xyz(3),size(3),trans(3),rot(3,3),Br(3),yfracdiv,
     &    xmin,ymin,zmin,xmax,ymax,zmax,volume,gcen(3),dxdiv,dydiv,dzdiv,yfrac,
     &    zfracdiv,zfrac,uschamf,dschamf,cylphi,BrN,xyzinh(4),xvolume,yvolume,
     &    zvolume

        integer :: kmag,nface,nhull,icol,imat,nxdiv,nydiv,nzdiv,matindex,mattype,
     &    kfacelast,nedge,nvoxels,IsPole,IsSpecial,IsBlock,nhull0,IsPart,
     &    ncopy=0,kmodule=0,IsInhom=0,mxdiv,mydiv,mzdiv,IsRotated

        character(32) ctype,cnam,cmoth
        character(1024) cfile

        type(T_Voxel), dimension(:), allocatable ::  t_voxels, t_xcuts
        type(T_Voxel), dimension(:,:), allocatable :: t_xycuts
        type(T_Voxel), dimension(:,:,:), allocatable :: t_xyzcuts

      end type T_Magnet

      type T_Mother

        double precision, dimension (:), allocatable :: xhull,yhull,zhull

        integer, dimension (:,:), allocatable :: kedge
        integer, dimension (:), allocatable :: kface,khull,magnets

        double precision xyz(3),xmin,ymin,zmin,xmax,ymax,zmax,gcen(3)

        integer :: nmagnets=0,nhull,kfacelast

        character(32) :: cmoth=''

      end type T_Mother

      type T_Filament
        double precision curr,x1,y1,z1,x2,y2,z2
        integer icolor
      end type T_Filament

      type T_Coil
        integer ncwireI,ncwireE,iibuff,iebuff
        character(128) ctype,cnam
        character(1024) cparams
        double precision params(100)
      endtype T_Coil

      type(T_Magnet), dimension(:), allocatable ::  t_magnets, t_magnets_copy
      type(T_Coil), dimension(:), allocatable ::  t_coils

      type T_Module
        integer ncopy
        double precision offset(3),phi,vspace(3), scalmag(3),rotmat(3,3)
      end type T_Module

      character(32), dimension(:), allocatable :: chmutts

      integer, dimension (:), allocatable :: magmodule
      integer, parameter :: ntransrotcop_p=1000, nmat_p=1000

      integer :: ntransrotcop=0, nmat_t=0, t_matrec(3,nmat_p), nowarnugv=0
      double precision transrotcop(8,ntransrotcop_p)
      character(128) ctransrotcop(ntransrotcop_p)

      type(T_Mother), dimension(:), allocatable ::  t_mothers
      type(T_Module), dimension(:), allocatable ::  t_modules
      type(T_Magnet_Copy), dimension(:), allocatable ::  t_magcopy
      type(T_Magnet_Sym), dimension(:), allocatable ::  t_magsym
      type(T_Voxel_Copy), dimension(:), allocatable ::  t_voxcopy

      double precision, dimension (:), allocatable ::
     &  xpuffer1,ypuffer1,zpuffer1,
     &  xpuffer2,ypuffer2,zpuffer2,
     &  xpuffer3,ypuffer3,zpuffer3

      end module magnets_structure
