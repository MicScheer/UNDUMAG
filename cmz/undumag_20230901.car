+PATCH,PYTHON,T=PYTHON.
*CMZ :  2.01/05 26/02/2020  09.19.37  by  Michael Scheer
+KEEP,undumagseq,T=PYTHON.
*CMZ :          01/09/2023  08.30.05  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  08.21.45  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  16.32.24  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  11.27.45  by  Michael Scheer
*-- Author :    Michael Scheer   22/08/2022
def _undumag(callkey=''):

+seq,uguiglobind.

  print("Executing\nundumag.exe",Rmodus)
  if Rmodus.split()[0] == 'FILAMENTS':
    print('to update undumag.fil\n')
  elif Rmodus.split()[0] == 'SEGMENTATION':
    print('to perform segmentation, i.e. updating undumag.geo etc..\n')
  #endif
+self,if=trace.
  debug("\ntrace::_undumag:",callkey + " " + str(Rmodus))
+self.

  if IUNDUMAGisRunning:
    wError("UNDUNMAG IS RUNNING!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
    return
  #endif IUNDUMAGisRunning

  if NMagPolTot <= 0 and NCoil <= 0:
    wError("No magnetic items set-up so far...!")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag due to  error")
+self.
  #endif IUNDUMAGisRunning

  if type(Rmodus) == str and len(Rmodus) and NCoil > 0:
    ureadfil("_undumag")
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag after call to ureadfil")
+self.
    return
    #Quit("Ende in _undumag")

  Fnam = 'undumag.nam'
  Fclc = 'undumag.clc'

  #if MustWriteCLC:

  uwriteclc('UNDUMAG')
  uwritenam('UNDUMAG')

  uwait = Toplevel()
  uwait.title('Waiting for UNDUMAG to finish')

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)

  uwait.geometry(sgeo)
  uwait.attributes('-topmost', 1)

  lwarn = Label(uwait,text="   Be patient and check terminal...\n Plotting may also take some time ...  ",font=MyFont)
  lwarn.pack(fill=X)
  uwait.update()

  if len(Rmodus) == 0:

    IUNDUMAGisRunning = 1
    ifail = os.system(RunUndu)
    uwait.destroy()

    if ifail:
      IUNDUMAGisRunning = 0
      wError("\n*** UNDUMAG run failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
+self.
      return
    #endif

    undu_get_runnumber()
    nreloadupl()
    undu_overview()

    IUNDUMAGisRunning = 0

    ifail = 1
    itry = 0
    cline = '1'
    while itry < 10:
      try:
        Fsta = open("undumag.stat","r")
        cline = Fsta.readline().strip()
        break
      except:
        itry += 1
        sleep(3)
      #endtry
    #endwhile

    if cline == '0': ifail = 0
    if ifail: wError("\n*** UNDUMAG run failed ***")

  elif Rmodus.split()[0] == 'SEGMENTATION':

    IUNDUMAGisRunning = 1
    os.system(RunUndu + " " + Rmodus)
    uwait.destroy()
    IUNDUMAGisRunning = 0

    undu_get_runnumber()
    nreloadupl()

    try:
      Fsta = open("undumag.sta","r")
      cline = Fsta.readline().strip()
      cline = Fsta.readline().strip()
      if cline != 'Segmentation finished':
        wError("\n*** UNDUMAG run for segmentation failed ***")
      #endif trim(cline) != ' Segmentation finished'
    except:
      wError("\n*** UNDUMAG run for segmentation failed ***")
+self,if=trace.
      debug(NL,"trace:: Leaving _undumag due to  error")
      return
+self.
    #endtry

  #endif len(Rmodus) == 0
+self,if=trace.
    debug(NL,"trace:: Leaving _undumag")
+self.

#enddef _undumag()

def _runundumag(callkey='',modus=''):

+seq,uguiglobind.

+self,if=trace.
  debug(NL,"trace::_runundumag:",callkey,modus)
+self.

  Rmodus = modus
  _undumag('_rundunmag')

#enddef
+KEEP,listcoils,T=PYTHON.
*CMZ :          01/09/2023  08.52.26  by  Michael Scheer
*CMZ :  2.04/12 30/08/2023  15.11.19  by  Michael Scheer
*CMZ :  2.04/10 20/08/2023  11.16.14  by  Michael Scheer
*CMZ :  2.03/00 18/07/2022  08.56.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  12.31.36  by  Michael Scheer
*CMZ :  2.02/00 16/03/2021  16.15.56  by  Michael Scheer
*-- Author :    Michael Scheer   02/02/2021
S_CylrIn = StringVar()
S_CylrOut = StringVar()
S_CylHeight = StringVar()
S_CyldPhi = StringVar()

S_Current_Coil = StringVar()
S_Name_Coil = StringVar()
S_nWindings_Coil = StringVar()
S_Filling_Coil = StringVar()
S_Xcen_Coil = StringVar()
S_Ycen_Coil = StringVar()
S_Zcen_Coil = StringVar()
S_VnX_Coil = StringVar()
S_VnY_Coil = StringVar()
S_VnZ_Coil = StringVar()
S_AngRot_Coil = StringVar()
S_xLenOut_Coil = StringVar()
S_zLenIn_Coil = StringVar()
S_zLenOut_Coil = StringVar()
S_RadiusIn_Coil = StringVar()
S_Height_Coil = StringVar()
S_nDivHeight_Coil = StringVar()
S_nDivWidth_Coil = StringVar()
S_nDivArc_Coil = StringVar()
S_Color_Coil = StringVar()

S_CylrIn.set('0.0')
S_CylrOut.set('40.')
S_CylHeight.set('40.')
S_CyldPhi.set('360.')

S_Current_Coil.set('1.0')
S_Name_Coil.set('CoilName')
S_Filling_Coil.set('1.0')
S_nWindings_Coil.set('1')
S_Xcen_Coil.set('30.')
S_Zcen_Coil.set('0.0')
S_VnX_Coil.set('0.0')
S_VnY_Coil.set('1.0')
S_VnZ_Coil.set('0.0')
S_AngRot_Coil.set('0.0')
S_xLenOut_Coil.set('50.0')
S_zLenIn_Coil.set('20.')
S_zLenOut_Coil.set('30.')
S_RadiusIn_Coil.set('10.')
height = 20.
S_Height_Coil.set(str(height))
S_nDivHeight_Coil.set('11')
S_Ycen_Coil.set(str(height))
S_nDivWidth_Coil.set('11')
S_nDivArc_Coil.set('6')
S_Color_Coil.set('green')

def _Check_Coil(coil):
    for var in coil[1]:
        try:
            val = calc_var(var)
        except:
            wError("Bad item " + var)
            return 1
        #endtry
    #endfor ic in range(len(coil))
    return 0
#enddef _Check_Coil()

def Set_Coil(k):
+seq,uguiglobind.

  color = S_Color_Coil.get()

  if color[0] != '$':
    try: color = str(DictUnduColors[color])
    except:
      wError("Unkown color: " + color)
      return
  #endif

  #print(k,NL,Coils[k])
  print("Set_Coil is still under construction...")
  return 1

  coil = [Coils[k][0],[S_Current_Coil.get(),S_Filling_Coil.get(),S_nWindings_Coil.get(), \
  S_Xcen_Coil.get(),S_Ycen_Coil.get(),S_Zcen_Coil.get(),S_VnX_Coil.get(), \
  S_VnY_Coil.get(),S_VnZ_Coil.get(),S_AngRot_Coil.get(),S_xLenOut_Coil.get(), \
  S_zLenIn_Coil.get(),S_zLenOut_Coil.get(),S_RadiusIn_Coil.get(),S_Height_Coil.get(), \
  S_nDivHeight_Coil.get(),S_nDivWidth_Coil.get(),S_nDivArc_Coil.get(), \
  color]]

  if _Check_Coil(coil): return 1

  Coils[k] = coil
#  try: coil[1][18] = UnduColors[int(coil[1][18])]
#  except: pass

  undu_coils_to_filaments()

  return 0

#enddef Set_Coil(k)

def Get_Coil(k):
+seq,uguiglobind.
  global Coils

  print(k,NL,Coils[k])
  print("Get_Coil is still under construction...")
  return

  if Coils[k][0][0] == 'RectWindings':
    par = Coils[k][1]
    S_Name_Coil.set(str(par[0]))
    S_Current_Coil.set(str(par[1]))
    S_Filling_Coil.set(str(par[2]))
    S_nWindings_Coil.set(str(par[3]))
    S_Xcen_Coil.set(str(par[4]))
    S_Ycen_Coil.set(str(par[5]))
    S_Zcen_Coil.set(str(par[6]))
    S_VnX_Coil.set(str(par[7]))
    S_VnY_Coil.set(str(par[8]))
    S_VnZ_Coil.set(str(par[9]))
    S_AngRot_Coil.set(str(par[10]))
    S_xLenOut_Coil.set(str(par[11]))
    S_zLenIn_Coil.set(str(par[12]))
    S_zLenOut_Coil.set(str(par[13]))
    S_RadiusIn_Coil.set(str(par[14]))
    S_Height_Coil.set(str(par[15]))
    S_nDivHeight_Coil.set(str(par[16]))
    S_nDivWidth_Coil.set(str(par[17]))
    S_nDivArc_Coil.set(str(par[18]))
    color = str(par[19])
    try: color = UnduColors[int(color)]
    except:pass
    try: color = DictUnduColors[color]
    except:pass
    S_Color_Coil.set(color)
  #endif

#enddef Get_Coil(k)

global WediCoil

def update_coils(caller=''):
+seq,uguiglobind.

  NCoil = len(Coils)
  DictCoils = {}
  idxcoil = 0

  print("update_coils::",caller)

  for coil in Coils:
    key = coil[0][0]
    if not key in DictCoils: DictCoils[key] = []
    DictCoils[key].append(idxcoil)
    idxcoil += 1
  #endfor

#enddef updatecoils()

def _WaddCoils(key=''):
+seq,uguiglobind.

  WaddCoils = Toplevel()
  WaddCoils.title("Add Coil")
  WaddCoils.attributes('-topmost', 1)

  ewid=50
  elab=20

  bRace = Button(WaddCoils,text='Racetrack, rect. wind.',
                 command = _WaddCoilRace,width=elab)
  bRace.pack(expand=TRUE,fill=X)

  fbott = Frame(WaddCoils)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddCoils,width=elab)
  bCancel.pack(fill=X)
  fbott.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WaddCoils.geometry(sgeo)

  Umaster.wait_window(WaddCoils)

#enddef _WaddCoils(key)

def _WaddCoilRace():
+seq,uguiglobind.

  WaddCoilRace = Toplevel()
  WaddCoilRace.title("Add Racetrack Coil")
  WaddCoilRace.attributes('-topmost', 1)

  ewid=50
  elab=20

  fname = Frame(WaddCoilRace)
  tname = 'Name'
  lname = Label(fname,text=tname,font=MyFont,width=elab)
  ename = Entry(fname,text=S_Name_Coil,justify=CENTER,font=MyFont,width=ewid)
  lname.pack(side=LEFT,fill=X)
  ename.pack(side=RIGHT,fill=X)
  fname.pack(fill=X)

  fCurr = Frame(WaddCoilRace)
  tCurr = 'Current [A]'
  lCurr = Label(fCurr,text=tCurr,font=MyFont,width=elab)
  eCurr = Entry(fCurr,text=S_Current_Coil,justify=CENTER,font=MyFont,width=ewid)
  lCurr.pack(side=LEFT,fill=X)
  eCurr.pack(side=RIGHT,fill=X)
  fCurr.pack(fill=X)

  fFilling = Frame(WaddCoilRace)
  tFilling = 'Fillfactor'
  lFilling = Label(fFilling,text=tFilling,font=MyFont,width=elab)
  eFilling = Entry(fFilling,text=S_Filling_Coil,justify=CENTER,font=MyFont,width=ewid)
  lFilling.pack(side=LEFT,fill=X)
  eFilling.pack(side=RIGHT,fill=X)
  fFilling.pack(fill=X)

  fnWindings = Frame(WaddCoilRace)
  tnWindings = 'Number of windings'
  lnWindings = Label(fnWindings,text=tnWindings,font=MyFont,width=elab)
  enWindings = Entry(fnWindings,text=S_nWindings_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnWindings.pack(side=LEFT,fill=X)
  enWindings.pack(side=RIGHT,fill=X)
  fnWindings.pack(fill=X)

  fXcen = Frame(WaddCoilRace)
  tXcen = 'X center'
  lXcen = Label(fXcen,text=tXcen,font=MyFont,width=elab)
  eXcen = Entry(fXcen,text=S_Xcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddCoilRace)
  tYcen = 'Y center'
  lYcen = Label(fYcen,text=tYcen,font=MyFont,width=elab)
  eYcen = Entry(fYcen,text=S_Ycen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddCoilRace)
  tZcen = 'Z center'
  lZcen = Label(fZcen,text=tZcen,font=MyFont,width=elab)
  eZcen = Entry(fZcen,text=S_Zcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  fVnX = Frame(WaddCoilRace)
  tVnX = 'X of normal vector'
  lVnX = Label(fVnX,text=tVnX,font=MyFont,width=elab)
  eVnX = Entry(fVnX,text=S_VnX_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnX.pack(side=LEFT,fill=X)
  eVnX.pack(side=RIGHT,fill=X)
  fVnX.pack(fill=X)

  fVnY = Frame(WaddCoilRace)
  tVnY = 'Y of normal vector'
  lVnY = Label(fVnY,text=tVnY,font=MyFont,width=elab)
  eVnY = Entry(fVnY,text=S_VnY_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnY.pack(side=LEFT,fill=X)
  eVnY.pack(side=RIGHT,fill=X)
  fVnY.pack(fill=X)

  fVnZ = Frame(WaddCoilRace)
  tVnZ = 'Z of normal vector'
  lVnZ = Label(fVnZ,text=tVnZ,font=MyFont,width=elab)
  eVnZ = Entry(fVnZ,text=S_VnZ_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnZ.pack(side=LEFT,fill=X)
  eVnZ.pack(side=RIGHT,fill=X)
  fVnZ.pack(fill=X)

  fAngRot = Frame(WaddCoilRace)
  tAngRot = 'Rotation angle'
  lAngRot = Label(fAngRot,text=tAngRot,font=MyFont,width=elab)
  eAngRot = Entry(fAngRot,text=S_AngRot_Coil,justify=CENTER,font=MyFont,width=ewid)
  lAngRot.pack(side=LEFT,fill=X)
  eAngRot.pack(side=RIGHT,fill=X)
  fAngRot.pack(fill=X)

  fxLenOut = Frame(WaddCoilRace)
  txLenOut = 'Total length'
  lxLenOut = Label(fxLenOut,text=txLenOut,font=MyFont,width=elab)
  exLenOut = Entry(fxLenOut,text=S_xLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lxLenOut.pack(side=LEFT,fill=X)
  exLenOut.pack(side=RIGHT,fill=X)
  fxLenOut.pack(fill=X)

  fzLenIn = Frame(WaddCoilRace)
  tzLenIn = 'Inner width'
  lzLenIn = Label(fzLenIn,text=tzLenIn,font=MyFont,width=elab)
  ezLenIn = Entry(fzLenIn,text=S_zLenIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenIn.pack(side=LEFT,fill=X)
  ezLenIn.pack(side=RIGHT,fill=X)
  fzLenIn.pack(fill=X)

  fzLenOut = Frame(WaddCoilRace)
  tzLenOut = 'Total width'
  lzLenOut = Label(fzLenOut,text=tzLenOut,font=MyFont,width=elab)
  ezLenOut = Entry(fzLenOut,text=S_zLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenOut.pack(side=LEFT,fill=X)
  ezLenOut.pack(side=RIGHT,fill=X)
  fzLenOut.pack(fill=X)

  fRadiusIn = Frame(WaddCoilRace)
  tRadiusIn = 'Inner radius of arcs'
  lRadiusIn = Label(fRadiusIn,text=tRadiusIn,font=MyFont,width=elab)
  eRadiusIn = Entry(fRadiusIn,text=S_RadiusIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lRadiusIn.pack(side=LEFT,fill=X)
  eRadiusIn.pack(side=RIGHT,fill=X)
  fRadiusIn.pack(fill=X)

  fHeight = Frame(WaddCoilRace)
  tHeight = 'Height'
  lHeight = Label(fHeight,text=tHeight,font=MyFont,width=elab)
  eHeight = Entry(fHeight,text=S_Height_Coil,justify=CENTER,font=MyFont,width=ewid)
  lHeight.pack(side=LEFT,fill=X)
  eHeight.pack(side=RIGHT,fill=X)
  fHeight.pack(fill=X)


  fnDivHeight = Frame(WaddCoilRace)
  tnDivHeight = 'Number of vert. divisions'
  lnDivHeight = Label(fnDivHeight,text=tnDivHeight,font=MyFont,width=elab)
  enDivHeight = Entry(fnDivHeight,text=S_nDivHeight_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivHeight.pack(side=LEFT,fill=X)
  enDivHeight.pack(side=RIGHT,fill=X)
  fnDivHeight.pack(fill=X)

  fnDivWidth = Frame(WaddCoilRace)
  tnDivWidth = 'Number of hori. divisions'
  lnDivWidth = Label(fnDivWidth,text=tnDivWidth,font=MyFont,width=elab)
  enDivWidth = Entry(fnDivWidth,text=S_nDivWidth_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivWidth.pack(side=LEFT,fill=X)
  enDivWidth.pack(side=RIGHT,fill=X)
  fnDivWidth.pack(fill=X)

  fnDivArc = Frame(WaddCoilRace)
  tnDivArc = 'Number arc divisions'
  lnDivArc = Label(fnDivArc,text=tnDivArc,font=MyFont,width=elab)
  enDivArc = Entry(fnDivArc,text=S_nDivArc_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivArc.pack(side=LEFT,fill=X)
  enDivArc.pack(side=RIGHT,fill=X)
  fnDivArc.pack(fill=X)

  fColor = Frame(WaddCoilRace)
  tColor = 'Color'
  lColor = Label(fColor,text=tColor,font=MyFont,width=elab)
  eColor = Entry(fColor,text=S_Color_Coil,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  #debug("+ Race")
  fbott = Frame(WaddCoilRace)

  bCancel = Button(fbott,text='Cancel',command = _cnWaddCoilRace,width=elab)
  bCancel.pack(side=LEFT,fill=X)

  bClose = Button(fbott,text='Ok',command = lambda ct = 'RectWindings': _clWaddCoils(ct))
  bClose.pack(expand=TRUE,fill=X,side=LEFT)

  fbott.pack(expand=TRUE,fill=X)

#  x,y = Umaster.winfo_pointerxy()
#  sgeo = '+' + str(x) + '+' + str(y)
#  WaddCoilRace.geometry(sgeo)

  Umaster.wait_window(WaddCoilRace)

#enddef _WaddCoilRace(key)

def _WeditCoil():
+seq,uguiglobind.

  global WediCoil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil selected")
    return
  #endif not Selected_Coil:

  key = Coils[Selected_Coil][0][0]

  if key != 'RectWindings':
    wError("Unknown key " + key + " in WaddCoils")
    return
  #endif key != 'RectWindings'

  WediCoil = Toplevel()
  WediCoil.title("Edit Coil")
  WediCoil.attributes('-topmost', 1)

  Get_Coil(Selected_Coil)

  ewid=20
  elab=20

  fCurr = Frame(WediCoil)
  tCurr = 'Current [A]'
  lCurr = Label(fCurr,text=tCurr,font=MyFont,width=elab)
  eCurr = Entry(fCurr,text=S_Current_Coil,justify=CENTER,font=MyFont,width=ewid)
  lCurr.pack(side=LEFT,fill=X)
  eCurr.pack(side=RIGHT,fill=X)
  fCurr.pack(fill=X)

  fFilling = Frame(WediCoil)
  tFilling = 'Fillfactor'
  lFilling = Label(fFilling,text=tFilling,font=MyFont,width=elab)
  eFilling = Entry(fFilling,text=S_Filling_Coil,justify=CENTER,font=MyFont,width=ewid)
  lFilling.pack(side=LEFT,fill=X)
  eFilling.pack(side=RIGHT,fill=X)
  fFilling.pack(fill=X)

  fnWindings = Frame(WediCoil)
  tnWindings = 'Number of windings'
  lnWindings = Label(fnWindings,text=tnWindings,font=MyFont,width=elab)
  enWindings = Entry(fnWindings,text=S_nWindings_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnWindings.pack(side=LEFT,fill=X)
  enWindings.pack(side=RIGHT,fill=X)
  fnWindings.pack(fill=X)

  fXcen = Frame(WediCoil)
  tXcen = 'X center'
  lXcen = Label(fXcen,text=tXcen,font=MyFont,width=elab)
  eXcen = Entry(fXcen,text=S_Xcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WediCoil)
  tYcen = 'Y center'
  lYcen = Label(fYcen,text=tYcen,font=MyFont,width=elab)
  eYcen = Entry(fYcen,text=S_Ycen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WediCoil)
  tZcen = 'Z center'
  lZcen = Label(fZcen,text=tZcen,font=MyFont,width=elab)
  eZcen = Entry(fZcen,text=S_Zcen_Coil,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  fVnX = Frame(WediCoil)
  tVnX = 'X of normal vector'
  lVnX = Label(fVnX,text=tVnX,font=MyFont,width=elab)
  eVnX = Entry(fVnX,text=S_VnX_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnX.pack(side=LEFT,fill=X)
  eVnX.pack(side=RIGHT,fill=X)
  fVnX.pack(fill=X)

  fVnY = Frame(WediCoil)
  tVnY = 'Y of normal vector'
  lVnY = Label(fVnY,text=tVnY,font=MyFont,width=elab)
  eVnY = Entry(fVnY,text=S_VnY_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnY.pack(side=LEFT,fill=X)
  eVnY.pack(side=RIGHT,fill=X)
  fVnY.pack(fill=X)

  fVnZ = Frame(WediCoil)
  tVnZ = 'Z of normal vector'
  lVnZ = Label(fVnZ,text=tVnZ,font=MyFont,width=elab)
  eVnZ = Entry(fVnZ,text=S_VnZ_Coil,justify=CENTER,font=MyFont,width=ewid)
  lVnZ.pack(side=LEFT,fill=X)
  eVnZ.pack(side=RIGHT,fill=X)
  fVnZ.pack(fill=X)

  fAngRot = Frame(WediCoil)
  tAngRot = 'Rotation angle'
  lAngRot = Label(fAngRot,text=tAngRot,font=MyFont,width=elab)
  eAngRot = Entry(fAngRot,text=S_AngRot_Coil,justify=CENTER,font=MyFont,width=ewid)
  lAngRot.pack(side=LEFT,fill=X)
  eAngRot.pack(side=RIGHT,fill=X)
  fAngRot.pack(fill=X)

  fxLenOut = Frame(WediCoil)
  txLenOut = 'Total length'
  lxLenOut = Label(fxLenOut,text=txLenOut,font=MyFont,width=elab)
  exLenOut = Entry(fxLenOut,text=S_xLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lxLenOut.pack(side=LEFT,fill=X)
  exLenOut.pack(side=RIGHT,fill=X)
  fxLenOut.pack(fill=X)

  fzLenIn = Frame(WediCoil)
  tzLenIn = 'Inner width'
  lzLenIn = Label(fzLenIn,text=tzLenIn,font=MyFont,width=elab)
  ezLenIn = Entry(fzLenIn,text=S_zLenIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenIn.pack(side=LEFT,fill=X)
  ezLenIn.pack(side=RIGHT,fill=X)
  fzLenIn.pack(fill=X)

  fzLenOut = Frame(WediCoil)
  tzLenOut = 'Total width'
  lzLenOut = Label(fzLenOut,text=tzLenOut,font=MyFont,width=elab)
  ezLenOut = Entry(fzLenOut,text=S_zLenOut_Coil,justify=CENTER,font=MyFont,width=ewid)
  lzLenOut.pack(side=LEFT,fill=X)
  ezLenOut.pack(side=RIGHT,fill=X)
  fzLenOut.pack(fill=X)

  fRadiusIn = Frame(WediCoil)
  tRadiusIn = 'Inner radius of arcs'
  lRadiusIn = Label(fRadiusIn,text=tRadiusIn,font=MyFont,width=elab)
  eRadiusIn = Entry(fRadiusIn,text=S_RadiusIn_Coil,justify=CENTER,font=MyFont,width=ewid)
  lRadiusIn.pack(side=LEFT,fill=X)
  eRadiusIn.pack(side=RIGHT,fill=X)
  fRadiusIn.pack(fill=X)

  fHeight = Frame(WediCoil)
  tHeight = 'Height'
  lHeight = Label(fHeight,text=tHeight,font=MyFont,width=elab)
  eHeight = Entry(fHeight,text=S_Height_Coil,justify=CENTER,font=MyFont,width=ewid)
  lHeight.pack(side=LEFT,fill=X)
  eHeight.pack(side=RIGHT,fill=X)
  fHeight.pack(fill=X)


  fnDivHeight = Frame(WediCoil)
  tnDivHeight = 'Number of vert. divisions'
  lnDivHeight = Label(fnDivHeight,text=tnDivHeight,font=MyFont,width=elab)
  enDivHeight = Entry(fnDivHeight,text=S_nDivHeight_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivHeight.pack(side=LEFT,fill=X)
  enDivHeight.pack(side=RIGHT,fill=X)
  fnDivHeight.pack(fill=X)

  fnDivWidth = Frame(WediCoil)
  tnDivWidth = 'Number of hori. divisions'
  lnDivWidth = Label(fnDivWidth,text=tnDivWidth,font=MyFont,width=elab)
  enDivWidth = Entry(fnDivWidth,text=S_nDivWidth_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivWidth.pack(side=LEFT,fill=X)
  enDivWidth.pack(side=RIGHT,fill=X)
  fnDivWidth.pack(fill=X)

  fnDivArc = Frame(WediCoil)
  tnDivArc = 'Number arc divisions'
  lnDivArc = Label(fnDivArc,text=tnDivArc,font=MyFont,width=elab)
  enDivArc = Entry(fnDivArc,text=S_nDivArc_Coil,justify=CENTER,font=MyFont,width=ewid)
  lnDivArc.pack(side=LEFT,fill=X)
  enDivArc.pack(side=RIGHT,fill=X)
  fnDivArc.pack(fill=X)

  fColor = Frame(WediCoil)
  tColor = 'Color'
  lColor = Label(fColor,text=tColor,font=MyFont,width=elab)
  try: S_Color_Coil.set(UnduColors[int(S_Color_Coil.get())])
  except: pass
  eColor = Entry(fColor,text=S_Color_Coil,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fbott = Frame(WediCoil)
  bCancel = Button(fbott,text='Cancel',command = _cnWediCoil,width=elab)
  bCancel.pack(side=LEFT,fill=X)
  bClose = Button(fbott,text='Ok',command = lambda kw=key: _clWediCoil(kw))
  bClose.pack(expand=TRUE,fill=X,side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WediCoil.geometry(sgeo)

  Umaster.wait_window(WediCoil)

#enddef _WeditCoil(key)

def _clWaddCoils(key):
+seq,uguiglobind.

  color = S_Color_Coil.get()

  if color[0] != '$':
    try: color = DictUnduColors[color]
    except:
      wError("Unkown color: " + color)
      return
  #endif

  if key == 'RectWindings':

    coil = \
    [S_Current_Coil.get(),S_Filling_Coil.get(),S_nWindings_Coil.get(), \
    S_Xcen_Coil.get(),S_Ycen_Coil.get(),S_Zcen_Coil.get(),S_VnX_Coil.get(), \
    S_VnY_Coil.get(),S_VnZ_Coil.get(),S_AngRot_Coil.get(),S_xLenOut_Coil.get(), \
    S_zLenIn_Coil.get(),S_zLenOut_Coil.get(),S_RadiusIn_Coil.get(),S_Height_Coil.get(), \
    S_nDivHeight_Coil.get(),S_nDivWidth_Coil.get(),S_nDivArc_Coil.get(), \
    str(color)]

  #endif key

  Coils.append([[key,S_Name_Coil.get()],coil])
  NCoil = len(Coils)

  undu_coils_to_filaments(NCoil-1)
  xyzcoils = _ucoilplot(modus='notsame',item=NCoil-1)

  if key == 'RectWindings': WaddCoilRace.destroy()
#enddef _clWaddCoils()

def _clWediCoil(key):
  global WediCoil, Selected_Coil

  istat = Set_Coil(Selected_Coil)
  if istat: return

  WediCoil.destroy()
  _listCoils()
#enddef _clWediCoil()

def _cnWaddCoilRace():
+seq,uguiglobind.
  WaddCoilRace.destroy()
#enddef _cnWaddCoilRace()

def _cnWaddCoil():
+seq,uguiglobind.
  WaddCoil.destroy()
#enddef _clWaddCoils()

def _cnWaddCoils():
+seq,uguiglobind.
  WaddCoils.destroy()
#enddef _clWaddCoils()

def _cnWediCoil():
  global WediCoil
  WediCoil.destroy()
#enddef _clWaddCoils()

def _addCoils(key):
  _WaddCoils(key)
#enddef _addCoils()

def _clWlistCoils():
+seq,uguiglobind.
  global WlistCoils
  WlistCoils.destroy()
#enddef _clWlistCoils()

def _listCoils(modecoil='first'):
+seq,uguiglobind.

  global WlistCoils

  update_coils("_listCoiles: " + modecoil)

  if len(Coils) == 0: return

  try:
    sgeo = WlistCoils.destroy()
  except: sgeo = None

  WlistCoils = Toplevel()
  WlistCoils.title("List of Coils")
  WlistCoils.attributes('-topmost', 1)

  if len(Coils) == 1: Selected_Coil = 0

  global ButtCoil
  ButtCoil = []

  for key in DictCoils:

    fkey = Frame(WlistCoils)
    fhead = Frame(fkey)

    lab = Label(fhead,text="Index",font=MyFont,width=5)
    lab.pack(side=LEFT)
    lab = Label(fhead,text="Type",font=MyFont,width=15)
    lab.pack(side=LEFT)
    lab = Label(fhead,text="Name",font=MyFont,width=15)
    lab.pack(side=LEFT)

    header = DictCoilsHeader[key]
    nhead = len(header)
    lheader = []

    for t in header: lheader.append(len(t))

    ih = -1
    for t in header:
      ih += 1
      lab = Label(fhead,text=t,font=MyFont,width=max(5,lheader[ih]))
      lab.pack(side=LEFT)
    #endfor

    fhead.pack(side=TOP,fill=X)

    if len(Filaments) <= 0:
      Rmodus = 'FILAMENTS STDOUT=undumag.lun6'
      _undumag('listCoils')
      ureadfil()
    #endif

    for icoil in DictCoils[key]:

      fc = Frame(fkey)

      iVar = 0
      cidx = str(icoil+1)
      coil = Coils[icoil]
      cnam = coil[0][1]
      fila = Filaments[icoil]
      icol = int(fila[0][8])

      try:
        color = UnduColors[icol]
      except:
        print("*** Error in _listCoils: Unknown color index ***")
        icol = 2
      #endtry

      lab = Label(fc,text=cidx,font=MyFont,bg='white',width=5)
      lab.pack(side=LEFT)
      lab = Label(fc,text=key,font=MyFont,bg='white',width=15)
      lab.pack(side=LEFT)
      lab = Label(fc,text=cnam,font=MyFont,bg='white',width=15)
      lab.pack(side=LEFT)

      if key == 'Filaments':

        nfil = int(coil[1])

        for ifi in range(nfil):
          fil = coil[2][ifi]
          filfil = Filaments[icoil][ifi]
          iVar = 0
          for var in fil:
            if var[0] == '$':
              iVar = 1
              break
            #endif
          #endfor var in fil
          ic = -1
          for var in fil:
            ic += 1
            if var[0] == '$':
              val = calc_var(var)
              lab = Label(fc,text=var+"\n" +str(val),font=MyFont,bg='white',width=max(5,lheader[ic]))
            else:
              if iVar: lab = Label(fc,text="---\n"+var,font=MyFont,bg='white',width=max(5,lheader[ic]))
              else: lab = Label(fc,text=var,font=MyFont,bg='white',width=max(5,lheader[ic]))
            #endif var[0] == '$'
            lab.pack(side=LEFT)
          #endfor var in fil
          if iVar: lab = Label(fc,text="---\n"+str(filfil[9]),font=MyFont,bg='white',width=max(5,lheader[ic]))
          else: lab = Label(fc,text=str(filfil[9]),font=MyFont,bg='white',width=max(5,lheader[ic]))
          lab.pack(side=LEFT)
        #endfor ic in range(nfil)

      elif key == 'File':

        lab = Label(fc,text=coil[1],font=MyFont,bg='white')
        lab.pack(side=LEFT)

      elif key == "RectArc" or key == "RectBar" or \
      key == "ThickWire" or key == "CircArc":

        ic = -1
        iVar = 0
        for iv in [0,1]:
          for var in coil[1][iv]:
            if var[0] == '$':
              iVar = 1
              break
            #endif
            if iVar: break
          #endfor
        #endfor
        for iv in [0,1]:
          for var in coil[1][iv]:
            ic += 1
            if var[0] == '$':
              val = calc_var(var)
              lab = Label(fc,text=var+"\n" +str(val),font=MyFont,bg='white',width=max(5,lheader[ic]))
            else:
              if iVar: lab = Label(fc,text="---\n"+var,font=MyFont,bg='white',width=max(5,lheader[ic]))
              else: lab = Label(fc,text=var,font=MyFont,bg='white',width=max(5,lheader[ic]))
            #endif var[0] == '$'
            lab.pack(side=LEFT)
          #endfor var
        #endfor

      else: #key

        print(icoil,cidx,key,cnam,coil[1])
        #if icoil: continue

        #print("*** key:",key)
        iVar = 0
        for var in coil[1]:
          if var[0] == '$':
            iVar = 1
            break
          #endif
        #endfor var

        ic = -1
        for var in coil[1]:
          ic += 1
          if var[0] == '$':
            val = calc_var(var)
            lab = Label(fc,text=var+"\n" +str(val),font=MyFont,bg='white',width=max(5,lheader[ic]))
          else:
            if iVar: lab = Label(fc,text="---\n"+var,font=MyFont,bg='white',width=max(5,lheader[ic]))
            else: lab = Label(fc,text=var,font=MyFont,bg='white',width=max(5,lheader[ic]))
          #endif var[0] == '$'
          lab.pack(side=LEFT)
        #endfor var

      #endif key

      lab = Label(fc,text="  ",font=MyFont,bg='white',width=5)
      lab.pack(side=LEFT)

      bi = Button(fc,text='select',command= lambda kcoil=icoil: _SelCoil(kcoil))
      bi.pack(side=LEFT)

      if len(Coils) > 1:
        bi.configure(bg='white')
      else:
        bi.configure(bg='yellow')
        Selected_Coil = 0
      #endif

      ButtCoil.append(bi)

      try:
        if Selected_Coil == icoil: ButtCoil[k].configure(bg='yellow')
      except: pass

      fc.pack(side=BOTTOM,fill=X)

    #endfor i in range(len(coil))

    fkey.pack(side=TOP,fill=X)

  #endfor key

  #debug("debug: List coils 2")

  fbench = Frame(WlistCoils)
  fbottom = Frame(WlistCoils)

  bedit = Button(fbench,text='Edit',command=_editCoil)
  bedit.pack(side=LEFT,expand=TRUE,fill=X)

  bcopy = Button(fbench,text='Copy',command=_copyCoil)
  bcopy.pack(side=LEFT,expand=TRUE,fill=X)

  bdel = Button(fbench,text='Delete',command=_delCoil)
  bdel.pack(side=LEFT,expand=TRUE,fill=X)

  bplot3d = Button(fbench,text='Plot 3d',command = lambda view = '3d': _plotCoil(view))
  bplot3d.pack(side=LEFT,expand=TRUE,fill=X)
  bplotxz = Button(fbench,text='Plot top view',command = lambda view = 'xz': _plotCoil(view))
  bplotxz.pack(side=LEFT,expand=TRUE,fill=X)
  bplotxy = Button(fbench,text='Plot side view',command = lambda view = 'xy': _plotCoil(view))
  bplotxy.pack(side=LEFT,expand=TRUE,fill=X)
  bplotzy = Button(fbench,text='Plot beam view',command = lambda view = 'zy': _plotCoil(view))
  bplotzy.pack(side=LEFT,expand=TRUE,fill=X)

  bClose = Button(fbottom,text='Ok',command=_clWlistCoils)
  bClose.pack(expand=TRUE,fill=X)

  fbench.pack(expand=TRUE,fill=X)
  fbottom.pack(expand=TRUE,fill=X)

  WlistCoils.update()

  if not sgeo:
    sgeo = Umaster.geometry()
  else:
    sgeo = sgeo.split('+')
  #endif not len(sgeo)
  x = str(int(sgeo[1]) + 30)
  y = str(int(sgeo[2]) + 80)
  sgeo = '+' + x + '+' + y
  WlistCoils.geometry(sgeo)

#enddef _listCoils()

def _editCoil():
  global Coils,Selected_Coil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil seleted")
    return
  #endif

  _WeditCoil()

#enddef _editCoil()

def _copyCoil():
  global Coils,Selected_Coil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil seleted")
    return
  #endif

  Coils.append(Coils[Selected_Coil])
  _listCoils()

#enddef _copyCoil()

def _delCoil():
  global Coils,Selected_Coil,Restore_Coil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil > NCoil:
    wError("No coil seleted")
    return
  #endif

  Restore_Coil = Coils.pop(Selected_Coil)
  _listCoils()

#enddef _delCoil()

def _plotCoil(view='3d'):
  global Selected_Coil, NCoil

  if Selected_Coil == None or Selected_Coil < 0 or Selected_Coil >= NCoil:
    wError("No coil seleted")
    return
  #endif not Seletec_Coil

  xyzcoils = _ucoilplot(view,modus='notsame',item=Selected_Coil)
#enddef _plotCoil()

def _SelCoil(k):
  global Selected_Coil,ButtCoil

  if Selected_Coil == k:
    ButtCoil[k].configure(bg='white')
    Selected_Coil = None
  else:
    ButtCoil[k].configure(bg='yellow')
    Selected_Coil = k
  #endif

#enddef _SelCoil(k)
+KEEP,listmags,T=PYTHON.
*CMZ :          01/09/2023  07.47.06  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  20.25.26  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  12.38.26  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.15.12  by  Michael Scheer
*CMZ :  2.04/06 07/07/2023  16.37.01  by  Michael Scheer
*CMZ :  2.02/02 05/03/2022  07.51.22  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  10.36.21  by  Michael Scheer
*-- Author :    Michael Scheer   07/12/2020

# +KEEP,listmags,T=PYTHON.{

S_Iron_Cmag = StringVar()
S_Iron_Cmoth = StringVar()

S_Iron_Ispec = StringVar()

S_Iron_Xcen = StringVar()
S_Iron_Ycen = StringVar()
S_Iron_Zcen = StringVar()

S_Iron_Xlen = StringVar()
S_Iron_Ylen = StringVar()
S_Iron_Zlen = StringVar()

S_Iron_ChamfUs = StringVar()
S_Iron_ChamfDs = StringVar()
S_Iron_Coating = StringVar()

S_Iron_corns = StringVar()
S_Iron_Ncorn = StringVar()
S_Iron_CornFile = StringVar()

S_Iron_nXdiv = StringVar()
S_Iron_nYdiv = StringVar()
S_Iron_nZdiv = StringVar()
S_Iron_FracDivY = StringVar()
S_Iron_FracDivZ = StringVar()

S_Iron_Key = StringVar()
S_Iron_Mat = StringVar()

S_Iron_Bc = StringVar()
S_Iron_Bxn = StringVar()
S_Iron_Byn = StringVar()
S_Iron_Bzn = StringVar()

S_Iron_Color = StringVar()

S_Cmag = StringVar()
S_Cmoth = StringVar()

S_Ispec = StringVar()

S_Xcen = StringVar()
S_Ycen = StringVar()
S_Zcen = StringVar()

S_Xlen = StringVar()
S_Ylen = StringVar()
S_Zlen = StringVar()

S_ChamfUs = StringVar()
S_ChamfDs = StringVar()
S_Coating = StringVar()

S_corns = StringVar()
S_Ncorn = StringVar()
S_CornFile = StringVar()

S_nXdiv = StringVar()
S_nYdiv = StringVar()
S_nZdiv = StringVar()
S_FracDivY = StringVar()
S_FracDivZ = StringVar()

S_Key = StringVar()
S_Mat = StringVar()

S_Bc = StringVar()
S_Bxn = StringVar()
S_Byn = StringVar()
S_Bzn = StringVar()

S_Color = StringVar()

MaddMag.add_command(label='REC block', command= lambda key='Block': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='REC polyhedron', command= lambda key='File': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='REC cylinder', command= lambda key='Cylinder': _WaddMag(key), font=MyFont)
MaddMag.add_command(label='Iron block', command= lambda key='Block': _WaddPol(key), font=MyFont)
MaddMag.add_command(label='Iron polyhedron', command= lambda key='File': _WaddPol(key), font=MyFont)
MaddMag.add_command(label='Iron cylinder', command= lambda key='Cylinder': _WaddPol(key), font=MyFont)

def varlis_to_num(varlis):
  vnum = []

  for v in varlis:
    try:
      val = calc_var(v)
      vnum.append(val)
    except:
      vnum = []
      break
  #endfor v in varlis

  return vnum
#enddef varlis_to_num(varlis)

def read_cornfile(cornfile):

  corns = []

  if not os.path.exists(cornfile):
    wError("File " + cornfile + " not found!")
    return corns
  #endif not os.path.exists(cornfile)

  try:
    Fcorn = open(cornfile,'r')
    lines = Fcorn.readlines()
    Fcorn.close()
  except:  pass
  #endtry

  for line in lines:
    varis = line.strip().split()
    for var in varis:
      try:
        val = calc_var(var)
      except:
        corns = []
        wError("Could not resolve: " + var)
        return ifail, corns
      #endtry
      corns.append(varis)
  #endfor line in lines

  try:
    cornsnum = []
    for c in corns:
      c1 = calc_var(c[0])
      c2 = calc_var(c[1])
      c3 = calc_var(c[2])
      cornsnum.append([c1,c2,c3])
    #endfor
    verts,ifaces,faces,bounds = hull3d(cornsnum)
    if type(verts) != Tdf:
      hull = pd.DataFrame(verts)
    else:
      hull = verts
    #endif
  except:
    corns = []
  #endtry

  return corns
#enddef read_cornfile()

def update_magnets():
+seq,uguiglobind.

  if MagPolsTot == MagPolsUpdate: return

  Nmoth = 0
  Moths = []
  DictMoths = {}
  DictMagPolsTot = {}
  DictCoils = {}
  DictCoilsHead = {}
  MyMoth = {}
  Hulls = []
  SpecMagPols = []

  for mag in MagPolsDel:
    cnam = mag[0][0]
    if cnam in DictMagPolsSel:
      isel = DictMagPolsSel[mag]
      mpop = MagPolsSel.pop(isel)
    #endif
  #endfor mag in MagPolSel

  NMagPolTot = len(MagPolsTot)
  NMagPolSel = len(MagPolsSel)
  NMagPolDel = len(MagPolsDel)

  for m in range(NMagPolTot):

    mp = MagPolsTot[m]

    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    DictMagPolsTot[cnam] = m

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

    cen = mp[4]

    xcen = cen[0]
    ycen = cen[1]
    zcen = cen[2]

    xcen = calc_var(xcen)
    ycen = calc_var(ycen)
    zcen = calc_var(zcen)

    if typ.find('Block') > -1:
      corns = blockcorners(mp)
    elif typ == 'Cylinder':
      #print("update_magnets: Cyl hier einfügen")
      MagPolsTot[m][-1] = [xcen,ycen,zcen]
      continue
    elif typ == 'Corners':
      corns = []
      for corn in mp[7]:
        c1 = calc_var(corn[0])
        c2 = calc_var(corn[1])
        c3 = calc_var(corn[2])
        corns.append([c1,c2,c3])
      #endfor
    elif typ == 'File':
      corns = []
      for ic in range(len(mp[7])):
        c1 = calc_var(mp[7][ic][0])
        c2 = calc_var(mp[7][ic][1])
        c3 = calc_var(mp[7][ic][2])
        corns.append([c1,c2,c3])
      #endfor ic in range(len(mp[7]))
    else:
      print("*** Bad key " + typ + " in ureadclc ***")
    #endif typ == 'Block'

    xmin = 1.e30
    xmax = -1.e30
    ymin = 1.e30
    ymax = -1.e30
    zmin = 1.e30
    zmax = -1.e30

    for corn in corns:
      x = corn[0] + xcen
      y = corn[1] + ycen
      z = corn[2] + zcen
      if x < xmin: xmin = x
      if x > xmax: xmax = x
      if y < ymin: ymin = y
      if y > ymax: ymax = y
      if z < zmin: zmin = z
      if z > zmax: zmax = z
    #endfor corn in corns

    x = (xmin+xmax)/2.
    y = (ymin+ymax)/2.
    z = (zmin+zmax)/2.

    MagPolsTot[m][-1] = [x,y,z]

    verts,ifaces,faces,bounds = hull3d(corns)
    if type(verts) != Tdf:
      hull = pd.DataFrame(verts)
    else:
      hull = verts
    #endif
    hull.columns = ['xr','yr','zr']

    hull['x'] = hull.xr+xcen
    hull['y'] = hull.yr+ycen
    hull['z'] = hull.zr+zcen

    Hulls.append(hull)

  #endfor m in range(NMagPolTot)

  if NMagPolTot:

    # sort mothers by x

    xmins = 1.e30
    xmaxs = -1.e30
    ymins = 1.e30
    ymaxs = -1.e30
    zmins = 1.e30
    zmaxs = -1.e30

    moli = []

    for mo in range(Nmoth):

      moth = Moths[mo]

      xmin = 1.e30
      xmax = -1.e30
      ymin = 1.e30
      ymax = -1.e30
      zmin = 1.e30
      zmax = -1.e30

      xmins = 1.e30
      xmaxs = -1.e30
      ymins = 1.e30
      ymaxs = -1.e30
      zmins = 1.e30
      zmaxs = -1.e30

      for cmag in moth:
        mag = DictMagPolsTot[cmag]
        mp = MagPolsTot[mag]
        typ = mp[3]
        if typ == 'Cylinder':
          cyl = Ntcyls[DictCyls[cmag]]
          nc = nget(cyl[2])
          nh = Nhead[Ind]
          xmn = nh[6][1]
          xmx = nh[6][2]
          zmn = nh[5][1]
          zmx = nh[7][2]
          ymn = nh[8][1]
          ymx = nh[9][2]
        else:
          nhu = DictHulls[cmag]
          xmn = Hulls[nhu].x.min()
          xmx = Hulls[nhu].x.max()
          ymn = Hulls[nhu].y.min()
          ymx = Hulls[nhu].y.max()
          zmn = Hulls[nhu].z.min()
          zmx = Hulls[nhu].z.max()
        #endif Cyl
        if xmn < xmin: xmin = xmn
        if xmx > xmax: xmax = xmx
        if ymn < ymin: ymin = ymn
        if ymx > ymax: ymax = ymx
        if zmn < zmin: zmin = zmn
        if zmx > zmax: zmax = zmx
        if mp[2] == 'yes' or str(mp[2]) == '1':
          if xmn < xmins: xmins = xmn
          if xmx > xmaxs: xmaxs = xmx
          if ymn < ymins: ymins = ymn
          if ymx > ymaxs: ymaxs = ymx
          if zmn < zmins: zmins = zmn
          if zmx > zmaxs: zmaxs = zmx
        #endif MagPolsTot[mag][2] == 'yes'
      #endfor mag in moth

      moli.append([mo,
                   xmin,xmax,(xmin+xmax)/2.,
                   ymin,ymax,(ymin+ymax)/2.,
                   zmin,zmax,(zmin+zmax)/2.])

    #endfor mo in range(len(Moths))

    MothsXYZ = pd.DataFrame(moli)
    MothsXYZ.columns = ['imoth',
                        'xmin','xmax','x',
                        'ymin','ymax','y',
                        'zmin','zmax','z']
    MothsXYZ = MothsXYZ.sort_values(by=['x','y','z'])
    #print("lima:,MothsXYZ",MothsXYZ.query("imoth==0"))
    #print(MothsXYZ)

    SpecXYZ = [xmins,xmaxs,ymins,ymaxs,zmins,zmaxs]

    mocop = Moths
    Moths = []

    for mo in range(len(mocop)):
      Moths.append(mocop[MothsXYZ.imoth[mo]])
    #endfor mo in range(len(mocop))

    # sort by mothers

    mpcop = MagPolsTot

    MagPolsTot = []

    for mo in range(len(Moths)):
      moth = Moths[mo]
      for mag in moth:
        MyMoth[mag] = mo
        mag = DictMagPolsTot[mag]
        mag = mpcop[mag]
        MagPolsTot.append(mag)
        if mag[2] == 'yes': SpecMagPols.append(mag)
      #endfor mag in moth
    #endfor mo in range(len(Moths))

    NspecMagPol = len(SpecMagPols)

  #endif NMagPolTot

  MagPolsUpdate = deepcopy(MagPolsTot)

  Moths = []
  Nmoth = 0
  DictMoths = {}

  for m in range(NMagPolTot):

    mp = MagPolsTot[m]

    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    DictMagPolsTot[cnam] = m

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

  #endfor

#enddef update_magnets()

def default_mag(key):
+seq,uguiglobind.

  Npol = 0
  for mp in MagPolsTot:
    if mp[1] == 'Iron': Npol += 1
  #endfor mp in MagPolsTot

  if key == 'Block':

    ifound = -1
    l = NMagPol

    for i in range(NMagPol):

      l -= 1

      mp = MagPolsTot[l]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      mattype = mp[1]
      magkey = mp[3]

#      if mattype == 'Iron': Npol += 1

      if mattype == 'REC' and magkey.find('Block') > -1:

        ispec = mp[2]
        cen = mp[4]
        xcen = cen[0]
        ycen = cen[1]
        zcen = cen[2]
        vmat = mp[5]
        bc = calc_var(vmat[0])
        bxn = calc_var(vmat[1])
        byn = calc_var(vmat[2])
        bzn = calc_var(vmat[3])
        mat = vmat[4]
        col = vmat[5]
        siz = mp[6]
        xlen = siz[0]
        ylen = siz[1]
        zlen = siz[2]
        div = mp[7]
        nxdiv = div[0]
        nydiv = div[1]
        nzdiv = div[2]
        fracdivy = div[3]
        fracdivz = div[4]

        if magkey != 'Block':
          chamfus = siz[3]
          chamfds = siz[3]
          if magkey == "BlockUsChamf": chamfds = 0.0
          elif magkey == "BlockDsChamf": chamfus = 0.0
          #endif magkey == "BlockUsChamf"
        #endif magkey != 'Block'

        ifound = l
        break

      #endif mattype == 'REC' and magkey == 'Block'

    #endfor i in range(NMagPlot)

    if ifound > -1:
      S_Cmag.set(cnam)
      S_Cmoth.set(cmoth)
      S_Mat.set(mat)
      S_Color.set(col)
      S_Bc.set(bc)
      S_Bxn.set(bxn)
      S_Byn.set(byn)
      S_Bzn.set(bzn)
      S_Ispec.set(ispec)
      S_Xcen.set(xcen)
      S_Ycen.set(ycen)
      S_Zcen.set(zcen)
      S_Xlen.set(xlen)
      S_Ylen.set(ylen)
      S_Zlen.set(zlen)
      S_ChamfUs.set(chamfus)
      S_ChamfDs.set(chamfds)
      S_nXdiv.set(nxdiv)
      S_nYdiv.set(nydiv)
      S_nZdiv.set(nzdiv)
      S_FracDivY.set(fracdivy)
      S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-15.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("-20.0")
      S_Xlen.set("10.0")
      S_Ylen.set("40.")
      S_Zlen.set("40.")
      S_ChamfUs.set("0.3")
      S_ChamfDs.set("0.3")
      S_nXdiv.set("1")
      S_nYdiv.set("3")
      S_nZdiv.set("3")
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'Cylinder':

    ifound = -1
    l = NMagPol

    for i in range(NMagPol):

      l -= 1

      mp = MagPolsTot[l]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      mattype = mp[1]
      magkey = mp[3]

      if mattype == 'REC' and key == 'Cylinder':

        ispec = mp[2]
        cen = mp[4]
        xcen = cen[0]
        ycen = cen[1]
        zcen = cen[2]
        vmat = mp[5]
        bc = calc_var(vmat[0])
        bxn = calc_var(vmat[1])
        byn = calc_var(vmat[2])
        bzn = calc_var(vmat[3])
        mat = vmat[4]
        col = vmat[5]

        size = mp[6]
        rin = float(size[0])
        rout = float(size[1])
        h = float(size[2])
        dphi = float(size[3])
        nphi = int(size[6])+1
        if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3

        size = mp[6]
        rin = float(size[0])
        rout = float(size[1])
        h = float(size[2])
        dphi = float(size[3])
        nphi = int(size[6])+1
        if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3
        div = mp[7]
        nxdiv = div[0]
        nydiv = div[1]
        nzdiv = nphi
        fracdivy = div[3]
        fracdivz = div[4]
        ifound = l
        break

      #endif mattype == 'REC' and magkey == 'Block'

    #endfor i in range(NMagPlot)

    if ifound > -1:
      S_Cmag.set(cnam)
      S_Cmoth.set(cmoth)
      S_Mat.set(mat)
      S_Color.set(col)
      S_Bc.set(bc)
      S_Bxn.set(bxn)
      S_Byn.set(byn)
      S_Bzn.set(bzn)
      S_Ispec.set(ispec)
      S_Xcen.set(xcen)
      S_Ycen.set(ycen)
      S_Zcen.set(zcen)

      S_CylrIn.set(rin)
      S_CylrOut.set(rout)
      S_CylHeight.set(h)
      S_CyldPhi.set(dphi)

      S_nXdiv.set(nxdiv)
      S_nYdiv.set(nydiv)
      S_nZdiv.set(nzdiv)
      S_FracDivY.set(fracdivy)
      S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-15.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("-20.0")

      S_CylrIn.set('0.0')
      S_CylrOut.set('40')
      S_CylHeight.set('40.')
      S_CyldPhi.set('360.')

      S_nXdiv.set('1')
      S_nYdiv.set('1')
      S_nZdiv.set('5')
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'File':

    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):

        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]

        if mattype == 'REC' and magkey == 'File':
          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          bxn = calc_var(vmat[1])
          byn = calc_var(vmat[2])
          bzn = calc_var(vmat[3])
          mat = vmat[4]
          col = vmat[5]
          div = mp[8]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]
          ifound = l
          break
        #endif mattype == 'REC' and magkey == 'Block'
      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Cmag.set(cnam)
        S_Cmoth.set(cmoth)
        S_Mat.set(mat)
        S_Color.set(col)
        S_Bc.set(bc)
        S_Bxn.set(bxn)
        S_Byn.set(byn)
        S_Bzn.set(bzn)
        S_Ispec.set(ispec)
        S_Xcen.set(xcen)
        S_Ycen.set(ycen)
        S_Zcen.set(zcen)
        S_CornFile.set("")
        S_nXdiv.set(str(int(nxdiv)))
        S_nYdiv.set(str(int(nydiv)))
        S_nZdiv.set(str(int(nzdiv)))
        S_FracDivY.set(fracdivy)
        S_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Mat.set("1")
      S_Color.set("red")
      S_Bc.set("1.62")
      S_Bxn.set("0.0")
      S_Byn.set("1.0")
      S_Bzn.set("0.0")
      S_Ispec.set("yes")
      S_Xcen.set("-20.0")
      S_Ycen.set("-25.0")
      S_Zcen.set("0.0")
      S_CornFile.set("")
      S_nXdiv.set("1")
      S_nYdiv.set("1")
      S_nZdiv.set("1")
      S_FracDivY.set("1.")
      S_FracDivZ.set("1.")
    #endif NMagPols > 0

  else:
    wError("In default_mag fehlt noch key " + key)
    return
  #endif key == 'Block'

#enddef default_mag(key)

def default_pol(key):
+seq,uguiglobind.

  if key == 'Block':

    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):

        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]

        if mattype == 'Iron' and magkey.find('Block') > -1:

          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          if bc == 0.0:  bc = 0.001
          mat = vmat[4]
          col = vmat[5]
          siz = mp[6]
          xlen = siz[0]
          ylen = siz[1]
          zlen = siz[2]
          div = mp[7]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]

          if magkey != 'Block':
            chamfus = siz[3]
            chamfds = siz[3]
            if magkey == "BlockUsChamf": chamfds = 0.0
            elif magkey == "BlockDsChamf": chamfus = 0.0
            #endif magkey == "BlockUsChamf"
          #endif magkey != 'Block'

          ifound = l
          break

        #endif mattype == 'REC' and magkey == 'Block'

      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Iron_Cmag.set(cnam)
        S_Iron_Cmoth.set(cmoth)
        S_Iron_Mat.set(mat)
        S_Iron_Color.set(col)
        S_Iron_Bc.set(bc)
        S_Iron_Ispec.set(ispec)
        S_Iron_Xcen.set(xcen)
        S_Iron_Ycen.set(ycen)
        S_Iron_Zcen.set(zcen)
        S_Iron_Xlen.set(xlen)
        S_Iron_Ylen.set(ylen)
        S_Iron_Zlen.set(zlen)
        S_Iron_ChamfUs.set(chamfus)
        S_Iron_ChamfDs.set(chamfds)
        S_Iron_nXdiv.set(nxdiv)
        S_Iron_nYdiv.set(nydiv)
        S_Iron_nZdiv.set(nzdiv)
        S_Iron_FracDivY.set(fracdivy)
        S_Iron_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      if len(Materials):
        im = 0
        for m in Materials:
          im += 1
          if m[1] == 'Iron':
            S_Iron_Mat.set(str(im))
            break
          #endif
        #endfor
      else:
        S_Iron_Mat.set("2")
      #endif
      S_Iron_Color.set("blue")
      S_Iron_Bc.set("0.001")
      S_Iron_Ispec.set("yes")
      S_Iron_Xcen.set("-5.0")
      S_Iron_Ycen.set("-22.5")
      S_Iron_Zcen.set("-17.5")
      S_Iron_Xlen.set("10.0")
      S_Iron_Ylen.set("35.")
      S_Iron_Zlen.set("35.")
      S_Iron_ChamfUs.set("0.1")
      S_Iron_ChamfDs.set("0.1")
      S_Iron_nXdiv.set("3")
      S_Iron_nYdiv.set("5")
      S_Iron_nZdiv.set("5")
      S_Iron_FracDivY.set("1.")
      S_Iron_FracDivZ.set("1.")
    #endif NMagPols > 0

  elif key == 'File':
    if NMagPol > 0:

      ifound = -1
      l = NMagPol

      for i in range(NMagPol):
        l -= 1
        mp = MagPolsTot[l]
        cnam = mp[0][0]
        cmoth = mp[0][1]
        mattype = mp[1]
        magkey = mp[3]
        if mattype == 'Iron' and magkey == 'File':
          ispec = mp[2]
          cen = mp[4]
          xcen = cen[0]
          ycen = cen[1]
          zcen = cen[2]
          vmat = mp[5]
          bc = calc_var(vmat[0])
          if bc == 0.0:  bc = 0.001
          mat = vmat[4]
          col = vmat[5]
          div = mp[8]
          nxdiv = div[0]
          nydiv = div[1]
          nzdiv = div[2]
          fracdivy = div[3]
          fracdivz = div[4]
          ifound = l
          break
        #endif mattype == 'REC' and magkey == 'Block'
      #endfor i in range(NMagPlot)

      if ifound > -1:
        S_Iron_Cmag.set(cnam)
        S_Iron_Cmoth.set(cmoth)
        S_Iron_Mat.set(mat)
        S_Iron_Color.set(col)
        S_Iron_Bc.set(bc)
        S_Iron_Ispec.set(ispec)
        S_Iron_Xcen.set(xcen)
        S_Iron_Ycen.set(ycen)
        S_Iron_Zcen.set(zcen)
        S_Iron_CornFile.set("")
        S_Iron_nXdiv.set(str(int(nxdiv)))
        S_Iron_nYdiv.set(str(int(nydiv)))
        S_Iron_nZdiv.set(str(int(nzdiv)))
        S_Iron_FracDivY.set(fracdivy)
        S_Iron_FracDivZ.set(fracdivz)
      #endif ifound > -1
    else:
      S_Iron_Mat.set("1")
      S_Iron_Color.set("blue")
      S_Iron_Bc.set("0.001")
      S_Iron_Ispec.set("yes")
      S_Iron_Xcen.set("-20.0")
      S_Iron_Ycen.set("-25.0")
      S_Iron_Zcen.set("0.0")
      S_Iron_CornFile.set("")
      S_Iron_nXdiv.set("1")
      S_Iron_nYdiv.set("1")
      S_Iron_nZdiv.set("1")
      S_Iron_FracDivY.set("1.")
      S_Iron_FracDivZ.set("1.")
    #endif NMagPols > 0

  else:
    wError("In default_pol fehlt noch key " + key)
    return
  #endif key == 'Block'

#enddef default_pol(key)

def _WaddMag(key):
+seq,uguiglobind.

  #print("_WaddMag")
  WaddMag = Toplevel()

  ewid=20

  S_Cmag.set("mag" + str(NMagPolTot+1))
  fName = Frame(WaddMag)
  tName = 'name'
  lName = Label(fName,text=tName,font=MyFont)
  eName = Entry(fName,text=S_Cmag,justify=CENTER,font=MyFont,width=ewid)
  lName.pack(side=LEFT,fill=X)
  eName.pack(side=RIGHT,fill=X)
  fName.pack(fill=X)

  S_Cmoth.set("Moth" + str(Nmoth+1))
  fMoth = Frame(WaddMag)
  tMoth = 'mother volume'
  lMoth = Label(fMoth,text=tMoth,font=MyFont)
  eMoth = Entry(fMoth,text=S_Cmoth,justify=CENTER,font=MyFont,width=ewid)
  lMoth.pack(side=LEFT,fill=X)
  eMoth.pack(side=RIGHT,fill=X)
  fMoth.pack(fill=X)

  default_mag(key)

#  fMatType = Frame(WaddMag)
#  tMatType = 'material type'
#  lMatType = Label(fMatType,text=tMatType,font=MyFont)
#  eMatType = Entry(fMatType,text=S_MateType,justify=CENTER,font=MyFont,width=ewid)
#  lMatType.pack(side=LEFT,fill=X)
#  eMatType.pack(side=RIGHT,fill=X)
#  fMatType.pack(fill=X)

  fMat = Frame(WaddMag)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  fColor = Frame(WaddMag)
  tColor = 'color'
  lColor = Label(fColor,text=tColor,font=MyFont)
  eColor = Entry(fColor,text=S_Color,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fBc = Frame(WaddMag)
  tBc = 'remanence'
  lBc = Label(fBc,text=tBc,font=MyFont)
  eBc = Entry(fBc,text=S_Bc,justify=CENTER,font=MyFont,width=ewid)
  lBc.pack(side=LEFT,fill=X)
  eBc.pack(side=RIGHT,fill=X)
  fBc.pack(fill=X)

  fBxn = Frame(WaddMag)
  tBxn = 'x - component'
  lBxn = Label(fBxn,text=tBxn,font=MyFont)
  eBxn = Entry(fBxn,text=S_Bxn,justify=CENTER,font=MyFont,width=ewid)
  lBxn.pack(side=LEFT,fill=X)
  eBxn.pack(side=RIGHT,fill=X)
  fBxn.pack(fill=X)

  fByn = Frame(WaddMag)
  tByn = 'y - component'
  lByn = Label(fByn,text=tByn,font=MyFont)
  eByn = Entry(fByn,text=S_Byn,justify=CENTER,font=MyFont,width=ewid)
  lByn.pack(side=LEFT,fill=X)
  eByn.pack(side=RIGHT,fill=X)
  fByn.pack(fill=X)

  fBzn = Frame(WaddMag)
  tBzn = 'z - component'
  lBzn = Label(fBzn,text=tBzn,font=MyFont)
  eBzn = Entry(fBzn,text=S_Bzn,justify=CENTER,font=MyFont,width=ewid)
  lBzn.pack(side=LEFT,fill=X)
  eBzn.pack(side=RIGHT,fill=X)
  fBzn.pack(fill=X)

  fIspec = Frame(WaddMag)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  fXcen = Frame(WaddMag)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddMag)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddMag)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key == 'Block':

    WaddMag.title("Add Magnet Block")

    fXlen = Frame(WaddMag)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddMag)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddMag)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fChamfUS = Frame(WaddMag)
    tChamfUS = 'Up-stream chamfer'
    lChamfUS = Label(fChamfUS,text=tChamfUS,font=MyFont)
    eChamfUS = Entry(fChamfUS,text=S_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChamfUS.pack(side=LEFT,fill=X)
    eChamfUS.pack(side=RIGHT,fill=X)
    fChamfUS.pack(fill=X)

    fChamfDS = Frame(WaddMag)
    tChamfDS = 'Down-stream chamfer'
    lChamfDS = Label(fChamfDS,text=tChamfDS,font=MyFont)
    eChamfDS = Entry(fChamfDS,text=S_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChamfDS.pack(side=LEFT,fill=X)
    eChamfDS.pack(side=RIGHT,fill=X)
    fChamfDS.pack(fill=X)

  elif key == 'Cylinder':

    WaddMag.title("Add Magnet Cylinder")

    fXlen = Frame(WaddMag)
    tXlen = 'R_inner'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_CylrIn,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddMag)
    tYlen = 'R_outer'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_CylrOut,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddMag)
    tZlen = 'Height'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_CylHeight,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fPhi = Frame(WaddMag)
    tPhi = 'Angle range'
    lPhi = Label(fPhi,text=tPhi,font=MyFont)
    ePhi = Entry(fPhi,text=S_CyldPhi,justify=CENTER,font=MyFont,width=ewid)
    lPhi.pack(side=LEFT,fill=X)
    ePhi.pack(side=RIGHT,fill=X)
    fPhi.pack(fill=X)

  elif key == 'File':

    WaddMag.title("Add REC Polyhedron")

    fcfil = Frame(WaddMag)
    tcfil = 'Filename'
    lcfil = Label(fcfil,text=tcfil,font=MyFont)
    ecfil = Entry(fcfil,text=S_CornFile.get(),justify=CENTER,font=MyFont,width=ewid)
    lcfil.pack(side=LEFT,fill=X)
    ecfil.pack(side=RIGHT,fill=X)
    fcfil.pack(fill=X)

  else:
    wError("In _WaddMag fehlt noch key " + key)
    return
  #endif key == 'Block'

  if key != 'Cylinder':

    fnXdiv = Frame(WaddMag)
    tnXdiv = 'nXdiv'
    lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
    enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
    lnXdiv.pack(side=LEFT,fill=X)
    enXdiv.pack(side=RIGHT,fill=X)
    fnXdiv.pack(fill=X)

    fnYdiv = Frame(WaddMag)
    tnydiv = 'nYdiv'
    lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
    enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
    lnYdiv.pack(side=LEFT,fill=X)
    enYdiv.pack(side=RIGHT,fill=X)
    fnYdiv.pack(fill=X)

    fnZdiv = Frame(WaddMag)
    tnzdiv = 'nZdiv'
    lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
    enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
    lnZdiv.pack(side=LEFT,fill=X)
    enZdiv.pack(side=RIGHT,fill=X)
    fnZdiv.pack(fill=X)

    fFracDivY = Frame(WaddMag)
    tfracdivy = 'FracDivY'
    lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
    eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
    lFracDivY.pack(side=LEFT,fill=X)
    eFracDivY.pack(side=RIGHT,fill=X)
    fFracDivY.pack(fill=X)
    fFracDivY = Frame(WaddMag)

    fFracDivZ = Frame(WaddMag)
    tfracdivz = 'FracDivZ'
    lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
    eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
    lFracDivZ.pack(side=LEFT,fill=X)
    eFracDivZ.pack(side=RIGHT,fill=X)
    fFracDivZ.pack(fill=X)
  else:

    fnXdiv = Frame(WaddMag)
    tnXdiv = 'nR_div'
    lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
    enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
    lnXdiv.pack(side=LEFT,fill=X)
    enXdiv.pack(side=RIGHT,fill=X)
    fnXdiv.pack(fill=X)

    fnYdiv = Frame(WaddMag)
    tnydiv = 'nH_div'
    lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
    enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
    lnYdiv.pack(side=LEFT,fill=X)
    enYdiv.pack(side=RIGHT,fill=X)
    fnYdiv.pack(fill=X)

    fnZdiv = Frame(WaddMag)
    tnzdiv = 'nAng_div'
    lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
    enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
    lnZdiv.pack(side=LEFT,fill=X)
    enZdiv.pack(side=RIGHT,fill=X)
    fnZdiv.pack(fill=X)

    #fFracDivY = Frame(WaddMag)
    #tfracdivy = 'FracDivY'
    #lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
    #eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
    #lFracDivY.pack(side=LEFT,fill=X)
    #eFracDivY.pack(side=RIGHT,fill=X)
    #fFracDivY.pack(fill=X)
    #fFracDivY = Frame(WaddMag)

    #fFracDivZ = Frame(WaddMag)
    #tfracdivz = 'FracDivZ'
    #lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
    #eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
    #lFracDivZ.pack(side=LEFT,fill=X)
    #eFracDivZ.pack(side=RIGHT,fill=X)
    #fFracDivZ.pack(fill=X)

  #endif Cylinder

  WaddMag.attributes('-topmost', 1)

  fbott = Frame(WaddMag)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddMag)
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)
  bClose = Button(fbott,text='Ok',width=ewid+2,command = lambda kw=key: _clWaddMag(kw))
  bClose.pack(side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  sgeo = Wmaster.geometry().split('+')
  whw = sgeo[0].split('x')
  ww = int(whw[0])
  wh = int(whw[1])
  xw = int(sgeo[1])
  yw = int(sgeo[2])
  x = xw + int(ww/10)
  y = yw + int(wh/10)
  sgeo = '+' + str(x) + '+' + str(y)
  WaddMag.geometry(sgeo)
#  smgeo = Umaster.geometry()
#  smoff = smgeo.split('+')
#  WaddMag.geometry("+" + str(int(smoff[1])+50) + "+" + str(int(smoff[1])+20))

  Umaster.wait_window(WaddMag)

#enddef _WaddMag(key)

def _WaddPol(key):
+seq,uguiglobind.

  #print("_WaddPol")
  WaddPol = Toplevel()
  sgeo = Wmaster.geometry().split('+')
  whw = sgeo[0].split('x')
  ww = int(whw[0])
  wh = int(whw[1])
  xw = int(sgeo[1])
  yw = int(sgeo[2])
  x = xw + int(ww/10)
  y = yw + int(wh/10)
  sgeo = '+' + str(x) + '+' + str(y)
  WaddPol.geometry(sgeo)
  WaddPol.attributes('-topmost', 1)

  ewid=20

  S_Iron_Cmag.set("pol" + str(Npol+1))
  fName = Frame(WaddPol)
  tName = 'name'
  lName = Label(fName,text=tName,font=MyFont)
  eName = Entry(fName,text=S_Iron_Cmag,justify=CENTER,font=MyFont,width=ewid)
  lName.pack(side=LEFT,fill=X)
  eName.pack(side=RIGHT,fill=X)
  fName.pack(fill=X)

  S_Iron_Cmoth.set("Moth" + str(Nmoth+1))
  fMoth = Frame(WaddPol)
  tMoth = 'mother volume'
  lMoth = Label(fMoth,text=tMoth,font=MyFont)
  eMoth = Entry(fMoth,text=S_Iron_Cmoth,justify=CENTER,font=MyFont,width=ewid)
  lMoth.pack(side=LEFT,fill=X)
  eMoth.pack(side=RIGHT,fill=X)
  fMoth.pack(fill=X)

  default_pol(key)

  fMat = Frame(WaddPol)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Iron_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  fColor = Frame(WaddPol)
  tColor = 'color'
  lColor = Label(fColor,text=tColor,font=MyFont)
  eColor = Entry(fColor,text=S_Iron_Color,justify=CENTER,font=MyFont,width=ewid)
  lColor.pack(side=LEFT,fill=X)
  eColor.pack(side=RIGHT,fill=X)
  fColor.pack(fill=X)

  fIspec = Frame(WaddPol)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Iron_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  fXcen = Frame(WaddPol)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Iron_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  fYcen = Frame(WaddPol)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Iron_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  fZcen = Frame(WaddPol)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Iron_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key == 'Block':

    WaddPol.title("Add Iron Block")

    fXlen = Frame(WaddPol)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Iron_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    fYlen = Frame(WaddPol)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Iron_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    fZlen = Frame(WaddPol)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Iron_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    fChamfUS = Frame(WaddPol)
    tChamfUS = 'Up-stream chamfer'
    lChamfUS = Label(fChamfUS,text=tChamfUS,font=MyFont)
    eChamfUS = Entry(fChamfUS,text=S_Iron_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChamfUS.pack(side=LEFT,fill=X)
    eChamfUS.pack(side=RIGHT,fill=X)
    fChamfUS.pack(fill=X)

    fChamfDS = Frame(WaddPol)
    tChamfDS = 'Down-stream chamfer'
    lChamfDS = Label(fChamfDS,text=tChamfDS,font=MyFont)
    eChamfDS = Entry(fChamfDS,text=S_Iron_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChamfDS.pack(side=LEFT,fill=X)
    eChamfDS.pack(side=RIGHT,fill=X)
    fChamfDS.pack(fill=X)

  elif key == 'File':

    WaddPol.title("Add Iron Polyhedron")

    fcfil = Frame(WaddPol)
    tcfil = 'Filename'
    lcfil = Label(fcfil,text=tcfil,font=MyFont)
    ecfil = Entry(fcfil,text=S_Iron_CornFile.get(),justify=CENTER,font=MyFont,width=ewid)
    lcfil.pack(side=LEFT,fill=X)
    ecfil.pack(side=RIGHT,fill=X)
    fcfil.pack(fill=X)

  else:
    wError("In _WaddPol fehlt noch key " + key)
    return
  #endif key == 'Block'

  fnXdiv = Frame(WaddPol)
  tnXdiv = 'nXdiv'
  lnXdiv = Label(fnXdiv,text=tnXdiv,font=MyFont)
  enXdiv = Entry(fnXdiv,text=S_Iron_nXdiv,justify=CENTER,font=MyFont,width=ewid)
  lnXdiv.pack(side=LEFT,fill=X)
  enXdiv.pack(side=RIGHT,fill=X)
  fnXdiv.pack(fill=X)

  fnYdiv = Frame(WaddPol)
  tnydiv = 'nYdiv'
  lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
  enYdiv = Entry(fnYdiv,text=S_Iron_nYdiv,justify=CENTER,font=MyFont,width=ewid)
  lnYdiv.pack(side=LEFT,fill=X)
  enYdiv.pack(side=RIGHT,fill=X)
  fnYdiv.pack(fill=X)

  fnZdiv = Frame(WaddPol)
  tnzdiv = 'nZdiv'
  lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
  enZdiv = Entry(fnZdiv,text=S_Iron_nZdiv,justify=CENTER,font=MyFont,width=ewid)
  lnZdiv.pack(side=LEFT,fill=X)
  enZdiv.pack(side=RIGHT,fill=X)
  fnZdiv.pack(fill=X)

  fFracDivY = Frame(WaddPol)
  tfracdivy = 'FracDivY'
  lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
  eFracDivY = Entry(fFracDivY,text=S_Iron_FracDivY,justify=CENTER,font=MyFont,width=ewid)
  lFracDivY.pack(side=LEFT,fill=X)
  eFracDivY.pack(side=RIGHT,fill=X)
  fFracDivY.pack(fill=X)

  fFracDivZ = Frame(WaddPol)
  tfracdivz = 'FracDivZ'
  lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
  eFracDivZ = Entry(fFracDivZ,text=S_Iron_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
  lFracDivZ.pack(side=LEFT,fill=X)
  eFracDivZ.pack(side=RIGHT,fill=X)
  fFracDivZ.pack(fill=X)

  fbott = Frame(WaddPol)
  bCancel = Button(fbott,text='Cancel',command = _cnWaddPol)
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fbott,text='Ok',width=ewid+2,command = lambda kw=key: _clWaddPol(kw))
  bClose.pack(side=LEFT)
  fbott.pack(expand=TRUE,fill=X)

  Umaster.wait_window(WaddPol)

#enddef _WaddPol(key)

def try_calc_var(stvar):
  try:
    calc_var(stvar)
    return 'ok'
  except:
    wError("Bad input: " + stvar)
  #endtry
#enddef try_calc_var(stvar)

def _cnWaddMag():
  global WaddMag
  WaddMag.destroy()
#enddef _cnWaddMag()

def _cnWaddPol():
  global WaddPol
  WaddPol.destroy()
#enddef _cnWaddPol()

def _clWaddPol(key):
+seq,uguiglobind.

  mp = []

  cnam = S_Iron_Cmag.get()
  if cnam.strip() == "": wError("Name must be given!"); return
  if NMagPol and  cnam in DictMagPolsTot: wError("Magnet is already defined"); return

  cmoth = S_Iron_Cmoth.get()
  if cmoth.strip() == "": wError("Name of mother volume must be given!"); return

  mp.append([cnam,cmoth])

  #smattype = S_Iron_MatType.get().strip()
  #if smattype != 'REC': wError("Unknown material " + mattype); return
  mp.append('Iron')

  sispec = S_Iron_Ispec.get().strip().lower()
  if sispec[0] == 'y' or sispec == '1': sis = 'yes'
  elif sispec[0] == 'n' or sispec == '0': sis = 'no'
  else: wError("Bad input " + sispec); return
  mp.append(sis)

  if key == 'Block':
    schamfus = S_Iron_ChamfUs.get().strip()
    if try_calc_var(schamfus) != 'ok': return
    chamfus = calc_var(schamfus)
    schamfds = S_Iron_ChamfDs.get().strip()
    if try_calc_var(schamfds) != 'ok': return
    chamfds = calc_var(schamfds)
    if chamfus == 0.0 and chamfds == 0.0: mp.append('Block')
    elif chamfus != 0.0 and chamfds != 0.0:
      if chamfus != chamfds:
        wError("Chamfer must be equal or one must be zero")
        return
      #endif chamfus != chamfds
      mp.append('BlockChamf')
    elif chamfus != 0.0: mp.append('BlockUsChamf')
    elif chamdus != 0.0: mp.append('BlockDsChamf')
  elif key == 'File':
    mp.append('File')
  else:
    wError("In _clWaddPol fehlt noch key " + key)
    return
  #endif key == 'RECBlock'

  sxcen = S_Iron_Xcen.get().strip()
  if try_calc_var(sxcen) != 'ok': return
  sycen = S_Iron_Ycen.get().strip()
  if try_calc_var(sycen) != 'ok': return
  szcen = S_Iron_Zcen.get().strip()
  if try_calc_var(szcen) != 'ok': return

  mp.append([sxcen,sycen,szcen])

  sBc = S_Iron_Bc.get().strip()
  if try_calc_var(sBc) != 'ok': return

  scolor = S_Iron_Color.get().strip()
  if scolor not in Variables and scolor not in DictUnduColors:
    wError(scolor + " not in: " + str(DictUnduColors))
    return
  #endif scolor not in UnduColors

  if try_calc_var(sxcen) != 'ok': return

  smatindex = S_Iron_Mat.get()
  ifound = 0

  if smatindex[0] == '$':
    if try_calc_var(smatindex) != 'ok': return
    sval = str(calc_var(smatindex))
  else:
    sval = smatindex
  #endif smatindex[0] == '$'

  for mat in Materials:
    if mat[0] == sval:
      ifound = 1
      break
  #endfor mat in Materials

  if ifound == 0:
    wError("Undefined material index in _clWaddPole")
    _MaddMatIron()
    return
  #endif ifound == 0

  mp.append([sBc,"0.0","1.0","0.0",smatindex,scolor])

  if key == 'Block':

    sxlen = S_Iron_Xlen.get().strip()
    if try_calc_var(sxlen) != 'ok': return
    sylen = S_Iron_Ylen.get().strip()
    if try_calc_var(sylen) != 'ok': return
    szlen = S_Iron_Zlen.get().strip()
    if try_calc_var(szlen) != 'ok': return

    if chamfus == 0.0 and chamfds == 0.0: mp.append([sxlen,sylen,szlen,'0.0'])
    elif chamfus != 0.0: mp.append([sxlen,sylen,szlen,schamfus])
    else: mp.append([sxlen,sylen,szlen,schamfds])

  elif key == 'File':
    cfile = S_Iron_CornFile.get().strip()
    if cfile == "": wError("Filename must be given!")
    corns = read_cornfile(cfile)
    if corns == []:
      wError("Problems with " + cfile)
      return
    #endif corns == []
    mp.append(corns)

  #endif key == 'RECBlock'

  snxdiv = S_Iron_nXdiv.get().strip()
  if try_calc_var(snxdiv) != 'ok': return
  snydiv = S_Iron_nYdiv.get().strip()
  if try_calc_var(snydiv) != 'ok': return
  snzdiv = S_Iron_nZdiv.get().strip()
  if try_calc_var(snzdiv) != 'ok': return
  sfracdivy = S_Iron_FracDivY.get().strip()
  if try_calc_var(sfracdivy) != 'ok': return
  sfracdivz = S_Iron_FracDivZ.get().strip()
  if try_calc_var(sfracdivz) != 'ok': return

  mp.append([snxdiv,snydiv,snzdiv,sfracdivy,sfracdivz])

  xloc=None
  yloc = None
  zloc = None
  mp.append([xloc,yloc,zloc])

  MagPolsTot.append(mp)
  NMagPolTot += 1
  update_magnets()

  WaddPol.destroy()
#enddef _clWaddPol()

def _clWaddMag(key):
+seq,uguiglobind.
  global UnduColors, DictUnduColors

  mp = []

  cnam = S_Cmag.get()
  if cnam.strip() == "": wError("Name must be given!"); return
  if NMagPol and  cnam in DictMagPolsTot: wError("Magnet is already defined"); return

  cmoth = S_Cmoth.get()
  if cmoth.strip() == "": wError("Name of mother volume must be given!"); return

  mp.append([cnam,cmoth])

  #smattype = S_MateType.get().strip()
  #if smattype != 'REC': wError("Unknown material " + mattype); return
  mp.append('REC')

  sispec = S_Ispec.get().strip().lower()

  if sispec[0] == 'y' or sispec == '1': sis = 'yes'
  elif sispec[0] == 'n' or sispec == '0': sis = 'no'
  else: wError("Bad input " + sispec); return

  mp.append(sis)

  if key == 'Block':

    schamfus = S_ChamfUs.get().strip()

    if try_calc_var(schamfus) != 'ok': return

    chamfus = calc_var(schamfus)
    schamfds = S_ChamfDs.get().strip()

    if try_calc_var(schamfds) != 'ok': return
    chamfds = calc_var(schamfds)

    if chamfus == 0.0 and chamfds == 0.0:
      mp.append('Block')
    elif chamfus != 0.0 and chamfds != 0.0:
      if chamfus != chamfds:
        wError("Chamfer must be equal or one must be zero")
        return
      #endif chamfus != chamfds
      mp.append('BlockChamf')
    elif chamfus != 0.0: mp.append('BlockUsChamf')
    elif chamdus != 0.0: mp.append('BlockDsChamf')
    #endif

  elif key == 'Cylinder':

    mp.append('Cylinder')

  elif key == 'File':
    mp.append('File')
  else:
    wError("In _clWaddMag fehlt noch key " + key)
    return
  #endif key == 'RECBlock'

  sxcen = S_Xcen.get().strip()
  if try_calc_var(sxcen) != 'ok': return
  sycen = S_Ycen.get().strip()
  if try_calc_var(sycen) != 'ok': return
  szcen = S_Zcen.get().strip()
  if try_calc_var(szcen) != 'ok': return

  mp.append([sxcen,sycen,szcen])

  sBc = S_Bc.get().strip()
  if try_calc_var(sBc) != 'ok': return
  sBxn = S_Bxn.get().strip()
  if try_calc_var(sBxn) != 'ok': return
  sByn = S_Byn.get().strip()
  if try_calc_var(sByn) != 'ok': return
  sBzn = S_Bzn.get().strip()
  if try_calc_var(sBzn) != 'ok': return

  scolor = S_Color.get().strip()
  if scolor not in Variables and scolor not in DictUnduColors:
    wError(scolor + " not in: " + str(DictUnduColors))
    return
  #endif scolor not in UnduColors

  if try_calc_var(sxcen) != 'ok': return

  smatindex = S_Mat.get()
  ifound = 0

  if smatindex[0] == '$':
    if try_calc_var(smatindex) != 'ok': return
    sval = str(calc_var(smatindex))
  else:
    sval = smatindex
  #endif smatindex[0] == '$'

  for mat in Materials:
    if mat[0] == sval:
      ifound = 1
      break
  #endfor mat in Materials

  if ifound == 0:
    wError("Undefined material index _clWaddMag")
    _MaddMatREClin()
    return
  #endif ifound == 0

  mp.append([sBc,sBxn,sByn,sBzn,smatindex,scolor])

  if key == 'Block':

    sxlen = S_Xlen.get().strip()
    if try_calc_var(sxlen) != 'ok': return
    sylen = S_Ylen.get().strip()
    if try_calc_var(sylen) != 'ok': return
    szlen = S_Zlen.get().strip()
    if try_calc_var(szlen) != 'ok': return

    if chamfus == 0.0 and chamfds == 0.0: mp.append([sxlen,sylen,szlen,'0.0'])
    elif chamfus != 0.0: mp.append([sxlen,sylen,szlen,schamfus])
    else: mp.append([sxlen,sylen,szlen,schamfds])

  elif key == 'Cylinder':

    srin = S_CylrIn.get().strip()
    if try_calc_var(srin) != 'ok': return
    srout = S_CylrOut.get().strip()
    if try_calc_var(srout) != 'ok': return
    shig = S_CylHeight.get().strip()
    if try_calc_var(shig) != 'ok': return
    sdphi = S_CyldPhi.get().strip()
    if try_calc_var(sdphi) != 'ok': return

    mp.append([srin,srout,shig,sdphi])

  elif key == 'File':
    cfile = S_CornFile.get().strip()
    if cfile == "": wError("Filename must be given!")
    corns = read_cornfile(cfile)
    if corns == []:
      wError("Problems with " + cfile)
      return
    #endif corns == []
    mp.append(corns)

  #endif key == 'Block'

  snxdiv = S_nXdiv.get().strip()
  if try_calc_var(snxdiv) != 'ok': return
  snydiv = S_nYdiv.get().strip()
  if try_calc_var(snydiv) != 'ok': return
  snzdiv = S_nZdiv.get().strip()
  if try_calc_var(snzdiv) != 'ok': return
  sfracdivy = S_FracDivY.get().strip()
  if try_calc_var(sfracdivy) != 'ok': return
  sfracdivz = S_FracDivZ.get().strip()
  if try_calc_var(sfracdivz) != 'ok': return

  mp.append([snxdiv,snydiv,snzdiv,sfracdivy,sfracdivz])

  xloc=None
  yloc = None
  zloc = None

  mp.append([xloc,yloc,zloc])
  MagPolsTot.append(mp)

  if mp[3] == 'Cylinder':
    size = mp[6]
    Quit(mp,'\n',size)
    rin = float(size[0])
    rout = float(size[1])
    h = float(size[2])
    dphi = float(size[3])
    nphi = int(size[4][3])+1
    if nphi < int(dphi/45.)+3: nphi = int(dphi/45.)+3
    Ncylinder += 1
    ccyl = 'ncyl_' + str(Ncylinder)
    ncyl = ncylinder(ccyl,
                     xcen,ycen,zcen,rout-rin,rin,rin,h,0.0,90.,dphi,nphi,1)
    poly = cylinderpoly(ccyl)
    Ntcyls.append([imp,mp,ccyl,poly])
  #endif

  NMagPolTot += 1

  update_magnets()

  WaddMag.destroy()
#enddef _clWaddMag()

def _EditMagGet(mag):
+seq,uguiglobind.

  #print("Baustelle _EditMagGet")

# Concept of magnets

# Block:
#  mp[0] = [name, mother]
#  mp[1] = material Type
#  mp[2] = special flag
#  mp[3] = shape key-word
#  mp[4] = [xcen,ycen,zcen]
#  mp[5] = [Bc, Bxn, Byn, Bzn, material index, color index]
#  mp[6] = [xlen,ylen,zlen,chamf]
#  mp[7] = [nxdiv,nydiv,nzdiv,fracdivy]
#  mp[8] = [xloc,yloc,zloc]

# File:
#  mp[0] = [name, mother]
#  mp[1] = material Type
#  mp[2] = special flag
#  mp[3] = shape key-word
#  mp[4] = [xcen,ycen,zcen]
#  mp[5] = [Bc, Bxn, Byn, Bzn, material index, color index]
#  mp[6] = number of points
#  mp[7] = points
#  mp[8] = [nxdiv,nydiv,nzdiv,fracdivy]
#  mp[9] = [xloc,yloc,zloc]

  MagPol = MagPolsTot[mag]

#  mattype = _EditMagGetSplit(MagPol[1],S_MateType.get())
#  MagPol[1] = mattype

  key = S_Key.get()
  if key != MagPol[3]:
    wError("Shape key-word can not be changed!")
  #endif key != MagPol[4]

  cen = MagPol[4]

  xcen = _EditMagGetSplit(cen[0],S_Xcen.get())
  ycen = _EditMagGetSplit(cen[1],S_Ycen.get())
  zcen = _EditMagGetSplit(cen[2],S_Zcen.get())

  cen = [xcen,ycen,zcen]
  MagPol[4] = [xcen,ycen,zcen]

  vmat = MagPol[5]
  bc = _EditMagGetSplit(vmat[0],S_Bc.get())
  bxn = _EditMagGetSplit(vmat[1],S_Bxn.get())
  byn = _EditMagGetSplit(vmat[2],S_Byn.get())
  bzn = _EditMagGetSplit(vmat[3],S_Bzn.get())
  mat = _EditMagGetSplit(vmat[4],S_Mat.get())
  col = _EditMagGetSplit(vmat[5],S_Color.get())
  MagPol[5] = [bc,bxn,byn,bzn,mat,col]

  if key.find('Block') > -1:

    leng = MagPol[6]
    xlen = _EditMagGetSplit(leng[0],S_Xlen.get())
    ylen = _EditMagGetSplit(leng[1],S_Ylen.get())
    zlen = _EditMagGetSplit(leng[2],S_Zlen.get())

    chamf = '0.0'
    chamfus = _EditMagGetSplit(leng[3],S_ChamfUs.get())
    chamfds = _EditMagGetSplit(leng[3],S_ChamfDs.get())

    if key == 'BlockChamf':
      if chamfus != chamfds:
        wError("Up-stream and down-stream chamfer must be the same for key 'BlockChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfus
    elif key == 'BlockUsChamf':
      if chamfds != '0.0':
        wError("Down-stream chamfer must be zero for key 'BlockUsChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfus
    elif key == 'BlockDsChamf':
      if chamfus != '0.0':
        wError("Up-stream chamfer must be zero for key 'BlockUsChamf'")
        return
      #endif chamfus != chamfds
      chamf = chamfds
    #endif key == 'BlockChamf')

    MagPol[6] = [xlen,ylen,zlen,chamf]

    div = MagPol[7]

    nxdiv = _EditMagGetSplit(div[0],S_nXdiv.get())
    nydiv = _EditMagGetSplit(div[1],S_nYdiv.get())
    nzdiv = _EditMagGetSplit(div[2],S_nZdiv.get())

    fracdivy = _EditMagGetSplit(div[3],S_FracDivY.get())
    fracdivz = _EditMagGetSplit(div[4],S_FracDivZ.get())

    MagPol[7] = [nxdiv,nydiv,nzdiv,fracdivy,fracdivz]

  elif key == 'File':

    cmag = MagPol[0][0]
    fnam = DictCornFiles[cmag]
    fget = S_CornFile.get()
    corns = MagPol[7]

    if fnam != fget:
      if not os.path.exists(fget):
        wError("File " + fget + " not found!")
      else:
        try:
          corns = read_cornfile(fget)
          cornsnum = []
          for c in corns:
            c1 = calc_var(c[0])
            c2 = calc_var(c[1])
            c3 = calc_var(c[2])
            cornsnum.append([c1,c2,c3])
          #endfor
          verts,ifaces,faces,bounds = hull3d(cornsnum)
          if type(verts) != Tdf:
            hull = pd.DataFrame(verts)
          else:
            hull = verts
          #endif
          DictCornFiles[cname[0]] = cmag
          MagPol[7] = corns
          MagPol[6] = str(len(corns))
        except:
          wError("Could not process " + fget + "!")
        #endtry
      #endif not os.path.exists(fnam)
    #endif fnam != S_CornFile

    div = MagPol[8]
    nxdiv = _EditMagGetSplit(div[0],S_nXdiv.get())
    nydiv = _EditMagGetSplit(div[1],S_nYdiv.get())
    nzdiv = _EditMagGetSplit(div[2],S_nZdiv.get())
    fracdivy = _EditMagGetSplit(div[3],S_FracDivY.get())
    fracdivz = _EditMagGetSplit(div[4],S_FracDivZ.get())
    MagPol[8] = [nxdiv,nydiv,nzdiv,fracdivy,fracdivz]

  else:
    wError("_EditMagGet: " + key + " einfügen!")
  #endif key == 'Block'

  MagPolsTot[mag] = MagPol
  #print("_EditMagGet:",MagPolsTot[mag])

  WEditMag.destroy()

#enddef _EditMagGet(mag)

def _EditMagGetSplit(var,stvar):

  split = stvar.split('=')

  if var != split[0]:
    try :
      var = calc_var(split[0])
    except:
      wError("Bad input " + stvar)
    #endtry
  #endif cenold[0] != split[0]

  return str(var)

#enddef _EditMagGetSplit(stvar)

MagPolsDel = []
NMagPolDel = 0

def _delmagpol(imp):
  global DictMagPolsTot, MagPolsTot, MagPolsDel

  print("_delmagpol",imp)

  mag = MagPolsTot[imp]
  cnam = mag[0][0]
  cmoth = mag[0][1]

  if not cnam in DictMagPolsTot:
    wError("Magnet is not defined")
    return
  #endif cnam in MagPolsTot

  mp = MagPolsTot.pop(imp)
  MagPolsDel.append(mp)

  update_magnets()
  _listMags('update')
#enddef _delmagpol(imp)

def _resmagpol(imp):
  global DictMagPolsTot, MagPolsTot, MagPolsDel

  print("_resmagpol",imp)

  mp = MagPolsTotDel.pop(imp)
  MagPolsTots.append(mp)

  update_magnets()
  _listMags('update')
#enddef _resmagpol(imp)

def addmagpol_to_list(mag):
  global DictMagPolsTot, MagPolsTot
  cnam = mag[0][0]
  cmoth = mag[0][1]
  if cnam in DictMagPolsTot:
    wError("Magnet is already defined")
    return
  #endif cnam in MagPolsTot
  MagPolsTot.append(mag)
  update_magnets()
#enddef addmagpol_to_list()

def _clWCopyMag(mag):
  global MagPolsTot, S_newname, S_newmother, NMagPol, WCopyMag

  mp = deepcopy(MagPolsTot[mag])

  CopyMagX = -1
  CopyMagY = -1
  CopyMag_CheckMode = 0

  mp[0][0] = S_newname.get()
  mp[0][1] = S_newmother.get()

  NMagPol += 1
  MagPolsTot.append(mp)
  update_magnets()

  WCopyMag.destroy()
  _listMags('update')

#def _clWCopyMag(mag)

def _cnWCopyMag(mag):
  WCopyMag.destroy()
#def _cnWCopyMag(mag)

def _copyMag(imp):
  global MagPolsTot, S_newname, S_newmother, WCopyMag

  mp = MagPolsTot[imp]

  cmag = mp[0][0]
  cmoth = mp[0][1]

  WCopyMag = Toplevel()
  WCopyMag.title("Copy Magnetic Item")

  try:
    if CopyMagX: pass
  except:
    CopyMag_CheckMode = 0
    CopyMagX = -1
    CopyMagY = -1
  #endtry

  if CopyMagX == -1: CopyMagX, CopyMagY = Umaster.winfo_pointerxy()

  sgeo = '+' + str(CopyMagX-200) + '+' + str(CopyMagY)
  WCopyMag.geometry(sgeo)

  WCopyMag.title("Copy of " + cmag)
  WCopyMag.attributes('-topmost', 1)

  ewid = 25

  S_newname = StringVar()
  S_newname.set("")
  fnewname = Frame(WCopyMag)
  tnewname = 'name'
  lnewname = Label(fnewname,text=tnewname,font=MyFont)
  enewname = Entry(fnewname,text=S_newname,justify=CENTER,font=MyFont,width=ewid)
  lnewname.pack(side=LEFT,fill=X)
  enewname.pack(side=RIGHT,fill=X)
  fnewname.pack(fill=X)

  S_newmother = StringVar()
  S_newmother.set("")
  fnewmother = Frame(WCopyMag)
  tnewmother = 'mother volume'
  lnewmother = Label(fnewmother,text=tnewmother,font=MyFont)
  enewmother = Entry(fnewmother,text=S_newmother,justify=CENTER,font=MyFont,width=ewid)
  lnewmother.pack(side=LEFT,fill=X)
  enewmother.pack(side=RIGHT,fill=X)
  fnewmother.pack(fill=X)

  fC = Frame(WCopyMag)

  bCancel = Button(fC,text='Cancel',command= lambda mag=imp: _cnWCopyMag(mag))
  bCancel.bind('<Return>', lambda event, mag=imp: _cnWCopyMag(mag))
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fC,text='Ok',command= lambda mag=imp: _clWCopyMag(mag),width=ewid)
  bClose.bind('<Return>',lambda event, mag=imp: _clWCopyMag(mag))
  bClose.pack(side=LEFT,fill=X)

  fC.pack(fill=X)

#enddef _copyMag(imp)

def _ccWEditMag(mag):
  # Check
  global EditMag_CheckMode,CopyMag_CheckMode,  WEditMag, MagPolsTot,MagPolOld
  global SgeoWeditMag
  #print("_ccWEditMag(mag):",mag)

  EditMag_CheckMode = 1
  sgeo = WEditMag.geometry().split('+')
  SgeoWeditMag = '+' + sgeo[1] + '+' + sgeo[2]
  WEditMag.destroy()

  _editMag(mag)
  #print("Check:",stat)

  EditMag_CheckMode = 0
#def _ccWEditMag(mag)

def _cnWEditMag(mag):
  # Cancel
  global EditMag_CheckMode,CopyMag_CheckMode,EditMagX,EditMagY,WEditMag, \
  WCopyMag,MagPol,MagPolOld, MagPolsTot, \
  Nvar,Ncalc,Variables,Calcs,VariablesOld,CalcOld

  #print("_cnWEditMag(mag):",mag)
  EditMag_CheckMode = 0
  EditMagX = -1
  EditMagY = -1
  #print("_cn:",MagPolOld)
  MagPolsTot[mag] = MagPolOld
  Variables = VariablesOld
  Calcs = CalcsOld
  Nvar = len(Variables)
  Ncalc = len(Calcs)
  WEditMag.destroy()
#def _cnWEditMag(mag)

def _crWEditMag(mag):
  # Restore
  global MagPolOld,MagPolsTot
  #print("_cr:",NL,MagPolOld)
  MagPolsTot[mag] = MagPolOld
  WEditMag.destroy()
  _editMag(mag)
#def _crWEditMag(mag)

def _clWEditMag(mag):
+seq,uguiglobind.

  EditMagX = -1
  EditMagY = -1
  EditMag_CheckMode = 0

  _EditMagGet(mag)

  WEditMag.destroy()
  _listMags('update')

#def _clWEditMag(mag)

def _focoEditMag(ev,imp,idx,kdx):
+seq,uguiglobind.
  print(ev,imp,idx,kdx)
#enddef focoEditMag(imp,idx,kdx)

def _editMag(imp):
+seq,uguiglobind.
  global SgeoWeditMag, VariablesOld, CalcsOld

  #print("_editMag::CheckMode:",EditMag_CheckMode)
  #print("_editMag::imp:",imp)

  if not EditMag_CheckMode:
    MagPolOld = deepcopy(MagPolsTot[imp])
    VariablesOld = deepcopy(Variables)
    CalcsOld = deepcopy(Calcs)
  else:
    _EditMagGet(imp)
  #endif not EditMag_CheckMode

  MagPol = MagPolsTot[imp]
  #print(MagPol)
  mp = MagPol

  cmag = mp[0][0]
  cmoth = mp[0][1]

  WEditMag = Toplevel()
  WEditMag.title("Edit Magnetic Item")

  try:
    if EditMagX: pass
  except:
    EditMag_CheckMode = 0
    EditMagX = -1
    EditMagY = -1
  #endtry

  if EditMagX == -1:
    EditMagX, EditMagY = Umaster.winfo_pointerxy()
    EditMagX -= 200
  #endif EditMagX == -1

  if not EditMag_CheckMode:
    sgeo = '+' + str(EditMagX) + '+' + str(EditMagY)
  else:
    sgeo = SgeoWeditMag
  #endif not EditMag_CheckMode

  WEditMag.geometry(sgeo)

  WEditMag.title(cmag)
  WEditMag.attributes('-topmost', 1)

  #([cname,mag,ispec,key,cen,vmat,siz,div]

  ewid = 30

  mattype = mp[1]

  if mattype.find("$") > -1:
    V_MatType = calc_var(mattype)
    tvmattype = mattype + " = " + str(V_MatType)
  else:
    tvmattype = mattype
  #endif mattype.find("$") > -1

  S_MateType.set(mattype)

#  ewid = max(ewid,len(tvmattype))

  #ewid = len(mattype)
  ispec = mp[2]
  ewid = max(ewid,len(ispec))

  key = mp[3]
  ewid = max(ewid,len(key))

  cen = mp[4]

  xcen = cen[0]
  ycen = cen[1]
  zcen = cen[2]

  if type(xcen) == str and xcen.find("$") > -1:
    V_Xcen = calc_var(xcen)
    tvxcen = xcen + " = " + str(V_Xcen)
  else:
    tvxcen = xcen
  #endif xcen.find("$")

  ewid = max(ewid,len(tvxcen))

  if type(ycen) == str and ycen.find("$") > -1:
    V_Ycen = calc_var(ycen)
    tvycen = ycen + " = " + str(V_Ycen)
  else:
    tvycen = ycen
  #endif ycen.find("$")

  ewid = max(ewid,len(tvycen))

  if type(zcen) == str and ycen.find("$") > -1:
    V_Zcen = calc_var(zcen)
    tvzcen = zcen + " = " + str(V_Zcen)
  else:
    tvzcen = zcen
  #endif zcen.find("$")

  ewid = max(ewid,len(tvzcen))

  vmat = mp[5]
  bc = vmat[0]

  if type(bc) == str and bc.find("$") > -1:
    V_Bc = calc_var(bc)
    tvbc = bc + " = " + str(V_Bc)
  else:
    tvbc = bc
  #endif bc.find("$")

  ewid = max(ewid,len(tvbc))

  bxn = calc_var(vmat[1])
  byn = calc_var(vmat[2])
  bzn = calc_var(vmat[3])

  if type(bxn) == str and bxn.find("$") > -1:
    V_Bxn = calc_var(bxn)
    tvbxn = bxn + " = " + str(V_Bxn)
  else:
    tvbxn = str(bxn)
  #endif bxn.find("$") > -1

  ewid = max(ewid,len(tvbxn))

  if type(byn) == str and byn.find("$") > -1:
    V_Byn = calc_var(byn)
    tvbyn = byn + " = " + str(V_Byn)
  else:
    tvbyn = str(byn)
  #endif byn.find("$") > -1

  ewid = max(ewid,len(tvbyn))

  if type(bzn) == str and bzn.find("$") > -1:
    V_Bzn = calc_var(bzn)
    tvbzn = bzn + " = " + str(V_Bzn)
  else:
    tvbzn = str(bzn)
  #endif bzn.find("$") > -1

  ewid = max(ewid,len(tvbzn))

  mat = vmat[4]
  col = vmat[5]

  if type(mat) == str and mat.find("$") > -1:
    V_Mat = calc_var(mat)
    tvmat = mat + " = " + str(V_Mat)
  else:
    tvmat = mat
  #endif mat.find("$") > -1

  ewid = max(ewid,len(tvmat))

  if type(col) == str and col.find("$") > -1:
    vcol = calc_var(col)
    tvcol = col + " = " + str(vcol)
  else:
    tvcol = col
  #endif col.find("$") > -1

  ewid = max(ewid,len(tvcol))

  siz = mp[6]

  if key.find('Block') > -1:

    xlen = siz[0]
    ylen = siz[1]
    zlen = siz[2]

    chamf = siz[3]

    tvchus = '0.0'
    tvchds = '0.0'

    if type(chamf) == str and chamf.find("$") > -1:
      V_Chamf = calc_var(chamf)
      if key == 'BlockUsChamf':
        tvchus = chamf + " = " + str(V_Chamf)
      elif key == 'BlockDsChamf':
        tvchds = chamf + " = " + str(V_Chamf)
      elif key == 'BlockChamf':
        tvchus = chamf + " = " + str(V_Chamf)
        tvchds = chamf + " = " + str(V_Chamf)
      #endif key == 'BlockUsChamf'
    else:
      if key == 'BlockUsChamf':
        tvchus = chamf
      elif key == 'BlockDsChamf':
        tvchds = chamf
      elif key == 'BlockChamf':
        tvchus = chamf
        tvchds = chamf
      #endif key == 'BlockUsChamf'
    #endif xlen.find("$")

    ewid = max(ewid,len(tvchus))
    ewid = max(ewid,len(tvchds))

    if type(xlen) == str and xlen.find("$") > -1:
      V_Xlen = calc_var(xlen)
      tvxlen = xlen + " = " + str(V_Xlen)
    else:
      tvxlen = xlen
    #endif xlen.find("$")
    ewid = max(ewid,len(tvxlen))

    if type(ylen) == str and ylen.find("$") > -1:
      V_Ylen = calc_var(ylen)
      tvylen = ylen + " = " + str(V_Ylen)
    else:
      tvylen = ylen
    #endif ylen.find("$")
    ewid = max(ewid,len(tvylen))

    if type(zlen) == str and zlen.find("$") > -1:
      V_Zlen = calc_var(zlen)
      tvzlen = zlen + " = " + str(V_Zlen)
    else:
      tvzlen = zlen
    #endif zlen.find("$")
    ewid = max(ewid,len(tvzlen))

    div = mp[7]

  elif key == 'File':

    div = mp[8]
    ewid = max(ewid,len(DictCornFiles[cmag]))

  else:
    Quit("In _editMag fehlt noch key " + key)
  #endif key == 'Block'

  nxdiv = div[0]
  nydiv = div[1]
  nzdiv = div[2]
  fracdivy = div[3]
  fracdivz = div[4]

  vxcen = calc_var(xcen)
  vycen = calc_var(ycen)
  vzcen = calc_var(zcen)

  vbc = calc_var(bc)
  vbxn = calc_var(bxn)
  vbyn = calc_var(byn)
  vbzn = calc_var(bzn)

  vnxdiv = calc_var(nxdiv)
  vnydiv = calc_var(nydiv)
  vnzdiv = calc_var(nzdiv)
  vfracdivy = calc_var(fracdivy)

  if type(nxdiv) == str and nxdiv.find("$") > -1:
    tnxdiv = nxdiv + " = " + str(vnxdiv)
  else:
    tnxdiv = nxdiv
  #endif nxdiv.find("$")
  ewid = max(ewid,len(tnxdiv))

  if type(nydiv) == str and nydiv.find("$") > -1:
    tnydiv = nydiv + " = " + str(vnydiv)
  else:
    tnydiv = nydiv
  #endif nydiv.find("$")
  ewid = max(ewid,len(tnydiv))

  if type(nzdiv) == str and nzdiv.find("$") > -1:
    tnzdiv = nzdiv + " = " + str(vnzdiv)
  else:
    tnzdiv = nzdiv
  #endif nzdiv.find("$")
  ewid = max(ewid,len(tnzdiv))

  if type(fracdivy) == str and fracdivy.find("$") > -1:
    tfracdivy = fracdivy + " = " + str(vfracdivy)
  else:
    tfracdivy = fracdivy
  #endif fracdivy.find("$")
  ewid = max(ewid,len(tfracdivy))

  #S_MateType.set(tvmattype)
  #fMatType = Frame(WEditMag)
  #tMatType = 'material type'
  #lMatType = Label(fMatType,text=tMatType,font=MyFont)
  #eMatType = Entry(fMatType,text=S_MateType,justify=CENTER,font=MyFont,width=ewid)
  #lMatType.pack(side=LEFT,fill=X)
  #eMatType.pack(side=RIGHT,fill=X)
  #fMatType.pack(fill=X)

  S_Mat.set(tvmat)
  fMat = Frame(WEditMag)
  tMat = 'material index'
  lMat = Label(fMat,text=tMat,font=MyFont)
  eMat = Entry(fMat,text=S_Mat,justify=CENTER,font=MyFont,width=ewid)
  lMat.pack(side=LEFT,fill=X)
  eMat.pack(side=RIGHT,fill=X)
  fMat.pack(fill=X)

  S_Color.set(tvcol)
  fcol = Frame(WEditMag)
  tcol = 'color'
  lcol = Label(fcol,text=tcol,font=MyFont)
  ecol = Entry(fcol,text=S_Color,justify=CENTER,font=MyFont,width=ewid)
  lcol.pack(side=LEFT,fill=X)
  ecol.pack(side=RIGHT,fill=X)
  fcol.pack(fill=X)

  S_Bc.set(tvbc)
  fBc = Frame(WEditMag)
  tBc = 'remanence'
  lBc = Label(fBc,text=tBc,font=MyFont)
  eBc = Entry(fBc,text=S_Bc,justify=CENTER,font=MyFont,width=ewid)
  lBc.pack(side=LEFT,fill=X)
  eBc.pack(side=RIGHT,fill=X)
  fBc.pack(fill=X)

  S_Bxn.set(tvbxn)
  fBxn = Frame(WEditMag)
  tBxn = 'x - component'
  lBxn = Label(fBxn,text=tBxn,font=MyFont)
  eBxn = Entry(fBxn,text=S_Bxn,justify=CENTER,font=MyFont,width=ewid)
  lBxn.pack(side=LEFT,fill=X)
  eBxn.pack(side=RIGHT,fill=X)
  fBxn.pack(fill=X)

  S_Byn.set(tvbyn)
  fByn = Frame(WEditMag)
  tByn = 'y - component'
  lByn = Label(fByn,text=tByn,font=MyFont)
  eByn = Entry(fByn,text=S_Byn,justify=CENTER,font=MyFont,width=ewid)
  lByn.pack(side=LEFT,fill=X)
  eByn.pack(side=RIGHT,fill=X)
  fByn.pack(fill=X)

  S_Bzn.set(tvbzn)
  fBzn = Frame(WEditMag)
  tBzn = 'z - component'
  lBzn = Label(fBzn,text=tBzn,font=MyFont)
  eBzn = Entry(fBzn,text=S_Bzn,justify=CENTER,font=MyFont,width=ewid)
  lBzn.pack(side=LEFT,fill=X)
  eBzn.pack(side=RIGHT,fill=X)
  fBzn.pack(fill=X)

  S_Ispec.set(ispec)
  fIspec = Frame(WEditMag)
  tIspec = 'non-periodic'
  lIspec = Label(fIspec,text=tIspec,font=MyFont)
  eIspec = Entry(fIspec,text=S_Ispec,justify=CENTER,font=MyFont,width=ewid)
  lIspec.pack(side=LEFT,fill=X)
  eIspec.pack(side=RIGHT,fill=X)
  fIspec.pack(fill=X)

  S_Key.set(key)
#  fKey = Frame(WEditMag)
#  tKey = 'shape key-word'
#  lKey = Label(fKey,text=tKey,font=MyFont)
#  eKey = Entry(fKey,text=S_Key,justify=CENTER,font=MyFont,width=ewid)
#  lKey.pack(side=LEFT,fill=X)
#  eKey.pack(side=RIGHT,fill=X)
#  fKey.pack(fill=X)

#  if key == 'File':
#    S_CornFile.set(DictCornFiles[cmag])
#    ffile = Frame(WEditMag)
#    tfile = 'filename'
#    lfile = Label(ffile,text=tfile,font=MyFont)
#    efile = Entry(ffile,text=S_CornFile,justify=CENTER,font=MyFont,width=ewid)
#    lfile.pack(side=LEFT,fill=X)
#    efile.pack(side=RIGHT,fill=X)
#    ffile.pack(fill=X)
#  #endif key == 'File'

  S_Xcen.set(tvxcen)
  fXcen = Frame(WEditMag)
  tXcen = 'Xref'
  lXcen = Label(fXcen,text=tXcen,font=MyFont)
  eXcen = Entry(fXcen,text=S_Xcen,justify=CENTER,font=MyFont,width=ewid)
  lXcen.pack(side=LEFT,fill=X)
  eXcen.pack(side=RIGHT,fill=X)
  fXcen.pack(fill=X)

  S_Ycen.set(tvycen)
  fYcen = Frame(WEditMag)
  tYcen = 'Yref'
  lYcen = Label(fYcen,text=tYcen,font=MyFont)
  eYcen = Entry(fYcen,text=S_Ycen,justify=CENTER,font=MyFont,width=ewid)
  lYcen.pack(side=LEFT,fill=X)
  eYcen.pack(side=RIGHT,fill=X)
  fYcen.pack(fill=X)

  S_Zcen.set(tvzcen)
  fZcen = Frame(WEditMag)
  tZcen = 'Zref'
  lZcen = Label(fZcen,text=tZcen,font=MyFont)
  eZcen = Entry(fZcen,text=S_Zcen,justify=CENTER,font=MyFont,width=ewid)
  lZcen.pack(side=LEFT,fill=X)
  eZcen.pack(side=RIGHT,fill=X)
  fZcen.pack(fill=X)

  if key.find('Block') > -1:

    S_Xlen.set(tvxlen)
    fXlen = Frame(WEditMag)
    tXlen = 'Xlen'
    lXlen = Label(fXlen,text=tXlen,font=MyFont)
    eXlen = Entry(fXlen,text=S_Xlen,justify=CENTER,font=MyFont,width=ewid)
    lXlen.pack(side=LEFT,fill=X)
    eXlen.pack(side=RIGHT,fill=X)
    fXlen.pack(fill=X)

    S_Ylen.set(tvylen)
    fYlen = Frame(WEditMag)
    tYlen = 'Ylen'
    lYlen = Label(fYlen,text=tYlen,font=MyFont)
    eYlen = Entry(fYlen,text=S_Ylen,justify=CENTER,font=MyFont,width=ewid)
    lYlen.pack(side=LEFT,fill=X)
    eYlen.pack(side=RIGHT,fill=X)
    fYlen.pack(fill=X)

    S_Zlen.set(tvzlen)
    fZlen = Frame(WEditMag)
    tZlen = 'Zlen'
    lZlen = Label(fZlen,text=tZlen,font=MyFont)
    eZlen = Entry(fZlen,text=S_Zlen,justify=CENTER,font=MyFont,width=ewid)
    lZlen.pack(side=LEFT,fill=X)
    eZlen.pack(side=RIGHT,fill=X)
    fZlen.pack(fill=X)

    S_ChamfUs.set(tvchus)
    fChUs = Frame(WEditMag)
    tChUs = 'Up-stream chamfer'
    lChUs = Label(fChUs,text=tChUs,font=MyFont)
    eChUs = Entry(fChUs,text=S_ChamfUs,justify=CENTER,font=MyFont,width=ewid)
    lChUs.pack(side=LEFT,fill=X)
    eChUs.pack(side=RIGHT,fill=X)
    fChUs.pack(fill=X)

    S_ChamfDs.set(tvchds)
    fChDs = Frame(WEditMag)
    tChDs = 'Down-stream chamfer'
    lChDs = Label(fChDs,text=tChDs,font=MyFont)
    eChDs = Entry(fChDs,text=S_ChamfDs,justify=CENTER,font=MyFont,width=ewid)
    lChDs.pack(side=LEFT,fill=X)
    eChDs.pack(side=RIGHT,fill=X)
    fChDs.pack(fill=X)

  elif key == 'File':
    pass
  else:
    Quit("In _editMag fehlt noch key " + key)
  #endif key == 'Block'

  S_nXdiv.set(tnxdiv)
  fnXdiv = Frame(WEditMag)
  tnxdiv = 'nXdiv'
  lnXdiv = Label(fnXdiv,text=tnxdiv,font=MyFont)
  enXdiv = Entry(fnXdiv,text=S_nXdiv,justify=CENTER,font=MyFont,width=ewid)
  lnXdiv.pack(side=LEFT,fill=X)
  enXdiv.pack(side=RIGHT,fill=X)
  fnXdiv.pack(fill=X)

  S_nYdiv.set(tnydiv)
  fnYdiv = Frame(WEditMag)
  tnydiv = 'nYdiv'
  lnYdiv = Label(fnYdiv,text=tnydiv,font=MyFont)
  enYdiv = Entry(fnYdiv,text=S_nYdiv,justify=CENTER,font=MyFont,width=ewid)
  lnYdiv.pack(side=LEFT,fill=X)
  enYdiv.pack(side=RIGHT,fill=X)
  fnYdiv.pack(fill=X)

  S_nZdiv.set(tnzdiv)
  fnZdiv = Frame(WEditMag)
  tnzdiv = 'nZdiv'
  lnZdiv = Label(fnZdiv,text=tnzdiv,font=MyFont)
  enZdiv = Entry(fnZdiv,text=S_nZdiv,justify=CENTER,font=MyFont,width=ewid)
  lnZdiv.pack(side=LEFT,fill=X)
  enZdiv.pack(side=RIGHT,fill=X)
  fnZdiv.pack(fill=X)

  S_FracDivY.set(tfracdivy)
  fFracDivY = Frame(WEditMag)
  tfracdivy = 'FracDivY'
  lFracDivY = Label(fFracDivY,text=tfracdivy,font=MyFont)
  eFracDivY = Entry(fFracDivY,text=S_FracDivY,justify=CENTER,font=MyFont,width=ewid)
  lFracDivY.pack(side=LEFT,fill=X)
  eFracDivY.pack(side=RIGHT,fill=X)
  fFracDivY.pack(fill=X)

  S_FracDivZ.set(tfracdivz)
  fFracDivZ = Frame(WEditMag)
  tfracdivz = 'FracDivZ'
  lFracDivZ = Label(fFracDivZ,text=tfracdivz,font=MyFont)
  eFracDivZ = Entry(fFracDivZ,text=S_FracDivZ,justify=CENTER,font=MyFont,width=ewid)
  lFracDivZ.pack(side=LEFT,fill=X)
  eFracDivZ.pack(side=RIGHT,fill=X)
  fFracDivZ.pack(fill=X)

  WEditMag.update()

  widtot = WEditMag.winfo_width()
  wide = eXcen.winfo_width()
  wscale = ewid / wide
  wforce = int(widtot/2.*wscale) + 2

  fCheckRestore = Frame(WEditMag)
  fCheckRestore.pack(fill=X)

  bCheck = Button(fCheckRestore,text='Check',command= lambda mag=imp: _ccWEditMag(mag))
  bCheck.bind('<Return>',lambda event, mag=imp: _ccWEditMag(mag))
  bCheck.pack(expand=TRUE,side=LEFT,fill=X)

  bRestore = Button(fCheckRestore,text='Restore',command= lambda mag=imp: _crWEditMag(mag),width=wforce)
  bRestore.bind('<Return>',lambda event, mag=imp: _crWEditMag(mag))
  bRestore.pack(side=LEFT,fill=X)

  fC = Frame(WEditMag)
  fC.pack(fill=X)

  bClose = Button(fC,text='Ok',command= lambda mag=imp: _clWEditMag(mag),width=wforce)
  bClose.bind('<Return>',lambda event, mag=imp: _clWEditMag(mag))
  bClose.pack(expand=TRUE,side=LEFT,fill=X)

  WEditMag.update()

  #print("Leaving _editMag")

#enddef _editMag(imp)

def _clWallListMags():
  global WallListMags
  WallListMags.destroy()
#enddef _clWallListMags()

def _clWselListMags():
#+seq,uguiglobind.
  global WselListMags
  WselListMags.destroy()
#enddef _clWselListMags()

def _clWdelListMags():
#+seq,uguiglobind.
  global WdelListMags
  WdelListMags.destroy()
#enddef _clWdelListMags()

NMagPolSel = -1
DictMagPolsSel = {}
MagPolsSel = []

def _selectMag(cmag):

  global NMagPolSel, MagPolsSel,DictMagPolsSel,WallListMags, \
  DictMagPolsTot, MyMoth, Moths, NMothSel, DictMothsSel

  #print('_selectMag(cmag):',cmag)
  #print('_selectMag(cmag):',DictMagPolsSel)

  if cmag in DictMagPolsSel:

    #print('_selectMag(cmag): cmag in DictMagPolsSel')

    mag = MagPolsTot[DictMagPolsTot[cmag]]
    cmoth = mag[0][1]
    moth = MyMoth[cmag]

    NMagPolSel -= 1
    DictMagPolsSel.pop(cmag)

    MagPolsSel = []
    dm = {}
    i = -1

    for cm in DictMagPolsSel:
      MagPolsSel.append(cm)
      i += 1
      dm[cm] = i
    #endfor cm in DictMagPolsSel

    DictMagPolsSel = dm

    if NMothSel > 0 and cmoth in DictMothsSel:
      NMothSel -= 1
      DictMothsSel.pop(cmoth)
      MothsSel = []
      dm = {}
      i = -1
      for cm in DictMothsSel:
        MothsSel.append(cm)
        i += 1
        dm[cm] = i
      #endfor cm in DictMothsSel
      DictMothsSel = dm
    #endif NMothSel > 0

  else:

    #print('_selectMag(cmag): cmag NOT in DictMagPolsSel')
    MagPolsSel.append(cmag)
    DictMagPolsSel[cmag] = NMagPolSel
    NMagPolSel += 1

  #endif not mag in DictMagsSel

  _configMagButts()

  WallListMags.update()

#enddef _selectMag(mag)

NMothSel = 0
DictMothsSel = {}
MothsSel = []

def _selectMoth(cmoth):

  global NMothSel, MothsSel,DictMothsSel, DictMoths,DictMagPolsSel

  #print("selecMoth:cmoth",cmoth)

  if cmoth in DictMothsSel:
    moth = DictMoths[cmoth]
    for cmag in Moths[moth]:
      if cmag in DictMagPolsSel:
        _selectMag(cmag)
#        break
      #endif cmag in DictMagPolsSeleted
    #endfor mag in Moths[moth]
  else:
    MothsSel.append(cmoth)
    DictMothsSel[cmoth] = NMothSel
    moth = DictMoths[cmoth]
    NMothSel += 1
    for mag in Moths[moth]: _selectMag(mag)
  #endif not moth in DictMothsSel

#enddef _selectMag(imp)

def _configMagButts():

  global NMagPolSel, MagPolsSel,DictMagPolsSel
  global All_butts, ndmp, NMothSel

  #print('configMagButts()?\n',DictMothsSel,'\n',DictMagPolsSel)
  for i in range(len(All_butts)):
    butts = All_butts[i]
    cmoth = butts[0]['text']
    butts[0].configure(fg= 'black', bg='white')
    cmag = butts[1]['text']
    #print(cmoth,cmag)
    if cmag in DictMagPolsSel:
      for j in range(1,len(All_butts[i])):
        b = All_butts[i][j]
        b.configure(fg= 'black', bg='cyan')
    else:
      for b in All_butts[i]: b.configure(fg= 'black', bg='white')
    #endif cmag in DictMagPolsSel

  for i in range(len(All_butts)):
    butts = All_butts[i]
    cmoth = butts[0]['text']
    if cmoth in DictMothsSel:
      butts[0].configure(fg= 'black', bg='cyan')
    #endif cmag in DictMothsSel
  #endfor i in range(ndmp)
  #print('configMagButts()!\n')

#enddef _configMagButts()

def _selectAll():

  global DictMagPolsSel, DictMothsSel,NMothSel,NMagPolSel,MagPolsSel,MothSel
  global MagPolsTot,Moths

  DictMagPolsSel = {}
  DictMothsSel = {}
  MothsSel = []
  MagPolsSel = []
  NMothSel = 0
  NMagPolSel = 0

  for cmoth in DictMoths:
    imoth = DictMoths[cmoth]
    MothsSel.append(Moths[imoth])
    DictMothsSel[cmoth] = NMothSel
    NMothSel += 1
  #endif

  for mag in MagPolsTot:
    cmag = mag[0][0]
    MagPolsSel.append(cmag)
    DictMagPolsSel[cmag] = NMagPolSel
    NMagPolSel += 1
  #endif

  #print("_selectAll:\n",DictMothsSel,'\n',DictMagPolsSel)

  _configMagButts()
#enddef _selectAll()

def _deselectAll():
  global DictMagPolsSel, DictMothsSel,NMothSel,NMagPolSel,MagPolsSel,MothSel
  DictMagPolsSel = {}
  DictMothsSel = {}
  MothsSel = []
  MagPolsSel = []
  NMothSel = 0
  NMagPolSel = 0
  _configMagButts()
#enddef _deselectAll()

def _listMags(mode='all'):
+seq,uguiglobind.

  global WselListMags, WdelListMags
  global ndmp, WselGeo, WallGeo, WdelGeo
  global all_fmagmoth, all_fmoth, all_fmag, All_butts, all_lastmp, \
  all_firstmp, all_fxyz, all_fbott, all_fpn, bPrev,bCont, all_fb, all_fedi, \
  all_fcop, all_fdel, all_fplot, isopen_all,isopen_sel,isopen_del, \
  all_fplotxy, all_fplotxz, all_fplotyz

  global sel_fmagmoth, sel_fmoth, sel_fmag, sel_butts, sel_lastmp, \
  sel_firstmp, sel_fxyz, sel_fbott, sel_fpn, bPrev,bCont, sel_width, \
  sel_width_old, sel_width_ini, sel_fb, sel_fedi, sel_del, sel_fplot, sel_fcop

  global del_fmagmoth, del_fmoth, del_fmag, del_butts, del_lastmp, \
  del_firstmp, del_fxyz, del_fbott, del_fpn, bPrev,bCont, del_width, \
  del_width_old, del_width_ini, del_fb, del_fedi, del_del, del_fplot, del_fcop

  if not NMagPolTot:
    wError("No magnets or poles defined so far")
    return
  #endif NMagPolTot

  # counter, i.e. indices + 1
  try:
    all_firstmp = all_lastmp + 1
  except:
    EditMag_CheckMode = 0
    CopyMag_CheckMode = 0
    ndmp = 10
    all_firstmp = 1
  #endtry:

  #print('_listMags:mode,all_firstmp',mode,all_firstmp)
  iupdateall = 0
  iupdatesel = 0
  iupdatedel = 0

  try:
    WallGeo = WallListMags.geometry()
    if mode == 'update':
      iupdateall = 1
      mode = 'all'
      WallListMags.destroy()
    #endif
  except: WallGeo = WallMags=""
  try:
    WselGeo = WselListMags.geometry()
    if mode == 'update':
      iupdatesel = 1
      mode = 'selected'
      WselListMags.destroy()
    #endif
  except: WselGeo=""
  try:
    WdelGeo = WdelListMags.geometry()
    if mode == 'update':
      iupdatedel = 1
      mode = 'deleted'
      WalldelMags.destroy()
    #endif
  except: WdelGeo=""

  #print('_listMags:mode,all_firstmp vor update_magnets',mode,all_firstmp)
  update_magnets()
  #print('_listMags:mode,all_firstmp nach update_magnets',mode,all_firstmp)

  if mode == 'all' or iupdateall == 1:

    if mode == 'all':
      all_lastmp = all_firstmp + ndmp - 1
      all_firstmp = 1
      all_lastmp = min(ndmp,NMagPolTot)
    else:
      if all_lastmp > NMagPolTot - 1:
        all_lastmp = NMagPolTot -1
        all_firstmp = all_lastmp - ndmp
      #if all_lastmp > NMagPolTot - 1
      WallListMags.destroy()
    #endif mode == 'all'

    WallListMags = Toplevel()
    WallListMags.title("List of Magnetic Items")
    WallListMags.attributes('-topmost', 1)

    All_butts = []
    all_frames = []

    all_fmagmoth = Frame(WallListMags)
    all_fmoth = Frame(all_fmagmoth)
    all_fmag = Frame(all_fmagmoth)
    all_fkey = Frame(all_fmagmoth)
    all_fxyz = Frame(all_fmagmoth)
    all_fb = Frame(all_fmagmoth)
    all_fedi = Frame(all_fmagmoth)
    all_fdel = Frame(all_fmagmoth)
    all_fcop = Frame(all_fmagmoth)
    all_fplot = Frame(all_fmagmoth)
    all_fplotxy = Frame(all_fmagmoth)
    all_fplotxz = Frame(all_fmagmoth)
    all_fplotzy = Frame(all_fmagmoth)
    all_fsel = Frame(WallListMags)
    all_fbott = Frame(WallListMags)
    all_fpn = Frame(WallListMags)

    all_fmoth.pack(side=LEFT)

    #print("List:",mode,NL,MagPolsTot[0])

    for imp in range(all_lastmp):

      mp = MagPolsTot[imp]

      cmag = mp[0][0]
      cmoth = mp[0][1]

      buttmoth = Button(all_fmoth,text=cmoth,
                        command= lambda moth=cmoth: _selectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)

      buttmag = Button(all_fmag,text=cmag,
                       command= lambda mag = cmag: _selectMag(mag))
      buttmag.pack(side=TOP,fill=X)

      ckey = mp[3]
      buttkey = Button(all_fkey,text=ckey,bg='white')
      buttkey.pack(side=TOP,fill=X)

      mp1 = round(mp[-1][0],3)
      mp2 = round(mp[-1][1],3)
      mp3 = round(mp[-1][2],3)
      txyz = str([mp1,mp2,mp3])
      buttxyz = Button(all_fxyz,text=txyz)
      buttxyz.pack(side=TOP,fill=X)

      vmat = mp[5]

      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])

      mat = vmat[4]

      tb = " P " #Pole

      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        try: tb = str(bc) + sxyz
        except: tb = bc + sxyz
      #endif Variables[mat] == 1

      buttb = Button(all_fb,text=tb)
      buttb.pack(side=TOP,fill=X)

      buttcop = Button(all_fcop,text='Copy',
                       command= lambda mag = imp: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttedi = Button(all_fedi,text='Edit',
                       command= lambda mag = imp: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttdel = Button(all_fdel,text='Delete',
                       command= lambda mag = imp: _delmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttplot = Button(all_fplot,text='Plot 3d',
                       command= lambda mag = imp, key = '3dselected': _plotMag(mag,key))
      buttplot.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotxy,text='XY',
                       command= lambda mag = imp, key = 'xy': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotxz,text='XZ',
                       command= lambda mag = imp, key = 'xz': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

      buttplotxy = Button(all_fplotzy,text='ZY',
                       command= lambda mag = imp, key = 'zy': _plotMag(mag,key))
      buttplotxy.pack(side=TOP,fill=X)

#      All_butts.append([buttmoth,buttmag,buttkey,buttxyz,buttb,buttedi,buttcop,\
#      buttdel,buttplot])
      All_butts.append([buttmoth,buttmag,buttkey,buttxyz,buttb])
    #endfor imp in range( NMagPolsTot)

    WallListMags.update()

    if NMagPolTot > ndmp:
      bPrev = Button(all_fpn,text='Previous',command= lambda key='all_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bPlotSel = Button(all_fpn,text='Plot Selection',command= lambda item=-2: _showGeo('3d',item))
      bPlotSel.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(all_fpn,text='Next',command= lambda key='all_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolTot > 0

    #bsel = Button(all_fsel,text='Select All',command=_selectAll)
    #bsel.pack(side=LEFT,expand=TRUE,fill=BOTH)
    #bdsel = Button(all_fsel,text='Deselect All',command=_deselectAll)
    #bdsel.pack(side=RIGHT,expand=TRUE,fill=BOTH)
    bdsel = Button(all_fsel,text='Plot whole device',command=_showGeo)
    bdsel.pack(side=RIGHT,expand=TRUE,fill=BOTH)
    bClose = Button(all_fbott,text='Close',command=_clWallListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    all_fmag.pack(side=LEFT)
    all_fmoth.pack(side=LEFT)
    all_fkey.pack(side=LEFT)
    all_fxyz.pack(side=LEFT)
    all_fb.pack(side=LEFT)
    all_fedi.pack(side=LEFT)
    all_fcop.pack(side=LEFT)
    all_fdel.pack(side=LEFT)
    all_fplot.pack(side=LEFT)
    all_fplotxy.pack(side=LEFT)
    all_fplotxz.pack(side=LEFT)
    all_fplotzy.pack(side=LEFT)

    all_fmagmoth.pack(side=TOP)
    all_fpn.pack(side=TOP,fill=X)
    all_fsel.pack(side=TOP,fill=X)
    all_fbott.pack(side=TOP,fill=X)

    if iupdateall == 1:
      sgeo = WallGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WallListMags.geometry(sgeo)
    else:
      sgeo = Wmaster.geometry().split('+')
      whw = sgeo[0].split('x')
      ww = int(whw[0])
      wh = int(whw[1])
      xw = int(sgeo[1])
      yw = int(sgeo[2])
      x = xw + int(ww/3)
      y = yw + int(wh/10)
      sgeo = '+' + str(x) + '+' + str(y)
      #WallListMags.geometry(sgeo)
    #endif mode == 'update'

    _configMagButts()
    WallListMags.update()

  elif mode == 'all_prev':

    all_lastmp = all_firstmp + ndmp - 1
    all_lastmp = max(all_lastmp-2*ndmp, ndmp)
    all_firstmp = max(all_firstmp-2*ndmp,1)

    ibut = ndmp
    for imp in range(all_lastmp-1,all_firstmp-2,-1):
      mp = MagPolsTot[imp]
      cmag = mp[0][0]
      cmoth = mp[0][1]
      All_butts[ibut-1][0].config(text=cmoth, command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      All_butts[ibut-1][1].config(text=cmag,command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsTot[imp][-1])
      All_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      All_butts[ibut-1][3].configure(text=tb)
      All_butts[ibut-1][4].config(text='Edit',command= lambda mag = imp: _editMag(mag))
      All_butts[ibut-1][5].config(text='Copy',command= lambda mag = imp: _copyMag(mag))
      All_butts[ibut-1][6].config(text='Plot',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(all_lastmp,all_firstmp,-1)

    _configMagButts()
    WallListMags.update()

  elif mode == 'all_next':

    all_lastmp = all_firstmp + ndmp - 1

    if all_lastmp > NMagPolTot - 1:
      all_lastmp = NMagPolTot -1
      all_firstmp = all_lastmp - ndmp
    #if all_lastmp > NMagPolTot - 1

    ibut = ndmp
    for imp in range(all_lastmp-1,all_firstmp-2,-1):
      mp = MagPolsTot[imp]
      cmag = mp[0][0]
      cmoth = mp[0][1]
      All_butts[ibut-1][0].config(text=cmoth, command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      All_butts[ibut-1][1].config(text=cmag,command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsTot[imp][-1])
      All_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      All_butts[ibut-1][3].configure(text=tb)
      All_butts[ibut-1][4].config(text='Edit',command= lambda mag = imp: _editMag(mag))
      All_butts[ibut-1][4].config(text='Copy',command= lambda mag = imp: _copyMag(mag))
      All_butts[ibut-1][5].config(text='Plot',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(all_lastmp,all_firstmp,-1)

    _configMagButts()
    WallListMags.update()

  #endif mode == 'all'

  # counter, i.e. indices + 1
  try:
    sel_firstmp = sel_lastmp + 1
  except:
    ndmp = 10
    sel_firstmp = 1
  #endtry:

  if mode == 'selected' or iupdatesel == 1:

    if NMagPolSel < 0: return

    if mode == 'selected':
      sel_lastmp = sel_firstmp + ndmp - 1
      sel_firstmp = 1
      sel_lastmp = min(ndmp,NMagPolSel)
    else:
      if sel_lastmp > NMagPolSel - 1:
        sel_lastmp = NMagPolSel -1
        sel_firstmp = sel_lastmp - ndmp
      #endif sel_lastmp > NMagPolSel - 1
      mode == 'selected'
    #endif mode == 'selected'

    WselListMags = Toplevel()
    WselListMags.title("List of Selected Magnetic Items")
    WselListMags.attributes('-topmost', 1)

    sel_butts = []
    sel_frames = []

    sel_fmagmoth = Frame(WselListMags)
    sel_fmoth = Frame(sel_fmagmoth)
    sel_fmag = Frame(sel_fmagmoth)
    sel_fxyz = Frame(sel_fmagmoth)
    sel_fb = Frame(sel_fmagmoth)
    sel_fedi = Frame(sel_fmagmoth)
    sel_fdel = Frame(sel_fmagmoth)
    sel_fcop = Frame(sel_fmagmoth)
    sel_fplot = Frame(sel_fmagmoth)
    sel_fbott = Frame(WselListMags)
    sel_fpn = Frame(WselListMags)

    sel_fmoth.pack(side=LEFT)

    sel_width_ini = WselListMags.winfo_reqwidth()
    sel_width = sel_width_ini

    for isel in range(sel_lastmp):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      buttmoth = Button(sel_fmoth,text=cmoth, bg='white',
                        command= lambda moth=cmoth: _selectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)
      buttmag = Button(sel_fmag,text=cmag, bg='white',
                       command= lambda mag = cmag: _selectMag(mag))
      buttmag.pack(side=TOP,fill=X)
      txyz = str(mp[-1])
      buttxyz = Button(sel_fxyz,text=txyz, bg='white')
      buttxyz.pack(side=TOP,fill=X)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        tb = str(bc) + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1

      buttb = Button(sel_fb,text=tb, bg='white')
      buttb.pack(side=TOP,fill=X)

      buttdel = Button(sel_fdel,text='Delete', bg='white',
                       command= lambda mag = imp: _delmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttedi = Button(sel_fedi,text='Edit', bg='white',
                       command= lambda mag = imp: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttcop = Button(sel_fcop,text='Copy', bg='white',
                       command= lambda mag = imp: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttplot = Button(sel_fplot,text='Plot', bg='white',
                       command= lambda mag = imp: _plotMag(mag))
      buttplot.pack(side=TOP,fill=X)

      sel_butts.append([buttmoth,buttmag,buttxyz,buttb,buttedi,buttcop,buttplot])
    #endfor imp in range( NMagPolSel)

    WselListMags.update()

    sel_width_ini = WselListMags.winfo_width()
    sel_width = sel_width_ini

    if NMagPolSel > ndmp:
      bPrev = Button(sel_fpn,text='Previous',command= lambda key='sel_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(sel_fpn,text='Next',command= lambda key='sel_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolSel > 0

    bClose = Button(sel_fbott,text='Ok',command=_clWselListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    sel_fmag.pack(side=LEFT)
    sel_fmoth.pack(side=LEFT)
    sel_fxyz.pack(side=LEFT)
    sel_fb.pack(side=LEFT)
    sel_fedi.pack(side=LEFT)
    sel_fcop.pack(side=LEFT)
    sel_fdel.pack(side=LEFT)
    sel_fplot.pack(side=LEFT)

    sel_fmagmoth.pack(side=TOP)
    sel_fpn.pack(side=TOP,fill=X)
    sel_fbott.pack(side=TOP,fill=X)

    if iupdatesel == 1:
      sgeo = WselGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WselListMags.geometry(sgeo)
    #endif mode == 'update'
    #x,y = Umaster.winfo_pointerxy()
    #sgeo = '+' + str(x) + '+' + str(y)
    #WselListMags.geometry(sgeo)

    WselListMags.update()
    sel_width = WselListMags.winfo_width()
    #sel_width = sel_fmagmoth.winfo_width()
    sel_width_old = sel_width

  elif mode == 'sel_prev':

    sel_lastmp = sel_firstmp + ndmp - 1

    sel_lastmp = max(sel_lastmp-2*ndmp, ndmp)
    sel_firstmp = max(sel_firstmp-2*ndmp,1)

    ibut = ndmp
    for isel in range(sel_lastmp-1,sel_firstmp-2,-1):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      sel_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      sel_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsSel[imp][-1])
      sel_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      sel_butts[ibut-1][3].configure(text=tb)
      sel_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = imp: _editMag(mag))
      sel_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(sel_lastmp,sel_firstmp,-1)

  elif mode == 'sel_next':

    sel_lastmp = sel_firstmp + ndmp - 1

    if sel_lastmp > NMagPolSel - 1:
      sel_lastmp = NMagPolSel -1
      sel_firstmp = sel_lastmp - ndmp
    #if sel_lastmp > NMagPolSel - 1

    ibut = ndmp
    for isel in range(sel_lastmp-1,sel_firstmp-2,-1):

      cmag = MagPolsSel[isel]
      imp = DictMagPolsTot[cmag]
      mp = MagPolsTot[imp]
      cmoth = mp[0][1]

      sel_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _selectMoth(cmoth))
      sel_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = imp: _selectMag(cmag))
      txyz = str(MagPolsSel[imp][-1])
      sel_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      sel_butts[ibut-1][3].configure(text=tb)
      sel_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = imp: _editMag(mag))
      sel_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = imp: _plotMag(mag))
      ibut -= 1
    #endfor imp in range(sel_lastmp,sel_firstmp,-1)

  #endif mode == 'sel'

  # counter, i.e. indices + 1
  try:
    del_firstmp = del_lastmp + 1
  except:
    ndmp = 10
    del_firstmp = 1
  #endtry:

  if mode == 'deleted' or iupdatedel == 1:

    if NMagPolDel < 0: return

    if mode == 'deleted':
      del_lastmp = del_firstmp + ndmp - 1
      del_firstmp = 1
      del_lastmp = min(ndmp,NMagPolDel)
    else:
      if del_lastmp > NMagPolDel - 1:
        del_lastmp = NMagPolDel -1
        del_firstmp = del_lastmp - ndmp
      #endif del_lastmp > NMagPolDel - 1
      mode == 'delected'
    #endif mode == 'delected'

    WdelListMags = Toplevel()
    WdelListMags.title("List of Delected Magnetic Items")
    WdelListMags.attributes('-topmost', 1)

    del_butts = []
    del_frames = []

    del_fmagmoth = Frame(WdelListMags)
    del_fmoth = Frame(del_fmagmoth)
    del_fmag = Frame(del_fmagmoth)
    del_fxyz = Frame(del_fmagmoth)
    del_fb = Frame(del_fmagmoth)
    del_fedi = Frame(del_fmagmoth)
    del_fdel = Frame(del_fmagmoth)
    del_fcop = Frame(del_fmagmoth)
    del_fplot = Frame(del_fmagmoth)
    del_fbott = Frame(WdelListMags)
    del_fpn = Frame(WdelListMags)

    del_fmoth.pack(side=LEFT)

    del_width_ini = WdelListMags.winfo_reqwidth()
    del_width = del_width_ini

    for idel in range(del_lastmp):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      buttmoth = Button(del_fmoth,text=cmoth, bg='white',
                        command= lambda moth=cmoth: _delectMoth(moth))
      buttmoth.pack(side=TOP,fill=X)
      buttmag = Button(del_fmag,text=cmag, bg='white',
                       command= lambda mag = cmag: _delectMag(mag))
      buttmag.pack(side=TOP,fill=X)
      txyz = str(mp[-1])
      buttxyz = Button(del_fxyz,text=txyz, bg='white')
      buttxyz.pack(side=TOP,fill=X)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "   +X"
        if bxn < 0: sxyz += "   -X"
        if byn > 0: sxyz += "   +Y"
        if byn < 0: sxyz += "   -Y"
        if bzn > 0: sxyz += "   +Z"
        if bzn < 0: sxyz += "   -Z"
        tb = str(bc) + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1

      buttb = Button(del_fb,text=tb, bg='white')
      buttb.pack(side=TOP,fill=X)

      buttdel = Button(del_fdel,text='Restore', bg='white',
                       command= lambda mag = idel: _resmagpol(mag))
      buttdel.pack(side=TOP,fill=X)

      buttedi = Button(del_fedi,text='Edit', bg='white',
                       command= lambda mag = idel: _editMag(mag))
      buttedi.pack(side=TOP,fill=X)

      buttcop = Button(del_fcop,text='Copy', bg='white',
                       command= lambda mag = idel: _copyMag(mag))
      buttcop.pack(side=TOP,fill=X)

      buttplot = Button(del_fplot,text='Plot', bg='white',
                       command= lambda mag = idel: _plotMag(mag))
      buttplot.pack(side=TOP,fill=X)

      del_butts.append([buttmoth,buttmag,buttxyz,buttb,buttedi,buttcop,buttplot])
    #endfor idel in range( NMagPolDel)

    WdelListMags.update()

    del_width_ini = WdelListMags.winfo_width()
    del_width = del_width_ini

    if NMagPolDel > ndmp:
      bPrev = Button(del_fpn,text='Previous',command= lambda key='del_prev': _listMags(key))
      bPrev.pack(expand=TRUE,side=LEFT,fill=X)
      bCont = Button(del_fpn,text='Next',command= lambda key='del_next': _listMags(key))
      bCont.pack(expand=TRUE,side=RIGHT,fill=X)
    #endif NMagPolDel > 0

    bClose = Button(del_fbott,text='Ok',command=_clWdelListMags)
    bClose.pack(side=BOTTOM,fill=BOTH)

    del_fmag.pack(side=LEFT)
    del_fmoth.pack(side=LEFT)
    del_fxyz.pack(side=LEFT)
    del_fb.pack(side=LEFT)
    del_fedi.pack(side=LEFT)
    del_fcop.pack(side=LEFT)
    del_fdel.pack(side=LEFT)
    del_fplot.pack(side=LEFT)

    del_fmagmoth.pack(side=TOP)
    del_fpn.pack(side=TOP,fill=X)
    del_fbott.pack(side=TOP,fill=X)

    if iupdatedel == 1:
      sgeo = WdelGeo.split('+')
      sgeo = '+' + sgeo[1] + '+' + sgeo[2]
      WdelListMags.geometry(sgeo)
    #endif mode == 'update'
    #x,y = Umaster.winfo_pointerxy()
    #sgeo = '+' + str(x) + '+' + str(y)
    #WdelListMags.geometry(sgeo)

    WdelListMags.update()
    del_width = WdelListMags.winfo_width()
    #del_width = del_fmagmoth.winfo_width()
    del_width_old = del_width

  elif mode == 'del_prev':

    del_lastmp = del_firstmp + ndmp - 1

    del_lastmp = max(del_lastmp-2*ndmp, ndmp)
    del_firstmp = max(del_firstmp-2*ndmp,1)

    ibut = ndmp
    for idel in range(del_lastmp-1,del_firstmp-2,-1):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      del_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _delectMoth(cmoth))
      del_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = idel: _delectMag(cmag))
      txyz = str(MagPolsDel[idel][-1])
      del_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]
      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      del_butts[ibut-1][3].configure(text=tb)
      del_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = idel: _editMag(mag))
      del_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = idel: _plotMag(mag))
      ibut -= 1
    #endfor idel in range(del_lastmp,del_firstmp,-1)

  elif mode == 'del_next':

    del_lastmp = del_firstmp + ndmp - 1

    if del_lastmp > NMagPolDel - 1:
      del_lastmp = NMagPolDel -1
      del_firstmp = del_lastmp - ndmp
    #if del_lastmp > NMagPolDel - 1

    ibut = ndmp
    for idel in range(del_lastmp-1,del_firstmp-2,-1):

      mp = MagPolsDel[idel]
      cmag = mp[0][0]
      cmoth = mp[0][1]

      del_butts[ibut-1][0].config(text=cmoth, bg='white', command= lambda moth = MyMoth[cmag]: _delectMoth(cmoth))
      del_butts[ibut-1][1].config(text=cmag, bg='white',command= lambda mag = idel: _delectMag(cmag))
      txyz = str(MagPolsDel[idel][-1])
      del_butts[ibut-1][2].configure(text=txyz)
      vmat = mp[5]
      bc = calc_var(vmat[0])
      bxn = calc_var(vmat[1])
      byn = calc_var(vmat[2])
      bzn = calc_var(vmat[3])
      mat = vmat[4]

      if mat in Variables and Variables[mat] == 1 or mat == '1':
        sxyz = ""
        if bxn > 0: sxyz += "+X"
        if bxn < 0: sxyz += "-X"
        if byn > 0: sxyz += "+Y"
        if byn < 0: sxyz += "-Y"
        if bzn > 0: sxyz += "+Z"
        if bzn < 0: sxyz += "-Z"
        tb = str(bc) + "   " + sxyz
      else:
        tb = " P "
      #endif Variables[mat] == 1
      del_butts[ibut-1][3].configure(text=tb)
      del_butts[ibut-1][4].config(text=cmag, bg='white',command= lambda mag = idel: _editMag(mag))
      del_butts[ibut-1][5].config(text=cmag, bg='white',command= lambda mag = idel: _plotMag(mag))
      ibut -= 1
    #endfor idel in range(del_lastmp,del_firstmp,-1)

  #endif mode == 'del'

#enddef _listMags()

# +KEEP,listmags,T=PYTHON.}
+KEEP,uwriteclc,T=PYTHON.
*CMZ :          01/09/2023  10.25.29  by  Michael Scheer
*CMZ :  2.04/06 10/07/2023  10.00.28  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  09.21.13  by  Michael Scheer
*CMZ :  2.03/00 31/08/2022  11.28.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  12.05.08  by  Michael Scheer
*CMZ :  2.02/01 30/04/2021  14.53.27  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  12.54.31  by  Michael Scheer
*CMZ :  2.01/08 30/07/2020  10.49.14  by  Michael Scheer
*CMZ :  1.32/11 14/04/2020  16.26.11  by  Michael Scheer
*CMZ :  1.32/05 25/10/2019  14.13.42  by  Michael Scheer
*-- Author :    Michael Scheer   09/10/2019
+seq,writetrc.
def write_variables(Fclc):

+seq,uguiglobind.

  if not '$Mcoating' in Variables and not '$Mcoating' in Pars:
    Fclc.write("$Mcoating = 0.0 ! Coating of magnets \n")
  #endif not '$PerLen' in Variables

  if not '$PerLen' in Variables and not '$PerLen' in Pars:
    Fclc.write("$PerLen = 0.0 ! Dummy for period-length\n")
  #endif not '$PerLen' in Variables

  for p in Pars:
    ps = p[1:] # strip $
    if '$' + ps in Variables: continue
    Fclc.write("$" + ps + "=" + str(Pars[p]) + "\n")
  #endfor p in Pars

  for vnam in Variables:
    if vnam in DictCalcs: continue
    vcom = DictVcomments[vnam]
    if len(vcom): vcom = ' ! ' + vcom
    Fclc.write("$" + vnam[1:] + "=" + str(Variables[vnam]) + vcom + "\n")
  #endfor p in Pars
  Fclc.write("\n")

  for c in DictUnduColors:
    if c[0] != '$': sc = '$' + c
    else: sc = c
    if sc in Pars or sc in Variables: continue
    s = "$" + c + "=" + str(DictUnduColors[c])
    Fclc.write(s+"\n")
  #endfor c in UnduColors

  for calc in Calcs:
    com = DictVcomments[calc[0]]
    if len(com.strip()): com = '! ' + com
    Fclc.write(calc[0] + " = " + calc[1] + com + "\n")
  #endfor calc

#enddef write_variables

def write_coils(coils,Fclc,kcoil=-1):

  #print("write_coils:",coils,kcoil)
  iexplain = 0

  Fclc.write(NL)

  icoil = -1
  for coil in coils:

    #if calc_var(coil[1][0]) == 0.0: continue

    icoil += 1
    if kcoil > -1 and kcoil != icoil: continue

    key = coil[0][0].upper()

    Fclc.write("\n& Coil\n")
    Fclc.write(coil[0][0] + " " + coil[0][1] + "\n")

    if key == 'RECTWINDINGS':

      if iexplain == 0:
        iexplain = 1
        Fclc.write("* RectWindings:\n")
        Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
        Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad divisions, color-index\n")
      #endif

      scoil = ''
      for s in coil[1]:
        scoil = scoil + ' ' + s
      #endfor s in coil[1]
      Fclc.write(scoil + "\n")

    elif key == 'FILAMENTS':

      Fclc.write(coil[1] + "\n")
      for i in range(int(coil[1])):
        atom = ''
        for dat in coil[2][i]:
          atom += dat + " "
      #endfor
      Fclc.write(atom + "\n")

    elif key == 'FILE':
      Fclc.write(coil[1] + "\n")

    elif key == 'RECTARC' or key == 'RECTBAR' or \
    key == 'THICKWIRE' or key == 'CIRCARC':

      for i in range(2):
        atom = ''
        for dat in coil[1][i]:
          atom += dat + " "
        #endfor
        Fclc.write(atom + "\n")
      #endfor
    #endfor

    else:

      atom = ''
      for dat in coil[1]:
        atom += dat + " "
      #endfor
      Fclc.write(atom + "\n")

    #endif key

  #endfor coil in coils

#enddef write_coils(coils,fileclc)

def write_coils_old(coils,Fclc):

  Fclc = open(Fclc,'a')

  Fclc.write("************\n")
  Fclc.write("\n")
  Fclc.write("Coils\n")

  iexplain = 0

  for coil in coils:

   if iexplain == 0 and coil[0][0].upper() == 'RECTWINDINGS':
     iexplain = 1
     Fclc.write("\n* RectWindings:\n")
     Fclc.write("\n* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
     Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad divisions, color-index\n*")
   #endif

   Fclc.write(coil[0] + "\n")
   scoil = ''
   for s in coil[1]:
     scoil = scoil + ' ' + s
   #endfor s in coil[1]
   Fclc.write(scoil + "\n")
  #endfor coil in coils

  Fclc.write("EndCoils\n")
  Fclc.write("************\n")

  Fclc.close()

#enddef write_coils_old(coils,fileclc)

def uwriteclc(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print("\n\ntrace: uwriteclc:callkey:",callkey)
  print("AppleII_Mode,Hybrid_Mode:",AppleII_Mode,Hybrid_Mode)
+self.

  if yesno(S_IzSym.get()) == 'yes': izsym = 1
  else: izsym = 0
  if yesno(S_IySym.get()) == 'yes': iysym = 1
  else: iysym = 0
  if yesno(S_IxSym.get()) == 'yes': ixsym = 1
  else: ixsym = 0

  blanks = "                                                                                                      "

  mpperi = deepcopy(MagPols)
  mpspec = deepcopy(SpecMagPols)

  Npar = len(Pars)
  Nvar = len(Variables)

  mats = deepcopy(Materials)

  for m in mats:
    if m[1] == 'REC': m[1] = 1
    elif m[1] == 'Iron': m[1] = 2
  #endfor

  Mode = 'Unknown'

  if callkey == 'UNDUMAG':
  #if callkey != "clWfclc":
    if int(AppleII_Mode) > 0:
      Mode = 'AppleII'
      AppleII_Mode = 0
    elif int(Hybrid_Mode) == 1:
      Mode = 'Hybrid'
      Hybrid_Mode = 0
    elif int(Hybrid_Mode) == 2:
      Mode = 'Mirror'
      Hybrid_Mode = 0
  #endif

+self,if=trace.
  debug("trace: uwriteclc:Mode",Mode)
+self.

  if int(AppleII_Mode) > 0:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fmu = open(FileMu,'w')
    Fmu.write(S_Mu_AppleII.get() + " " + S_KsiPerp_AppleII.get() + " ! mu_Par and ksi_Per\n")
    Fmu.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("\n")
    Fclc.write("*! Lines written by undugui.py\n")
    Fclc.write("Mode AppleII\n")
    #Fclc.write("*! AppleII\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Apple II Undulator"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fsav = open("appleii.lst",'w')
    for par in AppleII: Fsav.write(par + " " + str(AppleII[par])+"\n")
    Fsav.close()

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("$nPeriods=" + S_nPer_AppleII.get() + "\n")
    Fclc.write("$LxMag=" + S_Xlen_AppleII.get() + "\n")
    Fclc.write("$LyMag=" + S_Ylen_AppleII.get() + "\n")
    Fclc.write("$LzMag=" + S_Zlen_AppleII.get() + "\n")
    Fclc.write("$AirGap=" + S_AirGap_AppleII.get() + "\n")
    Fclc.write("$Mcoating=" + S_DeadCoat_AppleII.get() + "\n")
    Fclc.write("$FullGap=" + S_FullGap_AppleII.get() + "\n")
    Fclc.write("$matrec=1\n")
    Fclc.write("$mat4=2\n")
    Fclc.write("$mat34=3\n")
    Fclc.write("$Br=" + S_Br_AppleII.get() + "\n")
    Fclc.write("$Mu=" + S_Mu_AppleII.get() + "\n")
    Fclc.write("$KsiPerp=" + S_KsiPerp_AppleII.get() + "\n")
    Fclc.write("$S2Shift=" + S_S2Shift_AppleII.get() + "\n")
    Fclc.write("$S3Shift=" + S_S3Shift_AppleII.get() + "\n")
    Fclc.write("$zSlit=" + S_HorSlit_AppleII.get() + "\n")
    Fclc.write("$xMagCen=" + str(AppleII['xMagCen']) + "\n")
    Fclc.write("$nMagDivX=" + S_NdivX_AppleII.get() + "\n")
    Fclc.write("$nHalfMagDivX=" + S_NdivXHalf_AppleII.get() + "\n")
    Fclc.write("$nMagDivY=" + S_NdivY_AppleII.get() + "\n")
    Fclc.write("$nMagDivZ=" + S_NdivZ_AppleII.get() + "\n")

    Fclc.write("\n")
    Fclc.write("$CurrentByCoil = 0.0\n")
    Fclc.write("$FullGapByCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$zCoilByCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutByCoil = 60.\n")
    Fclc.write("$zLenInByCoil = 40.\n")
    Fclc.write("$zLenOutByCoil = 50.\n")
    Fclc.write("$HeightByCoil = 30.\n")
    Fclc.write("\n")
    Fclc.write("$CurrentBzCoil = 0.0\n")
    Fclc.write("$FullGapBzCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$yCoilBzCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutBzCoil = 60.\n")
    Fclc.write("$zLenInBzCoil = 40.   ! Consider rotation!!\n")
    Fclc.write("$zLenOutBzCoil = 50.  ! Consider rotation!!\n")
    Fclc.write("$HeightBzCoil = 30.   ! Consider rotation!!\n")
    Fclc.write("\n")

    Fclc.write("$nDivHeightCoil = 1\n")
    Fclc.write("$nDivWindCoil = 1\n")
    Fclc.write("$nDivArcCoil = 6\n")

    Fclc.write("$FillingCoil = 0.5\n\n")

    for c in DictUnduColors:
      s = "$" + c
      if not s in Variables:
        s = "$" + c + "=" + str(DictUnduColors[c])
        Fclc.write(s+"\n")
      #endif
    #endfor c in UnduColors

    Fclc.write("\n$E1Br = $Br / 4.\n")
    Fclc.write("$E2Br = - $Br * 3. / 4.\n")
    Fclc.write("$PerLen = 4. * ( $LxMag + $AirGap )\n")
    Fclc.write("$HalfGap = $FullGap / 2.\n")
    Fclc.write("$HalfPerLen = $PerLen / 2.\n")
    Fclc.write("$LxHalfMag = $LxMag / 2.\n")
    Fclc.write("$yMagCen = - $HalfGap - $LyMag / 2.\n")
    Fclc.write("$zMagCen = - $LzMag / 2. - $zSlit / 2.\n")
    Fclc.write("$hS3Shift = $S3Shift / 2.\n")
    Fclc.write("$hS2Shift = $S2Shift / 2.\n")

    Fclc.write("$x1LRMagCen = $xMagCen + $LxHalfMag / 2. - $hS3Shift - $hS2Shift\n")
    Fclc.write("$x2LRMagCen = $x1LRMagCen + $LxHalfMag / 2. + $AirGap + $LxMag / 2.\n")
    Fclc.write("$x3LRMagCen = $x2LRMagCen + $LxHalfMag + $AirGap + $LxHalfMag / 2.\n")
    Fclc.write("$x4LRMagCen = $x3LRMagCen + $LxHalfMag\n")
    Fclc.write("$x5LRMagCen = $x4LRMagCen + $LxHalfMag / 2. + $AirGap + $LxMag / 2.\n")
    Fclc.write("$x6LRMagCen = $x5LRMagCen + $LxMag / 2. + $AirGap + $LxHalfMag / 2.\n")

    Fclc.write("$x1LLMagCen = $x1LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x2LLMagCen = $x2LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x3LLMagCen = $x3LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x4LLMagCen = $x4LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x5LLMagCen = $x5LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x6LLMagCen = $x6LRMagCen + $S3Shift + $S2Shift\n")

    Fclc.write("$x1ULMagCen = $x1LRMagCen\n")
    Fclc.write("$x2ULMagCen = $x2LRMagCen\n")
    Fclc.write("$x3ULMagCen = $x3LRMagCen\n")
    Fclc.write("$x4ULMagCen = $x4LRMagCen\n")
    Fclc.write("$x5ULMagCen = $x5LRMagCen\n")
    Fclc.write("$x6ULMagCen = $x6LRMagCen\n")

    Fclc.write("$x1URMagCen = $x1LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x2URMagCen = $x2LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x3URMagCen = $x3LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x4URMagCen = $x4LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x5URMagCen = $x5LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x6URMagCen = $x6LLMagCen - $S2Shift * 2.\n")

    Fclc.write("$yUMagCen = - $yMagCen\n")

    Fclc.write("$zLLMagCen = - $zMagCen\n")
    Fclc.write("$zULMagCen = - $zMagCen\n")

    Fclc.write("$yModCen = - 2. * $yMagCen\n")
    Fclc.write("$zModCen = - 2. * $zMagCen\n")

    Fclc.write("\n* Upstream endpoles\n\n")

    Fclc.write("$x1E1LLMagCen = $x1LLMagCen - $PerLen\n")
    Fclc.write("$x2E1LLMagCen = $x2LLMagCen - $PerLen\n")
    Fclc.write("$x3E1LLMagCen = $x3LLMagCen - $PerLen\n")

    Fclc.write("$x1E1ULMagCen = $x1ULMagCen - $PerLen\n")
    Fclc.write("$x2E1ULMagCen = $x2ULMagCen - $PerLen\n")
    Fclc.write("$x3E1ULMagCen = $x3ULMagCen - $PerLen\n")

    Fclc.write("$x1E1LRMagCen = $x1LRMagCen - $PerLen\n")
    Fclc.write("$x2E1LRMagCen = $x2LRMagCen - $PerLen\n")
    Fclc.write("$x3E1LRMagCen = $x3LRMagCen - $PerLen\n")

    Fclc.write("$x1E1URMagCen = $x1URMagCen - $PerLen\n")
    Fclc.write("$x2E1URMagCen = $x2URMagCen - $PerLen\n")
    Fclc.write("$x3E1URMagCen = $x3URMagCen - $PerLen\n")

    Fclc.write("$x1E2LLMagCen = $x1LLMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2LLMagCen = $x2LLMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2LLMagCen = $x3LLMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2ULMagCen = $x1ULMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2ULMagCen = $x2ULMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2ULMagCen = $x3ULMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2LRMagCen = $x1LRMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2LRMagCen = $x2LRMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2LRMagCen = $x3LRMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2URMagCen = $x1URMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2URMagCen = $x2URMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2URMagCen = $x3URMagCen - $HalfPerLen\n")

    Fclc.write("\n* Downstream endpoles\n\n")

    Fclc.write("$dxED0 = ( $nPeriods + 1.0 ) * $PerLen\n")
    Fclc.write("$dxED1 = ( $nPeriods + 2.0 ) * $PerLen\n")
    Fclc.write("$dxED2 = ( $nPeriods + 1.5 ) * $PerLen\n")

    Fclc.write("$x1D0LLMagCen = $x1E1LLMagCen + $dxED0\n")
    Fclc.write("$x2D0LLMagCen = $x2E1LLMagCen + $dxED0\n")
    Fclc.write("$x3D0LLMagCen = $x3E1LLMagCen + $dxED0\n")

    Fclc.write("$x1D0LRMagCen = $x1E1LRMagCen + $dxED0\n")
    Fclc.write("$x2D0LRMagCen = $x2E1LRMagCen + $dxED0\n")
    Fclc.write("$x3D0LRMagCen = $x3E1LRMagCen + $dxED0\n")

    Fclc.write("$x1D0ULMagCen = $x1E1ULMagCen + $dxED0\n")
    Fclc.write("$x2D0ULMagCen = $x2E1ULMagCen + $dxED0\n")
    Fclc.write("$x3D0ULMagCen = $x3E1ULMagCen + $dxED0\n")

    Fclc.write("$x1D0URMagCen = $x1E1URMagCen + $dxED0\n")
    Fclc.write("$x2D0URMagCen = $x2E1URMagCen + $dxED0\n")
    Fclc.write("$x3D0URMagCen = $x3E1URMagCen + $dxED0\n")

    Fclc.write("$x1D1LLMagCen = $x1E1LLMagCen + $dxED1\n")
    Fclc.write("$x2D1LLMagCen = $x2E1LLMagCen + $dxED1\n")
    Fclc.write("$x3D1LLMagCen = $x3E1LLMagCen + $dxED1\n")

    Fclc.write("$x1D1LRMagCen = $x1E1LRMagCen + $dxED1\n")
    Fclc.write("$x2D1LRMagCen = $x2E1LRMagCen + $dxED1\n")
    Fclc.write("$x3D1LRMagCen = $x3E1LRMagCen + $dxED1\n")

    Fclc.write("$x1D1ULMagCen = $x1E1ULMagCen + $dxED1\n")
    Fclc.write("$x2D1ULMagCen = $x2E1ULMagCen + $dxED1\n")
    Fclc.write("$x3D1ULMagCen = $x3E1ULMagCen + $dxED1\n")

    Fclc.write("$x1D1URMagCen = $x1E1URMagCen + $dxED1\n")
    Fclc.write("$x2D1URMagCen = $x2E1URMagCen + $dxED1\n")
    Fclc.write("$x3D1URMagCen = $x3E1URMagCen + $dxED1\n")

    Fclc.write("$x1D2LLMagCen = $x1E1LLMagCen + $dxED2\n")
    Fclc.write("$x2D2LLMagCen = $x2E1LLMagCen + $dxED2\n")
    Fclc.write("$x3D2LLMagCen = $x3E1LLMagCen + $dxED2\n")

    Fclc.write("$x1D2LRMagCen = $x1E1LRMagCen + $dxED2\n")
    Fclc.write("$x2D2LRMagCen = $x2E1LRMagCen + $dxED2\n")
    Fclc.write("$x3D2LRMagCen = $x3E1LRMagCen + $dxED2\n")

    Fclc.write("$x1D2ULMagCen = $x1E1ULMagCen + $dxED2\n")
    Fclc.write("$x2D2ULMagCen = $x2E1ULMagCen + $dxED2\n")
    Fclc.write("$x3D2ULMagCen = $x3E1ULMagCen + $dxED2\n")

    Fclc.write("$x1D2URMagCen = $x1E1URMagCen + $dxED2\n")
    Fclc.write("$x2D2URMagCen = $x2E1URMagCen + $dxED2\n")
    Fclc.write("$x3D2URMagCen = $x3E1URMagCen + $dxED2\n")

    Fclc.write("$colormag = $red\n")
    Fclc.write("$e1colormag = $magenta\n")
    Fclc.write("$e2colormag = $green\n")

    Fclc.write("\n")
    Fclc.write("$RectRiByCoil = $zLenOutByCoil - $zLenInByCoil\n")
    Fclc.write("$nWindingByCoil = ( $zLenOutByCoil - $zLenInByCoil ) * $HeightByCoil\n")
    Fclc.write("$xCoilByCoilDS = ( $nPeriods + 2. ) * $PerLen + $xLenOutByCoil\n")
    Fclc.write("$xCoilByCoilUS = - $xCoilByCoilDS\n")
    Fclc.write("$yCoilTop = ( $FullGapByCoil + $HeightByCoil ) / 2.\n")
    Fclc.write("$yCoilBottom = - $yCoilTop\n")
    Fclc.write("$RectRiBzCoil = $zLenOutBzCoil - $zLenInBzCoil\n")
    Fclc.write("$nWindingBzCoil = ( $zLenOutBzCoil - $zLenInBzCoil ) * $HeightBzCoil\n")
    Fclc.write("$xCoilBzCoilDS = $xCoilByCoilDS + $xLenOutByCoil + $xLenOutBzCoil\n")
    Fclc.write("$xCoilBzCoilUS = - $xCoilBzCoilDS\n")
    Fclc.write("$zBzCoilRight = ( $FullGapBzCoil + $HeightBzCoil ) / 2.\n")
    Fclc.write("$zBzCoilLeft = - $zBzCoilRight\n")
    Fclc.write("$nCoilColor = $red\n")

    if Nvar > 0:
      Fclc.write("\n")
      Fclc.write("* Additional variables\n")
      Fclc.write("\n")
      for v in Variables:
        vnd = v.split('$')[1]
        if not v in VAppleII and not vnd in AppleII and not vnd in Pars:
          Fclc.write(v + " = " + str(Variables[v]) + "\n")
        #if not v in VAppleII
      #endfor p in Pars
    #endif Npar > 0

    Fclc.write("\n")
    Fclc.write("*---------- Magnets\n")
    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag1 HMag1 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag2 Mag2 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag3 HMag3 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x3LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag4 HMag4 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x4LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag5 Mag5 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x5LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag6 HMag6 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x6LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag7 HMag7 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag8 Mag8 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag9 HMag9 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x3URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag10 HMag10 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag11 Mag11 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag12 HMag12 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag13 HMag13 $colormag               !key, name, mother, color\n")
    Fclc.write("$x1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag14 Mag14 $colormag                !key, name, mother, color\n")
    Fclc.write("$x2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag15 HMag15 $colormag               !key, name, mother, color\n")
    Fclc.write("$x3LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag16 HMag16 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag17 Mag17 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag18 HMag18 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag19 HMag19 $colormag               !key, name, mother, color\n")
    Fclc.write("$x1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag20 Mag20 $colormag                !key, name, mother, color\n")
    Fclc.write("$x2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag21 HMag21 $colormag               !key, name, mother, color\n")
    Fclc.write("$x3LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag22 HMag22 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag23 Mag23 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag24 HMag24 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag25 Mag25 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag26 Mag26 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x2E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag27 HMag27 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x3E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag28 HMag28 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x1E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag29 Mag29 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x2E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag30 HMag30 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x3E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag31 HMag31 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag32 Mag32 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x2E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag33 HMag33 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x3E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag34 HMag34 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag35 Mag35 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x2E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag36 HMag36 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x3E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag37 HMag37 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag38 Mag38 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag39 HMag39 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag40 HMag40 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag41 Mag41 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag42 HMag42 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag43 HMag43 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag44 Mag44 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag45 HMag45 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag46 HMag46 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag47 Mag47 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag48 HMag48 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag49 HMag49 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag50 Mag50 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag51 HMag51 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag52 HMag52 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag53 Mag53 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag54 HMag54 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag55 HMag55 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag56 Mag56 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag57 HMag57 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag58 HMag58 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag59 Mag59 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag60 HMag60 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag61 HMag61 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag62 Mag62 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag63 HMag63 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag64 HMag64 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag65 Mag65 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag66 HMag66 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag67 HMag67 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag68 Mag68 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag69 HMag69 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag70 HMag70 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag71 Mag71 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag72 HMag72 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag73 HMag73 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag74 Mag74 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag75 HMag75 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag76 HMag76 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag77 Mag77 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag78 HMag78 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag79 HMag79 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag80 Mag80 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag81 HMag81 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag82 HMag82 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag83 Mag83 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag84 HMag84 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.            !offset of module\n")
    Fclc.write("$nPeriods           !number of arrays within module\n")
    Fclc.write("$PerLen 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.            !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write("3                       ! number of material files\n")
    Fclc.write("1 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write("2 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write("3 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write(" \n")

    Fclc.write("\n")
    Fclc.write("Coils\n*\n")
    Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
    Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad\n")
    Fclc.write("* divisions, color-index\n")

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilUS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilDS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilUS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilDS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.close()

    shutil.copyfile(FileCLC,"undumag_AppleII.clc")
    print("\n--- ",FileCLC," written and copyied to undumag_AppleII.clc ---")

  elif int(Hybrid_Mode) == 2:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')
    Fsav = open('mirror.lst','w')

    Fclc.write("\n")
    Fclc.write("* Lines written by undugui.py\n")
    Fclc.write("Mode Mirror\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Planar Hybrid Undulator (Simulated Infinite Length)"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("\n")

    Fclc.write("$PerLen = " + str(eval(Mirror["PerLen_Mirror"])) + "\n")
    Fclc.write("$Mcoating=" + str(Mirror["Mcoating_Mirror"]) + " ! coating of REC magnets\n")
    Fclc.write("\n")

    for par in Mirror:

      Fsav.write(par + " " + str(Mirror[par])+"\n")

      if par == "Mat_Mirror": continue
      if par == "MatPol_Mirror": continue
      if par == "Mcoating_Mirror": continue
      if par == "PerLen_Mirror": continue

      if len(str(Mirror[par]).split()) > 1:
        sline = "$" + par + " = '" + str(Mirror[par]) + "'\n"
      else:
        sline = "$" + par + " = " + str(Mirror[par]) + NL
      #endif
      Fclc.write(sline)

    #endfor par in Mirror

    Fsav.close()

    Fclc.write("\n")

    sline = "$PerLen_Mirror = $PerLen" + NL
    Fclc.write(sline)
    sline = "$Mcoating_Mirror = $Mcoating" + NL
    Fclc.write(sline)

    Fclc.write("\n")
    Fclc.write("\n$ixSym="+str(ixsym))
    Fclc.write("\n$iySym="+str(iysym))
    Fclc.write("\n$izSym="+str(izsym))
    Fclc.write("\n")

    Fclc.write("\n")
    for c in DictUnduColors:
      s = "$" + c + "=" + str(DictUnduColors[c])
      Fclc.write(s+"\n")
    #endfor c in UnduColors

    Fclc.write("\n")
    for var in VMirror:
      svar = str(VMirror[var])
      if svar == '$nPeriods_Mirror' or \
      svar == '$Mcoating_Mirror' or \
      svar == '$PerLen_Mirror': continue
      else:
        sline = var + " = " + svar + NL
      #endif
      Fclc.write(sline)
    #endfor var in VMirror

    Fclc.write("\n")
    Fclc.write("*------ Magnets and Poles\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockDsChamf mag Mag $ColorMag                                                                   !key, name, mother, color\n")
    Fclc.write("$xMagHalf $yMag $zMagHalf                                                                        !position\n")
    Fclc.write("$Br_Mirror 1. 0. 0. $RECIndex_Mirror                                                             !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMagHalf $LyMag_Mirror $LzMagHalf $ChamfMag_Mirror                                             !dimensions \n")
    Fclc.write("$nDivX_MagHalf $nDivY_Mag_Mirror $nDivZ_MagHalf_Mirror $FracDivY_Mag_Mirror $FracDivZ_Mag_Mirror !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockUsChamf pol Pol $ColorPol                                                                   !key, name, mother, color\n")
    Fclc.write("$xPolHalf $yPol $zPolHalf                                                                        !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                !material index\n")
    Fclc.write("$LxPolHalf $LyPol $LzPolHalf $ChamfPol_Mirror                                                    !dimensions \n")
    Fclc.write("$nDivX_PolHalf $nDivY_Pol_Mirror $nDivZ_PolHalf_Mirror $FracDivY_Pol_Mirror $FracDivZ_Pol_Mirror !segmentation\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("*------ Mirror\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("Block mirror Mirror $ColorMir                                                                   !key, name, mother, color\n")
    Fclc.write("$xMirror $yMirrorHalf $zMirrorHalf                                                                        !position\n")
    Fclc.write("$IronIndex_Mirror                                                                                !material index\n")
    Fclc.write("$LxMirror $LyMirrorHalf $LzMirrorHalf                                                   !dimensions \n")
    Fclc.write("$nMirDivX $nMirDivY $nMirDivZ $FracDivMirY $FracDivMirZ !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.                   !offset of module\n")
    Fclc.write("1                          !number of arrays within module\n")
    Fclc.write("$PerLen_Mirror 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.                   !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")
    Fclc.write(" \n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write(str(Nmat) + "            ! number of material files\n")

    for imat in range(Nmat):
      mat = mats[imat]
      if imat == int(Mirror["RECIndex_Mirror"]) - 1:
        mat[4] = str(Mirror["mu_Mirror"]) + " " + str(Mirror["KsiPerp_Mirror"]) + "  ! mu_Par and ksi_Perp\n"
      #endif
      Fclc.write(str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3] + "\n")
      if mat[2] == '1':
        Fmat = open(str(mat[3]),'w')
        for line in mat[4]: Fmat.write(line)
        Fmat.close()
      #endif mat[2] == '1'
    #endfor imat in range(Nmat)

    Fclc.close()

    try:
      stat = shutil.copyfile(FileCLC,"undumag_Mirror.clc")
      print("\n--- ",FileCLC," written and copyied to undumag_Mirror.clc ---")
    except:
      print("\n--- ",FileCLC," written, but not copied to  undumag_Mirror.clc! Is it a link?  ---")
    #endif

  elif int(Hybrid_Mode) > 0:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("\n")
    Fclc.write("* Lines written by undugui.py\n")
    Fclc.write("Mode Hybrid\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Planar Hybrid Undulator"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fsav = open("hybrid.lst",'w')
    for par in Hybrid: Fsav.write(par + " " + str(Hybrid[par])+"\n")
    Fsav.close()

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("\n")

    Fclc.write("$PerLen = " + str(eval(Hybrid["PerLen_Hybrid"])) + "\n")
    Fclc.write("$nPeriods = " + str(eval(Hybrid["nPeriods_Hybrid"])) + "\n")
    Fclc.write("$Mcoating=" + str(Hybrid["Mcoating_Hybrid"]) + " ! coating of REC magnets\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("\n$ixSym="+str(ixsym))
    Fclc.write("\n$iySym="+str(iysym))
    Fclc.write("\n$izSym="+str(izsym))
    Fclc.write("\n")

    for par in Hybrid:
      if par == "MatPol_Hybrid": continue
      if par == "nPeriods_Hybrid": continue
      if par == "Mcoating_Hybrid": continue
      if par == "PerLen_Hybrid": continue
      if len(str(Hybrid[par]).split()) > 1:
        sline = "$" + par + " = '" + str(Hybrid[par]) + "'\n"
      else:
        sline = "$" + par + " = " + str(Hybrid[par]) + NL
      #endif
      Fclc.write(sline)
    #endfor par in Hybrid

    Fclc.write("\n")
    Fclc.write("$CurrentByCoil = 0.0\n")
    Fclc.write("$FullGapByCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$zCoilByCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutByCoil = 60.\n")
    Fclc.write("$zLenInByCoil = 40.\n")
    Fclc.write("$zLenOutByCoil = 50.\n")
    Fclc.write("$HeightByCoil = 30.\n")
    Fclc.write("\n")
    Fclc.write("$CurrentBzCoil = 0.0\n")
    Fclc.write("$FullGapBzCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$yCoilBzCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutBzCoil = 60.\n")
    Fclc.write("$zLenInBzCoil = 40.   ! Consider rotation!!\n")
    Fclc.write("$zLenOutBzCoil = 50.  ! Consider rotation!!\n")
    Fclc.write("$HeightBzCoil = 30.  ! Consider rotation!!\n")
    Fclc.write("\n")

    Fclc.write("$nDivHeightCoil = 1\n")
    Fclc.write("$nDivWindCoil = 1\n")
    Fclc.write("$nDivArcCoil = 6\n")

    Fclc.write("$FillingCoil = 0.5\n")

    Fclc.write("\n")

    for c in DictUnduColors:
      s = "$" + c + "=" + str(DictUnduColors[c])
      Fclc.write(s+"\n")
    #endfor c in UnduColors

    sline = "$PerLen_Hybrid = $PerLen" + NL
    Fclc.write(sline)
    sline = "$nPeriods_Hybrid = $nPeriods" + NL
    Fclc.write(sline)
    sline = "$Mcoating_Hybrid = $Mcoating" + NL
    Fclc.write(sline)

    for var in VHybrid:
      svar = str(VHybrid[var])
      if svar == '$nPeriods_Hybrid' or \
      svar == '$Mcoating_Hybrid' or \
      svar == '$PerLen_Hybrid': continue
      else:
        sline = var + " = " + svar + NL
      #endif
      Fclc.write(sline)
    #endfor var in VHybrid

    Fclc.write("\n")
    Fclc.write("$RectRiByCoil = $zLenOutByCoil - $zLenInByCoil\n")
    Fclc.write("$nWindingByCoil = ( $zLenOutByCoil - $zLenInByCoil ) * $HeightByCoil\n")
    Fclc.write("$xCoilByCoilDS = ( $nPeriods + 2. ) * $PerLen + $xLenOutByCoil\n")
    Fclc.write("$xCoilByCoilUS = - $xCoilByCoilDS\n")
    Fclc.write("$yCoilTop = ( $FullGapByCoil + $HeightByCoil ) / 2.\n")
    Fclc.write("$yCoilBottom = - $yCoilTop\n")
    Fclc.write("$RectRiBzCoil = $zLenOutBzCoil - $zLenInBzCoil\n")
    Fclc.write("$nWindingBzCoil = ( $zLenOutBzCoil - $zLenInBzCoil ) * $HeightBzCoil\n")
    Fclc.write("$xCoilBzCoilDS = $xCoilByCoilDS + $xLenOutByCoil + $xLenOutBzCoil\n")
    Fclc.write("$xCoilBzCoilUS = - $xCoilBzCoilDS\n")
    Fclc.write("$zBzCoilRight = ( $FullGapBzCoil + $HeightBzCoil ) / 2.\n")
    Fclc.write("$zBzCoilLeft = - $zBzCoilRight\n")
    Fclc.write("$nCoilColor = $red\n")

    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("*------ Magnets\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockDsChamf pol3_H Pol3_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xHalfPol3_Hybrid $yPol_Hybrid $zPol_Hybrid                                                         !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockChamf mag2_H Mag2_H $ColorMag_Hybrid                                                            !key, name, mother, color\n")
    Fclc.write("$xMag2_Hybrid $yMag_Hybrid $zMag_Hybrid                                                             !position\n")
    Fclc.write("$Br_Hybrid -1. 0. 0. $RECIndex_Hybrid                                                               !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyMag_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockChamf pol2_H Pol2_H $ColorPol_Hybrid                                                           !key, name, mother, color\n")
    Fclc.write("$xPol2_Hybrid $yPol_Hybrid $zPol_Hybrid                                                             !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockChamf mag1_H Mag1_H $ColorMag_Hybrid                                                            !key, name, mother, color\n")
    Fclc.write("$xMag1_Hybrid $yMag_Hybrid $zMag_Hybrid                                                             !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyMag_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockDsChamf pol1_H Pol1_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xHalfPol1_Hybrid $yPol_Hybrid $zPol_Hybrid                                                         !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.                   !offset of module\n")
    Fclc.write("$nPeriods_Hybrid           !number of arrays within module\n")
    Fclc.write("$PerLen_Hybrid 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.                   !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")
    Fclc.write(" \n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockUsChamf epolh_H EPol_H $ColorPol_Hybrid                                                        !key, name, mother, color\n")
    Fclc.write("$xEndPolHalf_Hybrid $yPol_Hybrid $zPol_Hybrid                                                       !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag1_H EMag1_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag1_Hybrid $yEndMag1_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag1_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockChamf epol1_H EPol1_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndPol1_Hybrid $yEndPol1_Hybrid $zPol_Hybrid                                                      !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyEndPol1_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag2_H EMag2_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag2_Hybrid $yEndMag2_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid -1. 0. 0. $RECIndex_Hybrid                                                               !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag2_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockChamf epol2_H EPol2_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndPol2_Hybrid $yEndPol2_Hybrid $zPol_Hybrid                                                      !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyEndPol2_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag3_H EMag3_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag3_Hybrid $yEndMag3_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag3_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write(str(Nmat) + "            ! number of material files\n")

    for imat in range(Nmat):
      mat = mats[imat]
      if imat == int(Hybrid["RECIndex_Hybrid"]) - 1:
        mat[4] = str(Hybrid["mu_Hybrid"]) + " " + str(Hybrid["KsiPerp_Hybrid"]) + "  ! mu_Par and ksi_Perp\n"
      Fclc.write(str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3] + "\n")
      if mat[2] == '1':
        Fmat = open(str(mat[3]),'w')
        for line in mat[4]: Fmat.write(line)
        Fmat.close()
      #endif mat[2] == '1'
    #endfor imat in range(Nmat)

    Fclc.write("\n")
    Fclc.write("Coils\n*\n")
    Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
    Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad\n")
    Fclc.write("* divisions, color-index\n")

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilUS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilDS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilUS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilDS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("EndCoils\n")
    Fclc.write("*************\n")

    Fclc.close()

    try:
      stat = shutil.copyfile(FileCLC,"undumag_Hybrid.clc")
      print("\n--- ",FileCLC," written and copyied to undumag_Hybrid.clc ---")
    except:
      print("\n--- ",FileCLC," written, but not copied to  undumag_Hybrid.clc! Is it a link?  ---")
    #endif

  else:

    #if key == 'UNDUMAG':
    #if Mode == 'Hybrid':
    #Hybrid_Mode=1
    #endif

    # Other Modes

    if Nmodul <= 0 and NMagPolTot > NspecMagPol:
      wError("No modules defined, but periodic items found, cannot write geometry file!")
      return
    #endif Nmodul <= 0 and NMagPolTot > NspecMagPol:

    if Nmat <= 0 and NMagPolTot > 0:
      wError("No material defined, cannot write geometry file!")
      return
    #endif Nmat <= 0

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("*! Lines written by undugui.py\n")
    Fclc.write("Mode " + Mode + "\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    Fclc.write(Ucomment.strip() + "\n")

    write_variables(Fclc)

    if NMagPolTot:
      Fclc.write("\n")
      Fclc.write("* Magnets \n")
      Fclc.write("\n")
    #endif

    #debug("uwriteclc")
    imag = 0

    for mp in MagPolsTot:

      imag += 1

      ckey = "\n& "
      if mp[2] == 'yes' or mp[2] == 1: ckey = "\n& Special_"

      if mp[1] == 'Iron': ckey += "Pole\n"
      else: ckey += "Magnet\n"

      cnam = mp[0][0]
      cmoth = mp[0][1]
      key = mp[3]
      cen = mp[4]
      vmat = mp[5]

      scol = vmat[5]
      if scol in DictUnduColors: col = str(DictUnduColors[scol])
      else: col = scol

      Fclc.write(ckey)

      line = key + " " + cnam + " " + cmoth + " " + col
      comm = "!key, name, mother, color\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      line = cen[0] + " " + cen[1] + " " + cen[2]
      comm = "!position\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      if mp[1] == 'Iron':
        line = vmat[4]
        comm = " !material index\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
      else:
        line = vmat[0] + " " + vmat[1] + " " + vmat[2] + " " + vmat[3] + " " + vmat[4]
        comm = "!Bc, direction of magnetization, material index\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
      #endif

      if key != 'File' and key != 'Corners':

        siz = mp[6]
        div = mp[7]

        line = siz[0] + " " + siz[1] + " " + siz[2] + " " + siz[3]
        comm = "!dimensions\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        line = div[0] + " " + div[1] + " " + div[2] + " " + div[3] + " " + div[4]
        comm = "!segmentation\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      else:

        ncorn = mp[6]
        corns = mp[7]
        div = mp[8]

        line = div[0] + " " + div[1] + " " + div[2] + " " + div[3] + " " + div[4]
        comm = "!segmentation\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        line = ncorn
        comm = "!number of corners\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        for corn in corns:
          line = str(corn[0]) + " " + str(corn[1]) + " " + str(corn[2])
          comm = "!x y z\n"
          n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
        #endfor

      #endif

    #endfor

    for m in Modules:
      Fclc.write("\n& Module\n")
      line = m[0]
      comm = "!offset of module\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[1]
      comm = "!number of arrays within module\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[2]
      comm = "!spacing and direction of arrangement, rotation angle\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[3]
      comm = "!scaling and symmetry of magnetization vector\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
    #endfor

    if Nmat:

      Fclc.write("\n& Materials\n")

      line = str(Nmat)
      comm = "! number of material files\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      for imat in range(Nmat):

        mat = mats[imat]
        line = str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3]
        comm = "! number, type, mode, and  filename\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        if mat[2] == '1':
          Fmat = open(str(mat[3]),'w')
          for line in mat[4]: Fmat.write(line)
          Fmat.close()
        #endif mat[2] == '1'

      #endfor imat in range(Nmat)

    #endif Nmat

    if len(Coils): write_coils(Coils,Fclc)

    Fclc.close()

  #endif int(AppleII_Mode) > 0

  #print(TransRotCop)
  if len(TransRotCop) > 0:
    uwritetrc(FileCLC)
  #endif

+self,if=trace.
  print(NL,"trace:: Leaving uwriteclc('",callkey,"')")
+self.
#enddef uwriteclc()
+KEEP,showgeo,T=PYTHON.
*CMZ :          01/09/2023  10.26.02  by  Michael Scheer
*CMZ :  2.04/12 31/08/2023  06.57.01  by  Michael Scheer
*CMZ :  2.04/11 29/08/2023  14.59.29  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  13.18.56  by  Michael Scheer
*CMZ :  2.04/09 18/08/2023  19.12.52  by  Michael Scheer
*CMZ :  2.04/06 09/07/2023  12.23.11  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  08.28.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  11.43.34  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  11.36.44  by  Michael Scheer
*-- Author :    Michael Scheer   13/10/2020
+seq,unduplgeo.

def _ucoilplot(view='3d', modus='same', item=-1,callkey=''):

  global Coils, Filaments, UnduColors, CurrLoops, NMagPolTot

+self,if=trace.
  print(NL,"trace:: _ucoilplot:",view,modus,item,callkey)
+self.

  if NMagPolTot >= 0 and len(Filaments) == 0:
+self,if=trace.
    print(NL,"trace:: Leaving _ucoilplot, no coils...")
+self.
    return
  #endif

  xmin = 1.e30
  xmax = -1.e30
  ymin = 1.e30
  ymax = -1.e30
  zmin = 1.e30
  zmax = -1.e30

  coiltit = "Coils"
  icoil = -1
  ifound = 0

  kallzero = 1
  for coil in Filaments:
    icoil += 1
    if item > -1 and icoil != item: continue
    curr = calc_var(Coils[icoil][1][0])
    coiltit = Coils[icoil][0][1]
    ifound = 1
    if curr == 0: continue
    kallzero = 0
    for wire in coil:
      xmin = min(xmin,wire[2],wire[5])
      xmax = max(xmax,wire[2],wire[5])
      ymin = min(ymin,wire[3],wire[6])
      ymax = max(ymax,wire[3],wire[6])
      zmin = min(zmin,wire[4],wire[7])
      zmax = max(zmax,wire[4],wire[7])
    #endfor wire in coil

  #endfor coil in Filaments

  if kallzero : return [xmin,xmax,ymin,ymax,zmin,zmax,kallzero]

  dx = (xmax-xmin)*0.1
  dy = (ymax-ymin)*0.1
  dz = (zmax-zmin)*0.1

  if dx == 0.0: dx = 1.
  if dy == 0.0: dy = 1.
  if dz == 0.0: dz = 1.

  if ifound == 0:
    wError("No coils to plot")
+self,if=trace.
    print(NL,"trace:: Leaving _ucoilplot due to error")
+self.
    return
  #endif

  if view.lower() == 'xz' or view.lower() == 'top':

    if not modus == 'same':
      null(xmin-dx,xmax+dx,zmin-dz,zmax+dz)
      txyz(coiltit,"x/mm","z/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #               x1    x2    z1   z2     y1    y2
        # 3d: Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
        Ax.plot([w[2],w[5]],[w[4],w[7]],color)
      #endfor
    #endfor

  elif view.lower() == 'xy' or view.lower() == 'side':

    if not modus == 'same':
      null(xmin-dx,xmax+dx,ymin-dy,ymax+dy)
      txyz(coiltit,"x/mm","y/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #               x1    x2    z1   z2     y1    y2
        # 3d: Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
        Ax.plot([w[2],w[5]],[w[3],w[6]],color)
      #endfor
    #endfor

  elif view.lower() == 'zy' or view.lower() == 'beam':

    if not modus == 'same':
      null(zmin-dz,zmax+dz,ymin-dy,ymax+dy)
      txyz(coiltit,"z/mm","y/mm")
    #endif

    icoil = -1
    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #               x1    x2    z1   z2     y1    y2
        # 3d: Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
        Ax.plot([w[4],w[7]],[w[3],w[6]],color)
      #endfor
    #endfor

  else:

    if not modus == 'same':
      null3d(xmin-dx,xmax+dx,zmin-dx,zmax+dz,ymin-dy,ymax+dy)
      Xmin = xmin - dx
      Xmax = xmax + dx
      Ymin = ymin - dy
      Ymax = ymax + dy
      Zmin = zmin - dz
      Zmax = zmax + dz
      txyz(coiltit,"x/mm","z/mm","y/mm")
    #endif

    icoil = -1

    for coil in Filaments:
      icoil += 1
      if item > -1 and icoil != item: continue
      color = UnduColors[coil[0][8]]
      for w in coil:
        #         x1    x2    z1   z2     y1    y2
        Ax.plot([w[2],w[5]],[w[4],w[7]],[w[3],w[6]],color)
      #endfor
    #endfor

  #endif modus

+self,if=trace.
  print(NL,"trace:: Leaving _ucoilplot")
+self.

  return [xmin,xmax,ymin,ymax,zmin,zmax,kallzero]

#enddef _ucoilplot(view='3d', modus='same')

def _h3d(h3d,sx,sy,sz):
  global Hull3D
  Hull3D = []
  for plan in h3d:
    pl = []
    for p in plan:
      xzy = [sx*p[0],sy*p[2],sz*p[1]]
      pl.append(xzy)
    #endfor p in plan
    Hull3D.append(pl)
  #endfor p in plan
#enddef _h3d(h3d,sx,sy,sz)

def plothull3dxzy(isame=0,facecolor='blue',alpha=0.5,edgecolor='black', ishow=1,modus='line'):
+seq,uguiglobind.

  h3d =deepcopy(Hull3D)

  if cIxSym == 'yes' and cIySym == 'yes' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'yes' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'no' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'yes' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'no' and cIzSym == 'yes':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,1.,-1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'yes' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,1.,-1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'yes' and cIySym == 'no' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
    _h3d(h3d,-1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  elif cIxSym == 'no' and cIySym == 'no' and cIzSym == 'no':
    _h3d(h3d,1.,1.,1.); plothull3d(isame,facecolor,alpha,edgecolor,ishow,modus)
  #endif cIxSym == 'yes' and cIySym == 'yes' and if cIzSym == 'yes'

#enddef plothull3dxzy(isame=0,facecolor='blue',alpha=0.5,edgecolor='black', ishow=1)

def _plotMag(imp,key='3dselected'):

  if imp>=0:
    cmag = MagPolsTot[imp][0][0]
    if not cmag in DictMagPolsSel: _selectMag(cmag)
  #endif

  #print('plotMag()?\n',imp,key,'\nDictMothsSel:\n',DictMothsSel,\
  #'\nDictMagPolsSel:\n',DictMagPolsSel)

  if len(DictMagPolsSel) == 0:
    wError(" Nothing selected! ")
    return
  #endif

  setisame(0)

  if key == '3d' or key == '3dselected':
    _showGeoPython(modus='3dselected',item=-4,callkey='plotMag')
  else:
    _showGeoPythonXYZ(modus=key,item=-2,callkey='plotMag')
  #endif

#enddef _plotMag(imp,key='3d'):


def _plotSingleMag(imp,key='xy',isame=0,nmodules=0,itrans=1):

  global MagPolsTot,WallListMags,Isame
  global Xmin,Xmax,Zmin,Zmax,Ymin,Ymax
  global Ntcyls

  mp = MagPolsTot[imp]
  cmag = MagPolsTot[imp][0][0]
  cmoth = MagPolsTot[imp][0][1]

  col = mp[5][5]

  if not col in DictUnduColors:
    kcol = int(calc_var(col))
    col = UnduColors[kcol]
  #endif col not in UnduColors

  points = []
  cen = mp[4]

  if isame <= 0:
    store_kdump_kpdf(); optdump(False); optpdf(False)
  #endif

  if isame == 0:
    ms = getmarkersize()
    setmarkersize(0)
  #endif

  xc = calc_var(cen[0])
  yc = calc_var(cen[1])
  zc = calc_var(cen[2])

  if mp[3].find('Block') > -1:

    corns = blockcorners(mp)

    if itrans != 0 and (cmoth in DictTransRotCop or cmag in DictTransRotCop):
      ctr = []
      for c in corns:
        trc = TransRot(cmag,cmoth,c[0],c[1],c[2])
        ctr.append(trc)
      #endfor
      corns = ctr
    #endif

    if key == 'xy':
      for c in corns: points.append([xc+c[0],yc+c[1]])
    elif key == 'xz':
      for c in corns: points.append([xc+c[0],zc+c[2]])
    elif key == 'zy':
      for c in corns: points.append([zc+c[2],yc+c[1]])
    #endif

    verts, iedges, edges, bounds = qhull2d(points)

  elif mp[3] == 'File' or mp[3] == 'Corners':

    for ic in range(len(mp[7])):

      c1 = xc + calc_var(mp[7][ic][0])
      c2 = yc + calc_var(mp[7][ic][1])
      c3 = zc + calc_var(mp[7][ic][2])

      if itrans != 0 and (cmoth in DictTransRotCop or cmag in DictTransRotCop):
        trc = TransRot(cmag,cmoth,c[0],c[1],c[2])
      else:
        trc = [c1,c2,c3]
      #endif
      if key == 'xy':
        pass
        #c1 = xc + calc_var(mp[7][ic][0])
        #c2 = yc + calc_var(mp[7][ic][1])
      elif key == 'xz':
        c2 = c3
      elif key == 'zy':
        c1 = c3
      #endif

      points.append([c1,c2])

    #endfor ic in range(len(mp[7]))

    verts, iedges, edges, bounds = qhull2d(points)

  elif mp[3] == 'Cylinder':
    ifound = 0
    for ntc in Ntcyls:
      if ntc[1][0][0] == cmag:

        imag = DictMagPolsTot[cmag]
        cen = MagPolsTot[imag][4]

        xc = calc_var(cen[0])
        yc = calc_var(cen[1])
        zc = calc_var(cen[2])

        cen = [xc,yc,zc]

        poly,bounds = cylinderpoly(ntc[2])
        verts = poly

        bounds = [1.e30,-1.e30,1.e30,-1.e30,1.e30,-1.e30]

        iedges = []
        edges = []

        for pgn in poly:

          n = len(pgn)

          for i in range(n):

            j = i + 1
            if j == n: j = 0

            q1 = pgn[i]
            p1 = [q1[0] + xc,q1[1] + yc,q1[2] + zc]
            q2 = pgn[j]
            p2 = [q2[0] + xc,q2[1] + yc,q2[2] + zc]

            if itrans != 0:
              if cmoth in DictTransRotCop or cmag in DictTransRotCop:
                p1 = TransRot(cmag,cmoth,p1[0],p1[1],p1[2])
                p2 = TransRot(cmag,cmoth,p2[0],p2[1],p2[2])
              #endif
            #endif

            if p1[0] < bounds[0]: bounds[0] = p1[0]
            if p2[0] < bounds[0]: bounds[0] = p2[0]
            if p1[0] > bounds[1]: bounds[1] = p1[0]
            if p2[0] > bounds[1]: bounds[1] = p2[0]
            if p1[1] < bounds[2]: bounds[2] = p1[1]
            if p2[1] < bounds[2]: bounds[2] = p2[1]
            if p1[1] > bounds[3]: bounds[3] = p1[1]
            if p2[1] > bounds[3]: bounds[3] = p2[1]
            if p1[2] < bounds[4]: bounds[4] = p1[2]
            if p2[2] < bounds[4]: bounds[4] = p2[2]
            if p1[2] > bounds[5]: bounds[5] = p1[2]
            if p2[2] > bounds[5]: bounds[5] = p2[2]

            if key == 'xy':
              edges.append([[p1[0],p1[1]],[p2[0],p2[1]]])
            elif key == 'xz':
              edges.append([[p1[0],p1[2]],[p2[0],p2[2]]])
            elif key == 'zy':
              edges.append([[p1[2],p1[1]],[p2[2],p2[1]]])
            #endif
            iedges.append([i,j])
          #endfor pgn
        #endfor poly
        break
      #endif cmag
    #endfor Ntcyls

    if key == 'xy':
      pass
    elif key == 'xz':
      bounds[2]= bounds[4]
      bounds[3]= bounds[5]
    elif key == 'zy':
      bounds[0]= bounds[4]
      bounds[1]= bounds[5]
    #endif

  else:
    print('\n*** ', mp[3], 'noch in  _plotSingleMag einfuegen\n')
  #endif type of magnet

  edges = np.array(edges)

  if nmodules <= 0 or itrans == 0:
    for ed in edges:
      et = ed.T
      plt.plot(et[0],et[1],c=col)
    #endfor

  else:

    for m in range(nmodules):

      nper,[tx,ty,tz],rm,ang = _module_to_shift_and_rot(m)

      xrmin = 1.e30
      xrmax = -1.e30
      yrmin = 1.e30
      yrmax = -1.e30
      zrmin = 1.e30
      zrmax = -1.e30

      for ed in edges:
        if ang != 0:
          edr = []
          for i in range(len(ed)):
            if key == 'xy':
              x = ed[i][0]
              y = ed[i][1]
              xr = r[0][0]*x + r[0][1]*y
              yr = r[1][0]*x + r[1][1]*y
              if xr < xrmin: xrmin = xr
              if xr > xrmax: xrmax = xr
              if yr < yrmin: yrmin = yr
              if yr > yrmax: yrmax = yr
            elif key == 'xz':
              x = ed[i][0]
              y = ed[i][2]
              xr = r[0][0]*x + r[0][2]*y
              yr = r[2][0]*x + r[2][2]*y
              if xr < xrmin: xrmin = xr
              if xr > xrmax: xrmax = xr
              if yr < zrmin: zrmin = yr
              if yr > zrmax: zrmax = yr
            #endif
            elif key == 'zy':
              x = ed[i][2]
              y = ed[i][1]
              xr = r[2][2]*x + r[2][1]*y
              yr = r[1][2]*x + r[2][1]*y
              if xr < zrmin: zrmin = xr
              if xr > zrmax: zrmax = xr
              if yr < yrmin: yrmin = yr
              if yr > yrmax: yrmax = yr
            #endif
            edr.append([xr,yr])
          #endfor
          edr = np.array(edr)
          bounds = [xrmin,xrmax,yrmin,yrmax]
        else:
          edr = np.array(edges)
        #endif
      #endfor edges

      for iper in range(nper):

        ett = []
        for e in edr:
          et = e.T
          ett.append(et)
        #endfor

        for e in ett:
          e[0] += iper * tx
          e[1] += iper * ty
          plt.plot(e[0],e[1],c=col)
        #endfor

      #endfor nper

      if nper > 1:
        if key == 'xy':
          tx = (nper-1) * tx
          ty = (nper-1) * ty
        elif key == 'xz':
          tx = (nper-1) * tx
          ty = (nper-1) * tz
        elif key == 'zy':
          tx = (nper-1) * tz
          ty = (nper-1) * ty
        #endif
        if tx > 0: bounds[1] += tx
        else: bounds[0] -= tx
        if ty > 0: bounds[3] += ty
        else: bounds[2] -= ty
      #endif

    #endfor nmodules

  #endif

  return bounds

#enddef _plotSingleMag(imp)

def _showGeo(modus='3d',item=-1,kseg=0,callkey=''):
+self,if=trace.
  print(NL,"trace:: _showGeo:",modus,item,kseg,callkey)
+self.
  if modus == 'undu3d' or modus == 'eps':
    _showGeoUndu(modus,item,1,callkey='showGeo')
  else:
    _showGeoPython(modus,item,callkey='showGeo')
+self,if=trace.
    print(NL,"trace:: Leaving _showGeo")
+self.
#enddef _showGeo(modus='3d',item=-1,kseg=0)

def _module_to_shift_and_rot(imodu):
  global Modules

  mo = Modules[imodu]

  lcen = mo[0]

  w = lcen.split()

  offx = calc_var(w[0])
  offy = calc_var(w[1])
  offz = calc_var(w[2])

  nper = calc_var(mo[1])
  s = mo[2].split()

  perlen = calc_var(s[0])

  vspace = [calc_var(s[1]),calc_var(s[2]),calc_var(s[3])]
  ang = calc_var(s[4])

  cen = [0.0,0.0,0.0]
  vin = [1.0,0.0,0.0]
  istat, vdum, rm = util_rotate(cen,vspace,ang,vin)

  rot11 = rm[0][0]; rot12 = rm[0][1]; rot13 = rm[0][2]
  rot21 = rm[1][0]; rot22 = rm[1][1]; rot23 = rm[1][2]
  rot31 = rm[2][0]; rot32 = rm[2][1]; rot33 = rm[2][2]

  tx = vspace[0] * perlen
  ty = vspace[1] * perlen
  tz = vspace[2] * perlen

  w = mo[3].split()

  bsx = calc_var(w[0])
  bsy = calc_var(w[1])
  bsz = calc_var(w[2])

  return nper,[tx,ty,tz],rm,ang
#enddef _module_to_shift_and_rot(imodu)

def _showGeoPython(modus='3d',item=-1,callkey=''):

+seq,uguiglobind.
+seq,UnduColorsind.

+self,if=trace,debugsgp.
  print(NL,"trace:: _showGeoPython:",modus,item,callkey)
+self.

  isameo = getisame()

  if not isameo: zone(1,1)

  if NMagPolTot == 0 and len(Filaments) == 0:
    print("Nothing to plot!")
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPython")
+self.
    return
  #endif NMagPolTot == 0

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30
  zplmin = 1.e30
  zplmax = -1.e30

  xyzcoils = []

  if not NMagPolTot:
    xyzcoils = _ucoilplot('3d','notsame',callkey='ShowGeoPython')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPython after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: showGeoPython")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  if item == -4 and len(DictMagPolsSel) == 0:
    wError(" Nothing selected! ")
    return
  #endif

  plopt = ''

  Kpdf = False
  Kdump = False
  Kecho = False

  dot()
  getzone('3d')

  null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
  setisame(1)

  if len(Filaments) and modus == '3d':
    xyzcoils = _ucoilplot(callkey='ShowGeoPython')

  if item == -3: nmodul = 1
  else: nmodul = Nmodul

  for mm in range(nmodul):

    nper,[tx,ty,tz],rm,ang = _module_to_shift_and_rot(mm)

    if item == -3: nper = 1

    rot11 = rm[0][0]; rot12 = rm[0][1]; rot13 = rm[0][2]
    rot21 = rm[1][0]; rot22 = rm[1][1]; rot23 = rm[1][2]
    rot31 = rm[2][0]; rot32 = rm[2][1]; rot33 = rm[2][2]

    w = Modules[mm][3].split()
    bsx = calc_var(w[0])
    bsy = calc_var(w[1])
    bsz = calc_var(w[2])

    nmp = NMagPolTot

    if item == -4:
      nmp = NMagPolSel
    #endif

+self,if=trace,debugsgp.
    print(NL,"trace:: showGeoPython:nmp",nmp)
+self.
    for imp in range(nmp):

      if item == -4:
        cmag = MagPolsSel[imp]
        imag = DictMagPolsTot[cmag]
        mp = MagPolsTot[imag]
        #print(mp)
      else:
        mp = MagPolsTot[imp]
      #endif

      sspec = str(mp[2])

+self,if=trace,debugsgp.
      try: print(NL,"imag,cmag,mp",imag,cmag,NL,mp)
      except: pass
      print(mp)
+self.
      if sspec == '1' or sspec == 'yes': ispec=1
      else: ispec = 0

      if item == -2 and ispec !=0: continue # skip specials
      if item == -3 and ispec ==0: continue # only specials

      cmag = mp[0][0]
      cmoth = mp[0][1]

      col = mp[5][5]

      if not col in DictUnduColors:
        kcol = int(calc_var(col))
        col = UnduColors[kcol]
      #endif col not in UnduColors

      points = []
      iscyl = 0

      cen = mp[4]

      xc = calc_var(cen[0])
      yc = calc_var(cen[1])
      zc = calc_var(cen[2])

      if mp[3].find('Block') > -1:

        corns = blockcorners(mp)
+self,if=debugsgp.
        print("corns:",NL,corns)
+self.
        for corn in corns:

          xx = corn[0]; yy = corn[1]; zz = corn[2]

          if callkey != 'plotMag':
            if cmoth in DictTransRotCop or cmag in DictTransRotCop:
              t = TransRot(cmag,cmoth,xx,yy,zz)
              xx = t[0]
              yy = t[1]
              zz = t[2]
              #print("t:",cmag,yy,t[2])
            #endif
            x = xc + rot11*xx + rot12*yy + rot13*zz
            y = yc + rot21*xx + rot22*yy + rot23*zz
            z = zc + rot31*xx + rot32*yy + rot33*zz
          else:
            x = xx + xc
            y = yy + yc
            z = zz + zc
          #endif

          points.append([x,y,z])

        #endfor corn in corns

      elif mp[3] == 'File' or mp[3] == 'Corners':

        for ic in range(len(mp[7])):

          xx = calc_var(mp[7][ic][0])
          yy = calc_var(mp[7][ic][1])
          zz = calc_var(mp[7][ic][2])

          if callkey != 'plotMag':
            if cmoth in DictTransRotCop or cmag in DictTransRotCop:
              t = TransRot(cmag,cmoth,c1,c2,c3)
              xx = t[0]
              yy = t[1]
              zz = t[2]
            #endif
            x = xc + rot11*xx + rot12*yy + rot13*zz
            y = yc + rot21*xx + rot22*yy + rot23*zz
            z = zc + rot31*xx + rot32*yy + rot33*zz
          else:
            x = xx + xc
            y = yy + yc
            z = zz + zc
          #endif

          points.append([x,y,z])

        #endfor ic in range(len(mp[7]))

      elif mp[3] == 'Cylinder':
        iscyl = 1
      else:
        Quit("_showGeoPython: " + mp[3] + " hier einfügen")
      #endif mp[3] == 'Block'

      #dtx = -tx; dty = -ty; dtz = -tz
      dtx = 0.; dty = 0.; dtz = 0.

      mper = nper

      for iper in range(mper):

        if not iscyl:

          pp = []

          for p in points:
            pp.append([p[0]+dtx,p[1]+dty,p[2]+dtz])
          #endfor p in points
+self,if=debugsgp.
          print("pp:",NL,pp)
+self.
          verts,ifaces,faces,bounds = hull3d(pp)
          plothull3dxzy(isame=1,edgecolor=col,ishow=0,modus='line')

          if bounds[0] < xplmin: xplmin = bounds[0]
          if bounds[1] > xplmax: xplmax = bounds[1]
          if bounds[2] < yplmin: yplmin = bounds[2]
          if bounds[3] > yplmax: yplmax = bounds[3]
          if bounds[4] < zplmin: zplmin = bounds[4]
          if bounds[5] > zplmax: zplmax = bounds[5]

        else: #iscyl

          for ntc in Ntcyls:
            if ntc[1][0][0] == cmag:

              poly,bounds = cylinderpoly(ntc[2])

              for pgn in poly:

                pp = []

                for poi in pgn:

                  p = [poi[0] + xc,poi[1] + yc,poi[2] + zc]

                  if callkey != 'plotMag':
                    if cmoth in DictTransRotCop or cmag in DictTransRotCop:
                      p = TransRot(cmag,cmoth,p[0],p[1],p[2])
                    #endif
                    if ang != 0:
                      x = rot11*p[0] + rot12*p[1] + rot13*p[3] + dtx
                      y = rot21*p[0] + rot22*p[1] + rot23*p[3] + dty
                      z = rot31*p[0] + rot32*p[1] + rot33*p[3] + dtz
                    else:
                      x = p[0] + dtx
                      y = p[1] + dty
                      z = p[2] + dtz
                    #endif
                  else:
                    x = p[0]
                    y = p[1]
                    z = p[2]
                  #endif

                  if x < xplmin: xplmin = x
                  if x > xplmax: xplmax = x
                  if y < yplmin: yplmin = y
                  if y > yplmax: yplmax = y
                  if z < zplmin: zplmin = z
                  if z > zplmax: zplmax = z

                  pp.append([x,y,z])

                #endfor

                pt = np.array(pp).T
                vplxyz(pt[0],pt[2],pt[1],'samelineclosed',color=col)

              #endfor
              break
            #endif
          #endfor

        #endif iscyl

        if ispec != 0: break
        dtx += tx; dty += ty; dtz += tz

      #endfor iper in range(1,nper+1):

    #endfor mag in range(nmag)

    if ispec != 0: break
  #endfor mm in range(Nmodul)

  if len(xyzcoils) and xyzcoils[6] == 0:
    xplmin = min(xplmin,xyzcoils[0])
    xplmax = max(xplmax,xyzcoils[1])
    yplmin = min(yplmin,xyzcoils[2])
    yplmax = max(yplmax,xyzcoils[3])
    zplmin = min(zplmin,xyzcoils[4])
    zplmax = max(zplmax,xyzcoils[5])
  #endif

  dx = (xplmax - xplmin) * 0.05
  dy = (yplmax - yplmin) * 0.05
  dz = (zplmax - zplmin) * 0.05

  ax = plt.gca()

  ax.set_xlim(xplmin-dx,xplmax+dx)
  ax.set_zlim(yplmin-dy,yplmax+dy)
  ax.set_ylim(zplmin-dz,zplmax+dz)

  txyz(Ucomment,"x [mm]","z [mm]","y [mm]")

  setisame(isameo)

+self,if=trace,debugsgp.
  print(NL,"trace:: Leaving _showGeoPython:")
+self.
#enddef _showGeoPython(modus='3d',item=-1)

def _showGeoPythonXYZ(modus='xy',item=-1,callkey=''):

+seq,uguiglobind.
+seq,UnduColorsind.

+self,if=trace,debugsgp.
  print(NL,"trace:: _showGeoPythonXYZ:",modus,item,callkey)
+self.

  isameo = getisame()

  if not isameo: zone(1,1)

  if NMagPolTot == 0 and len(Filaments) == 0:
    print("Nothing to plot!")
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ")
+self.
    return
  #endif NMagPolTot == 0

  isameo = getisame()

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30
  zplmin = 1.e30
  zplmax = -1.e30

  if not NMagPolTot:
    _ucoilplot(modus,'notsame',callkey='ShowGeoPythonXYZ')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: showGeoPythonXYZ")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  dot()
  getzone()

  plopt = ''

  Kpdf = False
  Kdump = False
  Kecho = False

  kgo = getgrid()
  if kgo: optgrid()
  setishow(0)

  xplmin = 1.e30
  xplmax = -1.e30
  yplmin = 1.e30
  yplmax = -1.e30

  null()

  itrans = 1
  if callkey == 'plotMag': itrans = 0

  if item == -4: # specials

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 0: continue
      bounds = _plotSingleMag(imag,modus,1,0,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  elif item == -2: #selected

    for cmag in MagPolsSel:
      imag = DictMagPolsTot[cmag]
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  elif item == -3: # periodic

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 1: continue
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

  else: # all

    for imag in range(NMagPolTot):
      if MagPolsTot[imag][2] == 0: itrans = 1
      else: itrans = 0
      bounds = _plotSingleMag(imag,modus,1,Nmodul,itrans)
      if bounds[0] < xplmin: xplmin = bounds[0]
      if bounds[1] > xplmax: xplmax = bounds[1]
      if bounds[2] < yplmin: yplmin = bounds[2]
      if bounds[3] > yplmax: yplmax = bounds[3]
    #endfor

    if len(Filaments):
      xyzcoils = _ucoilplot(modus,callkey='ShowGeoPythonXYZ')
      #print(xyzcoils)
      if xyzcoils[6] == 0:
        if modus == 'xy':
          xplmin = min(xplmin,xyzcoils[0])
          xplmax = max(xplmax,xyzcoils[1])
          yplmin = min(yplmin,xyzcoils[2])
          yplmax = max(yplmax,xyzcoils[3])
        elif modus == 'xz':
          xplmin = min(xplmin,xyzcoils[0])
          xplmax = max(xplmax,xyzcoils[1])
          yplmin = min(yplmin,xyzcoils[4])
          yplmax = max(yplmax,xyzcoils[5])
        elif modus == 'zy':
          xplmin = min(xplmin,xyzcoils[4])
          xplmax = max(xplmax,xyzcoils[5])
          yplmin = min(yplmin,xyzcoils[2])
          yplmax = max(yplmax,xyzcoils[3])
        #endif
      #endif

  #endif item

  dx = (xplmax - xplmin) * 0.05
  dy = (yplmax - yplmin) * 0.05

  ax = plt.gca()

  ax.set_xlim(xplmin-dx,xplmax+dx)
  ax.set_ylim(yplmin-dy,yplmax+dy)

  setishow(1)

  if modus == 'xy':
    txyz(Ucomment,"x [mm]","y [mm]")
  elif modus == 'xz':
    txyz(Ucomment,"x [mm]","z [mm]")
  elif modus == 'zy':
    txyz(Ucomment,"z [mm]","y [mm]")
  #endif

  if not NMagPolTot:
    _ucoilplot(modus,'notsame',callkey='ShowGeoPythonXYZ')
+self,if=trace,debugsgp.
    print(NL,"trace:: Leaving _showGeoPythonXYZ after _ucoilplot(...)")
+self.
  #endif not NMagPolTot

+self,if=trace,debugsgp.
  print(NL,"trace:: Leaving _showGeoPythonXYZ")
+self.

  setisame(isameo)

#enddef _showGeoPythonXYZ(modus='3d',item=-1)

def _showGeoUndu(modus='3d',item=-1,kseg=0,callkey=''):
+seq,uguiglobind.
+seq,UnduColorsind.

  isameo = get_isame()
  print("_showGeoUndu:",modus,item,kseg,callkey)
  print("_showGeoUndu:MustUpdate:",MustUpdate)

  Rmodus = 'SEGMENTATION STDOUT=undumag.lun6'

  if NMagPolTot == 0:
    print("Nothing to plot!")
    return
  #endif NMagPolTot == 0

  if MustUpdate:
+self,if=debpy.
    Quit("*** _undumag in showgeo wegen MustUpdate ***")
+self.

    _undumag("showGeoUndu")  #run undumag

    if nexist("Ngeo"): Ngeo = ndelete("Ngeo")
    Ngeo = ncread("Ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
    MustUpdate = 0

  #endif MustUpdate

  if modus == 'undu3d':

    if item < 0:

      if not nexist("Ngeo"):
        Ngeo = ncread("Ngeo","mag:ityp:xc:yc:zc:moth:ix:iy:iz:mat:icol:mx:my:mz:bc:iplan:icorn:x:y:z:cmag:cmoth","undumag.geo")
      #endif not nexist("Ngeo")

      plopt = ''

      Kpdf = False
      Kdump = False
      Kecho = False

      dot()
      getzone('3d')
      #nplot("Ngeo","x:z:y","mag<10")
      nmag = int(Ngeo.mag.max())

      xmin = Ngeo.x.min()
      xmax = Ngeo.x.max()
      ymin = Ngeo.y.min()
      ymax = Ngeo.y.max()
      zmin = Ngeo.z.min()
      zmax = Ngeo.z.max()

      dx = (xmax - xmin) / 10.
      dy = (ymax - ymin) / 10.
      dz = (zmax - zmin) / 10.

      #null3d(xmin-dx,xmax+dx,zmin-dz,zmax+dz,ymin-dy,ymax+dy)
      null3d(Xmin,Xmax,Zmin,Zmax,Ymin,Ymax)
      txyz(Ucomment,"x [mm]","z [mm]", "y [mm]")

      for mag in range(nmag):
        selmag = 'mag==' + str(mag+1)
        kcol = Ngeo.query(selmag + ' and iplan==1 and icorn==1').icol.max()
        col = UnduColors[kcol]
        mhull3d(Ngeo,"x:z:y",selmag,edgecolor=col,isame=1)
      #endfor mag in range(nmag)

    #endif item < 0

  elif modus == 'eps':
    eps = Image.open('undumag.eps')
    eps.show()
  #endif modus == '3d'

  Isame = isameo

+self,if=trace.
  print(NL,"trace:: Leaving _showGeoUndu",NL)
+self.

#enddef _showGeoUndu(modus)
+DECK,undugui,T=PYTHON.
*CMZ :          01/09/2023  08.13.17  by  Michael Scheer
*CMZ :  2.04/11 25/08/2023  08.19.02  by  Michael Scheer
*CMZ :  2.04/10 21/08/2023  11.28.16  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  16.32.24  by  Michael Scheer
*CMZ :  2.03/00 22/08/2022  10.25.22  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  10.21.28  by  Michael Scheer
*CMZ :  2.02/01 14/04/2021  13.09.46  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  10.26.36  by  Michael Scheer
*CMZ :  2.01/08 30/07/2020  10.49.14  by  Michael Scheer
*CMZ :  1.32/11 14/04/2020  16.26.11  by  Michael Scheer
*CMZ :  1.32/05 25/10/2019  14.13.42  by  Michael Scheer
*-- Author :    Michael Scheer   09/10/2019

# +PATCH,//UNDUMAG/PYTHON
# +DECK,undugui,T=PYTHON.

global WavesMode
WavesMode = 'UNDUMAG'

global idebug
idebug = 0
def debug(arg=''):
  global idebug
  idebug += 1
  print("idebug:",idebug)
  if arg: print("\n",arg,"\n")
#enddef debug(arg)

+seq,uguiimports.
+seq,uguiglobals.
+seq,undumagplotglobal.

global Ntcyls, Ncylinder
Ntcyls = []
Ncylinder = 0
DictCyls = {}
DictHulls = {}
#=============================================================================

+self,if=trace.
debug("trace:: Before $uguiini")
+self.
+seq,uguiini.
+self,if=trace.
debug("trace:: After $uguiini, before ureadclc")
+self.
+seq,ureadclc.
+self,if=trace.
debug("trace:: After ureadclc")
+self.

def start():
  pass
#enddef

def _nTopLevel(title='TopLevel',att='-topmost',attn=1):
  tl = Toplevel()
  tl.title(title)
  tl.attributes(att,attn)
  return tl
#enddef _nTopLevel

def _MbLeave(ev):
+seq,uguiglobind.
  Mgeo.unpost()
  Mmat.unpost()
#enddef _MbLeave(ev)

def _MenuBar(ev):
+seq,uguiglobind.

  item = Umaster.call(ev.widget, "index", "active")
  #print("Index:",type(item), item)

  x,y = Umaster.winfo_pointerxy()
  ww, wh, wx, wy = getgeo()

  rx = (x-wx) / ww
  #print(item,rx)

  rxgeoi = 0.
  rxgeoe = 0.093
  rxmati = 0.09
  rxmate = 0.179

  xgeoi = wx + rxgeoi * ww
  xgeoe = wx + rxgeoe * ww
  ixgeo = int(xgeoi)

  xmati = wx + rxmati * ww
  xmate = wx + rxmate * ww
  ixmat = int(xmati)

  iytb = int(wy + 0.1 * wh)

  if item == 1:
    Mgeo.post(ixgeo,iytb)
    Mmat.unpost()
  elif item == 2:
    Mmat.post(ixmat,iytb)
    Mgeo.unpost()
  elif rx >= rxmate:
    Mgeo.unpost()
    Mmat.unpost()
  #endif index

#enddef _MenuBar(ev)

def _exit():
  #print("Entered _exit")
  Quit("\n\n --- End of undugui.py --- \n")
#enddef _exit()

def _canvas_key(ev):
  if ev.key in ['q', 'Q']:
      Quit()
#enddef canvas_key(ev)

+self,if=trace.
debug("trace:: Before uwriteclc")
+self.
+seq,uwriteclc.
+self,if=trace.
debug("trace:: After uwriteclc")
+self.

def ureadfil(callkey=''):

+seq,uguiglobind.

  #debug("debug: Filaments")

+self,if=trace.
  print(NL,"trace::ureadfil:",callkey,NCoil)
+self.

  IUNDUMAGisRunning = 1
  os.system(RunUndu + " " + Rmodus)
  IUNDUMAGisRunning = 0

  undu_get_runnumber()

  if NCoil > 0:

    try:
      Fsta = open("undumag.sta","r")
      cline = Fsta.readline().strip()
      cline = Fsta.readline().strip()
      if cline != 'Calculation of coil filaments finished':
        wError("\n*** UNDUMAG run for filaments failed ***")
      #endif trim(cline) != ' Segmentation finished'
    except:
      wError("\n*** UNDUMAG run for filaments failed ***")
    #endtry

    if not fexist("undumag.fil"):
+self,if=trace.
      print(NL,"trace:: Leaving ureadfil: No file undumag.fil")
+self.
      return
    #endif
  #endif NCoil

  tclc = os.stat('undumag.clc').st_mtime_ns
  tfil = os.stat('undumag.fil').st_mtime_ns

  if tclc > tfil:
    print(NL,"*** Warning: File undumag.fil older then undumag.clc, will ignore it.\nRerun UNDUMAG with appropriate number of coils or delete it.")
    return
  #endif

  Ffil = open("undumag.fil","r")
  fils = Ffil.readlines()
  Ffil.close()

  fs = fils[1].split()
  icoilo = fs[-1]
  icoil = icoilo
  l = len(fils)
  i = 0
  fil = []
  while i < l:
    i += 1
    fs = fils[i].split()
    icoil = fs[-1]
    if icoil != icoilo:
      Filaments.append(fil)
      fil = []
    elif i == l - 1:
      for k in range(len(fs)): fs[k] = float(fs[k])
      fs[0] = int(fs[0])
      for k in range(1,8): fs[k] = float(fs[k])
      for k in range(8,11): fs[k] = int(fs[k])
      fil.append(fs)
      Filaments.append(fil)
      break
    #endif
    for k in range(len(fs)): fs[k] = float(fs[k])
    fs[0] = int(fs[0])
    for k in range(1,8): fs[k] = float(fs[k])
    for k in range(8,11): fs[k] = int(fs[k])
    fil.append(fs)
    icoilo = icoil
  #endwhile

  if len(Filaments) != len(Coils): Quit("*** Error in ureadfil(): Number of coils does not match ***")

  #debug("debug: Ende Filaments")
+self,if=trace.
  print(NL,"trace:: Leaving ureadfil")
+self.
#enddef

+self,if=trace.
debug("trace:: Before ureadclc")
+self.
+seq,undumagseq.
+self,if=trace.
debug("trace:: After $undumag")
+self.

#=============================================================================

if platform.system() == 'Linux': RunUndu = "bash $UNDUMAG/shell/undumag_run.sh"
elif platform.system() == 'Windows': RunUndu = '..\\bin\\undumag.exe '
else: Quit("*** Error: Unknown platform: ",platform.system())

iLoad = 0
EchoCLC = 0

#debug()
if os.path.exists("undugui.cfg"):
  Fcfg = open("undugui.cfg","r")
  Ucfg = Fcfg.readlines()
  for line in Ucfg:
    line = line.split('!')
    line = line[0].strip()
    words = line.split(':')
    w0 = words[0].strip().upper()
    w1 = 'FALSE'
    if len(words) > 1:
      w1 = words[1].strip().upper()
    if w1 == '1': w1 == 'TRUE'
    if w0 == 'RUNUNDU': RunUndu = words[1]
    if w0 == 'ECHOCLC' and w1 == 'TRUE': EchoCLC = 1
    if w0 == 'LOADLAST' and w1 == 'TRUE': iLoad += 1
    if w0 == 'SHOWLAST' and w1 == 'TRUE': iLoad += 10
  #endfor
  Fcfg.close()
#endtry

+self,if=debugureadclc.
ugui_ini()
ureadclc('debugureadclc')
Quit("Stop after test call to ureadclc")
+self.

NL = "\n"
Rmodus = ''

AppleII = {}

+self,if=trace.
debug("trace:: Before mshwelcome")
+self.
mshwelcome(program='UNDUMAG',year='2022')
+self,if=trace.
debug("trace:: After mshwelcome, before undu_get_runnumber")
+self.

undu_get_runnumber()
+self,if=trace.
debug("trace:: Before ugui_ini")
+self.
ugui_ini()
+self,if=trace.
debug("trace:: After ugui_ini, before $ugui")
+self.

+seq,ugui.
+self,if=trace.
debug("trace:: After $ugui, before ntupini")
+self.
start()

ntupini()
+self,if=trace.
debug("trace:: After ntupini(), before startup")
+self.
startup("undugui_start.py")
+self,if=trace.
debug("trace:: After startup")
+self.

WaveFilePrefix = 'undugui_'

#debug("Vor iLoad")
if iLoad:
+self,if=trace.
  debug("trace:: Before ureadclc")
+self.
  ureadclc("Load")
+self,if=trace.
  debug("trace:: After ureadclc")
+self.
  if iLoad > 1:
+self,if=trace.
    debug("trace:: Before _showGeo")
+self.
    _showGeo("3d")
+self,if=trace.
    debug("trace:: After _showGeo")
+self.
  #endif
#endif
#uwriteclc()
#Quit("Ende nach uwriteclc")

#_WaddCoils()
#_WaddCoilRace()
#_listCoils()

#Quit("\n\n --- End of undugui.py --- \n")
