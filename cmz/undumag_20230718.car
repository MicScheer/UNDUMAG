+PATCH,PYTHON,T=PYTHON.
*CMZ :  2.01/05 26/02/2020  09.19.37  by  Michael Scheer
+KEEP,listinhom,T=PYTHON.
*CMZ :          18/07/2023  08.49.37  by  Michael Scheer
*-- Author :    Michael Scheer   14/07/2023
global DictInhomogen
DictInhomogen = {}

S_InhMag = StringVar()
S_comp = StringVar()
S_x = StringVar()
S_y = StringVar()
S_z = StringVar()
S_px = StringVar()
S_py = StringVar()
S_pz = StringVar()
S_coef = StringVar()
S_a = StringVar()

S_InhMag.set('mag')
S_comp.set('y')
S_coef.set('0.0')
S_x.set('0.0')
S_y.set('0.0')
S_z.set('0.0')
S_px.set('0.0')
S_py.set('0.0')
S_pz.set('0.0')
S_a.set('normalized')

def _listInhom(key=''):
  global DictInhomogen, WlistInh

+self,if=trace.
  print('\n_listInhom entered')
+self.

  global Umaster,WlistInh, WaddInhCoef
  global sgeo

  try:
    WlistInh.destroy()
  except:
    if key != 'refresh':
      x,y = Umaster.winfo_pointerxy()
      sgeo = '+' + str(x) + '+' + str(y)
    #endif
  #endtry

  WlistInh = Toplevel()
  WlistInh.title("List of Inhomogenieties")
  WlistInh.attributes('-topmost', 1)

  WlistInh.geometry(sgeo)

  finh = Frame(WlistInh)

  for mag in DictInhomogen:

    for icoef in range(len(DictInhomogen[mag])-1):

      c = DictInhomogen[mag][icoef+1]

      cline = mag + ': ' + c[0] + ' | ( ' + c[1] + ' | ' + c[2] + ' | ' + c[3] + ' ) | (' \
      + c[4] + ' | ' + c[5] + ' | ' + c[6] + ' ) | ' + c[7]

      fcoef = Frame(finh)
      lcoef = Label(fcoef,text=cline,justify=LEFT,font=MyFont,bg='white')
      lcoef.pack(side=LEFT)

      bdel = Button(fcoef,text='delete',command= lambda m=mag, ic=icoef: _DelInhom(m,ic))
      bedi = Button(fcoef,text='edit',command= lambda m=mag, ic=icoef, : _EdiInhom(m,ic))

      bdel.pack(fill=X,side=RIGHT)
      bedi.pack(fill=X,side=RIGHT)

      fcoef.pack()

    #endfor

  #endfor

  ido = 0
  for m in DictInhomogen:
    #print(DictInhomogen[m])
    try:
      if len(DictInhomogen[m][1]) > 0:
        ido = 1
        break
      #endif
    except: pass
  #endfor

  if ido == 0:
    lcoef = Label(finh,text=' No Inhomogeneities defined ',justify=LEFT,font=MyFont,bg='white')
    lcoef.pack(side=LEFT)
  #endif

  finh.pack()

  bClose = Button(WlistInh,text='Ok',command=_clWlistInh,font=MyFont)
  bClose.pack(side=RIGHT,expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _listInhom')
+self.

#enddef _listInhom(key='')

def _AddInhom(key=''):

+self,if=trace.
  print('\n_AddInhom entered')
+self.

  global Umaster,WaddINH, WaddInhCoef
  global sgeo

  if key != 'refresh':

    mag = 'Magnet/Mother'
    S_InhMag.set(mag)

    DictInhomogen[mag] = [mag]

    WaddINH = Toplevel()
    WaddINH.title("Add Inhomogeniety")
    WaddINH.attributes('-topmost', 1)

    x,y = Umaster.winfo_pointerxy()
    sgeo = ""

    if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)

  else:

    WaddINH.destroy()

    WaddINH = Toplevel()
    WaddINH.title("Add Inhomogeniety")
    WaddINH.attributes('-topmost', 1)

    x,y = Umaster.winfo_pointerxy()

    if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)
    #Quit(sgeo)
    mag = S_InhMag.get()
    #print(DictInhomogen[mag][1])

  #endif

  WaddINH.geometry(sgeo)

  finh = Frame(WaddINH)

  widlab = 20

  fmag = Frame(finh)
  lmag = Label(fmag,text='Magnet/Mother',width=widlab,justify=LEFT,font=MyFont)
  lmag.pack(side=LEFT)
  emag = Entry(fmag,text=S_InhMag,justify=CENTER,font=MyFont)
  emag.pack(side=RIGHT)
  emag.pack()
  fmag.pack()

  fposx = Frame(finh)
  lposx = Label(fposx,width=widlab,text='X0 Taylor',justify=LEFT,font=MyFont)
  lposx.pack(side=LEFT)
  eposx = Entry(fposx,text=S_x,justify=CENTER,font=MyFont)
  eposx.pack(side=RIGHT)
  fposx.pack()

  fposy = Frame(finh)
  lposy = Label(fposy,width=widlab,text='Y0 Taylor',justify=LEFT,font=MyFont)
  lposy.pack(side=LEFT)
  eposy = Entry(fposy,text=S_y,justify=CENTER,font=MyFont)
  eposy.pack(side=RIGHT)
  fposy.pack()

  fposz = Frame(finh)
  lposz = Label(fposz,width=widlab,text='Z0 Taylor',justify=LEFT,font=MyFont)
  lposz.pack(side=LEFT)
  eposz = Entry(fposz,text=S_z,justify=CENTER,font=MyFont)
  eposz.pack(side=RIGHT)
  fposz.pack()

  fmode = Frame(finh)
  lmode = Label(fmode,width=widlab,text='Mode',justify=LEFT,font=MyFont)
  lmode.pack(side=LEFT)
  emode = Entry(fmode,text=S_a,justify=CENTER,font=MyFont)
  emode.pack(side=RIGHT)
  fmode.pack()

  lc = Label(finh,text='\nCoefficients:\n',font=MyFont)
  lc.pack()

  for ic in range(1,len(DictInhomogen[mag])):
    try:
      c = DictInhomogen[mag][ic]
      cline = c[0] + ' | ( ' + c[1] + ' | ' + c[2] + ' | ' + c[3] + ' ) | (' \
      + c[4] + ' | ' + c[5] + ' | ' + c[6] + ' ) | ' + c[7]
      fcoef = Frame(finh)
      lcoef = Label(fcoef,text=cline,justify=LEFT,font=MyFont,bg='white')
      lcoef.pack(side=LEFT)
      fcoef.pack()
    except: pass
  #endfor

  le = Label(finh,text='\n',font=MyFont)
  le.pack()

  finh.pack()

  fbot = Frame(WaddINH)

  bClose = Button(fbot,text='Ok',command=_clWaddINH,font=MyFont)
  bClose.pack(side=RIGHT,expand=TRUE,fill=X)

  bAdd = Button(fbot,text='Add coefficient',command= lambda m = mag: _addInhCoef(m), font=MyFont)
  bAdd.pack(side=RIGHT,expand=TRUE,fill=X)

  bCancel = Button(fbot,text='Cancel',font=MyFont,command=_cnWaddINH)
  bCancel.pack(side=RIGHT,expand=TRUE,fill=X)

  fbot.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _AddInhom')
+self.
#enddef _AddInhom()

MenuInhom.add_command(label='Add Inhomogeneity',command=_AddInhom,font=MyFont)
MenuInhom.add_command(label='List',command=_listInhom,font=MyFont)

def _cnWediINH():
  global WediINH
  WediINH.destroy()
#enddef _cnWediINH()

def _clWediINH(icoef):
  global WediINH

  mag = S_InhMag.get()
  sl = [S_comp.get(),
        S_x.get(),S_y.get(),S_z.get(),S_px.get(),S_py.get(),
        S_pz.get(),S_coef.get(),S_a.get()]
  DictInhomogen[mag][icoef+1] = sl

  WediINH.destroy()
  _listInhom('refresh')
#enddef _clWediINH()

def _cnWaddINH():
  global WaddINH
  WaddINH.destroy()
#enddef _cnWaddINH()

def _clWaddINH():
  global WaddINH
  WaddINH.destroy()
  _listInhom('refresh')
#enddef _clWaddINH()

def _addInhCoef(mag):

  global Umaster,WaddINH,WaddInhCoef,DictInhomogen

+self,if=trace.
  print('\n_AddInhCoef entered:',mag)
+self.

  mag = S_InhMag.get()
  #print(DictInhomogen)

  S_px.set('0.0')
  S_py.set('0.0')
  S_pz.set('0.0')
  S_coef.set('0.0')

  if not mag in DictInhomogen:
    S_comp.set('y')
    S_x.set('0.0')
    S_y.set('0.0')
    S_z.set('0.0')
    S_a.set('normalized')
    DictInhomogen[mag] = [mag]
  #endif

+self,if=trace.
  print("S_InhMag.get():",S_InhMag.get())
+self.
  WaddInhCoef = Toplevel()
  WaddInhCoef.title("Add Inhomogeniety Coefficient")
  WaddInhCoef.attributes('-topmost', 1)

  x,y = Umaster.winfo_pointerxy()
  sgeo = ""

  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)
  WaddInhCoef.geometry(sgeo)

  finh = Frame(WaddInhCoef)

  widlab = 20

  fcomp = Frame(finh)
  lcomp = Label(fcomp,width=widlab,text='Component',justify=LEFT,font=MyFont)
  lcomp.pack(side=LEFT)
  ecomp = Entry(fcomp,text=S_comp,justify=CENTER,font=MyFont)
  ecomp.pack(side=RIGHT)
  fcomp.pack()

  fposx = Frame(finh)
  lposx = Label(fposx,width=widlab,text='PowX',justify=LEFT,font=MyFont)
  lposx.pack(side=LEFT)
  eposx = Entry(fposx,text=S_px,justify=CENTER,font=MyFont)
  eposx.pack(side=RIGHT)
  fposx.pack()

  fposy = Frame(finh)
  lposy = Label(fposy,width=widlab,text='PowY',justify=LEFT,font=MyFont)
  lposy.pack(side=LEFT)
  eposy = Entry(fposy,text=S_py,justify=CENTER,font=MyFont)
  eposy.pack(side=RIGHT)
  fposy.pack()

  fposz = Frame(finh)
  lposz = Label(fposz,width=widlab,text='PowZ',justify=LEFT,font=MyFont)
  lposz.pack(side=LEFT)
  eposz = Entry(fposz,text=S_pz,justify=CENTER,font=MyFont)
  eposz.pack(side=RIGHT)
  fposz.pack()

  fcoef = Frame(finh)
  lcoef = Label(fcoef,width=widlab,text='Coef',justify=LEFT,font=MyFont)
  lcoef.pack(side=LEFT)
  ecoef = Entry(fcoef,text=S_coef,justify=CENTER,font=MyFont)
  ecoef.pack(side=RIGHT)
  fcoef.pack()

  finh.pack()

  fbot = Frame(WaddInhCoef)
  bCancel = Button(fbot,text='Cancel',font=MyFont,command=_cnWaddInhCoef,width=widlab-2)
  bCancel.pack(side=LEFT)
  bClose = Button(fbot,text='Ok',command=_clWaddInhCoef)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)
  fbot.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _AddInhCoef')
+self.

#enddef _addInhCoef(mag)

def _clWaddInhCoef():

+self,if=trace.
  print('\nEntered _clWaddInhCoef')
+self.

  global DictInhomogen
  global WaddInhCoef

  DictInhomogen[S_InhMag.get()].append([S_comp.get(),\
  S_x.get(),S_y.get(),S_z.get(),S_px.get(),S_py.get(),
                                        S_pz.get(),S_coef.get(),S_a.get()])
+self,if=trace.
  print(DictInhomogen)
+self.
  WaddInhCoef.destroy()

  _AddInhom('refresh')

+self,if=trace.
  print('\nLeaving _clWaddInhCoef')
+self.

#enddef _clWaddInhCoef()

def _cnWaddInhCoef():
  global WaddInhCoef
  WaddInhCoef.destroy()
#enddef _clWaddInhCoef()

def _clWlistInh():
+self,if=trace.
  print('\nEntered _clWlistInh')
+self.
  global WlistInh, DictInhomogen
  WlistInh.destroy()
+self,if=trace.
  print(DictInhomogen)
  print('\nLeaving _clWlistInh')
+self.
#enddef _clWlistInh()

def _DelInhom(mag,icoef):
+self,if=trace.
  print('\nEntered _DelInhom',icoef)
+self.

  global DictInhomogen

  #print('\n------------------\n',mag,icoef,'\n',DictInhomogen,'\n\n')
  dc = deepcopy(DictInhomogen)
  DictInhomogen = {}

  for m in dc:
    #print(m)
    DictInhomogen[mag] = [m]
    for ic in range(1,len(dc[m])):
      if m == mag and ic == icoef+1: continue
      #print(ic,dc[m][ic])
      DictInhomogen[m].append(dc[m][ic])
    #endfor
  #endfor

  #Quit(DictInhomogen)

  if not len(DictInhomogen): WlistInh.destroy()
  else: _listInhom(' refresh')
+self,if=trace.
  print('\nLeaving _DelInhom',ied)
+self.
#enddef _DelInhom(mag)

def _EdiInhom(mag,icoef):

+self,if=trace.
  print('\nEntered _EdiInhom',icoef)
+self.

  global Umaster,WediINH, WaddInhCoef
  global sgeo

  S_InhMag.set(mag)
  dmag = DictInhomogen[mag][icoef+1]

  S_comp.set(dmag[0])
  S_x.set(dmag[1])
  S_y.set(dmag[2])
  S_z.set(dmag[3])
  S_px.set(dmag[4])
  S_py.set(dmag[5])
  S_pz.set(dmag[6])
  S_coef.set(dmag[7])
  S_a.set(dmag[8])

  WediINH = Toplevel()
  WediINH.title("Edi Inhomogeniety")
  WediINH.attributes('-topmost', 1)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)

  WediINH.geometry(sgeo)

  finh = Frame(WediINH)

  widlab = 20

  fmag = Frame(finh)
  lmag = Label(fmag,text='Magnet/Mother',width=widlab,justify=LEFT,font=MyFont)
  lmag.pack(side=LEFT)
  emag = Entry(fmag,text=S_InhMag,justify=CENTER,font=MyFont)
  emag.pack(side=RIGHT)
  emag.pack()
  fmag.pack()

  fposx = Frame(finh)
  lposx = Label(fposx,width=widlab,text='X0 Taylor',justify=LEFT,font=MyFont)
  lposx.pack(side=LEFT)
  eposx = Entry(fposx,text=S_x,justify=CENTER,font=MyFont)
  eposx.pack(side=RIGHT)
  fposx.pack()

  fposy = Frame(finh)
  lposy = Label(fposy,width=widlab,text='Y0 Taylor',justify=LEFT,font=MyFont)
  lposy.pack(side=LEFT)
  eposy = Entry(fposy,text=S_y,justify=CENTER,font=MyFont)
  eposy.pack(side=RIGHT)
  fposy.pack()

  fposz = Frame(finh)
  lposz = Label(fposz,width=widlab,text='Z0 Taylor',justify=LEFT,font=MyFont)
  lposz.pack(side=LEFT)
  eposz = Entry(fposz,text=S_z,justify=CENTER,font=MyFont)
  eposz.pack(side=RIGHT)
  fposz.pack()

  fmode = Frame(finh)
  lmode = Label(fmode,width=widlab,text='Mode',justify=LEFT,font=MyFont)
  lmode.pack(side=LEFT)
  emode = Entry(fmode,text=S_a,justify=CENTER,font=MyFont)
  emode.pack(side=RIGHT)
  fmode.pack()

  fcomp = Frame(finh)
  lcomp = Label(fcomp,width=widlab,text='Component',justify=LEFT,font=MyFont)
  lcomp.pack(side=LEFT)
  ecomp = Entry(fcomp,text=S_comp,justify=CENTER,font=MyFont)
  ecomp.pack(side=RIGHT)
  fcomp.pack()

  fposx = Frame(finh)
  lposx = Label(fposx,width=widlab,text='PowX',justify=LEFT,font=MyFont)
  lposx.pack(side=LEFT)
  eposx = Entry(fposx,text=S_px,justify=CENTER,font=MyFont)
  eposx.pack(side=RIGHT)
  fposx.pack()

  fposy = Frame(finh)
  lposy = Label(fposy,width=widlab,text='PowY',justify=LEFT,font=MyFont)
  lposy.pack(side=LEFT)
  eposy = Entry(fposy,text=S_py,justify=CENTER,font=MyFont)
  eposy.pack(side=RIGHT)
  fposy.pack()

  fposz = Frame(finh)
  lposz = Label(fposz,width=widlab,text='PowZ',justify=LEFT,font=MyFont)
  lposz.pack(side=LEFT)
  eposz = Entry(fposz,text=S_pz,justify=CENTER,font=MyFont)
  eposz.pack(side=RIGHT)
  fposz.pack()

  fcoef = Frame(finh)
  lcoef = Label(fcoef,width=widlab,text='Coef',justify=LEFT,font=MyFont)
  lcoef.pack(side=LEFT)
  ecoef = Entry(fcoef,text=S_coef,justify=CENTER,font=MyFont)
  ecoef.pack(side=RIGHT)
  fcoef.pack()

  finh.pack()

  fbot = Frame(WediINH)

  bClose = Button(fbot,text='Ok',command= lambda ic=icoef: _clWediINH(ic),font=MyFont)
  bClose.pack(side=RIGHT,expand=TRUE,fill=X)

  bCancel = Button(fbot,text='Cancel',font=MyFont,command=_cnWediINH)
  bCancel.pack(side=RIGHT,expand=TRUE,fill=X)

  fbot.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _EdiInhom',ied)
+self.

#enddef _EdiInhom(mag)
+KEEP,writetrc,T=PYTHON.
*CMZ :          18/07/2023  11.23.09  by  Michael Scheer
*-- Author :    Michael Scheer   09/07/2023

def uwritetrc(filename):

  idebug = 0

+self,if=trace.
  print("\ntrace:: uwritetrc:",filename)
+self.

  fclc = open(filename,'r')
  lins = fclc.readlines()
  fclc.close()

  isopen = 0
  llins = len(lins)

  try:

    fclc = open(filename,'w')
    isopen = 1
    lc = 0

    for l in range(llins):

      if lc > llins-1: break
      lin = lins[lc]

      if idebug > 1:
        print(l,llins,lin)
      #endif
      fclc.write(lin)

      if len(lin) > 0:

        if lin[0] == '&':

          spl = lin.split()

          if spl[1] == 'Magnet' or spl[1] == 'Special_Magnet' or \
          spl[1] == 'Pole' or spl[1] == 'Special_Pole':

            nam = 0
            ln = 1
            while True:
              snam = lins[l+ln].split()
              if snam[0][0] != '*' and snam[0][0] != '!':
                cmag = snam[1]
                cmoth = snam[2]
                break
              #endif
              ln += 1
            #endwhile

            # Search end of block
            n = 0
            for ll in range(llins):
              lt = lc + ll + 1
              if idebug > 1:
                print("lc, ll, lt, n:",lc,ll,lt,n)
              #endif
              if lt > llins: break
              lint = lins[lt].strip()
              if idebug > 1:
                print("testline:\n",lint)
              #endif
              fclc.write(lins[lt])
              if len(lint) == 0:
                break
              else:
                if lint[0] == '&': break
              #endif
              n += 1
            #endfor

            if idebug > 1:
              print("Block:\n",lc,lins[lc],'\n',lt,lins[lt])
            #endif

            lc = lt

            for trc in TransRotCop:
              if idebug > 0:
                print(trc)
              #endif
              if trc[1] == cmag:
                try:
                  mag = DictMagPolsTot[cmag]
                  fclc.write('& '+trc[0]+'\n')
                  for it in range(1,len(trc)):
                    fclc.write(trc[it]+'\n')
                  #endfor
                  fclc.write('\n')
                except:
                  print(trc)
                  print('\n*** Error in uwritetrc: Magnet',cmag,' not found ***')
                #endtry
              elif trc[1] == cmoth:
                try:
                  moth = DictMoths[cmoth]
                  fclc.write('& '+trc[0]+'\n')
                  for it in range(1,len(trc)):
                    fclc.write(trc[it]+'\n')
                  #endfor
                  fclc.write('\n')
                except:
                  print(trc)
                  print('\n*** Error in uwritetrc: Mother',cmoth,' not found ***')
                  pass
                #endtry
              #endif
            #endfor TransRotCop

            try:
              c = DictInhomogen[cmoth][1]
              fclc.write('\n& Inhomogeneity\n')
              coel = cmag + ' ' + c[1] + ' ' + c[2] + ' ' + c[3] + ' ' + c[8] + '\n'
              fclc.write(coel)
              coel = c[0] + ' ' + c[4] + ' ' + c[5] + ' ' + c[6] + ' ' + c[7] + '\n'
              fclc.write(coel)
              fclc.write('& End Inhomogeneity\n\n')
            except:
              try:
                c = DictInhomogen[cmag][1]
                fclc.write('\n& Inhomogeneity\n')
                coel = cmag + ' ' + c[1] + ' ' + c[2] + ' ' + c[3] + ' ' + c[8] + '\n'
                fclc.write(coel)
                coel = c[0] + ' ' + c[4] + ' ' + c[5] + ' ' + c[6] + ' ' + c[7] + '\n'
                fclc.write(coel)
                fclc.write('& End Inhomogeneity\n\n')
              except:
                pass
              #endtry
            #endtry

          #endif Magnet
        #endif '&'
      #endif len(lin)

      lc += 1
      if lc > llins-1: break
    #endfor
    fclc.close()

  except:
    print("\n*** Error in uwritetrc while writing",filename," ***")
    if isopen == 1:
      fclc.close()
    #endif
    Quit("Hoppla")
    fclc = open(filename,'w')
    for lin in lins:
      fclc.write(lin)
    #endfor
    fclc.close()
    #endif
  #endtry

#enddef uwritetrc(filename)
+KEEP,listtrc,T=PYTHON.
*CMZ :          11/07/2023  16.04.39  by  Michael Scheer
*CMZ :  2.02/02 27/02/2022  12.36.38  by  Michael Scheer
*CMZ :  2.02/00 29/12/2020  16.31.13  by  Michael Scheer
*-- Author :    Michael Scheer   19/12/2020

# +KEEP,listtrc,T=PYTHON{

S_Remanence = StringVar()
S_BrX = StringVar()
S_BrY = StringVar()
S_BrZ = StringVar()
S_BrM = StringVar()
S_BrC = StringVar()

S_CS = StringVar()
S_CT = StringVar()

S_Tx = StringVar()
S_Ty = StringVar()
S_Tz = StringVar()

S_Rx = StringVar()
S_Ry = StringVar()
S_Rz = StringVar()
S_Romx = StringVar()
S_Romy = StringVar()
S_Romz = StringVar()
S_Rang = StringVar()

S_RSx = StringVar()
S_RSy = StringVar()
S_RSz = StringVar()
S_RSomx = StringVar()
S_RSomy = StringVar()
S_RSomz = StringVar()
S_RSang = StringVar()

S_AddTRCmag = StringVar()
S_AddTx = StringVar()
S_AddTy = StringVar()
S_AddTz = StringVar()

S_AddCTmag = StringVar()
S_AddCTmoth = StringVar()

S_AddRTx = StringVar()
S_AddRTy = StringVar()
S_AddRTz = StringVar()
S_AddRomx = StringVar()
S_AddRomy = StringVar()
S_AddRomz = StringVar()
S_AddRang = StringVar()

S_AddRSTx = StringVar()
S_AddRSTy = StringVar()
S_AddRSTz = StringVar()
S_AddRSomx = StringVar()
S_AddRSomy = StringVar()
S_AddRSomz = StringVar()
S_AddRSang = StringVar()

def _clWlistTRC():
  global Umaster, WlistTRC,WediTRC,WaddTRC

  try:
    WediTRC.destroy()
  except:
    pass
  #endtry

  try:
    WaddTRC.destroy()
  except:
    pass
  #endtry

  WlistTRC.destroy()
#enddef _clWediTRC()

def _listTRC(key='list'):

+self,if=trace.
  print('\nEntered _listTRC::'+key)
+self.
  global TransRotCop
  global Umaster,WlistTRC, WediTRC

  if len(TransRotCop) <= 0:
    wError("No Operations defined")
    return
  #endif Nmodul < 0

  try:
    sgeo = WlistTRC.geometry()
  except:
    WlistTRC = Toplevel()
    WlistTRC.title("List of Operations")
    WlistTRC.attributes('-topmost', 1)
    x,y = Umaster.winfo_pointerxy()
    sgeo = ""
  #endtry

  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)

  if key == 'refresh':
    WlistTRC.destroy()
    WlistTRC = Toplevel()
    WlistTRC.title("List of Operations")
    WlistTRC.attributes('-topmost', 1)
  #endif

  WlistTRC.geometry(sgeo)

  ltrc = 0
  for it in range(len(TransRotCop)):
    trc = TransRotCop[it]
    ttrc = ''
    for tt in trc:
      ttrc = ttrc + tt + ' | '
    #endfor
    if len(ttrc) > ltrc: ltrc = len(ttrc)
  #endfor

  widlab = ltrc

  for it in range(len(TransRotCop)):

    trc = TransRotCop[it]
    print(trc)

    ttrc = ''
    for tt in trc:
      ttrc = ttrc + tt + ' | '
    #endfor

    ftrc = Frame(WlistTRC)

    lnum = Label(ftrc,text=ttrc,width=widlab,justify=LEFT,font=MyFont,anchor='w',bg='white',fg='black')
    lnum.pack(side=LEFT)

    bdel = Button(ftrc,text='delete',command= lambda ied=-it-1: _EdiTRC(ied))
    bedi = Button(ftrc,text='edit',command= lambda ied=it: _EdiTRC(ied))

    bdel.pack(fill=X,side=RIGHT)
    bedi.pack(fill=X,side=RIGHT)

    ftrc.pack()

  #endfor im in range(TransRotCop)

  bClose = Button(WlistTRC,text='Ok',command=_clWlistTRC)
  bClose.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _listTRC')
+self.
#enddef _listTRC(key='list')

MenuTRC.add_command(label='Add Copy', command= lambda key='copy': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='Add Translation', command= lambda key='trans': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='Add Rotation', command= lambda key='rotate': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='Add Shape Roation', command= lambda key='rotate_shape': _AddTransRotCop(key),font=MyFont)
MenuTRC.add_command(label='List', command= lambda key='list': _listTRC(key),font=MyFont)

# }+KEEP,listtrc,T=PYTHON

def _EdiTRC(ied):

+self,if=trace.
  print('\nEntered _EdiTRC',ied)
+self.
  global TransRotCop
  global Umaster,WlistTRC, WediTRC

  global S_Remanence,S_BrX,S_BrY,S_BrZ,S_BrC,S_BrM
  global S_CS,S_CT
  global S_Tx,S_Ty,S_Tz
  global S_Rx,S_Ry,S_Rz,S_Romx,S_Romy,S_Romz,S_Rang
  global S_RSx,S_RSy,S_RSz,S_RSomx,S_RSomy,S_RSomz,S_RSang

  if ied < 0:
    trc = deepcopy(TransRotCop)
    TransRotCop = []
    ied = - (ied+1)
    for it in range(len(trc)):
      if it != ied: TransRotCop.append(trc[it])
    #endfor
    _listTRC('refresh')
    return
  #endif

  trc = TransRotCop[ied]
  key = trc[0]

  WediTRC = Toplevel()
  WediTRC.title("Edit Operation on " + trc[1])
  WediTRC.attributes('-topmost', 1)

  x,y = Umaster.winfo_pointerxy()
  sgeo = ""

  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)
  WediTRC.geometry(sgeo)

  ftrc = Frame(WediTRC)

  widlab = 20

  if key == 'Remanence':

    strc2 = str(trc[2]).split()

    S_Remanence.set(strc2[0])
    S_BrX.set(strc2[1])
    S_BrY.set(strc2[2])
    S_BrZ.set(strc2[3])
    S_BrM.set(strc2[4])
    S_BrC.set(strc2[5])

    frem = Frame(ftrc)
    lrem = Label(frem,width=widlab,text='Remanence [T]',justify=LEFT,font=MyFont)
    lrem.pack(side=LEFT)
    erem = Entry(frem,text=S_Remanence,justify=CENTER,font=MyFont)
    erem.pack(side=RIGHT)
    frem.pack()

    fbrx = Frame(ftrc)
    lbrx = Label(fbrx,width=widlab,text='Mx',justify=LEFT,font=MyFont)
    lbrx.pack(side=LEFT)
    ebrx = Entry(fbrx,text=S_BrX,justify=CENTER,font=MyFont)
    ebrx.pack(side=RIGHT)
    fbrx.pack()

    fbry = Frame(ftrc)
    lbry = Label(fbry,width=widlab,text='My',justify=LEFT,font=MyFont)
    lbry.pack(side=LEFT)
    ebry = Entry(fbry,text=S_BrY,justify=CENTER,font=MyFont)
    ebry.pack(side=RIGHT)
    fbry.pack()

    fbrz = Frame(ftrc)
    lbrz = Label(fbrz,width=widlab,text='Mz',justify=LEFT,font=MyFont)
    lbrz.pack(side=LEFT)
    ebrz = Entry(fbrz,text=S_BrZ,justify=CENTER,font=MyFont)
    ebrz.pack(side=RIGHT)
    fbrz.pack()

    fbrm = Frame(ftrc)
    lbrm = Label(fbrm,width=widlab,text='Material index',justify=LEFT,font=MyFont)
    lbrm.pack(side=LEFT)
    ebrm = Entry(fbrm,text=S_BrM,justify=CENTER,font=MyFont)
    ebrm.pack(side=RIGHT)
    fbrm.pack()

    fbrc = Frame(ftrc)
    lbrc = Label(fbrc,width=widlab,text='Color index',justify=LEFT,font=MyFont)
    lbrc.pack(side=LEFT)
    ebrc = Entry(fbrc,text=S_BrC,justify=CENTER,font=MyFont)
    ebrc.pack(side=RIGHT)
    fbrc.pack()

  elif key == 'Copy':

    strc = str(trc[1]).split()

    S_CS.set(strc[1])
    S_CT.set(strc[2])

    fcp = Frame(ftrc)
    lcp = Label(fcp,width=widlab,text='Source',justify=LEFT,font=MyFont)
    lcp.pack(side=LEFT)
    ecp = Entry(fcp,text=S_CS,justify=CENTER,font=MyFont)
    ecp.pack(side=RIGHT)
    fcp.pack()

    fta = Frame(ftrc)
    lta = Label(fta,width=widlab,text='Target',justify=LEFT,font=MyFont)
    lta.pack(side=LEFT)
    eta = Entry(fta,text=S_CT,justify=CENTER,font=MyFont)
    eta.pack(side=RIGHT)
    fta.pack()

  elif key == 'Translate':

    strc2 = str(trc[2]).split()

    S_Tx.set(strc2[0])
    S_Ty.set(strc2[1])
    S_Tz.set(strc2[2])

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_Tx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_Ty,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_Tz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

  elif key == 'Rotate_Shape':

    strc2 = str(trc[2]).split()

    S_RSx.set(strc2[0])
    S_RSy.set(strc2[1])
    S_RSz.set(strc2[2])

    strc3 = str(trc[3]).split()
    S_RSomx.set(strc3[0])
    S_RSomy.set(strc3[1])
    S_RSomz.set(strc3[2])
    S_RSang.set(strc3[3])

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='RotCenX [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_RSx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='RotCenY [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_RSy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='RotCenZ [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_RSz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_RSomx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_RSomy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_RSomz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fang = Frame(ftrc)
    lang = Label(fang,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lang.pack(side=LEFT)
    eang = Entry(fang,text=S_RSang,justify=CENTER,font=MyFont)
    eang.pack(side=RIGHT)
    fang.pack()

  elif key == 'Rotate':

    strc2 = str(trc[2]).split()

    S_Rx.set(strc2[0])
    S_Ry.set(strc2[1])
    S_Rz.set(strc2[2])

    strc3 = str(trc[3]).split()
    S_Romx.set(strc3[0])
    S_Romy.set(strc3[1])
    S_Romz.set(strc3[2])
    S_Rang.set(strc3[3])

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='RotCenX [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_Rx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='RotCenY [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_Ry,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='RotCenZ [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_Rz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_Romx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_Romy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_Romz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fang = Frame(ftrc)
    lang = Label(fang,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lang.pack(side=LEFT)
    eang = Entry(fang,text=S_Rang,justify=CENTER,font=MyFont)
    eang.pack(side=RIGHT)
    fang.pack()

  #endif key

  ftrc.pack()

  bClose = Button(WediTRC,text='Ok',command= lambda it = ied: _clWediTRC(it))
  bClose.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _EdiTRC')
+self.
#enddef _EdiTRC(ied)

def _clWediTRC(itrc):

+self,if=trace.
  print('\n_clWediTRC entered')
+self.
  global Umaster, WediTRC
  global TransRotCop
  global S_Remanence,S_BrX,S_BrY,S_BrZ,S_BrC,S_BrM
  global S_CS,S_CT
  global S_Tx,S_Ty,S_Tz
  global S_RSx,S_RSy,S_RSz,S_RSomx,S_RSomy,S_RSomz,S_RSang
  global S_Rx,S_Ry,S_Rz,S_Romx,S_Romy,S_Romz,S_Rang

  trc = TransRotCop[itrc]

  if TransRotCop[itrc][0] == 'Remanence':
    TransRotCop[itrc][2] = S_Remanence.get() + " " \
    + S_BrX.get() + " " + S_BrY.get() + " " + S_BrZ.get() + " " \
    + S_BrM.get() + " " + S_BrC.get()
  elif TransRotCop[itrc][0] == 'Copy':
    TransRotCop[itrc][1] = S_CS.get() + " " + S_CT.get()
  elif TransRotCop[itrc][0] == 'Translate':
    TransRotCop[itrc][2] = S_Tx.get() + " " + S_Ty.get() + " " + S_Tz.get()
  elif TransRotCop[itrc][0] == 'Rotate_Shape':
    TransRotCop[itrc][2] = S_RSx.get() + " " + S_RSy.get() + " " + S_RSz.get() \
    + " " + S_RSomx.get() + " " + S_RSomy.get() + " " + S_RSomz.get() \
    + " " + S_RSang.get()
  elif TransRotCop[itrc][0] == 'Rotate':
    TransRotCop[itrc][2] = S_Rx.get() + " " + S_Ry.get() + " " + S_Rz.get() \
    + " " + S_Romx.get() + " " + S_Romy.get() + " " + S_Romz.get() \
    + " " + S_Rang.get()
  #endif

  WediTRC.destroy()
  _listTRC('refresh')

+self,if=trace.
  print('\nLeaving _clWediTRC')
+self.
#enddef _clWediTRC()

def _AddTransRotCop(key=''):

+self,if=trace.
  print('\n_AddTransRotCop entered')
+self.

  global TransRotCop
  global Umaster,WaddTRC

  global S_AddRemanence,S_AddBrX,S_AddBrY,S_AddBrZ,S_AddBrC,S_AddBrM
  global S_AddCS,S_AddCT
  global S_AddTx,S_AddTy,S_AddTz
  global S_AddTRCmag, S_AddTx,S_AddTy,S_AddTz
  global S_AddCTmag, S_AddCTmoth
  global S_AddRTx,S_AddRTy,S_AddRTz,S_AddRomx,S_AddRomy,S_AddRomz,S_AddRang
  global S_AddRSTx,S_AddRSTy,S_AddRSTz,S_AddRSomx,S_AddRSomy,S_AddRSomz,S_AddRSang

  S_AddTRCmag.set('MagMoth')

  WaddTRC = Toplevel()
  WaddTRC.title("Add Translation")
  WaddTRC.attributes('-topmost', 1)

  x,y = Umaster.winfo_pointerxy()
  sgeo = ""

  if sgeo == "": sgeo = '+' + str(x) + '+' + str(y)
  WaddTRC.geometry(sgeo)

  ftrc = Frame(WaddTRC)

  widlab = 20

  if key == 'trans':

    S_AddTx.set('0.0')
    S_AddTy.set('0.0')
    S_AddTz.set('0.0')
    trc = ['Translate',S_AddTRCmag.get(),
           S_AddTx.get() + " " + S_AddTy.get() + " " + S_AddTz.get()]
    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_AddTx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_AddTy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_AddTz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

  elif key == 'rotate_shape':

    S_AddRSTx.set('0.0')
    S_AddRSTy.set('0.0')
    S_AddRSTz.set('0.0')

    S_AddRSomx.set('0.0')
    S_AddRSomy.set('0.0')
    S_AddRSomz.set('0.0')

    S_AddRSang.set('0.0')

    trc = ['Rotate',S_AddTRCmag.get(), \
    S_AddRSTx.get() + " " + S_AddRSTy.get() + " " + S_AddRSTz.get(), \
    + " " + S_AddRSomx.get() + " " + S_AddRSomy.get() + " " + S_AddRSomz.get() \
    + " " + S_AddRSang.get()]

    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_AddRSTx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_AddRSTy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_AddRSTz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_AddRSTx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_AddRSTy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRSTz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRSang,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

  elif key == 'rotate':

    S_AddRTx.set('0.0')
    S_AddRTy.set('0.0')
    S_AddRTz.set('0.0')

    S_AddRomx.set('0.0')
    S_AddRomy.set('0.0')
    S_AddRomz.set('0.0')

    S_AddRang.set('0.0')

    trc = ['Rotate',S_AddTRCmag.get(), \
    S_AddRTx.get() + " " + S_AddRTy.get() + " " + S_AddRTz.get(), \
    S_AddRomx.get() + " " + S_AddRomy.get() + " " + S_AddRomz.get() \
    + " " + S_AddRang.get()]

    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftrx = Frame(ftrc)
    ltrx = Label(ftrx,width=widlab,text='Tx [mm]',justify=LEFT,font=MyFont)
    ltrx.pack(side=LEFT)
    etrx = Entry(ftrx,text=S_AddRTx,justify=CENTER,font=MyFont)
    etrx.pack(side=RIGHT)
    ftrx.pack()

    ftry = Frame(ftrc)
    ltry = Label(ftry,width=widlab,text='Ty [mm]',justify=LEFT,font=MyFont)
    ltry.pack(side=LEFT)
    etry = Entry(ftry,text=S_AddRTy,justify=CENTER,font=MyFont)
    etry.pack(side=RIGHT)
    ftry.pack()

    ftrz = Frame(ftrc)
    ltrz = Label(ftrz,width=widlab,text='Tz [mm]',justify=LEFT,font=MyFont)
    ltrz.pack(side=LEFT)
    etrz = Entry(ftrz,text=S_AddRTz,justify=CENTER,font=MyFont)
    etrz.pack(side=RIGHT)
    ftrz.pack()

    fomx = Frame(ftrc)
    lomx = Label(fomx,width=widlab,text='RotAxisX',justify=LEFT,font=MyFont)
    lomx.pack(side=LEFT)
    eomx = Entry(fomx,text=S_AddRTx,justify=CENTER,font=MyFont)
    eomx.pack(side=RIGHT)
    fomx.pack()

    fomy = Frame(ftrc)
    lomy = Label(fomy,width=widlab,text='RotAxisY',justify=LEFT,font=MyFont)
    lomy.pack(side=LEFT)
    eomy = Entry(fomy,text=S_AddRTy,justify=CENTER,font=MyFont)
    eomy.pack(side=RIGHT)
    fomy.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAxisZ',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRTz,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

    fomz = Frame(ftrc)
    lomz = Label(fomz,width=widlab,text='RotAng [degree]',justify=LEFT,font=MyFont)
    lomz.pack(side=LEFT)
    eomz = Entry(fomz,text=S_AddRang,justify=CENTER,font=MyFont)
    eomz.pack(side=RIGHT)
    fomz.pack()

  elif key == 'copy':

    S_AddCTmag.set('Magnet')
    S_AddCTmoth.set('Mother')

    trc = ['Copy',S_AddTRCmag.get() + " " + S_AddCTmag.get() + " " + S_AddCTmoth.get()]
    TransRotCop.append(trc)

    fmag = Frame(ftrc)
    lmag = Label(fmag,width=widlab,text='Magnet to copy',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(fmag,text=S_AddTRCmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    fmag.pack()

    ftmag = Frame(ftrc)
    lmag = Label(ftmag,width=widlab,text='Magnet',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(ftmag,text=S_AddCTmag,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    ftmag.pack()

    ftmoth = Frame(ftrc)
    lmag = Label(ftmoth,width=widlab,text='Mother',justify=LEFT,font=MyFont)
    lmag.pack(side=LEFT)
    emag = Entry(ftmoth,text=S_AddCTmoth,justify=CENTER,font=MyFont)
    emag.pack(side=RIGHT)
    ftmoth.pack()

  #endif key

  ftrc.pack()

  bClose = Button(WaddTRC,text='Ok',command=_clWaddTRC)
  bClose.pack(expand=TRUE,fill=X)

+self,if=trace.
  print('\nLeaving _AddTransRotCop')
+self.
#enddef _AddTransRotCop(key='')

def _clWaddTRC():
  global WaddTRC, TransRotCop

+self,if=trace.
  print('\n_clWaddTRC entered')
+self.

  WaddTRC.destroy()
  _listTRC('refresh')

+self,if=trace.
  print('\nLeaving _clWaddTRC')
+self.

#enddef _clWaddTRC()
+KEEP,uwriteclc,T=PYTHON.
*CMZ :          17/07/2023  08.53.18  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  09.21.13  by  Michael Scheer
*CMZ :  2.03/00 31/08/2022  11.28.07  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  12.05.08  by  Michael Scheer
*CMZ :  2.02/01 30/04/2021  14.53.27  by  Michael Scheer
*CMZ :  2.02/00 30/03/2021  12.54.31  by  Michael Scheer
*CMZ :  2.01/08 30/07/2020  10.49.14  by  Michael Scheer
*CMZ :  1.32/11 14/04/2020  16.26.11  by  Michael Scheer
*CMZ :  1.32/05 25/10/2019  14.13.42  by  Michael Scheer
*-- Author :    Michael Scheer   09/10/2019
+seq,writetrc.
def write_variables(Fclc):

+seq,uguiglobind.

  if not '$Mcoating' in Variables and not '$Mcoating' in Pars:
    Fclc.write("$Mcoating = 0.0 ! Coating of magnets \n")
  #endif not '$PerLen' in Variables

  if not '$PerLen' in Variables and not '$PerLen' in Pars:
    Fclc.write("$PerLen = 0.0 ! Dummy for period-length\n")
  #endif not '$PerLen' in Variables

  for p in Pars:
    ps = p[1:] # strip $
    if '$' + ps in Variables: continue
    Fclc.write("$" + ps + "=" + str(Pars[p]) + "\n")
  #endfor p in Pars

  for vnam in Variables:
    if vnam in DictCalcs: continue
    vcom = DictVcomments[vnam]
    if len(vcom): vcom = ' ! ' + vcom
    Fclc.write("$" + vnam[1:] + "=" + str(Variables[vnam]) + vcom + "\n")
  #endfor p in Pars
  Fclc.write("\n")

  for c in DictUnduColors:
    if c[0] != '$': sc = '$' + c
    else: sc = c
    if sc in Pars or sc in Variables: continue
    s = "$" + c + "=" + str(DictUnduColors[c])
    Fclc.write(s+"\n")
  #endfor c in UnduColors

  for calc in Calcs:
    com = DictVcomments[calc[0]]
    if len(com.strip()): com = '! ' + com
    Fclc.write(calc[0] + " = " + calc[1] + com + "\n")
  #endfor calc

#enddef write_variables

def write_coils(coils,Fclc,kcoil=-1):

  iexplain = 0

  Fclc.write(NL)

  icoil = -1
  for coil in coils:

    icoil += 1
    if kcoil > -1 and kcoil != icoil: continue

    key = coil[0][0].upper()

    Fclc.write("\n& Coil\n")
    Fclc.write(coil[0][0] + " " + coil[0][1] + "\n")

    if key == 'RECTWINDINGS':

      if iexplain == 0:
        iexplain = 1
        Fclc.write("* RectWindings:\n")
        Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
        Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad divisions, color-index\n")
      #endif

      scoil = ''
      for s in coil[1]:
        scoil = scoil + ' ' + s
      #endfor s in coil[1]
      Fclc.write(scoil + "\n")

    elif key == 'FILAMENTS':

      Fclc.write(coil[1] + "\n")
      for i in range(int(coil[1])):
        atom = ''
        for dat in coil[2][i]:
          atom += dat + " "
      #endfor
      Fclc.write(atom + "\n")

    elif key == 'FILE':
      Fclc.write(coil[1] + "\n")

    elif key == 'RECTARC' or key == 'RECTBAR' or \
    key == 'THICKWIRE' or key == 'CIRCARC':

      for i in range(2):
        atom = ''
        for dat in coil[1][i]:
          atom += dat + " "
        #endfor
        Fclc.write(atom + "\n")
      #endfor
    #endfor

    else:

      atom = ''
      for dat in coil[1]:
        atom += dat + " "
      #endfor
      Fclc.write(atom + "\n")

    #endif key

  #endfor coil in coils

#enddef write_coils(coils,fileclc)

def write_coils_old(coils,Fclc):

  Fclc = open(Fclc,'a')

  Fclc.write("************\n")
  Fclc.write("\n")
  Fclc.write("Coils\n")

  iexplain = 0

  for coil in coils:

   if iexplain == 0 and coil[0][0].upper() == 'RECTWINDINGS':
     iexplain = 1
     Fclc.write("\n* RectWindings:\n")
     Fclc.write("\n* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
     Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad divisions, color-index\n*")
   #endif

   Fclc.write(coil[0] + "\n")
   scoil = ''
   for s in coil[1]:
     scoil = scoil + ' ' + s
   #endfor s in coil[1]
   Fclc.write(scoil + "\n")
  #endfor coil in coils

  Fclc.write("EndCoils\n")
  Fclc.write("************\n")

  Fclc.close()

#enddef write_coils_old(coils,fileclc)

def uwriteclc(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print("\n\ntrace: uwriteclc:callkey:",callkey)
  print("AppleII_Mode,Hybrid_Mode:",AppleII_Mode,Hybrid_Mode)
+self.

  if yesno(S_IzSym.get()) == 'yes': izsym = 1
  else: izsym = 0
  if yesno(S_IySym.get()) == 'yes': iysym = 1
  else: iysym = 0
  if yesno(S_IxSym.get()) == 'yes': ixsym = 1
  else: ixsym = 0

  blanks = "                                                                                                      "

  mpperi = deepcopy(MagPols)
  mpspec = deepcopy(SpecMagPols)

  Npar = len(Pars)
  Nvar = len(Variables)

  mats = deepcopy(Materials)

  for m in mats:
    if m[1] == 'REC': m[1] = 1
    elif m[1] == 'Iron': m[1] = 2
  #endfor

  Mode = 'Unknown'

  if callkey == 'UNDUMAG':
  #if callkey != "clWfclc":
    if int(AppleII_Mode) > 0:
      Mode = 'AppleII'
      AppleII_Mode = 0
    elif int(Hybrid_Mode) == 1:
      Mode = 'Hybrid'
      Hybrid_Mode = 0
    elif int(Hybrid_Mode) == 2:
      Mode = 'Mirror'
      Hybrid_Mode = 0
  #endif

+self,if=trace.
  debug("trace: uwriteclc:Mode",Mode)
+self.

  if int(AppleII_Mode) > 0:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fmu = open(FileMu,'w')
    Fmu.write(S_Mu_AppleII.get() + " " + S_KsiPerp_AppleII.get() + " ! mu_Par and ksi_Per\n")
    Fmu.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("\n")
    Fclc.write("*! Lines written by undugui.py\n")
    Fclc.write("Mode AppleII\n")
    #Fclc.write("*! AppleII\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Apple II Undulator"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fsav = open("appleii.lst",'w')
    for par in AppleII: Fsav.write(par + " " + str(AppleII[par])+"\n")
    Fsav.close()

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("$nPeriods=" + S_nPer_AppleII.get() + "\n")
    Fclc.write("$LxMag=" + S_Xlen_AppleII.get() + "\n")
    Fclc.write("$LyMag=" + S_Ylen_AppleII.get() + "\n")
    Fclc.write("$LzMag=" + S_Zlen_AppleII.get() + "\n")
    Fclc.write("$AirGap=" + S_AirGap_AppleII.get() + "\n")
    Fclc.write("$Mcoating=" + S_DeadCoat_AppleII.get() + "\n")
    Fclc.write("$FullGap=" + S_FullGap_AppleII.get() + "\n")
    Fclc.write("$matrec=1\n")
    Fclc.write("$mat4=2\n")
    Fclc.write("$mat34=3\n")
    Fclc.write("$Br=" + S_Br_AppleII.get() + "\n")
    Fclc.write("$Mu=" + S_Mu_AppleII.get() + "\n")
    Fclc.write("$KsiPerp=" + S_KsiPerp_AppleII.get() + "\n")
    Fclc.write("$S2Shift=" + S_S2Shift_AppleII.get() + "\n")
    Fclc.write("$S3Shift=" + S_S3Shift_AppleII.get() + "\n")
    Fclc.write("$zSlit=" + S_HorSlit_AppleII.get() + "\n")
    Fclc.write("$xMagCen=" + str(AppleII['xMagCen']) + "\n")
    Fclc.write("$nMagDivX=" + S_NdivX_AppleII.get() + "\n")
    Fclc.write("$nHalfMagDivX=" + S_NdivXHalf_AppleII.get() + "\n")
    Fclc.write("$nMagDivY=" + S_NdivY_AppleII.get() + "\n")
    Fclc.write("$nMagDivZ=" + S_NdivZ_AppleII.get() + "\n")

    Fclc.write("\n")
    Fclc.write("$CurrentByCoil = 0.0\n")
    Fclc.write("$FullGapByCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$zCoilByCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutByCoil = 60.\n")
    Fclc.write("$zLenInByCoil = 40.\n")
    Fclc.write("$zLenOutByCoil = 50.\n")
    Fclc.write("$HeightByCoil = 30.\n")
    Fclc.write("\n")
    Fclc.write("$CurrentBzCoil = 0.0\n")
    Fclc.write("$FullGapBzCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$yCoilBzCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutBzCoil = 60.\n")
    Fclc.write("$zLenInBzCoil = 40.   ! Consider rotation!!\n")
    Fclc.write("$zLenOutBzCoil = 50.  ! Consider rotation!!\n")
    Fclc.write("$HeightBzCoil = 30.   ! Consider rotation!!\n")
    Fclc.write("\n")

    Fclc.write("$nDivHeightCoil = 1\n")
    Fclc.write("$nDivWindCoil = 1\n")
    Fclc.write("$nDivArcCoil = 6\n")

    Fclc.write("$FillingCoil = 0.5\n\n")

    for c in DictUnduColors:
      s = "$" + c
      if not s in Variables:
        s = "$" + c + "=" + str(DictUnduColors[c])
        Fclc.write(s+"\n")
      #endif
    #endfor c in UnduColors

    Fclc.write("\n$E1Br = $Br / 4.\n")
    Fclc.write("$E2Br = - $Br * 3. / 4.\n")
    Fclc.write("$PerLen = 4. * ( $LxMag + $AirGap )\n")
    Fclc.write("$HalfGap = $FullGap / 2.\n")
    Fclc.write("$HalfPerLen = $PerLen / 2.\n")
    Fclc.write("$LxHalfMag = $LxMag / 2.\n")
    Fclc.write("$yMagCen = - $HalfGap - $LyMag / 2.\n")
    Fclc.write("$zMagCen = - $LzMag / 2. - $zSlit / 2.\n")
    Fclc.write("$hS3Shift = $S3Shift / 2.\n")
    Fclc.write("$hS2Shift = $S2Shift / 2.\n")

    Fclc.write("$x1LRMagCen = $xMagCen + $LxHalfMag / 2. - $hS3Shift - $hS2Shift\n")
    Fclc.write("$x2LRMagCen = $x1LRMagCen + $LxHalfMag / 2. + $AirGap + $LxMag / 2.\n")
    Fclc.write("$x3LRMagCen = $x2LRMagCen + $LxHalfMag + $AirGap + $LxHalfMag / 2.\n")
    Fclc.write("$x4LRMagCen = $x3LRMagCen + $LxHalfMag\n")
    Fclc.write("$x5LRMagCen = $x4LRMagCen + $LxHalfMag / 2. + $AirGap + $LxMag / 2.\n")
    Fclc.write("$x6LRMagCen = $x5LRMagCen + $LxMag / 2. + $AirGap + $LxHalfMag / 2.\n")

    Fclc.write("$x1LLMagCen = $x1LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x2LLMagCen = $x2LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x3LLMagCen = $x3LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x4LLMagCen = $x4LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x5LLMagCen = $x5LRMagCen + $S3Shift + $S2Shift\n")
    Fclc.write("$x6LLMagCen = $x6LRMagCen + $S3Shift + $S2Shift\n")

    Fclc.write("$x1ULMagCen = $x1LRMagCen\n")
    Fclc.write("$x2ULMagCen = $x2LRMagCen\n")
    Fclc.write("$x3ULMagCen = $x3LRMagCen\n")
    Fclc.write("$x4ULMagCen = $x4LRMagCen\n")
    Fclc.write("$x5ULMagCen = $x5LRMagCen\n")
    Fclc.write("$x6ULMagCen = $x6LRMagCen\n")

    Fclc.write("$x1URMagCen = $x1LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x2URMagCen = $x2LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x3URMagCen = $x3LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x4URMagCen = $x4LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x5URMagCen = $x5LLMagCen - $S2Shift * 2.\n")
    Fclc.write("$x6URMagCen = $x6LLMagCen - $S2Shift * 2.\n")

    Fclc.write("$yUMagCen = - $yMagCen\n")

    Fclc.write("$zLLMagCen = - $zMagCen\n")
    Fclc.write("$zULMagCen = - $zMagCen\n")

    Fclc.write("$yModCen = - 2. * $yMagCen\n")
    Fclc.write("$zModCen = - 2. * $zMagCen\n")

    Fclc.write("\n* Upstream endpoles\n\n")

    Fclc.write("$x1E1LLMagCen = $x1LLMagCen - $PerLen\n")
    Fclc.write("$x2E1LLMagCen = $x2LLMagCen - $PerLen\n")
    Fclc.write("$x3E1LLMagCen = $x3LLMagCen - $PerLen\n")

    Fclc.write("$x1E1ULMagCen = $x1ULMagCen - $PerLen\n")
    Fclc.write("$x2E1ULMagCen = $x2ULMagCen - $PerLen\n")
    Fclc.write("$x3E1ULMagCen = $x3ULMagCen - $PerLen\n")

    Fclc.write("$x1E1LRMagCen = $x1LRMagCen - $PerLen\n")
    Fclc.write("$x2E1LRMagCen = $x2LRMagCen - $PerLen\n")
    Fclc.write("$x3E1LRMagCen = $x3LRMagCen - $PerLen\n")

    Fclc.write("$x1E1URMagCen = $x1URMagCen - $PerLen\n")
    Fclc.write("$x2E1URMagCen = $x2URMagCen - $PerLen\n")
    Fclc.write("$x3E1URMagCen = $x3URMagCen - $PerLen\n")

    Fclc.write("$x1E2LLMagCen = $x1LLMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2LLMagCen = $x2LLMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2LLMagCen = $x3LLMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2ULMagCen = $x1ULMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2ULMagCen = $x2ULMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2ULMagCen = $x3ULMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2LRMagCen = $x1LRMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2LRMagCen = $x2LRMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2LRMagCen = $x3LRMagCen - $HalfPerLen\n")

    Fclc.write("$x1E2URMagCen = $x1URMagCen - $HalfPerLen\n")
    Fclc.write("$x2E2URMagCen = $x2URMagCen - $HalfPerLen\n")
    Fclc.write("$x3E2URMagCen = $x3URMagCen - $HalfPerLen\n")

    Fclc.write("\n* Downstream endpoles\n\n")

    Fclc.write("$dxED0 = ( $nPeriods + 1.0 ) * $PerLen\n")
    Fclc.write("$dxED1 = ( $nPeriods + 2.0 ) * $PerLen\n")
    Fclc.write("$dxED2 = ( $nPeriods + 1.5 ) * $PerLen\n")

    Fclc.write("$x1D0LLMagCen = $x1E1LLMagCen + $dxED0\n")
    Fclc.write("$x2D0LLMagCen = $x2E1LLMagCen + $dxED0\n")
    Fclc.write("$x3D0LLMagCen = $x3E1LLMagCen + $dxED0\n")

    Fclc.write("$x1D0LRMagCen = $x1E1LRMagCen + $dxED0\n")
    Fclc.write("$x2D0LRMagCen = $x2E1LRMagCen + $dxED0\n")
    Fclc.write("$x3D0LRMagCen = $x3E1LRMagCen + $dxED0\n")

    Fclc.write("$x1D0ULMagCen = $x1E1ULMagCen + $dxED0\n")
    Fclc.write("$x2D0ULMagCen = $x2E1ULMagCen + $dxED0\n")
    Fclc.write("$x3D0ULMagCen = $x3E1ULMagCen + $dxED0\n")

    Fclc.write("$x1D0URMagCen = $x1E1URMagCen + $dxED0\n")
    Fclc.write("$x2D0URMagCen = $x2E1URMagCen + $dxED0\n")
    Fclc.write("$x3D0URMagCen = $x3E1URMagCen + $dxED0\n")

    Fclc.write("$x1D1LLMagCen = $x1E1LLMagCen + $dxED1\n")
    Fclc.write("$x2D1LLMagCen = $x2E1LLMagCen + $dxED1\n")
    Fclc.write("$x3D1LLMagCen = $x3E1LLMagCen + $dxED1\n")

    Fclc.write("$x1D1LRMagCen = $x1E1LRMagCen + $dxED1\n")
    Fclc.write("$x2D1LRMagCen = $x2E1LRMagCen + $dxED1\n")
    Fclc.write("$x3D1LRMagCen = $x3E1LRMagCen + $dxED1\n")

    Fclc.write("$x1D1ULMagCen = $x1E1ULMagCen + $dxED1\n")
    Fclc.write("$x2D1ULMagCen = $x2E1ULMagCen + $dxED1\n")
    Fclc.write("$x3D1ULMagCen = $x3E1ULMagCen + $dxED1\n")

    Fclc.write("$x1D1URMagCen = $x1E1URMagCen + $dxED1\n")
    Fclc.write("$x2D1URMagCen = $x2E1URMagCen + $dxED1\n")
    Fclc.write("$x3D1URMagCen = $x3E1URMagCen + $dxED1\n")

    Fclc.write("$x1D2LLMagCen = $x1E1LLMagCen + $dxED2\n")
    Fclc.write("$x2D2LLMagCen = $x2E1LLMagCen + $dxED2\n")
    Fclc.write("$x3D2LLMagCen = $x3E1LLMagCen + $dxED2\n")

    Fclc.write("$x1D2LRMagCen = $x1E1LRMagCen + $dxED2\n")
    Fclc.write("$x2D2LRMagCen = $x2E1LRMagCen + $dxED2\n")
    Fclc.write("$x3D2LRMagCen = $x3E1LRMagCen + $dxED2\n")

    Fclc.write("$x1D2ULMagCen = $x1E1ULMagCen + $dxED2\n")
    Fclc.write("$x2D2ULMagCen = $x2E1ULMagCen + $dxED2\n")
    Fclc.write("$x3D2ULMagCen = $x3E1ULMagCen + $dxED2\n")

    Fclc.write("$x1D2URMagCen = $x1E1URMagCen + $dxED2\n")
    Fclc.write("$x2D2URMagCen = $x2E1URMagCen + $dxED2\n")
    Fclc.write("$x3D2URMagCen = $x3E1URMagCen + $dxED2\n")

    Fclc.write("$colormag = $red\n")
    Fclc.write("$e1colormag = $magenta\n")
    Fclc.write("$e2colormag = $green\n")

    Fclc.write("\n")
    Fclc.write("$RectRiByCoil = $zLenOutByCoil - $zLenInByCoil\n")
    Fclc.write("$nWindingByCoil = ( $zLenOutByCoil - $zLenInByCoil ) * $HeightByCoil\n")
    Fclc.write("$xCoilByCoilDS = ( $nPeriods + 2. ) * $PerLen + $xLenOutByCoil\n")
    Fclc.write("$xCoilByCoilUS = - $xCoilByCoilDS\n")
    Fclc.write("$yCoilTop = ( $FullGapByCoil + $HeightByCoil ) / 2.\n")
    Fclc.write("$yCoilBottom = - $yCoilTop\n")
    Fclc.write("$RectRiBzCoil = $zLenOutBzCoil - $zLenInBzCoil\n")
    Fclc.write("$nWindingBzCoil = ( $zLenOutBzCoil - $zLenInBzCoil ) * $HeightBzCoil\n")
    Fclc.write("$xCoilBzCoilDS = $xCoilByCoilDS + $xLenOutByCoil + $xLenOutBzCoil\n")
    Fclc.write("$xCoilBzCoilUS = - $xCoilBzCoilDS\n")
    Fclc.write("$zBzCoilRight = ( $FullGapBzCoil + $HeightBzCoil ) / 2.\n")
    Fclc.write("$zBzCoilLeft = - $zBzCoilRight\n")
    Fclc.write("$nCoilColor = $red\n")

    if Nvar > 0:
      Fclc.write("\n")
      Fclc.write("* Additional variables\n")
      Fclc.write("\n")
      for v in Variables:
        vnd = v.split('$')[1]
        if not v in VAppleII and not vnd in AppleII and not vnd in Pars:
          Fclc.write(v + " = " + str(Variables[v]) + "\n")
        #if not v in VAppleII
      #endfor p in Pars
    #endif Npar > 0

    Fclc.write("\n")
    Fclc.write("*---------- Magnets\n")
    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag1 HMag1 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag2 Mag2 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag3 HMag3 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x3LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag4 HMag4 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x4LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag5 Mag5 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x5LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag6 HMag6 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x6LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag7 HMag7 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag8 Mag8 $colormag                  !key, name, mother, color\n")
    Fclc.write("$x2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag9 HMag9 $colormag                 !key, name, mother, color\n")
    Fclc.write("$x3URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag10 HMag10 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag11 Mag11 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag12 HMag12 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag13 HMag13 $colormag               !key, name, mother, color\n")
    Fclc.write("$x1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag14 Mag14 $colormag                !key, name, mother, color\n")
    Fclc.write("$x2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag15 HMag15 $colormag               !key, name, mother, color\n")
    Fclc.write("$x3LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag16 HMag16 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag17 Mag17 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag18 HMag18 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("Block mag19 HMag19 $colormag               !key, name, mother, color\n")
    Fclc.write("$x1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag20 Mag20 $colormag                !key, name, mother, color\n")
    Fclc.write("$x2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag21 HMag21 $colormag               !key, name, mother, color\n")
    Fclc.write("$x3LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag22 HMag22 $colormag               !key, name, mother, color\n")
    Fclc.write("$x4LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag23 Mag23 $colormag                !key, name, mother, color\n")
    Fclc.write("$x5LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 -1.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Magnet\n")
    Fclc.write("Block mag24 HMag24 $colormag               !key, name, mother, color\n")
    Fclc.write("$x6LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag25 Mag25 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag26 Mag26 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x2E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag27 HMag27 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x3E1LRMagCen $yMagCen $zMagCen            !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag28 HMag28 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x1E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag29 Mag29 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x2E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                       !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.        !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag30 HMag30 $e1colormag             !key, name, mother, color\n")
    Fclc.write("$x3E1URMagCen $yUMagCen $zMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                   !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.    !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag31 HMag31 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag32 Mag32 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x2E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag33 HMag33 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x3E1LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag34 HMag34 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x1E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag35 Mag35 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x2E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag36 HMag36 $e1colormag              !key, name, mother, color\n")
    Fclc.write("$x3E1LRMagCen $yUMagCen $zULMagCen          !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag37 HMag37 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag38 Mag38 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag39 HMag39 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2LRMagCen $yMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag40 HMag40 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag41 Mag41 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag42 HMag42 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2URMagCen $yUMagCen $zMagCen            !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag43 HMag43 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x1E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag44 Mag44 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x2E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                        !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.         !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag45 HMag45 $e2colormag              !key, name, mother, color\n")
    Fclc.write("$x3E2LLMagCen $yMagCen $zLLMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                   !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                    !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.     !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag46 HMag46 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag47 Mag47 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag48 HMag48 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3E2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag49 HMag49 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag50 Mag50 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag51 HMag51 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag52 HMag52 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag53 Mag53 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag54 HMag54 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag55 HMag55 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag56 Mag56 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag57 HMag57 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag58 HMag58 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag59 Mag59 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag60 HMag60 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag61 HMag61 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag62 Mag62 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag63 HMag63 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag64 HMag64 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag65 Mag65 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag66 HMag66 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag67 HMag67 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br -1.0 0.0 0.0 $matrec                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag68 Mag68 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 0.0 1.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag69 HMag69 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D0ULMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$Br 1.0 0.0 0.0 $matrec                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag70 HMag70 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x1D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br -1.0 0.0 0.0 $mat4                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag71 Mag71 $e1colormag                !key, name, mother, color\n")
    Fclc.write("$x2D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br 0.0 1.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag72 HMag72 $e1colormag               !key, name, mother, color\n")
    Fclc.write("$x3D1LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E1Br 1.0 0.0 0.0 $mat4                      !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag73 HMag73 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag74 Mag74 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag75 HMag75 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LRMagCen $yMagCen $zMagCen              !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Upper right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag76 HMag76 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag77 Mag77 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag78 HMag78 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2URMagCen $yUMagCen $zMagCen             !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower left girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag79 HMag79 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag80 Mag80 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag81 HMag81 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LLMagCen $yMagCen $zLLMagCen            !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("* Lower right girder\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag82 HMag82 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x1D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br -1.0 0.0 0.0 $mat34                    !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag83 Mag83 $e2colormag                !key, name, mother, color\n")
    Fclc.write("$x2D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 0.0 1.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxMag $LyMag $LzMag                         !dimension\n")
    Fclc.write("$nMagDivX $nMagDivY $nMagDivZ 1. 1.          !segmention\n")
    Fclc.write("\n")
    Fclc.write("& Special_Magnet\n")
    Fclc.write("Block mag84 HMag84 $e2colormag               !key, name, mother, color\n")
    Fclc.write("$x3D2LRMagCen $yUMagCen $zULMagCen           !position\n")
    Fclc.write("$E2Br 1.0 0.0 0.0 $mat34                     !length bc and components of mag. vector, material index\n")
    Fclc.write("$LxHalfMag $LyMag $LzMag                     !dimension\n")
    Fclc.write("$nHalfMagDivX $nMagDivY $nMagDivZ 1. 1.      !segmention\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.            !offset of module\n")
    Fclc.write("$nPeriods           !number of arrays within module\n")
    Fclc.write("$PerLen 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.            !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write("3                       ! number of material files\n")
    Fclc.write("1 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write("2 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write("3 1 1 undumag_mu.dat    ! number, type, mode, and filename\n")
    Fclc.write(" \n")

    Fclc.write("\n")
    Fclc.write("Coils\n*\n")
    Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
    Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad\n")
    Fclc.write("* divisions, color-index\n")

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilUS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilDS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilUS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $nWindingByCoil $FillingCoil "
    scoil += "$xCoilByCoilDS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("& Coil\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.close()

    shutil.copyfile(FileCLC,"undumag_AppleII.clc")
    print("\n--- ",FileCLC," written and copyied to undumag_AppleII.clc ---")

  elif int(Hybrid_Mode) == 2:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')
    Fsav = open('mirror.lst','w')

    Fclc.write("\n")
    Fclc.write("* Lines written by undugui.py\n")
    Fclc.write("Mode Mirror\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Planar Hybrid Undulator (Simulated Infinite Length)"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("\n")

    Fclc.write("$PerLen = " + str(eval(Mirror["PerLen_Mirror"])) + "\n")
    Fclc.write("$Mcoating=" + str(Mirror["Mcoating_Mirror"]) + " ! coating of REC magnets\n")
    Fclc.write("\n")

    for par in Mirror:

      Fsav.write(par + " " + str(Mirror[par])+"\n")

      if par == "Mat_Mirror": continue
      if par == "MatPol_Mirror": continue
      if par == "Mcoating_Mirror": continue
      if par == "PerLen_Mirror": continue

      if len(str(Mirror[par]).split()) > 1:
        sline = "$" + par + " = '" + str(Mirror[par]) + "'\n"
      else:
        sline = "$" + par + " = " + str(Mirror[par]) + NL
      #endif
      Fclc.write(sline)

    #endfor par in Mirror

    Fsav.close()

    Fclc.write("\n")

    sline = "$PerLen_Mirror = $PerLen" + NL
    Fclc.write(sline)
    sline = "$Mcoating_Mirror = $Mcoating" + NL
    Fclc.write(sline)

    Fclc.write("\n")
    Fclc.write("\n$ixSym="+str(ixsym))
    Fclc.write("\n$iySym="+str(iysym))
    Fclc.write("\n$izSym="+str(izsym))
    Fclc.write("\n")

    Fclc.write("\n")
    for c in DictUnduColors:
      s = "$" + c + "=" + str(DictUnduColors[c])
      Fclc.write(s+"\n")
    #endfor c in UnduColors

    Fclc.write("\n")
    for var in VMirror:
      svar = str(VMirror[var])
      if svar == '$nPeriods_Mirror' or \
      svar == '$Mcoating_Mirror' or \
      svar == '$PerLen_Mirror': continue
      else:
        sline = var + " = " + svar + NL
      #endif
      Fclc.write(sline)
    #endfor var in VMirror

    Fclc.write("\n")
    Fclc.write("*------ Magnets and Poles\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockDsChamf mag Mag $ColorMag                                                                   !key, name, mother, color\n")
    Fclc.write("$xMagHalf $yMag $zMagHalf                                                                        !position\n")
    Fclc.write("$Br_Mirror 1. 0. 0. $RECIndex_Mirror                                                             !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMagHalf $LyMag_Mirror $LzMagHalf $ChamfMag_Mirror                                             !dimensions \n")
    Fclc.write("$nDivX_MagHalf $nDivY_Mag_Mirror $nDivZ_MagHalf_Mirror $FracDivY_Mag_Mirror $FracDivZ_Mag_Mirror !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockUsChamf pol Pol $ColorPol                                                                   !key, name, mother, color\n")
    Fclc.write("$xPolHalf $yPol $zPolHalf                                                                        !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                !material index\n")
    Fclc.write("$LxPolHalf $LyPol $LzPolHalf $ChamfPol_Mirror                                                    !dimensions \n")
    Fclc.write("$nDivX_PolHalf $nDivY_Pol_Mirror $nDivZ_PolHalf_Mirror $FracDivY_Pol_Mirror $FracDivZ_Pol_Mirror !segmentation\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("*------ Mirror\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("Block mirror Mirror $ColorMir                                                                   !key, name, mother, color\n")
    Fclc.write("$xMirror $yMirrorHalf $zMirrorHalf                                                                        !position\n")
    Fclc.write("$IronIndex_Mirror                                                                                !material index\n")
    Fclc.write("$LxMirror $LyMirrorHalf $LzMirrorHalf                                                   !dimensions \n")
    Fclc.write("$nMirDivX $nMirDivY $nMirDivZ $FracDivMirY $FracDivMirZ !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.                   !offset of module\n")
    Fclc.write("1                          !number of arrays within module\n")
    Fclc.write("$PerLen_Mirror 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.                   !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")
    Fclc.write(" \n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write(str(Nmat) + "            ! number of material files\n")

    for imat in range(Nmat):
      mat = mats[imat]
      if imat == int(Mirror["RECIndex_Mirror"]) - 1:
        mat[4] = str(Mirror["mu_Mirror"]) + " " + str(Mirror["KsiPerp_Mirror"]) + "  ! mu_Par and ksi_Perp\n"
      #endif
      Fclc.write(str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3] + "\n")
      if mat[2] == '1':
        Fmat = open(str(mat[3]),'w')
        for line in mat[4]: Fmat.write(line)
        Fmat.close()
      #endif mat[2] == '1'
    #endfor imat in range(Nmat)

    Fclc.close()

    try:
      stat = shutil.copyfile(FileCLC,"undumag_Mirror.clc")
      print("\n--- ",FileCLC," written and copyied to undumag_Mirror.clc ---")
    except:
      print("\n--- ",FileCLC," written, but not copied to  undumag_Mirror.clc! Is it a link?  ---")
    #endif

  elif int(Hybrid_Mode) > 0:

    FileCLC = "undumag.clc"

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("\n")
    Fclc.write("* Lines written by undugui.py\n")
    Fclc.write("Mode Hybrid\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    comm = "Planar Hybrid Undulator"
    Fclc.write(comm + "\n")
    S_Ucomment.set(comm)

    Fsav = open("hybrid.lst",'w')
    for par in Hybrid: Fsav.write(par + " " + str(Hybrid[par])+"\n")
    Fsav.close()

    Fclc.write("\n*------ Variables\n\n")

    Fclc.write("\n")

    Fclc.write("$PerLen = " + str(eval(Hybrid["PerLen_Hybrid"])) + "\n")
    Fclc.write("$nPeriods = " + str(eval(Hybrid["nPeriods_Hybrid"])) + "\n")
    Fclc.write("$Mcoating=" + str(Hybrid["Mcoating_Hybrid"]) + " ! coating of REC magnets\n")
    Fclc.write("\n")

    Fclc.write("\n")
    Fclc.write("\n$ixSym="+str(ixsym))
    Fclc.write("\n$iySym="+str(iysym))
    Fclc.write("\n$izSym="+str(izsym))
    Fclc.write("\n")

    for par in Hybrid:
      if par == "MatPol_Hybrid": continue
      if par == "nPeriods_Hybrid": continue
      if par == "Mcoating_Hybrid": continue
      if par == "PerLen_Hybrid": continue
      if len(str(Hybrid[par]).split()) > 1:
        sline = "$" + par + " = '" + str(Hybrid[par]) + "'\n"
      else:
        sline = "$" + par + " = " + str(Hybrid[par]) + NL
      #endif
      Fclc.write(sline)
    #endfor par in Hybrid

    Fclc.write("\n")
    Fclc.write("$CurrentByCoil = 0.0\n")
    Fclc.write("$FullGapByCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$zCoilByCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutByCoil = 60.\n")
    Fclc.write("$zLenInByCoil = 40.\n")
    Fclc.write("$zLenOutByCoil = 50.\n")
    Fclc.write("$HeightByCoil = 30.\n")
    Fclc.write("\n")
    Fclc.write("$CurrentBzCoil = 0.0\n")
    Fclc.write("$FullGapBzCoil = 20.\n")
    Fclc.write("\n")
    Fclc.write("$yCoilBzCoil = 0.0\n")
    Fclc.write("\n")
    Fclc.write("$xLenOutBzCoil = 60.\n")
    Fclc.write("$zLenInBzCoil = 40.   ! Consider rotation!!\n")
    Fclc.write("$zLenOutBzCoil = 50.  ! Consider rotation!!\n")
    Fclc.write("$HeightBzCoil = 30.  ! Consider rotation!!\n")
    Fclc.write("\n")

    Fclc.write("$nDivHeightCoil = 1\n")
    Fclc.write("$nDivWindCoil = 1\n")
    Fclc.write("$nDivArcCoil = 6\n")

    Fclc.write("$FillingCoil = 0.5\n")

    Fclc.write("\n")

    for c in DictUnduColors:
      s = "$" + c + "=" + str(DictUnduColors[c])
      Fclc.write(s+"\n")
    #endfor c in UnduColors

    sline = "$PerLen_Hybrid = $PerLen" + NL
    Fclc.write(sline)
    sline = "$nPeriods_Hybrid = $nPeriods" + NL
    Fclc.write(sline)
    sline = "$Mcoating_Hybrid = $Mcoating" + NL
    Fclc.write(sline)

    for var in VHybrid:
      svar = str(VHybrid[var])
      if svar == '$nPeriods_Hybrid' or \
      svar == '$Mcoating_Hybrid' or \
      svar == '$PerLen_Hybrid': continue
      else:
        sline = var + " = " + svar + NL
      #endif
      Fclc.write(sline)
    #endfor var in VHybrid

    Fclc.write("\n")
    Fclc.write("$RectRiByCoil = $zLenOutByCoil - $zLenInByCoil\n")
    Fclc.write("$nWindingByCoil = ( $zLenOutByCoil - $zLenInByCoil ) * $HeightByCoil\n")
    Fclc.write("$xCoilByCoilDS = ( $nPeriods + 2. ) * $PerLen + $xLenOutByCoil\n")
    Fclc.write("$xCoilByCoilUS = - $xCoilByCoilDS\n")
    Fclc.write("$yCoilTop = ( $FullGapByCoil + $HeightByCoil ) / 2.\n")
    Fclc.write("$yCoilBottom = - $yCoilTop\n")
    Fclc.write("$RectRiBzCoil = $zLenOutBzCoil - $zLenInBzCoil\n")
    Fclc.write("$nWindingBzCoil = ( $zLenOutBzCoil - $zLenInBzCoil ) * $HeightBzCoil\n")
    Fclc.write("$xCoilBzCoilDS = $xCoilByCoilDS + $xLenOutByCoil + $xLenOutBzCoil\n")
    Fclc.write("$xCoilBzCoilUS = - $xCoilBzCoilDS\n")
    Fclc.write("$zBzCoilRight = ( $FullGapBzCoil + $HeightBzCoil ) / 2.\n")
    Fclc.write("$zBzCoilLeft = - $zBzCoilRight\n")
    Fclc.write("$nCoilColor = $red\n")

    Fclc.write("\n")
    Fclc.write("\n")
    Fclc.write("*------ Magnets\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockDsChamf pol3_H Pol3_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xHalfPol3_Hybrid $yPol_Hybrid $zPol_Hybrid                                                         !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockChamf mag2_H Mag2_H $ColorMag_Hybrid                                                            !key, name, mother, color\n")
    Fclc.write("$xMag2_Hybrid $yMag_Hybrid $zMag_Hybrid                                                             !position\n")
    Fclc.write("$Br_Hybrid -1. 0. 0. $RECIndex_Hybrid                                                               !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyMag_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockChamf pol2_H Pol2_H $ColorPol_Hybrid                                                           !key, name, mother, color\n")
    Fclc.write("$xPol2_Hybrid $yPol_Hybrid $zPol_Hybrid                                                             !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Magnet\n")
    Fclc.write("BlockChamf mag1_H Mag1_H $ColorMag_Hybrid                                                            !key, name, mother, color\n")
    Fclc.write("$xMag1_Hybrid $yMag_Hybrid $zMag_Hybrid                                                             !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyMag_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                      !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Pole\n")
    Fclc.write("BlockDsChamf pol1_H Pol1_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xHalfPol1_Hybrid $yPol_Hybrid $zPol_Hybrid                                                         !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Module\n")
    Fclc.write("0. 0. 0.                   !offset of module\n")
    Fclc.write("$nPeriods_Hybrid           !number of arrays within module\n")
    Fclc.write("$PerLen_Hybrid 1. 0. 0. 0. !spacing and direction of arrangement, rotation angle\n")
    Fclc.write("1. 1. 1.                   !scaling and symmetry of magnetization vector\n")
    Fclc.write(" \n")
    Fclc.write(" \n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockUsChamf epolh_H EPol_H $ColorPol_Hybrid                                                        !key, name, mother, color\n")
    Fclc.write("$xEndPolHalf_Hybrid $yPol_Hybrid $zPol_Hybrid                                                       !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPolHalf_Hybrid $LyPol_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_PolHalf_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag1_H EMag1_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag1_Hybrid $yEndMag1_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag1_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockChamf epol1_H EPol1_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndPol1_Hybrid $yEndPol1_Hybrid $zPol_Hybrid                                                      !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyEndPol1_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag2_H EMag2_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag2_Hybrid $yEndMag2_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid -1. 0. 0. $RECIndex_Hybrid                                                               !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag2_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Pole\n")
    Fclc.write("BlockChamf epol2_H EPol2_H $ColorPol_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndPol2_Hybrid $yEndPol2_Hybrid $zPol_Hybrid                                                      !position\n")
    Fclc.write("$IronIndex_Hybrid                                                                                   !material index\n")
    Fclc.write("$LxPol_Hybrid $LyEndPol2_Hybrid $LzPolHalf_Hybrid $ChamfPol_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Pol_Hybrid $nDivY_Pol_Hybrid $nDivZ_PolHalf_Hybrid $FracDivY_Pol_Hybrid $FracDivZ_Pol_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write("& Special_Magnet\n")
    Fclc.write("BlockChamf emag3_H EMag3_H $ColorMag_Hybrid                                                         !key, name, mother, color\n")
    Fclc.write("$xEndMag3_Hybrid $yEndMag3_Hybrid $zMag_Hybrid                                                      !position\n")
    Fclc.write("$Br_Hybrid 1. 0. 0. $RECIndex_Hybrid                                                                !length bc and comp. of magnetization, material index\n")
    Fclc.write("$LxMag_Hybrid $LyEndMag3_Hybrid $LzMagHalf_Hybrid $ChamfMag_Hybrid                                  !dimensions \n")
    Fclc.write("$nDivX_Mag_Hybrid $nDivY_Mag_Hybrid $nDivZ_MagHalf_Hybrid $FracDivY_Mag_Hybrid $FracDivZ_Mag_Hybrid     !segmentation\n")
    Fclc.write("\n")

    Fclc.write(" \n")
    Fclc.write("& Materials\n")
    Fclc.write(str(Nmat) + "            ! number of material files\n")

    for imat in range(Nmat):
      mat = mats[imat]
      if imat == int(Hybrid["RECIndex_Hybrid"]) - 1:
        mat[4] = str(Hybrid["mu_Hybrid"]) + " " + str(Hybrid["KsiPerp_Hybrid"]) + "  ! mu_Par and ksi_Perp\n"
      Fclc.write(str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3] + "\n")
      if mat[2] == '1':
        Fmat = open(str(mat[3]),'w')
        for line in mat[4]: Fmat.write(line)
        Fmat.close()
      #endif mat[2] == '1'
    #endfor imat in range(Nmat)

    Fclc.write("\n")
    Fclc.write("Coils\n*\n")
    Fclc.write("* Current per winding, filling factor, number of windings, center, normal vector, rotation-angle, total length,\n")
    Fclc.write("* inner width, outer width, inner radius, height, vert/hori/rad\n")
    Fclc.write("* divisions, color-index\n")

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilUS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilDS $yCoilTop $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilUS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentByCoil $FillingCoil $nWindingByCoil "
    scoil += "$xCoilByCoilDS $yCoilBottom $zCoilByCoil 0. 1. 0. 0. "
    scoil += "$xLenOutByCoil $zLenInByCoil $zLenOutByCoil $RectRiByCoil "
    scoil += "$HeightByCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilRight 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilUS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("\n")
    Fclc.write("RectWindings\n")
    scoil = ""
    scoil += "$CurrentBzCoil $nWindingBzCoil $FillingCoil "
    scoil += "$xCoilBzCoilDS $yCoilBzCoil $zBzCoilLeft 0. 0. 1. 0. "
    scoil += "$xLenOutBzCoil $zLenInBzCoil $zLenOutBzCoil $RectRiBzCoil "
    scoil += "$HeightBzCoil $nDivHeightCoil $nDivWindCoil $nDivArcCoil $nCoilColor\n"
    Fclc.write(scoil)

    Fclc.write("EndCoils\n")
    Fclc.write("*************\n")

    Fclc.close()

    try:
      stat = shutil.copyfile(FileCLC,"undumag_Hybrid.clc")
      print("\n--- ",FileCLC," written and copyied to undumag_Hybrid.clc ---")
    except:
      print("\n--- ",FileCLC," written, but not copied to  undumag_Hybrid.clc! Is it a link?  ---")
    #endif

  else:

    #if key == 'UNDUMAG':
    #if Mode == 'Hybrid':
    #Hybrid_Mode=1
    #endif

    # Other Modes

    if Nmodul <= 0 and NMagPolTot > NspecMagPol:
      wError("No modules defined, but periodic items found, cannot write geometry file!")
      return
    #endif Nmodul <= 0 and NMagPolTot > NspecMagPol:

    if Nmat <= 0 and NMagPolTot > 0:
      wError("No material defined, cannot write geometry file!")
      return
    #endif Nmat <= 0

    Flast = open("unduclc.lst","w")
    Flast.write(FileCLC+NL)
    Flast.close()

    Fclc = open(FileCLC,'w')

    Fclc.write("*! Lines written by undugui.py\n")
    Fclc.write("Mode " + Mode + "\n")
    Fclc.write("\n")
    Fclc.write("\n")

    Fclc.write("\n& User_Comment\n")
    Fclc.write(Ucomment.strip() + "\n")

    write_variables(Fclc)

    if NMagPolTot:
      Fclc.write("\n")
      Fclc.write("* Magnets \n")
      Fclc.write("\n")
    #endif

    #debug("uwriteclc")
    imag = 0

    for mp in MagPolsTot:

      imag += 1

      ckey = "\n& "
      if mp[2] == 'yes' or mp[2] == 1: ckey = "\n& Special_"

      if mp[1] == 'Iron': ckey += "Pole\n"
      else: ckey += "Magnet\n"

      cnam = mp[0][0]
      cmoth = mp[0][1]
      key = mp[3]
      cen = mp[4]
      vmat = mp[5]

      scol = vmat[5]
      if scol in DictUnduColors: col = str(DictUnduColors[scol])
      else: col = scol

      Fclc.write(ckey)

      line = key + " " + cnam + " " + cmoth + " " + col
      comm = "!key, name, mother, color\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      line = cen[0] + " " + cen[1] + " " + cen[2]
      comm = "!position\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      if mp[1] == 'Iron':
        line = vmat[4]
        comm = " !material index\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
      else:
        line = vmat[0] + " " + vmat[1] + " " + vmat[2] + " " + vmat[3] + " " + vmat[4]
        comm = "!Bc, direction of magnetization, material index\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
      #endif

      if key != 'File' and key != 'Corners':

        siz = mp[6]
        div = mp[7]

        line = siz[0] + " " + siz[1] + " " + siz[2] + " " + siz[3]
        comm = "!dimensions\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        line = div[0] + " " + div[1] + " " + div[2] + " " + div[3] + " " + div[4]
        comm = "!segmentation\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      else:

        ncorn = mp[6]
        corns = mp[7]
        div = mp[8]

        line = div[0] + " " + div[1] + " " + div[2] + " " + div[3] + " " + div[4]
        comm = "!segmentation\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        line = ncorn
        comm = "!number of corners\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        for corn in corns:
          line = str(corn[0]) + " " + str(corn[1]) + " " + str(corn[2])
          comm = "!x y z\n"
          n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)
        #endfor

      #endif

    #endfor

    for m in Modules:
      Fclc.write("\n& Module\n")
      line = m[0]
      comm = "!offset of module\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[1]
      comm = "!number of arrays within module\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[2]
      comm = "!spacing and direction of arrangement, rotation angle\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
      line = m[3]
      comm = "!scaling and symmetry of magnetization vector\n"
      n = 50 - len(line)
      Fclc.write(line + blanks[0:n] + comm)
    #endfor

    if Nmat:

      Fclc.write("\n& Materials\n")

      line = str(Nmat)
      comm = "! number of material files\n"
      n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

      for imat in range(Nmat):

        mat = mats[imat]
        line = str(mat[0]) + " " + str(mat[1]) + " " + str(mat[2]) + " " + mat[3]
        comm = "! number, type, mode, and  filename\n"
        n = 50 - len(line); Fclc.write(line + blanks[0:n] + comm)

        if mat[2] == '1':
          Fmat = open(str(mat[3]),'w')
          for line in mat[4]: Fmat.write(line)
          Fmat.close()
        #endif mat[2] == '1'

      #endfor imat in range(Nmat)

    #endif Nmat

    if len(Coils): write_coils(Coils,Fclc)

    Fclc.close()

  #endif int(AppleII_Mode) > 0

  #print(TransRotCop)
  if len(TransRotCop) > 0 or len(DictInhomogen) > 0:
    uwritetrc(FileCLC)
  #endif

+self,if=trace.
  print(NL,"trace:: Leaving uwriteclc('",callkey,"')")
+self.
#enddef uwriteclc()
+KEEP,ureadclc,T=PYTHON.
*CMZ :          18/07/2023  12.35.07  by  Michael Scheer
*CMZ :  2.04/00 07/09/2022  09.21.13  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  06.51.21  by  Michael Scheer
*CMZ :  2.02/02 08/03/2022  12.16.54  by  Michael Scheer
*CMZ :  2.02/01 21/10/2021  12.11.52  by  Michael Scheer
*CMZ :  2.02/00 17/03/2021  12.15.56  by  Michael Scheer
*-- Author :    Michael Scheer   14/10/2020
+seq,utransrotcop.
+seq,chtransrotcop.

def undumag_wind_to_fila(coilin):
  global Filaments, Coils, CurrLoops, DictUnduColors,UnduColors

  if coilin[0][0].upper() != 'RECTWINDINGS':
    wError("Unknown coil type " + coilin[0] + " in undumag_wind_to_fila")
    return
  #if coil[0].upper() != 'RECTWINDINGS'

  print("wind_to_fila:",NL,coilin)
  debug("debug: Wind")

  coil = []
  for v in coilin[1]:
    try:
      val = calc_var(v)
      coil.append(val)
    except:
      wError("  Error in undumag_wind_to_fila: Could not resolve " + str(v) + "   ")
      return
  #endfor v in coil

  kcolor = int(coil[18])

  x0 = float(coil[3])
  y0 = float(coil[4])
  z0 = float(coil[5])

  vx = float(coil[6])
  vy = float(coil[7])
  vz = float(coil[8])

  vn = np.sqrt(vx**2+vy**2+vz**2)
  if vn == 0.0:
    wError("*** Error in undumag_wind_to_fila: Zero normal vector for coil")
    return
  #endif vn == 0.0

  alpha = float(coil[9])

  xo = float(coil[10]/2.0)
  zi = float(coil[11]/2.0)
  zo = float(coil[12]/2.0)
  ri = float(coil[13])
  h = float(coil[14])

  ny = int(coil[15])
  nz = int(coil[16])
  nphi = int(coil[17])

  kolor = int(coil[18])

  w=zo-zi
  xi=xo-w
  ro=ri+w

  yc=0.0

  if xi < ri:
    wError("*** Error in undumag_wind_to_fila: The inner length is smaller than twice the inner radius ***")
    return
  #endif xi < ri

  dphi=pi/2.0/nphi
  dy=h/ny
  dz=w/nz

  z = []
  for iz in range(nz):
    z.append(zi+(iz+0.5)*dz)
  #endfor

  y = []
  for iy in range(ny):
    y.append(yc-h/2.0+(iy+0.5)*dy)
  #endfor

  fila = []

  ielem = 0
  for iy in range(ny):
    for iz in range(nz):

      # first x bar
      wire = []
      wire.append(xi-ri)
      wire.append(+y[iy])
      wire.append(-z[iz])
      wire.append(-xi+ri)
      wire.append(+y[iy])
      wire.append(-z[iz])
      wire.append(kolor)
#      wire.append(1)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # first arc

      xc=-xi+ri
      zc=-zi+ri

      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc-r*sinphi1)
        wire.append(+y[iy])
        wire.append(+zc-r*cosphi1)
        wire.append(+xc-r*sinphi2)
        wire.append(+y[iy])
        wire.append(+zc-r*cosphi2)
        wire.append(kolor)
#        wire.append(2)
        wire.append(iy)
        wire.append(iz)
        fila.append(wire)
        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)

      # first z bar

      wire = []
      wire.append(-xi-(iz+0.5)*dz)
      wire.append(+y[iy])
      wire.append(-zi+ri)
      wire.append(wire[0])
      wire.append(+y[iy])
      wire.append(+zi-ri)
      wire.append(kolor)
#      wire.append(3)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # second arc

      xc=-xi+ri
      zc=zi-ri
      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc-r*cosphi1)
        wire.append(+y[iy])
        wire.append(+zc+r*sinphi1)
        wire.append(+xc-r*cosphi2)
        wire.append(+y[iy])
        wire.append(zc+r*sinphi2)
        wire.append(kolor)
#        wire.append(4)
        wire.append(iy)
        wire.append(iz)

        fila.append(wire)

        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)

      # second x bar

      wire = []
      wire.append(-xi+ri)
      wire.append(+y[iy])
      wire.append(z[iz])
      wire.append(+xi-ri)
      wire.append(+y[iy])
      wire.append(z[iz])
      wire.append(kolor)
#      wire.append(5)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # third arc

      xc=xi-ri
      zc=zi-ri

      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc+r*sinphi1)
        wire.append(+y[iy])
        wire.append(+zc+r*cosphi1)
        wire.append(+xc+r*sinphi2)
        wire.append(+y[iy])
        wire.append(+zc+r*cosphi2)
        wire.append(kolor)
#        wire.append(6)
        wire.append(iy)
        wire.append(iz)

        fila.append(wire)

        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)

      # second z bar
      wire = []
      wire.append(+xi+(iz+0.5)*dz)
      wire.append(+y[iy])
      wire.append(+zi-ri)
      wire.append(wire[0])
      wire.append(+y[iy])
      wire.append(-zi+ri)
      wire.append(kolor)
      wire.append(iy)
      wire.append(iz)

      fila.append(wire)

      # fourth arc
      xc=xi-ri
      zc=-zi+ri
      sinphi1=0.0
      cosphi1=1.0

      for iphi in range(nphi):
        sinphi2=np.sin((iphi+1)*dphi)
        cosphi2=np.cos((iphi+1)*dphi)
        wire = []
        r=ri+(iz+0.5)*dz
        wire.append(+xc+r*cosphi1)
        wire.append(+y[iy])
        wire.append(+zc-r*sinphi1)
        wire.append(+xc+r*cosphi2)
        wire.append(+y[iy])
        wire.append(+zc-r*sinphi2)
        wire.append(kolor)
#        wire.append(2)
        wire.append(iy)
        wire.append(iz)

        fila.append(wire)
        sinphi1=sinphi2
        cosphi1=cosphi2
      #endfor iphi in range(nphi)
    #endfor iz
  #endfor iy

  #rotate and translate coil

  vx = vx/vn
  vy = vy/vn
  vz = vz/vn

  istat, rotmat =  util_rotate_vector_to_y_axis([vx,vy,vz])

  rmat = deepcopy(rotmat)
  for i in range(3):
    for j in range(3):
      rmat[i][j]=rotmat[j][i]
    #endfor j in range(3)
  #endfor i in range(3)

  cosa=np.cos(alpha/180.0*pi)
  sina=np.sin(alpha/180.0*pi)

  currloopx = []
  currloopy = []
  currloopz = []

  iw = -1
  for wire in fila:

    iw += 1

    wx=cosa*wire[0]+sina*wire[2]
    wy=wire[1]
    wz=-sina*wire[0]+cosa*wire[2]

    fila[iw][0]=rmat[0][0]*wx+rmat[0][1]*wy+rmat[0][2]*wz+x0
    fila[iw][1]=rmat[1][0]*wx+rmat[1][1]*wy+rmat[1][2]*wz+y0
    fila[iw][2]=rmat[2][0]*wx+rmat[2][1]*wy+rmat[2][2]*wz+z0

    wx=cosa*wire[3]+sina*wire[5]
    wy=wire[4]
    wz=-sina*wire[3]+cosa*wire[5]

    fila[iw][3]=rmat[0][0]*wx+rmat[0][1]*wy+rmat[0][2]*wz+x0
    fila[iw][4]=rmat[1][0]*wx+rmat[1][1]*wy+rmat[1][2]*wz+y0
    fila[iw][5]=rmat[2][0]*wx+rmat[2][1]*wy+rmat[2][2]*wz+z0

    currloopx.append(fila[iw][0])
    currloopy.append(fila[iw][1])
    currloopz.append(fila[iw][2])

  #endfor w in fila

  currloopx.append(currloopx[0])
  currloopy.append(currloopy[0])
  currloopz.append(currloopz[0])

  CurrLoops.append([kcolor,currloopx,currloopy,currloopz])

  Filaments.append(fila)

#enddef undumag_wind_to_fila(coil)

def util_rotate_vector_to_y_axis(vin):

  istat=0
  vn=np.sqrt(vin[0]**2+vin[1]**2+vin[2]**2)

  rotmat=[[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0]]

  if vn == 0.0:
    istat=-1
    return istat, rotmat
  #endif

  vx=vin[0]/vn
  vy=vin[1]/vn
  vz=vin[2]/vn

  if vx**2+vz**2 > 1.0e-9:
    cosphi=vx/np.sqrt(vx**2+vz**2)
    sinphi=vz/np.sqrt(vx**2+vz**2)
  else:
    cosphi=1.0e0
    sinphi=0.0e0
  #endif

  wx=cosphi*vx+sinphi*vz
  wy=vy
  wz=-sinphi*vx+cosphi*vz

  if wx**2+wy**2 > 1.0e-9:
    costhe=wy/np.sqrt(wx**2+wy**2)
    sinthe=wx/np.sqrt(wx**2+wy**2)
  else:
    costhe=1.0e0
    sinthe=0.0e0
  #endif

  rotphi = deepcopy(rotmat)
  rotthe = deepcopy(rotmat)

  rotphi[0][0]=cosphi
  rotphi[0][1]=0.0e0
  rotphi[0][2]=sinphi

  rotphi[1][0]=0.0e0
  rotphi[1][1]=1.0e0
  rotphi[1][2]=0.0e0

  rotphi[2][0]=-sinphi
  rotphi[2][1]=0.0e0
  rotphi[2][2]=cosphi

  rotthe[0][0]=costhe
  rotthe[0][1]=-sinthe
  rotthe[0][2]=0.0e0

  rotthe[1][0]=sinthe
  rotthe[1][1]=costhe
  rotthe[1][2]=0.0e0

  rotthe[2][0]=0.0e0
  rotthe[2][1]=0.0e0
  rotthe[2][2]=1.0e0

  rotmat[0][0] = \
  rotthe[0][0]*rotphi[0][0]+rotthe[0][1]*rotphi[1][0]+rotthe[0][2]*rotphi[2][0]
  rotmat[0][1] = \
  rotthe[0][0]*rotphi[0][1]+rotthe[0][1]*rotphi[1][1]+rotthe[0][2]*rotphi[2][1]
  rotmat[0][2] = \
  rotthe[0][0]*rotphi[0][2]+rotthe[0][1]*rotphi[1][2]+rotthe[0][2]*rotphi[2][2]

  rotmat[1][0] = \
  rotthe[1][0]*rotphi[0][0]+rotthe[1][1]*rotphi[1][0]+rotthe[1][2]*rotphi[2][0]
  rotmat[1][1] = \
  rotthe[1][0]*rotphi[0][1]+rotthe[1][1]*rotphi[1][1]+rotthe[1][2]*rotphi[2][1]
  rotmat[1][2] = \
  rotthe[1][0]*rotphi[0][2]+rotthe[1][1]*rotphi[1][2]+rotthe[1][2]*rotphi[2][2]

  rotmat[2][0] = \
  rotthe[2][0]*rotphi[0][0]+rotthe[2][1]*rotphi[1][0]+rotthe[2][2]*rotphi[2][0]
  rotmat[2][1] = \
  rotthe[2][0]*rotphi[0][1]+rotthe[2][1]*rotphi[1][1]+rotthe[2][2]*rotphi[2][1]
  rotmat[2][2] = \
  rotthe[2][0]*rotphi[0][2]+rotthe[2][1]*rotphi[1][2]+rotthe[2][2]*rotphi[2][2]

  return istat,rotmat
#enddef util_rotate_vector_to_y_axis(vin,rotmat,istat)

def undu_coils_to_filaments(kcoil=-1,callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print(NL,"trace:: undu_coils_to_filaments",kcoil,callkey,NL)
+self.

  if len(Coils) == 0:
    Filaments = []
    return
  #endif

  Fclc = open("filaments.clc","w")
  Fclc.write("& User_Comment\nCoils to Filaments\n\n")

  fil = []
  if kcoil > -1:
    filo = deepcopy(Filaments)
  #endif

  write_variables(Fclc)
  write_coils(Coils,Fclc,kcoil)

  Fclc.close()

  Rmode = 'FILAMENTS STDOUT=undumag.lun6'
  _undumag("Filaments")

  #Quit("Ende nach undumag")

+self,if=trace.
  print(NL,"trace:: Leaving undu_coils_to_filaments",NL)
+self.
#enddef undu_coils_to_filaments()

def blockcorners(mp):

  cen = mp[4]
  siz = mp[6]
  #print(NL,NL,mp)

  xcen = cen[0]
  ycen = cen[1]
  zcen = cen[2]

  xcen = calc_var(xcen)
  ycen = calc_var(ycen)
  zcen = calc_var(zcen)

  typ = mp[3]

  if typ.find('Block') > -1:
    siz = mp[6]
    xcen = calc_var(xcen)
    ycen = calc_var(ycen)
    zcen = calc_var(zcen)
    x = calc_var(siz[0]) / 2.
    y = calc_var(siz[1]) / 2.
    z = calc_var(siz[2]) / 2.
    chamf = calc_var(siz[3])
  #endif typ.find('Block') > -1

  if typ == 'Block':
    corns = [
             [-x,-y,-z],[-x,+y,-z],[+x,-y,-z],[+x,+y,-z],
             [-x,-y,+z],[-x,+y,+z],[+x,-y,+z],[+x,+y,+z]
            ]
  elif typ == 'BlockChamf':

    if chamf >= 0:
      c = chamf; xc = x-c; yc = y-c; zc = z-c
    else:
      c = -chamf; xc = x-c; yc = - (y-c); zc = z-c; y = -y
    #endif

    corns = [
             [-x,-yc,-z],[x,-yc,-z],[x,-yc,z],[-x,-yc,z],
             [-x,+yc,-z],[x,+yc,-z],[x,+yc,z],[-x,+yc,z],
             [-xc,+y,-z],[xc,+y,-z],[xc,+y,z],[-xc,+y,z]
            ]

  elif typ == 'BlockDsChamf':

    chamf = calc_var(siz[3])

    if chamf >= 0:
      c = chamf; xc = x-c; yc = y-c; zc = z-c
    else:
      c = -chamf; xc = x-c; yc = - (y-c); zc = z-c; y = -y
    #endif

    corns = [
             [-x,-yc,-z],[x,-yc,-z],[x,-yc,z],[-x,-yc,z],
             [-x,+y,-z],[x,+yc,-z],[x,+yc,z],[-x,+y,z],
             [-xc,+y,-z],[xc,+y,-z],[xc,+y,z],[-xc,+y,z]
            ]

  elif typ == 'BlockUsChamf':

    chamf = calc_var(siz[3])
    if chamf >= 0:
      c = chamf; xc = x-c; yc = y-c; zc = z-c
    else:
      c = -chamf; xc = x-c; yc = - (y-c); zc = z-c; y = -y
    #endif

    corns = [
             [-x,-yc,-z],[x,-yc,-z],[x,-yc,z],[-x,-yc,z],
             [-x,+y,-z],[x,+yc,-z],[x,+yc,z],[-x,+y,z],
             [-xc,+y,-z],[xc,+y,-z],[xc,+y,z],[-xc,+y,z]
            ]

  else:
    Quit("Error in blockcorners(mp): Unknown type '" + typ + "'")
  #endif typ == 'Block'

  return corns

#enddef blockcorners(mp)

def ureadclc(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  debug("trace: ureadclc:callkey:",callkey)
+self.

  NL = "\n"

  undugui_clean(callkey)

  if not os.path.exists(FileCLC):
    if os.path.exists("FileCLC" + ".clc"):
      FileCLC = FileCLC + ".clc"
      print("\nReading " + FileCLC)
    elif os.path.exists("../input/" + FileCLC):
      print(FileCLC + " not found in current directory, but in ../input")
      FileCLC = "../input/" + FileCLC
    elif os.path.exists("../input/" + FileCLC + ".clc"):
      FileCLC = "../input/" + FileCLC + ".clc"
      print(FileCLC + " not found in current directory, but in ../input")
    else:
      wError(FileCLC + " not found!")
      return
    #endif
  #endif not os.path.exists(FileCLC)

  Fclc = open(FileCLC,"r")

  LastCLC = FileCLC

  Flast = open("unduclc.lst","w")
  Flast.write(FileCLC+NL)
  Flast.close()

  Uclcorig = Fclc.readlines()
  IclcRead = 1

  Fclc.close()

  iline = -1
  nlines = len(Uclcorig)
  icomm = 0

  #print(NL,NL)

  AppleII_Mode = 0
  Hybrid_Mode = 0

  if EchoCLC: print("\nundumag.clc:\n")

  while iline < nlines - 1:

    iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
    if not len(cline): break

    #if EchoCLC: print(cline)

    words = cline.split()
    w1 = words[0]
    c1 = cline[0]

    if words[0] == 'Mode':
      if words[1] == 'AppleII':
        AppleII_Mode = 1
      elif words[1] == 'Hybrid':
        Hybrid_Mode = 1
      elif words[1] == 'Mirror':
        Hybrid_Mode = 2
      #endif
    #endif

    if w1 == '&':

      ckey =  words[1]

      if ckey.upper() == "USER_COMMENT":
        iline += 1
        Ucomment =  Uclcorig[iline].strip()
        print(NL,NL,"User comment:",NL,Ucomment,NL,NL)
      #endif

      elif ckey.upper() == "MAGNET" \
      or ckey.upper() == "SPECIAL_MAGNET" \
      or ckey.upper() == "SPECIAL_POLE" \
      or ckey.upper() == "POLE":

        if ckey.upper() == "SPECIAL_MAGNET" or ckey.upper() == "SPECIAL_POLE":
          ispec = 1
        else:
          ispec = 0
        #endif

        if ckey.upper() == "SPECIAL_POLE" or ckey.upper() == "POLE":
          ispole = 1
        else:
          ispole = 0
        #endif

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          key = words[0]
          cnam = words[1]
          cmoth = words[2]
          col = words[3]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry
        cname = [cnam,cmoth]

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          xcen = words[0]
          ycen = words[1]
          zcen = words[2]
          cen = [xcen,ycen,zcen]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          if not ispole:
            bc = words[0]
            xm = words[1]
            ym = words[2]
            zm = words[3]
            mat = words[4]
          else:
            bc = '0.0'
            xm = '0.0'
            ym = '0.0'
            zm = '0.0'
            mat = words[0]
          #endif
          vmat = [bc,xm,ym,zm,mat,col]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        if key.upper() != 'FILE' and key.upper() != 'CORNERS':
          try:
            words = cline.split()
            size = ['0.0','0.0','0.0','0.0','0.0','0.0','0.0']
            for i in range(len(words)):
              size[i] = words[i]
            #endfor
          except:
            Quit("*** Error in ureadclc: Bad line:\n" + cline)
          #endtry
        else:
          iline -= 1
        #endif

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        if not len(cline): break

        try:
          words = cline.split()
          nxdiv = words[0]
          nydiv = words[1]
          nzdiv = words[2]
          yfracdiv = words[3]
          zfracdiv = words[4]
        except:
          Quit("*** Error in ureadclc: Bad line:\n" + cline)
        #endtry

        div = [nxdiv,nydiv,nzdiv,yfracdiv,zfracdiv]

        corns = []
+self,if=debugureadclc.
        #print("cnam,key,ispec,ispole:",cnam,key,ispec,ispole)
+self.
        if key.upper() == 'CORNERS':

          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          if not len(cline): break
          sncorn = cline
          ncorn = eval(sncorn)

          for i in range(ncorn):
            iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
            words = cline.split()
            x = calc_var(words[0])
            y = calc_var(words[1])
            z = calc_var(words[2])
            corns.append([x,y,z])
          #endfor i in range(ncorn))

          for mpt in MagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          for mpt in SpecMagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          if ispec:
            SpecMagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          else:
            MagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          #endif

        elif key.upper() == 'FILE':

          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          if not len(cline): break
          fname = cline
          Fcorn = open(fname,'r')
          cornlines = Fcorn.readlines()
          Fcorn.close()
          for cline in cornlines:
            words = cline.split()
            if cline[0] == '*' or len(words) < 3: continue
            words = cline.split()
            x = calc_var(words[0])
            y = calc_var(words[1])
            z = calc_var(words[2])
            corns.append([x,y,z])
          #endfor cline in cornlines
          sncorn = str(len(corns))
          DictCornFiles[cname[0]] = fname

          for mpt in MagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          for mpt in SpecMagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          if ispec:
            SpecMagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          else:
            MagPols.append([cname,None,ispec,key,cen,vmat,sncorn,corns,div])
          #endif

        else:
+self,if=debugureadclc.
          #debug(cnam)
+self.
          for mpt in MagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          for mpt in SpecMagPols:
            if mpt[0][0] == cnam:
              print("\n*** Error in ureadclc: Duplicate magnet name:",
                    NL,mpt[0],"< - >",cname)
              Quit()
          #endfor

          if ispec:
            SpecMagPols.append([cname,None,ispec,key,cen,vmat,size,div])
          else:
            MagPols.append([cname,None,ispec,key,cen,vmat,size,div])
          #endif

        #endif  'CORNERS'

      elif ckey.upper() == "COIL":

        #debug("debug: Coil")
        coil = []

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        words = cline.split()

        key = words[0]
        idxcoil = len(Coils)

        if len(words) > 1:
          cnam = words[1]
        else:
          cnam = 'coil_' + str(idxcoil+1)
        #endif

        if not key in DictCoils: DictCoils[key] = []
        DictCoils[key].append(idxcoil)

#        debug(key + " " + cnam)

        coil.append([key,cnam])

#        for w in words: coil.append(w)

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        words = cline.split()

        if key == 'Filaments':
          coil.append(words[0])
          fil = []
          for i in range(int(coil[1])):
            iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
            words = cline.split()
            fi = []
            for f in words: fi.append(f)
            fil.append(fi)
          #endfor
          coil.append(fil)
          Coils.append(coil)
        elif key == 'File':
          if words[0][0] == '"' or  words[0][0] == "'":
            coil.append(words[0][1:-1])
          else:
            coil.append(words[0])
          #endif
          Coils.append(coil)
        elif key == 'RectWindings' or key == 'Rectangular' or key == 'RectangCirc':
          wl = []
          for w in words: wl.append(w)
          #debug("wl")
          coil.append(wl)
          Coils.append(coil)
        elif key == 'RectArc' or key == 'RectBar' \
        or key == 'ThickWire' or key == 'CircArc':
          #debug("debug: RectBar")
          ww = []
          wl = []
          for w in words: wl.append(w)
          ww.append(wl)
          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          words = cline.split()
          wl = []
          for w in words: wl.append(w)
          ww.append(wl)
          coil.append(ww)
          Coils.append(coil)
        else:
          print("*** Error in ureadclc: Unknown coil key: " + key + NL)
        #endif

      elif ckey.upper() == "TRANSLATE":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)
      elif ckey.upper() == "REMANENCE":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)
      elif ckey.upper() == "COPY":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)
      elif ckey.upper() == "ROTATE" or ckey.upper() == "ROTATE_SHAPE":
        trc = [ckey]
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trc.append(cline)
        TransRotCop.append(trc)

      elif ckey.upper() == "MODULE":

        Nmodul += 1

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        trans = cline
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        nper = cline
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        space = cline
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        scale = cline

        modu = [trans,nper,space,scale]
        Modules.append(modu)

      elif ckey.upper() == "MATERIALS":

        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        Nmat = int(cline)

        for i in range(Nmat):
          iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
          words = cline.split()
          if words[1] == '1': words[1] = 'REC'
          if words[1] == '2': words[1] = 'Iron'
          if words[1] == '3':
            words[1] = 'Mirror'
            Quit("Spiegel")
          Fmat = open(words[3],'r')
          flines = Fmat.readlines()
          Fmat.close()
          words.append(flines)
          Materials.append(words)
        #endfor i in range(Nmat)

      elif ckey.upper() == 'INHOMOGENEITY':
        iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
        spl = cline.split()
        if spl[0] != '&':
          cnam = spl[0]
          tayx = spl[1]
          tayy = spl[2]
          tayz = spl[3]
          modus = spl[4]
          inh = ['',tayx,tayy,tayz,'','','','',modus]
          DictInhomogen[cnam] = [cnam,inh]
          ncoef = 0
          while TRUE:
            iline, cline, icomm, com = ugui_get_clc_line_com(iline,nlines,icomm)
            spl = cline.split()
            if spl[0] == '&':
              break
            ncoef += 1
            if ncoef > 1:
              DictInhomogen[cnam].append(['',tayx,tayy,tayz,'','','','',modus])
            #endif
            DictInhomogen[cnam][ncoef][0] = spl[0]
            DictInhomogen[cnam][ncoef][4] = spl[1]
            DictInhomogen[cnam][ncoef][5] = spl[2]
            DictInhomogen[cnam][ncoef][6] = spl[3]
            DictInhomogen[cnam][ncoef][7] = spl[4]
          #end while
        #endif
      else:
        print("*** Error in ureadclc: Unknown key: " + ckey + NL)
      #endif ckey

    elif c1 == '$':

      words = cline.split('=')
      if len(words) == 1: continue

      vnam = words[0].strip()
      CalcLines.append([vnam,words[1].strip(),com])
      DictVcomments[vnam] = com

    elif w1.lower() == 'p':

      words = cline.split("=")
      pnam = '$' + words[0].split()[1].strip()
      pval = words[1].strip()

      if pnam == '$PerLen':
        if Parameters[0][0] == '$PerLen':
          Parameters[0][1] = pval
          Pars[pnam] = float(pval)
        else:
          Quit("Reserved Parameter $PerLen not found in Parameters[0]")
        #endif
        DictPcomments[pnam] = com
        continue
      #endif

      if pnam == '$Mcoating':
        if Parameters[1][0] == '$Mcoating':
          Parameters[1][1] = pval
          Pars[pnam] = float(pval)
        else:
          Quit("Reserved Parameter $Mcoating not found in Parameters[1]")
        #endif
        DictPcomments[pnam] = com
        continue
      #endif
      DictPcomments[pnam] = com
      Parameters.append([pnam,pval])
    #endif

  #endwhile iline < nlines - 1

  Npar = len(Parameters)

  NMagPol = len(MagPols)
  NspecMagPol = len(SpecMagPols)

  ugui_calc()

  imag = 0
  for imp in range(NMagPol):

    # MagPols.append([cname,mag,ispec,key,cen,vmat,siz,div])
    # MagPols.append([cname,mag,ispec,key,cen,vmat,sncorn,corns,div])

    imag += 1
+self,if=debugureadclc.
    #debug("debug ureadclc imag")
+self.
    mp = MagPols[imp]

    cname = mp[0]
    DictMagPolsTot[cname[0]] = imp

    #vmat = [bc,xm,ym,zm,mat,col]

    vmat = mp[5]
    mat = vmat[4]

    if mat[0] == '$':
      mat = int(Variables[mat])
    #endif mat[0] == '$'

    tmat = Materials[int(mat)-1][1]

+self,if=debugureadclc.
    print("tmat:",tmat)
+self.

    if tmat == 'REC':
      mp[1] = 'REC'
      Magnets.append(cname)
    elif tmat == 'Iron':
      mp[1] = 'Iron'
      Pols.append(cname)
    #endif

    MagPolsTot.append(mp)

  #endfor imp in range(NMagPol)

  ispec = 0

  for imp in range(NspecMagPol):

    # MagPols.append([cname,mag,ispec,key,cen,vmat,siz,div])
    # MagPols.append([cname,mag,ispec,key,cen,vmat,sncorn,corns,div])

    imag += 1
    ispec += 1
    mp = SpecMagPols[imp]

    cname = mp[0]
    DictMagPolsTot[cname[0]] = NMagPol + imp

    #vmat = [bc,xm,ym,zm,mat,col]

    vmat = mp[5]
    mat = vmat[4]
    if mat[0] == '$':
      mat = Variables[mat]
    #endif mat[0] == '$'
+self,if=debugureadclc.
    print("mat:",mat)
+self.
    if int(mat) < 1 or int(mat) > Nmat:
+self,if=debugureadclc.
      debug()
+self.
      print("*** Error in ureadclc: Bad Material index for",mp[0])
      Quit()
    #endif

    tmat = Materials[int(mat)-1][1]

+self,if=debugureadclc.
    print("tmat:",tmat)
+self.

    if tmat == 'REC':
      mp[1] = 'REC'
      SpecMags.append(cname)
    elif tmat == 'Iron':
      mp[1] = 'Iron'
      SpecPols.append(cname)
    #endif

    MagPolsTot.append(mp)

  #endfor imp in range(NSpecMagPol)

  Nmag = len(Magnets)
  Npol = len(Pols)

  NspecMag = len(SpecMags)
  NspecPol = len(SpecPols)

  NMagPolTot = len(MagPolsTot)

+self,if=DEBUGUREADCLC.
  if callkey == 'clWhyrid':
    print('*******************************************')
    print(Nmag,Npol)
    print(NspecMag,NspecPol)
    for m in range(NMagPolTot):
      mp = MagPolsTot[m]
      cnam = mp[0][0]
      cmoth = mp[0][1]
      typ = mp[3]
      print(cnam,cmoth)
    #endif
    print('*******************************************')
    print("DictMoths",DictMoths)
    print("Moths",Moths)
  #endif
  debug("debug: ureadclc 1")
+self.
  for m in range(NMagPolTot):

    mp = MagPolsTot[m]
    cnam = mp[0][0]
    cmoth = mp[0][1]
    typ = mp[3]

    if cmoth in DictMoths:
      moth = DictMoths[cmoth]
      Moths[moth-1].append(cnam)
    else:
      Nmoth += 1
      Moths.append([])
      Moths[Nmoth-1].append(cnam)
      DictMoths[cmoth] = Nmoth - 1
    #endif cmoth in DictMothHulls

    cen = mp[4]

    xcen = cen[0]
    ycen = cen[1]
    zcen = cen[2]

    xcen = calc_var(xcen)
    ycen = calc_var(ycen)
    zcen = calc_var(zcen)

+self,if=debugrspec.
    print("debugrspec:",m,NL,mp)
+self.
    if typ.upper().find('BLOCK') > -1:
      corns = blockcorners(mp)
    elif typ.upper() == 'CYL':
      Quit("Cyl hier einfügen")
    elif typ.upper() == 'CORNERS':
      corns = mp[7]
    elif typ.upper() == 'FILE':
      corns = []
      for ic in range(len(mp[7])):
        c1 = calc_var(mp[7][ic][0])
        c2 = calc_var(mp[7][ic][1])
        c3 = calc_var(mp[7][ic][2])
        corns.append([c1,c2,c3])
      #endfor ic in range(len(corns))
    else:
      print("*** Bad key " + typ + " in ureadclc ***")
    #endif typ == 'Block'

    xmin = 1.e30
    xmax = -1.e30
    ymin = 1.e30
    ymax = -1.e30
    zmin = 1.e30
    zmax = -1.e30

    for corn in corns:
      x = corn[0] + xcen
      y = corn[1] + ycen
      z = corn[2] + zcen
      if x < xmin: xmin = x
      if x > xmax: xmax = x
      if y < ymin: ymin = y
      if y > ymax: ymax = y
      if z < zmin: zmin = z
      if z > zmax: zmax = z
    #endfor corn in corns

    x = (xmin+xmax)/2.
    y = (ymin+ymax)/2.
    z = (zmin+zmax)/2.

    MagPolsTot[m].append([x,y,z])

    hull = hull3d(corns)
    hull.columns = ['ipoi','iplan','xr','yr','zr']

    hull['x'] = hull.xr+xcen
    hull['y'] = hull.yr+ycen
    hull['z'] = hull.zr+zcen

    Hulls.append(hull)

  #endfor m in range(NMagPolTot)

+self,if=DEBUGUREADCLC.
  for mp in MagPolsTot: print(NL,mp)
  debug("debug: ureadclc 2")
+self.
  if NMagPolTot:

    # sort mothers by x

    moli = []

    xmins = 1.e30
    xmaxs = -1.e30
    ymins = 1.e30
    ymaxs = -1.e30
    zmins = 1.e30
    zmaxs = -1.e30

    ispec = 0

    for mo in range(len(Moths)):

      moth = Moths[mo]

      xmin = 1.e30
      xmax = -1.e30
      ymin = 1.e30
      ymax = -1.e30
      zmin = 1.e30
      zmax = -1.e30

      for mmag in moth:
        mag = DictMagPolsTot[mmag]
        xmn = Hulls[mag].x.min()
        xmx = Hulls[mag].x.max()
        if xmn < xmin: xmin = xmn
        if xmx > xmax: xmax = xmx
        ymn = Hulls[mag].y.min()
        ymx = Hulls[mag].y.max()
        if ymn < ymin: ymin = ymn
        if ymx > ymax: ymax = ymx
        zmn = Hulls[mag].z.min()
        zmx = Hulls[mag].z.max()
        if zmn < zmin: zmin = zmn
        if zmx > zmax: zmax = zmx
        if MagPolsTot[mag][2] == 1:
          if xmn < xmins: xmins = xmn
          if xmx > xmaxs: xmaxs = xmx
          if ymn < ymins: ymins = ymn
          if ymx > ymaxs: ymaxs = ymx
          if zmn < zmins: zmins = zmn
          if zmx > zmaxs: zmaxs = zmx
          ispec = 1
        #endif MagPolsTot[mag][2] == 'yes'
      #endfor mag in moth
      moli.append([mo,
                   xmin,xmax,(xmin+xmax)/2.,
                   ymin,ymax,(ymin+ymax)/2.,
                   zmin,zmax,(zmin+zmax)/2.])
    #endfor mo in range(len(Moths))

+self,if=DEBUGUREADCLC.
    debug("debug: ureadclc 3")
+self.
    MothsXYZ = pd.DataFrame(moli)
    MothsXYZ.columns = ['imoth',
                        'xmin','xmax','x',
                        'ymin','ymax','y',
                        'zmin','zmax','z']
    MothsXYZ = MothsXYZ.sort_values(by=['x','y','z']).reset_index()

    if not ispec:
      xmins = MothsXYZ.xmin.min()
      xmaxs = MothsXYZ.xmax.max()
      ymins = MothsXYZ.ymin.min()
      ymaxs = MothsXYZ.ymax.max()
      zmins = MothsXYZ.zmin.min()
      zmaxs = MothsXYZ.zmax.max()
    #endif not ispec

    SpecXYZ = [xmins,xmaxs,ymins,ymaxs,zmins,zmaxs]

    mocop = deepcopy(Moths)
    Moths = []

    for mo in range(len(mocop)):
      Moths.append(mocop[MothsXYZ.imoth[mo]])
    #endfor mo in range(len(mocop))

    # sort by mothers

    mpcop = MagPolsTot
    MagPolsTot = []
    MagPolsSelected = []

    for mo in range(len(Moths)):
      moth = Moths[mo]
      for mag in moth:
        MyMoth[mag] = mo
        mag = DictMagPolsTot[mag]
        MagPolsTot.append(mpcop[mag])
      #endfor mag in moth
    #endfor mo in range(len(Moths))

  #endif NMagPolTot

+self,if=DEBUGUREADCLC.
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
  debug("debug: ureadclc 4")
+self.

  for imp in range(NMagPolTot):
    cnam = MagPolsTot[imp][0][0]
    DictMagPolsTot[cnam] = imp
  #endfor mo in range(len(Moths))

  NCalc = len(Calcs)
  DictCalcs = {}
  for ic in range(NCalc):
    cnam = Calcs[ic][0]
    DictCalcs[cnam] = [ic,Calcs[ic][1]]
  #endfor mo in range(len(Moths))

  if Nmag + Npol + NspecMag + NspecPol != NMagPolTot:
    Quit("*** Error in ureadclc: Bad sum of magnets and poles ***")
  #endif Nmag + Npol + NspecMag + NspecPol != NMagPolTot

  NCoil = len(Coils)
  if NCoil: undu_coils_to_filaments()

  #if len(TransRotCop): utransrotcop()
  if len(TransRotCop): checktransrotcop()

  #debug("debug: Ende von ureadclc")

#enddef ureadclc()

+KEEP,mgeometry,T=PYTHON.
*CMZ :          15/07/2023  16.10.44  by  Michael Scheer
*CMZ :  2.03/00 01/09/2022  10.11.28  by  Michael Scheer
*CMZ :  2.02/02 04/03/2022  08.58.13  by  Michael Scheer
*CMZ :  2.02/01 30/04/2021  08.25.40  by  Michael Scheer
*CMZ :  2.02/00 27/03/2021  13.54.39  by  Michael Scheer
*-- Author :    Michael Scheer   13/10/2020

# +KEEP,mgeometry,T=PYTHON.

def framelabentry(win,text,var,stvar,font,widlab,wident):
  stvar.set(var)
  f = Frame(win)
  l = Label(f,text=text,font=font, width=widlab)
  l.pack(side=LEFT)
  e = Entry(f,text=stvar,width=wident,justify=CENTER,font=font)
  e.pack(side=LEFT)
  f.pack(fill='x')
#enddef framelabentry():

def framelabentrycomment(win,text,var,stvar,com,stcom,font,widlab,wident,widcom):
  stvar.set(var)
  stcom.set(com)
  f = Frame(win)
  l = Label(f,text=text,font=font, width=widlab)
  l.pack(side=LEFT)
  e = Entry(f,text=stvar,width=wident,justify=CENTER,font=font)
  e.pack(side=LEFT)
  c = Entry(f,text=stcom,width=widcom,justify=CENTER,font=font)
  c.pack(side=LEFT)
  f.pack(fill='x')
  return l,e,c
#enddef framelabentry():

+seq,showgeo.

+seq,hybridvars.

def _GetMirror(key=''):
+seq,uguiglobind.
+seq,hybridvarsind.

  if key == 'menu' and fexist("mirror.lst"):
    print(NL,"--- Initializing quasi infinite undulator, reading default values from mirror.lst ---")
    Mirror = {}
    flst = open("mirror.lst","r")
    lines =  flst.readlines()
    flst.close()
    for line in lines:
      mir = line.strip().split()
      print(mir)
      Mirror[mir[0]] = mir[1]
    #endfor
    return
  #endif

  Mirror["PerLen_Mirror"] = _EntryVarGet(S_PerLen_Mirror)
  Mirror["FullGap_Mirror"] = _EntryVarGet(S_FullGap_Mirror)

  Mirror["Br_Mirror"] = _EntryVarGet(S_Br_Mirror)
  Mirror["mu_Mirror"] = _EntryVarGet(S_mu_Mirror)
  Mirror["KsiPerp_Mirror"] = _EntryVarGet(S_KsiPerp_Mirror)

  Mirror["LyMag_Mirror"] = _EntryVarGet(S_LyMag_Mirror)
  Mirror["LzMagFull_Mirror"] = _EntryVarGet(S_LzMagFull_Mirror)
  Mirror["ChamfMag_Mirror"] = _EntryVarGet(S_ChamfMag_Mirror)

  Mirror["Mcoating_Mirror"] = _EntryVarGet(S_Mcoating_Mirror)

  Mirror["nDivX_Mag_Mirror"] = _EntryVarGet(S_nDivX_Mag_Mirror)
  Mirror["nDivY_Mag_Mirror"] = _EntryVarGet(S_nDivY_Mag_Mirror)
  Mirror["nDivZ_MagHalf_Mirror"] = _EntryVarGet(S_nDivZ_MagHalf_Mirror)
  Mirror["FracDivY_Mag_Mirror"] = _EntryVarGet(S_FracDivY_Mag_Mirror)
  Mirror["FracDivZ_Mag_Mirror"] = _EntryVarGet(S_FracDivZ_Mag_Mirror)

  Mirror["MatPol_Mirror"] = _EntryVarGet(S_MatPol_Mirror)

  Mirror["LxPol_Mirror"] = _EntryVarGet(S_LxPol_Mirror)
  Mirror["LyPol_Mirror"] = _EntryVarGet(S_LyPol_Mirror)
  Mirror["LzPolFull_Mirror"] = _EntryVarGet(S_LzPolFull_Mirror)
  Mirror["ChamfPol_Mirror"] = _EntryVarGet(S_ChamfPol_Mirror)

  Mirror["nDivX_Pol_Mirror"] = _EntryVarGet(S_nDivX_Pol_Mirror)
  Mirror["nDivY_Pol_Mirror"] = _EntryVarGet(S_nDivY_Pol_Mirror)
  Mirror["nDivZ_PolHalf_Mirror"] = _EntryVarGet(S_nDivZ_PolHalf_Mirror)
  Mirror["FracDivY_Pol_Mirror"] = _EntryVarGet(S_FracDivY_Pol_Mirror)
  Mirror["FracDivZ_Pol_Mirror"] = _EntryVarGet(S_FracDivZ_Pol_Mirror)
  Mirror["Space_Mag_Pol_Mirror"] = _EntryVarGet(S_Space_Mag_Pol_Mirror)

  Mirror["LxMirror"] = _EntryVarGet(S_LxMirror)
  Mirror["LyMirror"] = _EntryVarGet(S_LyMirror)
  Mirror["LzMirror"] = _EntryVarGet(S_LzMirror)

  Mirror["nMirDivX"] = _EntryVarGet(S_nMirDivX)
  Mirror["nMirDivY"] = _EntryVarGet(S_nMirDivY)
  Mirror["nMirDivZ"] = _EntryVarGet(S_nMirDivZ)

  Mirror["FracDivMirY"] = _EntryVarGet(S_FracDivMirY)
  Mirror["FracDivMirZ"] = _EntryVarGet(S_FracDivMirZ)

  Mirror["Mat_Mirror"] = _EntryVarGet(S_Mat_Mirror)

  if int(Mirror["RECIndex_Mirror"])  < 0:
    Nmat += 1
    Mirror["RECIndex_Mirror"] = Nmat
    Materials.append([str(Nmat),"1","1","undugui_Hybrid_mu.dat", \
    [str(Mirror["mu_Mirror"]) + " " + str(Mirror["KsiPerp_Mirror"]) + "! mu_Par and ksi_Perp_Mirror"]])
  #endif

  if int(Mirror["IronIndex_Hybrid"]) < 0:
    Nmat += 1
    Mirror["IronIndex_Hybrid"] = Nmat
    Materials.append([str(Nmat),"2","3",Mirror["MatPol_Mirror"],""])
  #endif

  Mirror["Mat_Mirror"] = _EntryVarGet(S_Mat_Mirror)

  if int(Mirror["IronIndex_Mirror"]) < 0:
    Nmat += 1
    Mirror["IronIndex_Mirror"] = Nmat
    Materials.append([str(Nmat),"2","0",Mirror["Mat_Mirror"],""])
    #print("MatMir:",Nmat,Materials[len(Materials)-1])
  #endif

  Fsav = open("mirror.lst","w")
  for par in Mirror: Fsav.write(par + " " + str(Mirror[par]) + "\n" )
  Fsav.close()

#enddef _GetMirror()

def _GetHybrid():
+seq,uguiglobind.
+seq,hybridvarsind.

  Hybrid["nPeriods_Hybrid"] = _EntryVarGet(S_nPer_Hybrid)
  Hybrid["PerLen_Hybrid"] = _EntryVarGet(S_PerLen_Hybrid)
  Hybrid["FullGap_Hybrid"] = _EntryVarGet(S_FullGap_Hybrid)

  Hybrid["Br_Hybrid"] = _EntryVarGet(S_Br_Hybrid)
  Hybrid["mu_Hybrid"] = _EntryVarGet(S_mu_Hybrid)
  Hybrid["KsiPerp_Hybrid"] = _EntryVarGet(S_KsiPerp_Hybrid)

  #Hybrid["LxMag_Hybrid"] = _EntryVarGet(S_LxMag_Hybrid)
  Hybrid["LyMag_Hybrid"] = _EntryVarGet(S_LyMag_Hybrid)
  Hybrid["LzMagFull_Hybrid"] = _EntryVarGet(S_LzMagFull_Hybrid)
  Hybrid["ChamfMag_Hybrid"] = _EntryVarGet(S_ChamfMag_Hybrid)

  Hybrid["Mcoating_Hybrid"] = _EntryVarGet(S_Mcoating_Hybrid)

  Hybrid["nDivX_Mag_Hybrid"] = _EntryVarGet(S_nDivX_Mag_Hybrid)
  Hybrid["nDivY_Mag_Hybrid"] = _EntryVarGet(S_nDivY_Mag_Hybrid)
  Hybrid["nDivZ_MagHalf_Hybrid"] = _EntryVarGet(S_nDivZ_MagHalf_Hybrid)
  Hybrid["FracDivY_Mag_Hybrid"] = _EntryVarGet(S_FracDivY_Mag_Hybrid)
  Hybrid["FracDivZ_Mag_Hybrid"] = _EntryVarGet(S_FracDivZ_Mag_Hybrid)

  Hybrid["Space_Mag_Pol_Hybrid"] = _EntryVarGet(S_Space_Mag_Pol_Hybrid)

  Hybrid["MatPol_Hybrid"] = _EntryVarGet(S_MatPol_Hybrid)

  Hybrid["LxPol_Hybrid"] = _EntryVarGet(S_LxPol_Hybrid)
  Hybrid["LyPol_Hybrid"] = _EntryVarGet(S_LyPol_Hybrid)
  Hybrid["LzPolFull_Hybrid"] = _EntryVarGet(S_LzPolFull_Hybrid)
  Hybrid["ChamfPol_Hybrid"] = _EntryVarGet(S_ChamfPol_Hybrid)
  Hybrid["OffPol_Hybrid"] = _EntryVarGet(S_OffPol_Hybrid)

  Hybrid["nDivX_Pol_Hybrid"] = _EntryVarGet(S_nDivX_Pol_Hybrid)
  Hybrid["nDivY_Pol_Hybrid"] = _EntryVarGet(S_nDivY_Pol_Hybrid)
  Hybrid["nDivZ_PolHalf_Hybrid"] = _EntryVarGet(S_nDivZ_PolHalf_Hybrid)
  Hybrid["FracDivY_Pol_Hybrid"] = _EntryVarGet(S_FracDivY_Pol_Hybrid)
  Hybrid["FracDivZ_Pol_Hybrid"] = _EntryVarGet(S_FracDivZ_Pol_Hybrid)
  Hybrid["Space_Pol_Mag_Hybrid"] = _EntryVarGet(S_Space_Pol_Mag_Hybrid)

  if Hybrid["RECIndex_Hybrid"]  < 0:
    Nmat += 1
    Hybrid["RECIndex_Hybrid"] = Nmat
    Materials.append([str(Nmat),"1","1","undugui_Hybrid_mu.dat", \
    [str(Hybrid["mu_Hybrid"]) + " " + str(Hybrid["KsiPerp_Hybrid"]) + "! mu_Par and ksi_Perp_Hybrid"]])
  #endif

  if Hybrid["IronIndex_Hybrid"] < 0:
    Nmat += 1
    Hybrid["IronIndex_Hybrid"] = Nmat
    Materials.append([str(Nmat),"2","3",Hybrid["MatPol_Hybrid"],""])
  #endif

#enddef _GetHybrid()

def _clWsetMirror():
  global WsetMirror

  _GetMirror("clWset")

  MustWriteCLC = 1

  WsetMirror.destroy()
#enddef _clsetmirror()

def _clWmirror():

  global Hybrid_Mode,Wmirror, FileCLCO, FileCLC, Mirror

  _GetMirror('clWmirror')
  Hybrid_Mode = 2

  uwritenam('clWmirror')
  uwriteclc('_clWmirror')

  MustWriteCLC = 0

  ureadclc('clWmirror')
  _showGeoPython(callkey='clWmirror')

  FileCLCO = FileCLC

#  _showGeoPython()

#  FileCLCO = FileCLC

  Wmirror.destroy()
#enddef _clmirror()

def _clWhybrid():
  global Hybrid_Mode,Whybrid, FileCLCO, FileCLC

  _GetHybrid()
  Hybrid_Mode = 1

  uwritenam('_clWhybrid')
  uwriteclc('_clWhybrid')

  MustWriteCLC = 0

  ureadclc('clWhyrid')
+self,if=trace.
  global NMagPolTot,MagPolsTot
  print("\ntrace:: List of magnets in _clWhybrid")
  imp = 0
  for mp in MagPolsTot:
    imp += 1
    print(imp,mp[0:4])
  #endfor
+self.

  _showGeoPython(callkey='clWhybrid')

  FileCLCO = FileCLC

  Whybrid.destroy()
#enddef _clhybrid()

def _cnWhyEnd():
  global WhyEnd
  WhyEnd.destroy()
#enddef _cnhybrid()

def GetHybridEnd():
+seq,uguiglobind.
+seq,hybridvarsind.

  Hybrid["LyEndMag1_Hybrid"] = _EntryVarGet(S_LyEndMag1_Hybrid)
  Hybrid["SpaceEndMag1_Hybrid"] = _EntryVarGet(S_SpaceEndMag1_Hybrid)
  Hybrid["OffEndMag1_Hybrid"] = _EntryVarGet(S_OffEndMag1_Hybrid)

  Hybrid["LyEndMag2_Hybrid"] = _EntryVarGet(S_LyEndMag2_Hybrid)
  Hybrid["SpaceEndMag2_Hybrid"] = _EntryVarGet(S_SpaceEndMag2_Hybrid)
  Hybrid["OffEndMag2_Hybrid"] = _EntryVarGet(S_OffEndMag2_Hybrid)

  Hybrid["LyEndMag3_Hybrid"] = _EntryVarGet(S_LyEndMag3_Hybrid)
  Hybrid["SpaceEndMag3_Hybrid"] = _EntryVarGet(S_SpaceEndMag3_Hybrid)
  Hybrid["OffEndMag3_Hybrid"] = _EntryVarGet(S_OffEndMag3_Hybrid)

  Hybrid["LyEndPol1_Hybrid"] = _EntryVarGet(S_LyEndPol1_Hybrid)
  Hybrid["SpaceEndPol1_Hybrid"] = _EntryVarGet(S_SpaceEndPol1_Hybrid)
  Hybrid["OffEndPol1_Hybrid"] = _EntryVarGet(S_OffEndPol1_Hybrid)

  Hybrid["LyEndPol2_Hybrid"] = _EntryVarGet(S_LyEndPol2_Hybrid)
  Hybrid["SpaceEndPol2_Hybrid"] = _EntryVarGet(S_SpaceEndPol2_Hybrid)
  Hybrid["OffEndPol2_Hybrid"] = _EntryVarGet(S_OffEndPol2_Hybrid)

#enddef GetHybridEnd()

def _clWhyEnd():
  global WhyEnd
  GetHybridEnd()
  WhyEnd.destroy()
#enddef _clhybrid()

def _cnWhybrid():
  global Whybrid
  Whybrid.destroy()
#enddef _cnhybrid()

def _setMirror():

  global WsetMirror, Mirror

  WsetMirror = Toplevel()
  WsetMirror.title("Mirror Plate")
  WsetMirror.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  #_GetMirror('menu')

  framelabentry(WsetMirror,'length of mirror',Mirror["LxMirror"],S_LxMirror,MyFont,widlab,wident)
  framelabentry(WsetMirror,'height of mirror',Mirror["LyMirror"],S_LyMirror,MyFont,widlab,wident)
  framelabentry(WsetMirror,'width of mirror',Mirror["LzMirror"],S_LzMirror,MyFont,widlab,wident)

  framelabentry(WsetMirror,'number of segments in x',Mirror["nMirDivX"],S_nMirDivX,MyFont,widlab,wident)
  framelabentry(WsetMirror,'number of segments in y',Mirror["nMirDivY"],S_nMirDivY,MyFont,widlab,wident)
  framelabentry(WsetMirror,'number of segments in z',Mirror["nMirDivZ"],S_nMirDivZ,MyFont,widlab,wident)
  framelabentry(WsetMirror,'fraction of  y-seg.',Mirror["FracDivMirY"],S_FracDivMirY,MyFont,widlab,wident)
  framelabentry(WsetMirror,'fraction of  z-seg.',Mirror["FracDivMirZ"],S_FracDivMirZ,MyFont,widlab,wident)

  framelabentry(WsetMirror,'MH-Curve',Mirror["Mat_Mirror"],S_Mat_Mirror,MyFont,widlab,wident)

  fbot = Frame(WsetMirror)

  bCancel = Button(fbot,text='Cancel',command=_cnWsetMirror)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)

  bClose = Button(fbot,text='Ok',command=_clWsetMirror)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)

  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WsetMirror.geometry(sgeo)

  Umaster.wait_window(WsetMirror)

#enddef

def _cnWsetMirror():
  global WsetMirror
  WsetMirror.destroy()
#enddef

def _cnWmirror():
  global Wmirror
  Wmirror.destroy()
#enddef _cnhybrid()

def _EndPoles_Whybrid():
+seq,uguiglobind.
+seq,hybridvarsind.

  WhyEnd = Toplevel()
  WhyEnd.title("Endpoles of Hybrid Undulator")
  WhyEnd.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  framelabentry(WhyEnd,'Height of 1st endmagnet',Hybrid["LyEndMag1_Hybrid"],S_LyEndMag1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 1st endmagnet',Hybrid["OffEndMag1_Hybrid"],S_OffEndMag1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 1st endmagnet',Hybrid["SpaceEndMag1_Hybrid"],S_SpaceEndMag1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Height of 1st endpole',Hybrid["LyEndPol1_Hybrid"],S_LyEndPol1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 1st endpole',Hybrid["OffEndPol1_Hybrid"],S_OffEndPol1_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 1st endpole',Hybrid["SpaceEndPol1_Hybrid"],S_SpaceEndPol1_Hybrid,MyFont,widlab,wident)

  framelabentry(WhyEnd,'Height of 2nd endmagnet',Hybrid["LyEndMag2_Hybrid"],S_LyEndMag2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 2nd endmagnet',Hybrid["OffEndMag2_Hybrid"],S_OffEndMag2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 2nd endmagnet',Hybrid["SpaceEndMag2_Hybrid"],S_SpaceEndMag2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Height of 2nd endpole',Hybrid["LyEndPol2_Hybrid"],S_LyEndPol2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 2nd endpole',Hybrid["OffEndPol2_Hybrid"],S_OffEndPol2_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 2nd endpole',Hybrid["SpaceEndPol2_Hybrid"],S_SpaceEndPol2_Hybrid,MyFont,widlab,wident)

  framelabentry(WhyEnd,'Height of 3rd endmagnet',Hybrid["LyEndMag3_Hybrid"],S_LyEndMag3_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Vert. offset of 3rd endmagnet',Hybrid["OffEndMag3_Hybrid"],S_OffEndMag3_Hybrid,MyFont,widlab,wident)
  framelabentry(WhyEnd,'Spacer of 3rd endmagnet',Hybrid["SpaceEndMag3_Hybrid"],S_SpaceEndMag3_Hybrid,MyFont,widlab,wident)

  fbot = Frame(WhyEnd)
  bCancel = Button(fbot,text='Cancel',command=_cnWhyEnd)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)
  bClose = Button(fbot,text='Ok',command=_clWhyEnd)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)
  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x-200) + '+' + str(y-500)
  WhyEnd.geometry(sgeo)

  Umaster.wait_window(WhyEnd)

#enddef _EndPoles_Whybrid()

def _mirror():

+seq,uguiglobind.
+seq,hybridvarsind.

  undugui_clean('mirror')
  ugui_ini_mirror('mirror')

  Wmirror = Toplevel()
  Wmirror.title("Infinite Hybrid Undulator")
  Wmirror.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  framelabentry(Wmirror,'period-length',Mirror["PerLen_Mirror"],S_PerLen_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'full gap',Mirror["FullGap_Mirror"],S_FullGap_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'remanence',Mirror["Br_Mirror"],S_Br_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'mu linear',Mirror["mu_Mirror"],S_mu_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'ksi perpendicular',Mirror["KsiPerp_Mirror"],S_KsiPerp_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'height of magnets',Mirror["LyMag_Mirror"],S_LyMag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'width of magnets',Mirror["LzMagFull_Mirror"],S_LzMagFull_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'chamfer of magnets',Mirror["ChamfMag_Mirror"],S_ChamfMag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'Coating',Mirror["Mcoating_Mirror"],S_Mcoating_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'x-segmentation of magnets',Mirror["nDivX_Mag_Mirror"],S_nDivX_Mag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'y-segmentation of magnets',Mirror["nDivY_Mag_Mirror"],S_nDivY_Mag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'z-segmentation of magnets',Mirror["nDivZ_MagHalf_Mirror"],S_nDivZ_MagHalf_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  y-seg. of magnets',Mirror["FracDivY_Mag_Mirror"],S_FracDivY_Mag_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  z-seg. of magnets',Mirror["FracDivZ_Mag_Mirror"],S_FracDivZ_Mag_Mirror,MyFont,widlab,wident)
  #framelabentry(Wmirror,'spacer  magnet to pole',Mirror["Space_Mag_Pol_Mirror"],S_Space_Mag_Pol_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'MH-curve of poles',Mirror["MatPol_Mirror"],S_MatPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'length of poles',Mirror["LxPol_Mirror"],S_LxPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'width of poles',Mirror["LzPolFull_Mirror"],S_LzPolFull_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'height of poles',Mirror["LyPol_Mirror"],S_LyPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'chamfer of poles',Mirror["ChamfPol_Mirror"],S_ChamfPol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'x-segmentation of poles',Mirror["nDivX_Pol_Mirror"],S_nDivX_Pol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'y-segmentation of poles',Mirror["nDivY_Pol_Mirror"],S_nDivY_Pol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'z-segmentation of poles',Mirror["nDivZ_PolHalf_Mirror"],S_nDivZ_PolHalf_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  y-seg. of poles',Mirror["FracDivY_Pol_Mirror"],S_FracDivY_Pol_Mirror,MyFont,widlab,wident)
  framelabentry(Wmirror,'fraction of  z-seg. of poles',Mirror["FracDivZ_Pol_Mirror"],S_FracDivZ_Pol_Mirror,MyFont,widlab,wident)

  framelabentry(Wmirror,'spacer between pole and mag.',Mirror["Space_Mag_Pol_Mirror"],S_Space_Mag_Pol_Mirror,MyFont,widlab,wident)

  fbot = Frame(Wmirror)

  bCancel = Button(fbot,text='Cancel',command=_cnWmirror)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)

  bMirror = Button(fbot,text='Mirror',command=_setMirror)
  bMirror.pack(side=LEFT,expand=TRUE,fill=X)

  bClose = Button(fbot,text='Ok',command=_clWmirror)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)

  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  Wmirror.geometry(sgeo)

  Umaster.wait_window(Wmirror)
#enddef _mirror()

def _hybrid():

+seq,uguiglobind.
+seq,hybridvarsind.

  undugui_clean('hybrid')
  ugui_ini_hybrid()

  Whybrid = Toplevel()
  Whybrid.title("Hybrid Undulator")
  Whybrid.attributes('-topmost', 1)

  widlab = 25
  wident = 30

  framelabentry(Whybrid,'number of periods',Hybrid["nPeriods_Hybrid"],S_nPer_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'period-length',Hybrid["PerLen_Hybrid"],S_PerLen_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'full gap',Hybrid["FullGap_Hybrid"],S_FullGap_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'remanence',Hybrid["Br_Hybrid"],S_Br_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'mu linear',Hybrid["mu_Hybrid"],S_mu_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'ksi perpendicular',Hybrid["KsiPerp_Hybrid"],S_KsiPerp_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'height of magnets',Hybrid["LyMag_Hybrid"],S_LyMag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'width of magnets',Hybrid["LzMagFull_Hybrid"],S_LzMagFull_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'chamfer of magnets',Hybrid["ChamfMag_Hybrid"],S_ChamfMag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'Coating',Hybrid["Mcoating_Hybrid"],S_Mcoating_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'x-segmentation of magnets',Hybrid["nDivX_Mag_Hybrid"],S_nDivX_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'y-segmentation of magnets',Hybrid["nDivY_Mag_Hybrid"],S_nDivY_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'z-segmentation of magnets',Hybrid["nDivZ_MagHalf_Hybrid"],S_nDivZ_MagHalf_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  y-seg. of magnets',Hybrid["FracDivY_Mag_Hybrid"],S_FracDivY_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  z-seg. of magnets',Hybrid["FracDivZ_Mag_Hybrid"],S_FracDivZ_Mag_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'spacer from magnet to pole',Hybrid["Space_Mag_Pol_Hybrid"],S_Space_Mag_Pol_Hybrid,MyFont,widlab,wident)

  framelabentry(Whybrid,'MH-curve of poles',Hybrid["MatPol_Hybrid"],S_MatPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'length of poles',Hybrid["LxPol_Hybrid"],S_LxPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'width of poles',Hybrid["LzPolFull_Hybrid"],S_LzPolFull_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'height of poles',Hybrid["LyPol_Hybrid"],S_LyPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'vert. offset of poles',Hybrid["OffPol_Hybrid"],S_OffPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'chamfer of poles',Hybrid["ChamfPol_Hybrid"],S_ChamfPol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'x-segmentation of poles',Hybrid["nDivX_Pol_Hybrid"],S_nDivX_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'y-segmentation of poles',Hybrid["nDivY_Pol_Hybrid"],S_nDivY_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'z-segmentation of poles',Hybrid["nDivZ_PolHalf_Hybrid"],S_nDivZ_PolHalf_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  y-seg. of poles',Hybrid["FracDivY_Pol_Hybrid"],S_FracDivY_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'fraction of  z-seg. of poles',Hybrid["FracDivZ_Pol_Hybrid"],S_FracDivZ_Pol_Hybrid,MyFont,widlab,wident)
  framelabentry(Whybrid,'spacer from pole to magnet',Hybrid["Space_Mag_Pol_Hybrid"],S_Space_Mag_Pol_Hybrid,MyFont,widlab,wident)

  fbot = Frame(Whybrid)
  bCancel = Button(fbot,text='Cancel',command=_cnWhybrid)
  bCancel.pack(side=LEFT,expand=TRUE,fill=X)
  bEndPol = Button(fbot,text='End poles',command=_EndPoles_Whybrid)
  bEndPol.pack(side=LEFT,expand=TRUE,fill=X)
  bClose = Button(fbot,text='Ok',command=_clWhybrid)
  bClose.pack(side=LEFT,expand=TRUE,fill=X)
  fbot.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  Whybrid.geometry(sgeo)

  Umaster.wait_window(Whybrid)

#enddef _hybrid()

def _updateMenu(menu):
+seq,uguiglobind.
  pass
#def _updateMenu(ev,menu)

def _enterMenu(ev,menu):
+seq,uguiglobind.
  ew = ev.widget
  key=ev.keysym
  _updateMenu(menu)
#def _enterMenu(ev,menu)

def _keypressMenu(ev,menu):
+seq,uguiglobind.
  ew = ev.widget
  key=ev.keysym
  _updateMenu(menu)
#def _keypressMenu(ev,menu)

def _leaveMenu(ev,menu):
+seq,uguiglobind.
  ew = ev.widget
  key=ev.keysym
  _updateMenu(menu)
#def _leaveMenu(ev,menu)

def _ccWfclc():
  global WFileCLC
  WFileCLC.destroy()
#enddef _ccWfclc()

def _clWfclc(key):
+seq,uguiglobind.

  FileCLC = S_FileCLC.get()
  Ucomment = S_Ucomment.get()

+self,if=debugread.
  ureadclc('debugread')
+self,if=debugread,if=debugshow.
  print("Nach Test von ureadclc!")
  _showGeo('3d')
+self,if=debugread.
  Quit("Ende nach Test!")
+self.

  if key == 'LoadCLC':

    ureadclc('clWfclc')

    try:

      MustUpdate = 1

      try:
        keyclc = Uclcorig[1].strip().split('!')[1].strip()
      except:
        keyclc = ""
      #endtry

      if keyclc == 'Obsolete AppleII':

        for a in AppleII:
          AppleII[a] = Pars[a]
          del Pars[a]
        #endfor a in AppleII

        Npar = len(Pars)

        fmat = Materials[0][3]
        AppleII["MatIndex"] = Materials[0]

        if os.path.exists(fmat):
          Fmat = open(fmat,"r")
          cline = Fmat.readline()
          words = cline.split()
          Fmat.close()
        else:
         print("Could not find " + fmat)
         return
        #endif os.path.exists(fmat)

        AppleII["Mu"] = eval(words[0])
        AppleII["KsiPerp"] = eval(words[1])

        S_nPer_AppleII.set(AppleII["nPeriods"])
        S_FullGap_AppleII.set(AppleII["FullGap"])

        S_Xlen_AppleII.set(AppleII["LxMag"])
        S_Ylen_AppleII.set(AppleII["LyMag"])
        S_Zlen_AppleII.set(AppleII["LzMag"])

        S_HorSlit_AppleII.set(AppleII["zSlit"])
        S_AirGap_AppleII.set(AppleII["AirGap"])
        S_DeadCoat_AppleII.set(Pars["$Mcoating"])

        S_S2Shift_AppleII.set(AppleII["S2Shift"])
        S_S3Shift_AppleII.set(AppleII["S3Shift"])

        S_Br_AppleII.set(AppleII["Br"])
        S_Mu_AppleII.set(AppleII["Mu"])
        S_KsiPerp_AppleII.set(AppleII["KsiPerp"])

        S_NdivX_AppleII.set(AppleII["nMagDivX"])
        S_NdivXHalf_AppleII.set(AppleII["nHalfMagDivX"])
        S_NdivY_AppleII.set(AppleII["nMagDivY"])
        S_NdivZ_AppleII.set(AppleII["nMagDivZ"])

        AppleIIOld = AppleII

      #endif keyclc == 'AppleII':

      WFileCLC.destroy()

      _showGeo('3d')

    except:

      if len(FileCLC) > 0:
        print("*** Reading of geometry file " + FileCLC + " failed ***")
      else:
        print("*** Reading of geometry file (e.g. undumag.clc) failed ***")
      #endif len(FileCLC) > 0

    #endtry: ureadclc(

  elif key == 'WriteCLC':

+self,if=debuguwriteclc.
    uwriteclc('debug')
    Quit("Debug: Ende nach uwriteclc")
+self.
    try:
      uwriteclc('_clWfclc')
      LastCLC = FileCLC
      MustUpdate = 0
      MustWriteCLC = 0
      WFileCLC.destroy()
    except:
      if len(FileCLC) > 0:
        print("*** Writing of geometry file " + FileCLC + " failed ***")
      else:
        print("*** Writing of geometry file (e.g. undumag.clc) failed ***")
    #endtry: ureadclc

  #endif key == 'LoadCLC':

#enddef _clWfclc()

S_FileCLC = StringVar()
S_FileCLC.set(FileCLC)
S_Ucomment = StringVar()

def _uclc(key):
+seq,uguiglobind.

  WFileCLC = Toplevel()
  WFileCLC.attributes('-topmost', 1)
  WFileCLC.title('Load Geometry')

  if key == 'WriteCLC':
    WFileCLC.title('Save Geometry')
    S_Ucomment.set(Ucomment)
    ffucom = Frame(WFileCLC)
    tfucom = 'User comment'
    lfucom = Label(ffucom,text=tfucom,font=MyFont)
    lfucom.pack(side=LEFT)
    efucom = Entry(ffucom,text=S_Ucomment,justify=CENTER,font=MyFont)
    efucom.pack(side=RIGHT)
    ffucom.pack(fill='x')
  #endif key == 'WriteCLC'

  if int(AppleII_Mode) > 0: FileCLC = "undumag.clc"
  S_FileCLC.set(FileCLC)

  ffclc = Frame(WFileCLC)
  tfclc = 'Filename'
  lfclc = Label(ffclc,text=tfclc,font=MyFont)
  lfclc.pack(side=LEFT)
  efclc = Entry(ffclc,text=S_FileCLC,justify=CENTER,font=MyFont)
  efclc.pack(side=RIGHT)
  ffclc.pack(fill='x')

  fcc = Frame(WFileCLC)
  fcc.pack(fill=X)

  bCancel = Button(fcc,text='Cancel',command=_ccWfclc)
  bCancel.bind('<Return>',lambda event, mode=key: _clWfclc(mode))
  bCancel.pack(expand=TRUE,side=LEFT,fill=X)

  bClose = Button(fcc,text='Ok',command= lambda mode=key:_clWfclc(mode))
  bClose.bind('<Return>',lambda event, mode=key: _clWfclc(mode))
  bClose.pack(expand=TRUE,side=LEFT,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WFileCLC.geometry(sgeo)

  WFileCLC.bind('<Enter>',lambda event, menu = key: _enterMenu(event,menu))
  WFileCLC.bind('<Leave>',lambda event, menu = key: _leaveMenu(event,menu))
  WFileCLC.bind('<KeyPress>',lambda event, menu = key: _keypressMenu(event,menu))

  Umaster.wait_window(WFileCLC)

#enddef _uclc()

def ugui_ini_mirror(mode=''):
+seq,uguiglobind.
+seq,hybridvarsind.

  if mode != 'force' and fexist("mirror.lst"):
    try:
      print(NL,"--- Initializing quasi infinite undulator, reading default values from mirror.lst ---")
      Mirror = {}
      flst = open("mirror.lst","r")
      lines =  flst.readlines()
      flst.close()
      for line in lines:
        mir = line.strip().split()
        Mirror[mir[0]] = mir[1]
      #endfor
      Mirror["IronIndex_Mirror"] = -1
      Mirror["RECIndex_Mirror"] = -1
      Mirror["IronIndex_Hybrid"] = -1
      print("--- Suceeded ---")
    except:
      Mirror = {}
      Mirror["IronIndex_Mirror"] = -1
      Mirror["RECIndex_Mirror"] = -1
      Mirror["IronIndex_Hybrid"] = -1
      print("--- Failed ---")
  #endif

  if len(Mirror)  <= 3 or mode == 'force':

    Mirror = {}

    Mirror["FullGap_Mirror"] = '5.5'
    Mirror["PerLen_Mirror"] = '17.'
    Mirror["LyMag_Mirror"] = '35.'
    Mirror["LzMagFull_Mirror"] = '50.'
    Mirror["LxPol_Mirror"] = '3.'
    Mirror["LyPol_Mirror"] = '30.'
    Mirror["LzPolFull_Mirror"] = '40.'
    Mirror["Mcoating_Mirror"] = '0.014'
    Mirror["ChamfPol_Mirror"] = '0.1'
    Mirror["ChamfMag_Mirror"] = '0.3'
    Mirror["Space_Mag_Pol_Mirror"] = '0.1'
    Mirror["Br_Mirror"] = '1.62'
    Mirror["mu_Mirror"] = '1.03'
    Mirror["KsiPerp_Mirror"] = '0.17'
    Mirror["Space_Pol_Mag_Mirror"] = '0.1'

    Mirror["RECIndex_Mirror"] = -1
    Mirror["IronIndex_Hybrid"] = -1
    Mirror["MatPol_Mirror"] = 'Vanadium_Permendur_Radia.dat'

    Mirror["nDivX_Mag_Mirror"] = '3'
    Mirror["nDivY_Mag_Mirror"] = '3'
    Mirror["nDivZ_MagHalf_Mirror"] = '3'
    Mirror["FracDivY_Mag_Mirror"] = '1.0'
    Mirror["FracDivZ_Mag_Mirror"] = '1.0'

    Mirror["nDivX_Pol_Mirror"] = '5'
    Mirror["nDivY_Pol_Mirror"] = '5'
    Mirror["nDivZ_PolHalf_Mirror"] = '7'
    Mirror["FracDivY_Pol_Mirror"] = '1.0'
    Mirror["FracDivZ_Pol_Mirror"] = '1.0'

    Mirror["LxMirror"] = '1.0'
    Mirror["LyMirror"] = '100.0'
    Mirror["LzMirror"] = '100.0'
    Mirror["Mat_Mirror"] = 'iron_muinf_sat-2.34.dat'
    Mirror["IronIndex_Mirror"] = -1
    Mirror["nMirDivX"] = '1'
    Mirror["nMirDivY"] = '51'
    Mirror["nMirDivZ"] = '51'
    Mirror["FracDivMirY"] = '1.0'
    Mirror["FracDivMirZ"] = '1.0'

  #endif len(Mirror)

  VMirror = {}

  VMirror['$LxPolHalf'] = '$LxPol_Mirror / 2.'
  VMirror['$LyPol'] = '$LyPol_Mirror'
  VMirror['$LzPolHalf'] = '$LzPolFull_Mirror / 2.'

  VMirror['$xPolHalf'] = '- $LxPolHalf / 2.'
  VMirror['$yPol'] = '- ( $LyPol_Mirror + $FullGap_Mirror ) / 2.'
  VMirror['$zPolHalf'] = '- $LzPolHalf / 2.'

  VMirror['$nDivX_PolHalf'] = 'int[ $nDivX_Pol_Mirror / 2. + 0.5 ]'

  VMirror['$LxMag'] = '$PerLen_Mirror / 2. - ( $LxPol_Mirror + 2.0 * $Space_Mag_Pol_Mirror)'
  VMirror['$LxMagHalf'] = '$LxMag / 2.'
  VMirror['$LzMagHalf'] = '$LzMagFull_Mirror / 2.'

  VMirror['$xMagHalf'] = '$xPolHalf - $LxPolHalf / 2. - $Space_Mag_Pol_Mirror - $LxMagHalf / 2.'
  VMirror['$yMag'] = '- ( $LyMag_Mirror + $FullGap_Mirror ) / 2.'
  VMirror['$zMagHalf'] = '- $LzMagHalf / 2.'

  VMirror['$nDivX_MagHalf'] = 'int[ $nDivX_Mag_Mirror / 2. + 0.5 ]'

  VMirror['$ColorMag'] = '$red'
  VMirror['$ColorPol'] = '$blue'
  VMirror['$ColorMir'] = '$cyan'

  VMirror['$LyMirrorHalf'] = '$LyMirror / 2.'
  VMirror['$LzMirrorHalf'] = '$LzMirror / 2.'

  VMirror['$eps'] = '1.23e-6'
  VMirror['$xMirror'] = '$xMagHalf - $LxMagHalf / 2. - $LxMirror / 2.'
  VMirror['$yMirrorHalf'] = '- $LyMirrorHalf / 2. - $eps'
  VMirror['$zMirrorHalf'] = '- $LzMirrorHalf / 2. - $eps'

  S_FullGap_Mirror = StringVar()
  S_LyMag_Mirror = StringVar()
  S_LzMagFull_Mirror = StringVar()
  S_PerLen_Mirror = StringVar()
  S_LxPol_Mirror = StringVar()
  S_LyPol_Mirror = StringVar()
  S_LzPolFull_Mirror = StringVar()
  S_MatPol_Mirror = StringVar()
  S_Mat_Mirror = StringVar()
  S_ChamfPol_Mirror = StringVar()
  S_ChamfMag_Mirror = StringVar()
  S_Space_Mag_Pol_Mirror = StringVar()
  S_Space_Pol_Mag_Mirror = StringVar()
  S_Mcoating_Mirror = StringVar()
  S_Br_Mirror = StringVar()
  S_mu_Mirror = StringVar()
  S_KsiPerp_Mirror = StringVar()

  S_LxMirror = StringVar()
  S_LyMirror = StringVar()
  S_LzMirror = StringVar()

  S_nMirDivX = StringVar()
  S_nMirDivY = StringVar()
  S_nMirDivZ = StringVar()
  S_FracDivMirY = StringVar()
  S_FracDivMirZ = StringVar()

  S_nDivX_Mag_Mirror = StringVar()
  S_nDivY_Mag_Mirror = StringVar()
  S_nDivZ_MagHalf_Mirror = StringVar()
  S_FracDivY_Mag_Mirror = StringVar()
  S_FracDivZ_Mag_Mirror = StringVar()

  S_nDivX_Pol_Mirror = StringVar()
  S_nDivY_Pol_Mirror = StringVar()
  S_nDivZ_PolHalf_Mirror = StringVar()
  S_FracDivY_Pol_Mirror = StringVar()
  S_FracDivZ_Pol_Mirror = StringVar()

  S_FullGap_Mirror.set(Mirror["FullGap_Mirror"])
  S_PerLen_Mirror.set(Mirror["PerLen_Mirror"])
  S_LyMag_Mirror.set(Mirror["LyMag_Mirror"])
  S_LzMagFull_Mirror.set(Mirror["LzMagFull_Mirror"])
  S_LxPol_Mirror.set(Mirror["LxPol_Mirror"])
  S_LyPol_Mirror.set(Mirror["LyPol_Mirror"])
  S_LzPolFull_Mirror.set(Mirror["LzPolFull_Mirror"])
  S_Mcoating_Mirror.set(Mirror["Mcoating_Mirror"])
  S_MatPol_Mirror.set("Vanadium_Permendur_Radia.dat")
  S_Mat_Mirror.set("iron_muinf_sat-2.34.dat")
  S_ChamfPol_Mirror.set(Mirror["ChamfPol_Mirror"])
  S_ChamfMag_Mirror.set(Mirror["ChamfMag_Mirror"])
  S_Space_Mag_Pol_Mirror.set(Mirror["Space_Mag_Pol_Mirror"])
  S_Space_Pol_Mag_Mirror.set(Mirror["Space_Pol_Mag_Mirror"])
  S_Br_Mirror.set(Mirror["Br_Mirror"])
  S_mu_Mirror.set(Mirror["mu_Mirror"])
  S_KsiPerp_Mirror.set(Mirror["KsiPerp_Mirror"])

  S_nDivX_Pol_Mirror.set(Mirror["nDivX_Pol_Mirror"])
  S_nDivY_Pol_Mirror.set(Mirror["nDivY_Pol_Mirror"])
  S_nDivZ_PolHalf_Mirror.set(Mirror["nDivZ_PolHalf_Mirror"])
  S_FracDivY_Pol_Mirror.set(Mirror["FracDivY_Pol_Mirror"])
  S_FracDivZ_Pol_Mirror.set(Mirror["FracDivZ_Pol_Mirror"])

  S_nDivX_Mag_Mirror.set(Mirror["nDivX_Mag_Mirror"])
  S_nDivY_Mag_Mirror.set(Mirror["nDivY_Mag_Mirror"])
  S_nDivZ_MagHalf_Mirror.set(Mirror["nDivZ_MagHalf_Mirror"])
  S_FracDivY_Mag_Mirror.set(Mirror["FracDivY_Mag_Mirror"])
  S_FracDivZ_Mag_Mirror.set(Mirror["FracDivZ_Mag_Mirror"])

  S_LxMirror.set(Mirror["LxMirror"])
  S_LyMirror.set(Mirror["LyMirror"])
  S_LzMirror.set(Mirror["LzMirror"])

  S_nMirDivX.set(Mirror["nMirDivX"])
  S_nMirDivY.set(Mirror["nMirDivY"])
  S_nMirDivZ.set(Mirror["nMirDivZ"])

  S_FracDivMirY.set(Mirror["FracDivMirY"])
  S_FracDivMirZ.set(Mirror["FracDivMirZ"])

  S_Mat_Mirror.set(Mirror["Mat_Mirror"])

  MirrorOld = Mirror

#enddef ugui_ini_mirror()

def ugui_ini_hybrid(mode=''):
+seq,uguiglobind.
+seq,hybridvarsind.

  if mode != 'force' and fexist("hybrid.lst"):
    try:
      Hybrid = {}
      print(NL,"--- Initializing hybrid undulator, reading default values from hybrid.lst ---")
      flst = open("hybrid.lst","r")
      lines =  flst.readlines()
      flst.close()
      for line in lines:
        hyb = line.strip().split()
        Hybrid[hyb[0]] = hyb[1]
      #endfor
      Hybrid["RECIndex_Hybrid"] = -1
      Hybrid["IronIndex_Hybrid"] = -1
      print(" --- Succeeded ---",NL)
      #endfor
    except:
      print(" --- Failed ---",NL)
      Hybrid = {}
      Hybrid["RECIndex_Hybrid"] = -1
      Hybrid["IronIndex_Hybrid"] = -1
  #endif

  if len(Hybrid) <= 2 or mode == 'force':

    Hybrid["FullGap_Hybrid"] = '5.5'
    Hybrid["nPeriods_Hybrid"] = '3'
    Hybrid["PerLen_Hybrid"] = '17.'
    #Hybrid["LxMag_Hybrid"] = '10.'
    Hybrid["LyMag_Hybrid"] = '35.'
    Hybrid["LzMagFull_Hybrid"] = '50.'
    Hybrid["LxPol_Hybrid"] = '3.0'
    Hybrid["LyPol_Hybrid"] = '30.'
    Hybrid["LzPolFull_Hybrid"] = '40.'
    Hybrid["Mcoating_Hybrid"] = '0.014'
    Hybrid["ChamfPol_Hybrid"] = '0.1'
    Hybrid["OffPol_Hybrid"] = '0.05'
    Hybrid["ChamfMag_Hybrid"] = '0.3'
    Hybrid["Space_Mag_Pol_Hybrid"] = '0.1'
    Hybrid["Space_Pol_Mag_Hybrid"] = '0.1'
    Hybrid["Br_Hybrid"] = '1.62'
    Hybrid["mu_Hybrid"] = '1.03'
    Hybrid["KsiPerp_Hybrid"] = '0.17'

    Hybrid["RECIndex_Hybrid"] = -1
    Hybrid["IronIndex_Hybrid"] = -1
    Hybrid["MatPol_Hybrid"] = 'Vanadium_Permendur_Radia.dat'

    Hybrid["nDivX_Mag_Hybrid"] = '3'
    Hybrid["nDivY_Mag_Hybrid"] = '3'
    Hybrid["nDivZ_MagHalf_Hybrid"] = '3'
    Hybrid["FracDivY_Mag_Hybrid"] = '1.0'
    Hybrid["FracDivZ_Mag_Hybrid"] = '1.0'

    Hybrid["nDivX_Pol_Hybrid"] = '5'
    Hybrid["nDivY_Pol_Hybrid"] = '5'
    Hybrid["nDivZ_PolHalf_Hybrid"] = '7'
    Hybrid["FracDivY_Pol_Hybrid"] = '1.0'
    Hybrid["FracDivZ_Pol_Hybrid"] = '1.0'

    Hybrid["LyEndMag1_Hybrid"] = Hybrid["LyMag_Hybrid"]
    Hybrid["LyEndMag2_Hybrid"] = "32.2"
    Hybrid["LyEndMag3_Hybrid"] = "12.5"

    Hybrid["OffEndMag1_Hybrid"] = '0.0'
    Hybrid["OffEndMag2_Hybrid"] = '1.81'
    Hybrid["OffEndMag3_Hybrid"] = '6.47'

    Hybrid["SpaceEndMag1_Hybrid"] = Hybrid["Space_Mag_Pol_Hybrid"]
    Hybrid["SpaceEndMag2_Hybrid"] = Hybrid["Space_Mag_Pol_Hybrid"]
    Hybrid["SpaceEndMag3_Hybrid"] = Hybrid["Space_Mag_Pol_Hybrid"]

    Hybrid["LyEndPol1_Hybrid"] = Hybrid["LyPol_Hybrid"]
    Hybrid["LyEndPol2_Hybrid"] = Hybrid["LyPol_Hybrid"]

    Hybrid["OffEndPol1_Hybrid"] = Hybrid["OffPol_Hybrid"] = '0.05'
    Hybrid["OffEndPol2_Hybrid"] = Hybrid["OffPol_Hybrid"] = '0.05'
    Hybrid["OffEndPol3_Hybrid"] = Hybrid["OffPol_Hybrid"] = '0.05'

    Hybrid["SpaceEndPol1_Hybrid"] = Hybrid["Space_Pol_Mag_Hybrid"]
    Hybrid["SpaceEndPol2_Hybrid"] = Hybrid["Space_Pol_Mag_Hybrid"]
    Hybrid["SpaceEndPol3_Hybrid"] = Hybrid["Space_Pol_Mag_Hybrid"]

  #endif len(Hybrid)

  VHybrid = {}

  VHybrid['$xCen_Hybrid'] = '- ( $nPeriods_Hybrid - 1 ) * $PerLen_Hybrid'

  VHybrid['$LxMag_Hybrid'] = '$PerLen_Hybrid / 2. - ( $LxPol_Hybrid + $Space_Mag_Pol_Hybrid + $Space_Pol_Mag_Hybrid)'
  #    VHybrid['$LxPol_Hybrid'] = '$PerLen_Hybrid / 2. - ( $LxMag_Hybrid + $Space_Mag_Pol_Hybrid + $Space_Pol_Mag_Hybrid)'
  VHybrid['$LxPolHalf_Hybrid'] = '$LxPol_Hybrid / 2.'
  VHybrid['$LzPolHalf_Hybrid'] = '$LzPolFull_Hybrid / 2.'

  VHybrid['$xHalfPol3_Hybrid'] = '$xCen_Hybrid - $PerLen_Hybrid + $LxPol_Hybrid / 4.'
  VHybrid['$xMag2_Hybrid'] = '$xHalfPol3_Hybrid + $LxPolHalf_Hybrid / 2. + $Space_Pol_Mag_Hybrid + $LxMag_Hybrid / 2.'
  VHybrid['$xPol2_Hybrid'] = '$xCen_Hybrid - $PerLen_Hybrid / 2.'
  VHybrid['$xMag1_Hybrid'] = '$xMag2_Hybrid + $PerLen_Hybrid / 2.'
  VHybrid['$xHalfPol1_Hybrid'] = '$xCen_Hybrid - $LxPol_Hybrid / 4.'

  VHybrid['$yMag_Hybrid'] = '- ( $LyMag_Hybrid + $FullGap_Hybrid ) / 2.'
  VHybrid['$yPol_Hybrid'] = '- ( $LyPol_Hybrid + $FullGap_Hybrid ) / 2. - $OffPol_Hybrid'

  VHybrid['$LzMagHalf_Hybrid'] = '$LzMagFull_Hybrid / 2.'
  VHybrid['$zMag_Hybrid'] = '- $LzMagHalf_Hybrid / 2.'
  VHybrid['$LzPolHalf_Hybrid'] = '$LzPolFull_Hybrid / 2.'
  VHybrid['$zPol_Hybrid'] = '- $LzPolHalf_Hybrid / 2.'

  VHybrid['$xEndPolHalf_Hybrid'] = '$xHalfPol3_Hybrid - $LxPolHalf_Hybrid'
  VHybrid['$nDivX_PolHalf_Hybrid'] = 'int[ $nDivX_Pol_Hybrid / 2. + 0.5 ]'

  VHybrid['$xEndMag1_Hybrid'] = '$xEndPolHalf_Hybrid - $LxPolHalf_Hybrid / 2. - $SpaceEndMag2_Hybrid - $LxMag_Hybrid / 2.'
  VHybrid['$yEndMag1_Hybrid'] = '- ( $LyEndMag1_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndMag1_Hybrid'

  VHybrid['$xEndPol1_Hybrid'] = '$xEndMag1_Hybrid - $LxMag_Hybrid / 2. - $SpaceEndPol1_Hybrid - $LxPol_Hybrid / 2.'
  VHybrid['$yEndPol1_Hybrid'] = '- ( $LyEndPol1_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndPol1_Hybrid'

  VHybrid['$xEndMag2_Hybrid'] = '$xEndPol1_Hybrid - $LxPol_Hybrid / 2. - $SpaceEndMag2_Hybrid - $LxMag_Hybrid / 2.'
  VHybrid['$yEndMag2_Hybrid'] = '- ( $LyEndMag2_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndMag2_Hybrid'

  VHybrid['$xEndPol2_Hybrid'] = '$xEndMag2_Hybrid - $LxMag_Hybrid / 2. - $SpaceEndPol2_Hybrid - $LxPol_Hybrid / 2.'
  VHybrid['$yEndPol2_Hybrid'] = '- ( $LyEndPol2_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndPol2_Hybrid'

  VHybrid['$ColorMag_Hybrid'] = '$red'
  VHybrid['$ColorPol_Hybrid'] = '$blue'

  VHybrid['$xEndMag3_Hybrid'] = '$xEndPol2_Hybrid - $LxPol_Hybrid / 2. - $SpaceEndMag3_Hybrid - $LxMag_Hybrid / 2.'
  VHybrid['$yEndMag3_Hybrid'] = '- ( $LyEndMag3_Hybrid + $FullGap_Hybrid ) / 2. - $OffEndMag3_Hybrid'

  S_nPer_Hybrid = StringVar()
  S_FullGap_Hybrid = StringVar()
  #S_LxMag_Hybrid = StringVar()
  S_LyMag_Hybrid = StringVar()
  S_LzMagFull_Hybrid = StringVar()
  S_PerLen_Hybrid = StringVar()
  S_LxPol_Hybrid = StringVar()
  S_LyPol_Hybrid = StringVar()
  S_LzPolFull_Hybrid = StringVar()
  S_MatPol_Hybrid = StringVar()
  S_ChamfPol_Hybrid = StringVar()
  S_OffPol_Hybrid = StringVar()
  S_ChamfMag_Hybrid = StringVar()
  S_Space_Mag_Pol_Hybrid = StringVar()
  S_Space_Pol_Mag_Hybrid = StringVar()
  S_Mcoating_Hybrid = StringVar()
  S_Br_Hybrid = StringVar()
  S_mu_Hybrid = StringVar()
  S_KsiPerp_Hybrid = StringVar()

  S_nDivX_Mag_Hybrid = StringVar()
  S_nDivY_Mag_Hybrid = StringVar()
  S_nDivZ_MagHalf_Hybrid = StringVar()
  S_FracDivY_Mag_Hybrid = StringVar()
  S_FracDivZ_Mag_Hybrid = StringVar()

  S_nDivX_Pol_Hybrid = StringVar()
  S_nDivY_Pol_Hybrid = StringVar()
  S_nDivZ_PolHalf_Hybrid = StringVar()
  S_FracDivY_Pol_Hybrid = StringVar()
  S_FracDivZ_Pol_Hybrid = StringVar()

  S_LyEndMag1_Hybrid = StringVar()
  S_SpaceEndMag1_Hybrid = StringVar()
  S_OffEndMag1_Hybrid = StringVar()

  S_LyEndMag2_Hybrid = StringVar()
  S_SpaceEndMag2_Hybrid = StringVar()
  S_OffEndMag2_Hybrid = StringVar()

  S_LyEndMag3_Hybrid = StringVar()
  S_SpaceEndMag3_Hybrid = StringVar()
  S_OffEndMag3_Hybrid = StringVar()

  S_LyEndPol1_Hybrid = StringVar()
  S_SpaceEndPol1_Hybrid = StringVar()
  S_OffEndPol1_Hybrid = StringVar()

  S_LyEndPol2_Hybrid = StringVar()
  S_SpaceEndPol2_Hybrid = StringVar()
  S_OffEndPol2_Hybrid = StringVar()

  S_FullGap_Hybrid.set(Hybrid["FullGap_Hybrid"])
  S_nPer_Hybrid.set(Hybrid["nPeriods_Hybrid"])
  S_PerLen_Hybrid.set(Hybrid["PerLen_Hybrid"])
  #S_LxMag_Hybrid.set(Hybrid["LxMag_Hybrid"])
  S_LyMag_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_LzMagFull_Hybrid.set(Hybrid["LzMagFull_Hybrid"])
  S_LxPol_Hybrid.set(Hybrid["LxPol_Hybrid"])
  S_LyPol_Hybrid.set(Hybrid["LyPol_Hybrid"])
  S_LzPolFull_Hybrid.set(Hybrid["LzPolFull_Hybrid"])
  S_Mcoating_Hybrid.set(Hybrid["Mcoating_Hybrid"])
  S_MatPol_Hybrid.set("Vanadium_Permendur_Radia.dat")
  S_ChamfPol_Hybrid.set(Hybrid["ChamfPol_Hybrid"])
  S_OffPol_Hybrid.set(Hybrid["OffPol_Hybrid"])
  S_ChamfMag_Hybrid.set(Hybrid["ChamfMag_Hybrid"])
  S_Space_Mag_Pol_Hybrid.set(Hybrid["Space_Mag_Pol_Hybrid"])
  S_Space_Pol_Mag_Hybrid.set(Hybrid["Space_Pol_Mag_Hybrid"])
  S_Br_Hybrid.set(Hybrid["Br_Hybrid"])
  S_mu_Hybrid.set(Hybrid["mu_Hybrid"])
  S_KsiPerp_Hybrid.set(Hybrid["KsiPerp_Hybrid"])

  S_nDivX_Pol_Hybrid.set(Hybrid["nDivX_Pol_Hybrid"])
  S_nDivY_Pol_Hybrid.set(Hybrid["nDivY_Pol_Hybrid"])
  S_nDivZ_PolHalf_Hybrid.set(Hybrid["nDivZ_PolHalf_Hybrid"])
  S_FracDivY_Pol_Hybrid.set(Hybrid["FracDivY_Pol_Hybrid"])
  S_FracDivZ_Pol_Hybrid.set(Hybrid["FracDivZ_Pol_Hybrid"])

  S_nDivX_Mag_Hybrid.set(Hybrid["nDivX_Mag_Hybrid"])
  S_nDivY_Mag_Hybrid.set(Hybrid["nDivY_Mag_Hybrid"])
  S_nDivZ_MagHalf_Hybrid.set(Hybrid["nDivZ_MagHalf_Hybrid"])
  S_FracDivY_Mag_Hybrid.set(Hybrid["FracDivY_Mag_Hybrid"])
  S_FracDivZ_Mag_Hybrid.set(Hybrid["FracDivZ_Mag_Hybrid"])

  S_LyEndMag1_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_SpaceEndMag1_Hybrid.set(Hybrid["SpaceEndMag1_Hybrid"])
  S_OffEndMag1_Hybrid.set(Hybrid["OffEndMag1_Hybrid"])

  S_LyEndMag2_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_SpaceEndMag2_Hybrid.set(Hybrid["SpaceEndMag2_Hybrid"])
  S_OffEndMag2_Hybrid.set(Hybrid["OffEndMag2_Hybrid"])

  S_LyEndMag3_Hybrid.set(Hybrid["LyMag_Hybrid"])
  S_SpaceEndMag3_Hybrid.set(Hybrid["SpaceEndMag3_Hybrid"])
  S_OffEndMag3_Hybrid.set(Hybrid["OffEndMag3_Hybrid"])

  S_LyEndPol1_Hybrid.set(Hybrid["LyPol_Hybrid"])
  S_SpaceEndPol1_Hybrid.set(Hybrid["SpaceEndPol1_Hybrid"])
  S_OffEndPol1_Hybrid.set(Hybrid["OffEndPol1_Hybrid"])

  S_LyEndPol2_Hybrid.set(Hybrid["LyPol_Hybrid"])
  S_SpaceEndPol2_Hybrid.set(Hybrid["SpaceEndPol2_Hybrid"])
  S_OffEndPol2_Hybrid.set(Hybrid["OffEndPol2_Hybrid"])

#enddef ugui_ini_hybrid()

def ugui_ini_appleII(mode=''):
+seq,uguiglobind.

+self,if=debugappii.
  print(NL,"ugui_ini_appleII::mode:",mode)
  print("ugui_ini_appleII::AppleII:",len(AppleII),AppleII,NL)
+self.

  if mode != 'force' and fexist("appleii.lst"):
    AppleII = {}
    try:
      print(NL,"--- Initializing AppleII undulator, reading default values from appleii.lst ---")
      flst = open("appleii.lst","r")
      lines =  flst.readlines()
      flst.close()
      for line in lines:
        app = line.strip().split()
        AppleII[app[0]] = app[1]
      #endfor
      print(" --- Succeeded ---",NL)
    except:
      print(" --- Failed ---",NL)
  #endif

  if len(AppleII) < 3 or mode == 'force':

    AppleII["nPeriods"] = 3
    AppleII["LxMag"] = 14.0
    AppleII["LyMag"] = 40.0
    AppleII["LzMag"] = 40.0
    AppleII["AirGap"] = 0.1
    AppleII["Mcoating"] = 0.014
    Pars["$Mcoating"] = 0.014
    AppleII["FullGap"] = 5.0

    AppleII["Br"] = -1.38
    AppleII["Mu"] = 1.06
    AppleII["KsiPerp"] = 0.17
    AppleII["MatIndex"] = -1

    AppleII["S2Shift"] = 0.0
    AppleII["S3Shift"] = 10.0
    AppleII["xMagCen"] = 0.0
    AppleII["zSlit"] = 0.5
    AppleII["xMagCen"] = 0.0
    AppleII["nMagDivX"] = 4
    AppleII["nHalfMagDivX"] = 2
    AppleII["nMagDivY"] = 4
    AppleII["nMagDivZ"] = 3

    VAppleII = {}

    VAppleII['$E1Br'] = '$Br / 4.'
    VAppleII['$E2Br'] = '- $Br * 3. / 4.'
    VAppleII['$PerLen'] = '4. * $LxMag'
    VAppleII['$HalfGap'] = '$FullGap / 2.'
    VAppleII['$HalfPerLen'] = '$PerLen / 2.'
    VAppleII['$LxHalfMag'] = '$LxMag / 2.'
    VAppleII['$yMagCen'] = '- $HalfGap - $LyMag / 2.'
    VAppleII['$zMagCen'] = '- $LzMag / 2. - $zSlit / 2.'
    VAppleII['$hS3Shift'] = '$S3Shift / 2.'
    VAppleII['$hS2Shift'] = '$S2Shift / 2.'
    VAppleII['$x1LRMagCen'] = '$xMagCen + $LxHalfMag / 2. - $hS3Shift - $hS2Shift'
    VAppleII['$x2LRMagCen'] = '$x1LRMagCen + $LxHalfMag / 2. + $LxMag / 2.'
    VAppleII['$x3LRMagCen'] = '$x1LRMagCen + $LxMag + $LxHalfMag'
    VAppleII['$x4LRMagCen'] = '$x3LRMagCen + $LxHalfMag'
    VAppleII['$x5LRMagCen'] = '$x4LRMagCen + $LxHalfMag / 2. + $LxMag / 2.'
    VAppleII['$x6LRMagCen'] = '$x5LRMagCen + $LxMag / 2. + $LxHalfMag / 2.'
    VAppleII['$x1LLMagCen'] = ' $x1LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x2LLMagCen'] = ' $x2LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x3LLMagCen'] = ' $x3LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x4LLMagCen'] = ' $x4LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x5LLMagCen'] = ' $x5LRMagCen + $S3Shift + $S2Shift'
    VAppleII['$x6LLMagCen'] = ' $x6LRMagCen + $S3Shift + $S2Shift'

    VAppleII['$x1ULMagCen'] = ' $x1LRMagCen'
    VAppleII['$x2ULMagCen'] = ' $x2LRMagCen'
    VAppleII['$x3ULMagCen'] = ' $x3LRMagCen'
    VAppleII['$x4ULMagCen'] = ' $x4LRMagCen'
    VAppleII['$x5ULMagCen'] = ' $x5LRMagCen'
    VAppleII['$x6ULMagCen'] = ' $x6LRMagCen'

    VAppleII['$x1URMagCen'] = '$x1LLMagCen - $S2Shift * 2.'
    VAppleII['$x2URMagCen'] = '$x2LLMagCen - $S2Shift * 2.'
    VAppleII['$x3URMagCen'] = '$x3LLMagCen - $S2Shift * 2.'
    VAppleII['$x4URMagCen'] = '$x4LLMagCen - $S2Shift * 2.'
    VAppleII['$x5URMagCen'] = '$x5LLMagCen - $S2Shift * 2.'
    VAppleII['$x6URMagCen'] = '$x6LLMagCen - $S2Shift * 2.'

    VAppleII['$yUMagCen'] = '- $yMagCen'

    VAppleII['$zLLMagCen'] = '- $zMagCen'
    VAppleII['$zULMagCen'] = '- $zMagCen'

    VAppleII['$yModCen'] = '- 2. * $yMagCen'
    VAppleII['$zModCen'] = '- 2. * $zMagCen'

    VAppleII['$x1E1LLMagCen'] = '$x1LLMagCen - $PerLen'
    VAppleII['$x2E1LLMagCen'] = '$x2LLMagCen - $PerLen'
    VAppleII['$x3E1LLMagCen'] = '$x3LLMagCen - $PerLen'

    VAppleII['$x1E1ULMagCen'] = '$x1ULMagCen - $PerLen'
    VAppleII['$x2E1ULMagCen'] = '$x2ULMagCen - $PerLen'
    VAppleII['$x3E1ULMagCen'] = '$x3ULMagCen - $PerLen'

    VAppleII['$x1E1LRMagCen'] = '$x1LRMagCen - $PerLen'
    VAppleII['$x2E1LRMagCen'] = '$x2LRMagCen - $PerLen'
    VAppleII['$x3E1LRMagCen'] = '$x3LRMagCen - $PerLen'

    VAppleII['$x1E1URMagCen'] = '$x1URMagCen - $PerLen'
    VAppleII['$x2E1URMagCen'] = '$x2URMagCen - $PerLen'
    VAppleII['$x3E1URMagCen'] = '$x3URMagCen - $PerLen'

    VAppleII['$x1E2LLMagCen'] = '$x1LLMagCen - $HalfPerLen'
    VAppleII['$x2E2LLMagCen'] = '$x2LLMagCen - $HalfPerLen'
    VAppleII['$x3E2LLMagCen'] = '$x3LLMagCen - $HalfPerLen'

    VAppleII['$x1E2ULMagCen'] = '$x1ULMagCen - $HalfPerLen'
    VAppleII['$x2E2ULMagCen'] = '$x2ULMagCen - $HalfPerLen'
    VAppleII['$x3E2ULMagCen'] = '$x3ULMagCen - $HalfPerLen'

    VAppleII['$x1E2LRMagCen'] = '$x1LRMagCen - $HalfPerLen'
    VAppleII['$x2E2LRMagCen'] = '$x2LRMagCen - $HalfPerLen'
    VAppleII['$x3E2LRMagCen'] = '$x3LRMagCen - $HalfPerLen'

    VAppleII['$x1E2URMagCen'] = '$x1URMagCen - $HalfPerLen'
    VAppleII['$x2E2URMagCen'] = '$x2URMagCen - $HalfPerLen'
    VAppleII['$x3E2URMagCen'] = '$x3URMagCen - $HalfPerLen'

    VAppleII['$dxED0'] = '( $nPeriods + 1.0 ) * $PerLen'
    VAppleII['$dxED1'] = '( $nPeriods + 2.0 ) * $PerLen'
    VAppleII['$dxED2'] = '( $nPeriods + 1.5 ) * $PerLen'

    VAppleII['$x1D0LLMagCen'] = '$x1E1LLMagCen + $dxED0'
    VAppleII['$x2D0LLMagCen'] = '$x2E1LLMagCen + $dxED0'
    VAppleII['$x3D0LLMagCen'] = '$x3E1LLMagCen + $dxED0'

    VAppleII['$x1D0LRMagCen'] = '$x1E1LRMagCen + $dxED0'
    VAppleII['$x2D0LRMagCen'] = '$x2E1LRMagCen + $dxED0'
    VAppleII['$x3D0LRMagCen'] = '$x3E1LRMagCen + $dxED0'

    VAppleII['$x1D0ULMagCen'] = '$x1E1ULMagCen + $dxED0'
    VAppleII['$x2D0ULMagCen'] = '$x2E1ULMagCen + $dxED0'
    VAppleII['$x3D0ULMagCen'] = '$x3E1ULMagCen + $dxED0'

    VAppleII['$x1D0URMagCen'] = '$x1E1URMagCen + $dxED0'
    VAppleII['$x2D0URMagCen'] = '$x2E1URMagCen + $dxED0'
    VAppleII['$x3D0URMagCen'] = '$x3E1URMagCen + $dxED0'

    VAppleII['$x1D1LLMagCen'] = '$x1E1LLMagCen + $dxED1'
    VAppleII['$x2D1LLMagCen'] = '$x2E1LLMagCen + $dxED1'
    VAppleII['$x3D1LLMagCen'] = '$x3E1LLMagCen + $dxED1'

    VAppleII['$x1D1LRMagCen'] = '$x1E1LRMagCen + $dxED1'
    VAppleII['$x2D1LRMagCen'] = '$x2E1LRMagCen + $dxED1'
    VAppleII['$x3D1LRMagCen'] = '$x3E1LRMagCen + $dxED1'

    VAppleII['$x1D1ULMagCen'] = '$x1E1ULMagCen + $dxED1'
    VAppleII['$x2D1ULMagCen'] = '$x2E1ULMagCen + $dxED1'
    VAppleII['$x3D1ULMagCen'] = '$x3E1ULMagCen + $dxED1'

    VAppleII['$x1D1URMagCen'] = '$x1E1URMagCen + $dxED1'
    VAppleII['$x2D1URMagCen'] = '$x2E1URMagCen + $dxED1'
    VAppleII['$x3D1URMagCen'] = '$x3E1URMagCen + $dxED1'

    VAppleII['$x1D2LLMagCen'] = '$x1E1LLMagCen + $dxED2'
    VAppleII['$x2D2LLMagCen'] = '$x2E1LLMagCen + $dxED2'
    VAppleII['$x3D2LLMagCen'] = '$x3E1LLMagCen + $dxED2'

    VAppleII['$x1D2LRMagCen'] = '$x1E1LRMagCen + $dxED2'
    VAppleII['$x2D2LRMagCen'] = '$x2E1LRMagCen + $dxED2'
    VAppleII['$x3D2LRMagCen'] = '$x3E1LRMagCen + $dxED2'

    VAppleII['$x1D2ULMagCen'] = '$x1E1ULMagCen + $dxED2'
    VAppleII['$x2D2ULMagCen'] = '$x2E1ULMagCen + $dxED2'
    VAppleII['$x3D2ULMagCen'] = '$x3E1ULMagCen + $dxED2'

    VAppleII['$x1D2URMagCen'] = '$x1E1URMagCen + $dxED2'
    VAppleII['$x2D2URMagCen'] = '$x2E1URMagCen + $dxED2'
    VAppleII['$x3D2URMagCen'] = '$x3E1URMagCen + $dxED2'

    VAppleII['$colormag'] = '$red'
    VAppleII['$e1colormag'] = '$magenta'
    VAppleII['$e2colormag'] = '$green'

  #endif len(AppleII)

  S_nPer_AppleII = StringVar()
  S_FullGap_AppleII = StringVar()

  S_Xlen_AppleII = StringVar()
  S_Ylen_AppleII = StringVar()
  S_Zlen_AppleII = StringVar()

  S_HorSlit_AppleII = StringVar()
  S_AirGap_AppleII = StringVar()
  S_DeadCoat_AppleII = StringVar()

  S_S2Shift_AppleII = StringVar()
  S_S3Shift_AppleII = StringVar()

  S_Br_AppleII = StringVar()
  S_Mu_AppleII = StringVar()
  S_KsiPerp_AppleII = StringVar()

  S_NdivX_AppleII = StringVar()
  S_NdivXHalf_AppleII = StringVar()
  S_NdivY_AppleII = StringVar()
  S_NdivZ_AppleII = StringVar()

  S_nPer_AppleII.set(AppleII["nPeriods"])
  S_FullGap_AppleII.set(AppleII["FullGap"])

  S_Xlen_AppleII.set(AppleII["LxMag"])
  S_Ylen_AppleII.set(AppleII["LyMag"])
  S_Zlen_AppleII.set(AppleII["LzMag"])

  S_HorSlit_AppleII.set(AppleII["zSlit"])
  S_AirGap_AppleII.set(AppleII["AirGap"])
  S_DeadCoat_AppleII.set(Pars["$Mcoating"])

  S_S2Shift_AppleII.set(AppleII["S2Shift"])
  S_S3Shift_AppleII.set(AppleII["S3Shift"])

  S_Br_AppleII.set(AppleII["Br"])
  S_Mu_AppleII.set(AppleII["Mu"])
  S_KsiPerp_AppleII.set(AppleII["KsiPerp"])

  S_NdivX_AppleII.set(AppleII["nMagDivX"])
  S_NdivXHalf_AppleII.set(AppleII["nHalfMagDivX"])
  S_NdivY_AppleII.set(AppleII["nMagDivY"])
  S_NdivZ_AppleII.set(AppleII["nMagDivZ"])

  AppleIIOld = AppleII

#enddef ugui_ini_appleII()

def _cnWappleII():
+seq,uguiglobind.
  WappleII.destroy()
#enddef _cnappleII()

def _clWappleII(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print(NL,"trace:: _clWappleII")
+self.

  FileCLCO = FileCLC
  FileCLC = 'undumag.clc'
  AppleII_Mode = 1

  if int(AppleII["MatIndex"]) < 0:
    Nmat += 1
    AppleII["MatIndex"] = Nmat
    Materials.append([str(Nmat),"1","1","undugui_AppleII_mu.dat", \
    [str(AppleII["Mu"]) + " " + str(AppleII["KsiPerp"]) + "! mu_Par and ksi_Perp"]])
  #endif

  uwritenam('clWappleII')
  uwriteclc('clWappleII')

  MustWriteCLC = 0

  ureadclc('clWappleII')

  AppleOld = AppleII

  #AppleII_Mode = 1

  _showGeoPython(callkey='clWappleII')

  FileCLCO = FileCLC
  WappleII.destroy()

+self,if=trace.
  print(NL,"trace:: Leaving _clWappleII")
+self.

#enddef _clappleII()

def _appleII(callkey=''):
+seq,uguiglobind.

+self,if=trace.
  print(NL,"trace:: _appleII('",callkey,"')")
+self.

  undugui_clean('AppleII')
  ugui_ini_appleII('_appleII')

  WappleII = Toplevel()
  WappleII.title("APPLE-II Undulator")
  WappleII.attributes('-topmost', 1)

  widlab = 30

  fNper = Frame(WappleII)
  tNper = 'number of periods'
  lNper = Label(fNper,text=tNper,font=MyFont, width=widlab)
  lNper.pack(side=LEFT)
  eNper = Entry(fNper,text=S_nPer_AppleII,justify=CENTER,font=MyFont)
  eNper.pack(side=RIGHT)
  fNper.pack(fill='x')

  fFullGap = Frame(WappleII)
  tFullGap = 'full gap [mm]'
  lFullGap = Label(fFullGap,text=tFullGap,font=MyFont, width=widlab)
  lFullGap.pack(side=LEFT)
  eFullGap = Entry(fFullGap,text=S_FullGap_AppleII,justify=CENTER,font=MyFont)
  eFullGap.pack(side=RIGHT)
  fFullGap.pack(fill='x')

  fxlen = Frame(WappleII)
  txlen = 'length of magnets [mm]'
  lxlen = Label(fxlen,text=txlen,font=MyFont, width=widlab)
  lxlen.pack(side=LEFT)
  exlen = Entry(fxlen,text=S_Xlen_AppleII,justify=CENTER,font=MyFont)
  exlen.pack(side=RIGHT)
  fxlen.pack(fill='x')

  fAirGap = Frame(WappleII)
  tAirGap = 'AirGap in x between magnets [mm]'
  lAirGap = Label(fAirGap,text=tAirGap,font=MyFont, width=widlab)
  lAirGap.pack(side=LEFT)
  eAirGap = Entry(fAirGap,text=S_AirGap_AppleII,justify=CENTER,font=MyFont)
  eAirGap.pack(side=RIGHT)
  fAirGap.pack(fill='x')

  fylen = Frame(WappleII)
  tylen = 'height of magnets [mm]'
  lylen = Label(fylen,text=tylen,font=MyFont, width=widlab)
  lylen.pack(side=LEFT)
  eylen = Entry(fylen,text=S_Ylen_AppleII,justify=CENTER,font=MyFont)
  eylen.pack(side=RIGHT)
  fylen.pack(fill='x')

  fzlen = Frame(WappleII)
  tzlen = 'width of magnets [mm]'
  lzlen = Label(fzlen,text=tzlen,font=MyFont, width=widlab)
  lzlen.pack(side=LEFT)
  ezlen = Entry(fzlen,text=S_Zlen_AppleII,justify=CENTER,font=MyFont)
  ezlen.pack(side=RIGHT)
  fzlen.pack(fill='x')

  fS2Shift = Frame(WappleII)
  tS2Shift = 'S2 shift [mm]'
  lS2Shift = Label(fS2Shift,text=tS2Shift,font=MyFont, width=widlab)
  lS2Shift.pack(side=LEFT)
  eS2Shift = Entry(fS2Shift,text=S_S2Shift_AppleII,justify=CENTER,font=MyFont)
  eS2Shift.pack(side=RIGHT)
  fS2Shift.pack(fill='x')

  fS3Shift = Frame(WappleII)
  tS3Shift = 'S3 shift [mm]'
  lS3Shift = Label(fS3Shift,text=tS3Shift,font=MyFont, width=widlab)
  lS3Shift.pack(side=LEFT)
  eS3Shift = Entry(fS3Shift,text=S_S3Shift_AppleII,justify=CENTER,font=MyFont)
  eS3Shift.pack(side=RIGHT)
  fS3Shift.pack(fill='x')

  fHorSlit = Frame(WappleII)
  tHorSlit = 'Slit between rows [mm]'
  lHorSlit = Label(fHorSlit,text=tHorSlit,font=MyFont, width=widlab)
  lHorSlit.pack(side=LEFT)
  eHorSlit = Entry(fHorSlit,text=S_HorSlit_AppleII,justify=CENTER,font=MyFont)
  eHorSlit.pack(side=RIGHT)
  fHorSlit.pack(fill='x')

  fNdivX = Frame(WappleII)
  tNdivX = 'number of segments in x'
  lNdivX = Label(fNdivX,text=tNdivX,font=MyFont, width=widlab)
  lNdivX.pack(side=LEFT)
  eNdivX = Entry(fNdivX,text=S_NdivX_AppleII,justify=CENTER,font=MyFont)
  eNdivX.pack(side=RIGHT)
  fNdivX.pack(fill='x')

  fNdivXHalf = Frame(WappleII)
  tNdivXHalf = 'number of seg. in x for half mag.'
  lNdivXHalf = Label(fNdivXHalf,text=tNdivXHalf,font=MyFont, width=widlab)
  lNdivXHalf.pack(side=LEFT)
  eNdivXHalf = Entry(fNdivXHalf,text=S_NdivXHalf_AppleII,justify=CENTER,font=MyFont)
  eNdivXHalf.pack(side=RIGHT)
  fNdivXHalf.pack(fill='x')

  fNdivY = Frame(WappleII)
  tNdivY = 'number of segments in y'
  lNdivY = Label(fNdivY,text=tNdivY,font=MyFont, width=widlab)
  lNdivY.pack(side=LEFT)
  eNdivY = Entry(fNdivY,text=S_NdivY_AppleII,justify=CENTER,font=MyFont)
  eNdivY.pack(side=RIGHT)
  fNdivY.pack(fill='x')

  fNdivZ = Frame(WappleII)
  tNdivZ = 'number of segments in z'
  lNdivZ = Label(fNdivZ,text=tNdivZ,font=MyFont, width=widlab)
  lNdivZ.pack(side=LEFT)
  eNdivZ = Entry(fNdivZ,text=S_NdivZ_AppleII,justify=CENTER,font=MyFont)
  eNdivZ.pack(side=RIGHT)
  fNdivZ.pack(fill='x')

  fDeadCoat = Frame(WappleII)
  tDeadCoat = 'coating and dead layer [mm]'
  lDeadCoat = Label(fDeadCoat,text=tDeadCoat,font=MyFont, width=widlab)
  lDeadCoat.pack(side=LEFT)
  eDeadCoat = Entry(fDeadCoat,text=S_DeadCoat_AppleII,justify=CENTER,font=MyFont)
  eDeadCoat.pack(side=RIGHT)
  fDeadCoat.pack(fill='x')

  fBr = Frame(WappleII)
  tBr = 'remanence [T]'
  lBr = Label(fBr,text=tBr,font=MyFont, width=widlab)
  lBr.pack(side=LEFT)
  eBr = Entry(fBr,text=S_Br_AppleII,justify=CENTER,font=MyFont)
  eBr.pack(side=RIGHT)
  fBr.pack(fill='x')

  fMu = Frame(WappleII)
  tMu = 'mu'
  lMu = Label(fMu,text=tMu,font=MyFont, width=widlab)
  lMu.pack(side=LEFT)
  eMu = Entry(fMu,text=S_Mu_AppleII,justify=CENTER,font=MyFont)
  eMu.pack(side=RIGHT)
  fMu.pack(fill='x')

  fKsiPerp = Frame(WappleII)
  tKsiPerp = 'ksi (perpendicular)'
  lKsiPerp = Label(fKsiPerp,text=tKsiPerp,font=MyFont, width=widlab)
  lKsiPerp.pack(side=LEFT)
  eKsiPerp = Entry(fKsiPerp,text=S_KsiPerp_AppleII,justify=CENTER,font=MyFont)
  eKsiPerp.pack(side=RIGHT)
  fKsiPerp.pack(fill='x')

  fbottom = Frame(WappleII)

  bCancel = Button(fbottom,text='Cancel',width=widlab,command = _cnWappleII)
  bCancel.bind('<Return>',lambda event: _cnWappleII())
  bCancel.pack(side=LEFT)

  bClose = Button(fbottom,text='Ok',command = lambda ck='_appleII' :_clWappleII(ck))
  bClose.bind('<Return>',lambda event, ck='_appleII': _clWappleII(ck))
  bClose.pack(side=LEFT,expand=TRUE,fill=X)

  fbottom.pack(expand=TRUE,fill=X)

  x,y = Umaster.winfo_pointerxy()
  sgeo = '+' + str(x) + '+' + str(y)
  WappleII.geometry(sgeo)

  WappleII.bind('<Enter>',lambda event, menu = 'AppleII': _enterMenu(event,menu))
  WappleII.bind('<Leave>',lambda event, menu = 'AppleII': _leaveMenu(event,menu))
  WappleII.bind('<KeyPress>',lambda event, menu = 'AppleII': _keypressMenu(event,menu))

  Umaster.wait_window(WappleII)

+self,if=trace.
  print(NL,"trace:: Leaving _appleII")
+self.
#enddef _appleII()

ugui_ini_appleII('main')
ugui_ini_hybrid()

MpreDefs = Menu(Mgeo,tearoff=1,font=MyFont)

MShowGeo = Menu(Mgeo,tearoff=1,font=MyFont)
MShowGeo.add_command(label='3D view', command= lambda mode='3d', item=-1: _showGeo(mode,item),font=MyFont)
MShowGeo.add_command(label='3D periodic', command= lambda mode='3dperiodic', item=-1: _showGeo(mode,item),font=MyFont)
MShowGeo.add_command(label='3D specials', command= lambda mode='3dnoper', item=-1: _showGeo(mode,item),font=MyFont)
MShowGeo.add_command(label='3D view, selected', command= lambda mode='3dselected', item=-2: _showGeo(mode,item),font=MyFont)
MShowGeo.add_command(label='3D periodic, selected', command= lambda mode='3dpersel', item=-2: _showGeo(mode,item),font=MyFont)
MShowGeo.add_command(label='3D specials, selected', command= lambda mode='3dnopersel', item=-2: _showGeo(mode,item),font=MyFont)
MShowGeo.add_command(label='3D UNDUMAG', command= lambda mode='undu3d', item=-1: _showGeo(mode,item),font=MyFont)
MShowGeo.add_command(label='eps', command= lambda mode='eps', item=-1: _showGeo(mode,item),font=MyFont)

MVariables = Menu(Mgeo,tearoff=1,font=MyFont)
MenuMagPols = Menu(Mgeo,tearoff=1,font=MyFont)
MenuTRC = Menu(Mgeo,tearoff=1,font=MyFont)
MenuInhom = Menu(Mgeo,tearoff=1,font=MyFont)
MenuCoils = Menu(Mgeo,tearoff=1,font=MyFont)
MenuModules = Menu(Mgeo,tearoff=1,font=MyFont)
MaddMag = Menu(MenuMagPols,tearoff=1,font=MyFont)
MaddCoil = Menu(MenuCoils,tearoff=1,font=MyFont)

MpreDefs.add_command(label='Apple II',command=_appleII,font=MyFont)
MpreDefs.add_command(label='Hybrid',command=_hybrid,font=MyFont)
MpreDefs.add_command(label='Infinited Hybrid',command=_mirror,font=MyFont)

Mgeo.add_command(label='Load file', command= lambda mode='LoadCLC': _uclc(mode),font=MyFont)
Mgeo.add_cascade(label='Predefined settings',  menu=MpreDefs,font=MyFont)
Mgeo.add_cascade(label='Variables', menu=MVariables,font=MyFont)
Mgeo.add_cascade(label='Magnets and poles', menu=MenuMagPols,font=MyFont)
Mgeo.add_cascade(label='Operations', menu=MenuTRC,font=MyFont)
Mgeo.add_cascade(label='Inhomogeneities', menu=MenuInhom,font=MyFont)
Mgeo.add_cascade(label='Coils', menu=MenuCoils,font=MyFont)
Mgeo.add_cascade(label='Modules', menu=MenuModules,font=MyFont)
Mgeo.add_cascade(label='Show', menu=MShowGeo,font=MyFont)
Mgeo.add_command(label='Save', command= lambda mode='WriteCLC': _uclc(mode),font=MyFont)

MenuMagPols.add_cascade(label='Add', menu=MaddMag,font=MyFont)
MenuMagPols.add_command(label='List items', command= lambda key='all': _listMags(key),font=MyFont)
MenuMagPols.add_command(label='List selected items', command= lambda key='selected': _listMags(key),font=MyFont)
MenuMagPols.add_command(label='Deleted items', command= lambda key='deleted': _listMags(key),font=MyFont)

+seq,listcoils.

MenuCoils.add_command(label='Add', command= lambda key='': _addCoils(key),font=MyFont)
MenuCoils.add_command(label='List', command= lambda key='first': _listCoils(key),font=MyFont)
#MenuCoils.add_command(label='List selected items', command= lambda key='selected': _listCoils(key),font=MyFont)
#MenuCoils.add_command(label='Deleted items', command= lambda key='deleted': _listCoils(key),font=MyFont)

+seq,listmods.
MenuModules.add_command(label='Add', command= lambda geo='': _addMod(geo),font=MyFont)
MenuModules.add_command(label='List', command= lambda key='list': _listMods(key),font=MyFont)

+seq,listmags.
+seq,mlistvars.

+seq,listtrc.
+seq,listinhom.

